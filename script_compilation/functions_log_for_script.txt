function Q001_EquipFood();  // flags: 4098 
function SetGeraltLevelHandsOn();  // flags: 4098 
function SetGeraltLevel( level : Int32,  path : EGeraltPath);  // flags: 4098 
function DestroyEntity( entityTag : CName);  // flags: 4098 
function SetSkating();  // flags: 4098 
function DEBUG_E3_DEMO_SETUP();  // flags: 4098 
function BirdsManagerTryFlyIfBirdsPresent( birdsManagerTag : CName);  // flags: 4098 
latent function DisplayPortalConfirmationPopup( pauseGame : Bool) : Bool;  // flags: 4162 
function PlayerModeQuest( playerMode : EPlayerMode,  toggle : Bool,  snapToNavMeshSourceName : CName,  snapToNavMeshEnable : Bool);  // flags: 4098 
function AddAndEquipItemsRandomlyQuest( actorsTag : CName,  itemsNames : array<SItem>);  // flags: 4098 
function AddAndEquipItemsRandomlyQuestExt( actorsTag : CName,  itemsNames : array<SItemExt>);  // flags: 4098 
function HACK_MinimapWerewolf();  // flags: 4098 
function EnterJumpToWaterArea( optional  requireDirection : Bool,  optional  direction : Vector,  optional  requireSprint : Bool);  // flags: 4098 
function ExitJumpToWaterArea();  // flags: 4098 
function AddQuestMappinToNoticeboard( noticeboardTag : CName,  entityTag : CName,  entityType : AQMTN_EntityType);  // flags: 4098 
function EnableStaticMappin( tag : CName,  enable : Bool,  isFastTravelPoint : Bool);  // flags: 4098 
function SetSimulatedCloth( e : CEntity,  enable : Bool);  // flags: 4098 
function DestroyByTag( tag : CName);  // flags: 4098 
function ManageRootsEntrance( tag : CName,  shouldOpen : Bool);  // flags: 4098 
function MakePhilippaShootAtNode( philippaTag : CName,  nodeTag : CName);  // flags: 4098 
function DespawnMagicBubble( magicBubbleOwnerTag : CName);  // flags: 4098 
function ScaleMagicBubble( magicBubbleTag : CName,  desiredScale : Vector,  scaleDuration : Float);  // flags: 4098 
function SwitchAttachment( attach : Bool,  parentEntityTag : CName,  childEntityTag : CName,  attachSlot : CName,  switchGravity : Bool);  // flags: 4098 
function SwitchCapsuleCollision( actorTag : CName,  enable : Bool,  switchVulnerability : Bool,  effectLinkedToCollision : CName);  // flags: 4098 
function PlayerSelectQuickslotItem( itemName : CName,  useSign : Bool,  sign : ESignType);  // flags: 4098 
function EquipAmmoOnCrossbow( ammoName : CName);  // flags: 4098 
function EnableShopkeeperCraftingQuest( npcTag : CName,  enable : Bool);  // flags: 4098 
function IgniteFlammableArea( tag : CName);  // flags: 4098 
function EnableTalkInteractionInCombatByTag( npcTag : CName,  enable : Bool);  // flags: 4098 
function AddGwentCards( val : EGwentCardFaction);  // flags: 4098 
function ManageBuffImmunities( npcTag : CName,  effects : array<EEffectType>,  remove : Bool);  // flags: 4098 
function UseRiddleNodeQuest( riddleNodeTag : CName);  // flags: 4098 
function EnableRigidMeshQuest( entityTag : CName,  enable : Bool);  // flags: 4098 
function PadVibrationEnable( enable : Bool);  // flags: 4098 
function TriggerSonarFXQuest( sonarEntityTag : CName);  // flags: 4098 
function EnableFXManager( fxManagerTag : CName,  enable : Bool);  // flags: 4098 
function PlayVoicesetQuest( tag : CName,  voiceSet : String);  // flags: 4098 
function Achievement_FinishedGame();  // flags: 4098 
function SpawnAndAttachEntity( entTemplate : CEntityTemplate,  attachToEntityTag : CName,  attachSlot : CName);  // flags: 4098 
function DisableHorseSlowdownTriggers( HorseCanAlwaysGallop : Bool);  // flags: 4098 
function SetHorseRacingMode( value : Bool);  // flags: 4098 
function EnableBuffedMonsterDisplay( value : Bool);  // flags: 4098 
function SetArachasEggDestoryedCustomQuest( EggsTag : CName,  dontAddFact : Bool);  // flags: 4098 
function SetCreaturesGroupState( encounterTag : CName,  creaturesGroups : array<CName>,  sourceName : CName,  enable : Bool,  setDelayManually : Bool,  delay : GameTimeWrapper);  // flags: 4098 
function ActivateBoatRacingGate( tag : CName);  // flags: 4098 
function ForceInteractSwitch( tag : CName,  on : Bool,  switchType : PhysicalSwitchAnimationType);  // flags: 4098 
function ManageGate( tag : CName,  open : Bool,  speedModifier : Float);  // flags: 4098 
function LaunchGwint();  // flags: 4098 
function QuestItemDisable( itemName : CName,  addQuestTag : Bool);  // flags: 4098 
function TeleportPlayerWithPortalFx( targetTag : CName);  // flags: 4098 
function UnlockGwentDeck( val : EGwentDeckUnlock);  // flags: 4098 
function SetHorsePanicMult( horseTag : CName,  mult : Float);  // flags: 4098 
function ManagerReplacerWarningArea( areaTag : CName,  enable : EEnableMode);  // flags: 4098 
function ToggleBoatCanBeDestroyed( boatTag : CName,  val : Bool);  // flags: 4098 
function AllowHorseInTheInterior_Q( interiorAreaTag : CName,  isAllowed : Bool);  // flags: 4098 
function RemoveAllHerbsFromInventory();  // flags: 4098 
function OutOfMemoryHack_Level0Items( out  items : array<SGwentIngDef>);  // flags: 2 
function OutOfMemoryHack_Level10Items( out  items : array<SGwentIngDef>);  // flags: 2 
function AddRandomCraftingComponentsGwintQuest( merchantTag : CName);  // flags: 2 
function GiveMerchantRandomGwintCardToPlayerQuest( merchantTag : CName);  // flags: 4098 
function KillWithoutAgony( killTag : CName);  // flags: 4098 
function EnableSignReactiveEntityQ( igni : Bool,  aard : Bool,  entityTag : CName);  // flags: 4098 
function ToggleSupressBroadcastingReactionsByTag( supress : Bool,  tag : CName);  // flags: 4098 
function DisableNPCInteractivness( npcTag : CName,  disableTalking : Bool,  disableOnliners : Bool,  disableLookats : Bool);  // flags: 4098 
function SpawnMagicBubble( resourceName : CName,  spawnPos : Vector,  spawnRot : EulerAngles,  addTag : CName);  // flags: 4098 
function DespawnMagicBubbleByTag( magicBubbleTag : CName);  // flags: 4098 
function AddAlchemyRecipeQ( recipeName : CName);  // flags: 4098 
function HudConsoleMsg( msgText : String);  // flags: 258 
function AddCraftingSchematicsQ( schematicsName : CName);  // flags: 4098 
function HudConsoleTest();  // flags: 258 
function SetBehaviorVariableQuest( entityTag : CName,  variableName : CName,  variableValue : Float);  // flags: 4098 
function HudConsoleCleanup();  // flags: 258 
function RecoverGeralt();  // flags: 4098 
function EnableTargetingOnActorsQ( actorsTag : CName,  isEnabled : Bool);  // flags: 4098 
function ForceManaualSaveQ();  // flags: 4098 
function SetHorseMountableByPlayerQ( horseTag : CName,  isMountable : Bool);  // flags: 4098 
function HideUsableItemLQuest( force : Bool);  // flags: 4098 
function ShowHud( show : Bool);  // flags: 4098 
function SetNPCTargetabilityQuest( npcTag : CName,  _isTargetable : Bool,  _isAttackable : Bool,  _isUsingTooltip : Bool);  // flags: 4098 
function SetGroupAttitudeQuest( srcGroup : CName,  dstGroup : CName,  attitude : EAIAttitude);  // flags: 4098 
function AssignNPCGroupAttitudeQuest( npcTag : CName,  attGroup : CName);  // flags: 4098 
function AssignNPCTemporaryGroupAttitudeQuest( npcTag : CName,  attGroup : CName,  priority : EAttitudeGroupPriority,  set : Bool);  // flags: 4098 
function ForceTargetQuest( npcTag : CName,  targetTag : CName,  unforce : Bool);  // flags: 4098 
function stats( tag : CName);  // flags: 258 
function ForgetTargetQuest( npcTag : CName);  // flags: 4098 
function EntityComponentQuest( tag : CName,  componentName : CName,  bEnable : Bool);  // flags: 4098 
latent function BossFight_Witches_WaitForWitchesToBeHit( witch1tag : String,  witch2tag : String,  witch3tag : String,  desiredTimeWindow : Float);  // flags: 4162 
latent function BossFight_Witches_ClosePlayerInCage( cageTag : CName,  close : Bool,  regenerateHealthOnPerc : Float,  regenDuration : Float,  regenValuePerc : Float);  // flags: 4162 
function BossFight_Witches_ApplyHypnotizeEffect( duration : Float);  // flags: 4098 
function BossFight_WH_Mage_TeleportToNode( mageTag : CName,  nodeTag : CName);  // flags: 4098 
latent function CombatStageChangeLatent( npcsTag : CName,  stage : ENPCFightStage);  // flags: 4162 
function TutorialScript( scriptName : CName,  tutorialMessageName : CName);  // flags: 4098 
function TutorialScript2( scriptName : CName,  tutorialMessageName : CName);  // flags: 2 
function TutorialRegisterUIHint( data : SUITutorial);  // flags: 4098 
function HAX_Debug_TutorialStartInTheMiddle();  // flags: 4098 
function TutorialHintHide( journalEntry : CName);  // flags: 4098 
function TutorialHintFeedback( tutorialMessageName : CName,  negative : Bool);  // flags: 4098 
function TutorialMessage( message : STutorialMessage);  // flags: 4098 
function TutorialMessagesEnable_DEBUG_ONLY( enable : Bool);  // flags: 4098 
function TutorialRadialDesaturation( data : array<SRadialDesaturation>);  // flags: 4098 
function TutorialMessagesEnable( optional  enable : Bool);  // flags: 2 
function tut_scr( scriptName : CName);  // flags: 258 
function TutorialForceSecondLevel( minExpToGive : Int32);  // flags: 4098 
function ShouldProcessTutorial( scriptName : CName) : Bool;  // flags: 2 
function ShouldProcessInteractionTutorials() : Bool;  // flags: 2 
function logtutorialqueue();  // flags: 258 
function tut_alch();  // flags: 258 
function tut_alch_mut();  // flags: 258 
function tut_arm_upg();  // flags: 258 
function tut_chd();  // flags: 258 
function tut_ch_m( optional  color : ESkillColor,  optional  equipSkillsFirst : Bool);  // flags: 258 
function tut_craft();  // flags: 258 
function tut_ft();  // flags: 258 
function tut_inv();  // flags: 258 
function jour();  // flags: 258 
function tut_oil();  // flags: 258 
function tut_pot();  // flags: 258 
function tut_runes();  // flags: 258 
function GetCiriPlayer() : W3ReplacerCiri;  // flags: 2 
function GetReplacerPlayer() : W3Replacer;  // flags: 2 
function GetDialogActionIcons( flag : Int32) : array<EDialogActionIcon>;  // flags: 2 
function SoundEventScene( player : CStoryScenePlayer,  eventName : String,  saveBehavior : ESoundEventSaveBehavior);  // flags: 2050 
function BarberSetupScene( player : CStoryScenePlayer);  // flags: 2050 
latent function SetGeraltHair( player : CStoryScenePlayer,  hairstyleName : CName);  // flags: 2114 
latent function ShopQuestItemManager( player : CStoryScenePlayer,  merchantTag : CName,  questItems : array<shopQuestItemDef>);  // flags: 2114 
latent function OpenInventoryForScene( containerNPC : CGameplayEntity,  filterTags : array<CName>);  // flags: 66 
latent function OpenGUIPanelForScene( menu : CName,  backgroundMenu : CName,  shopOwner : CGameplayEntity,  optional  menuInitData : W3MenuInitData);  // flags: 66 
function EnableTalkComponent( player : CStoryScenePlayer,  shouldBeEnabled : Bool,  actorTag : CName);  // flags: 2050 
latent function ShowCraftingPanel( player : CStoryScenePlayer,  crafterTag : CName);  // flags: 2114 
latent function ShowMeGoods( player : CStoryScenePlayer,  merchantTag : CName);  // flags: 2114 
latent function OpenContainer( player : CStoryScenePlayer,  npcTag : CName,  optional  tagsFilter : array<CName>);  // flags: 2114 
function SetRewardModifierScene( player : CStoryScenePlayer,  rewardName : CName,  modifer : Float,  onlyIfDoesntExist : Bool,  multiply : Bool,  notBaseMonsterHuntReward : Bool);  // flags: 2050 
function GiveRewardToPlayer( player : CStoryScenePlayer,  rewardName : CName);  // flags: 2050 
latent function NegotiateMonsterHunt( player : CStoryScenePlayer,  rewardName : CName,  questUniqueScriptTag : CName,  alwaysSuccessful : Bool) : ENegotiationResult;  // flags: 2114 
latent function PlaceBet( player : CStoryScenePlayer,  rewardName : CName,  startingBetPercentage : Int32);  // flags: 2114 
function StorePlayerItems( player : CStoryScenePlayer,  merchantTag : CName,  storageTag : CName) : Bool;  // flags: 2050 
function AddFact_S( player : CStoryScenePlayer,  factName : String,  value : Int32,  validFor : Int32);  // flags: 2050 
function RemoveFact_S( player : CStoryScenePlayer,  factId : String);  // flags: 2050 
latent function ShaveGeralt( player : CStoryScenePlayer);  // flags: 2114 
latent function SetGeraltBeard( player : CStoryScenePlayer,  maxBeard : Bool,  optional  stage : Int32);  // flags: 2114 
function BlockBeardGrowth( player : CStoryScenePlayer,  optional  block : Bool);  // flags: 2050 
function RemoveItemOnNPC_S( player : CStoryScenePlayer,  npc : CName,  item_name : CName,  item_category : CName,  item_tag : CName,  optional  quantity : Int32);  // flags: 2050 
function EquipItemOnNPC_S( player : CStoryScenePlayer,  npc : CName,  itemName : CName,  optional  unequip : Bool,  optional  toHand : Bool);  // flags: 2050 
function EnableFastTravelPin( player : CStoryScenePlayer,  pinTag : CName,  enable : Bool);  // flags: 2050 
function AppearanceChange_scene( player : CStoryScenePlayer,  opponentTag : CName,  appearanceName : CName);  // flags: 2050 
function TutorialMessage_scene( player : CStoryScenePlayer,  message : STutorialMessage);  // flags: 2050 
function TutorialHintHide_scene( player : CStoryScenePlayer,  journalEntry : CName);  // flags: 2050 
function DoorManager( player : CStoryScenePlayer,  tag : CName,  newState : EDoorQuestState,  optional  keyItemName : CName,  optional  removeKeyOnUse : Bool);  // flags: 2050 
latent function CollectItems( player : CStoryScenePlayer,  collectorTag : CName,  items : array<CName>,  uniqueTransactionId : String,  keepItemsInContainer : Bool,  optional  filterTagsList : array<CName>) : ECollectItemsRes;  // flags: 2114 
latent function CollectItemsCustom( player : CStoryScenePlayer,  collectorTag : CName,  items : array<CName>,  uniqueTransactionId : String,  keepItemsInContainer : Bool,  optional  filterTagsList : array<CName>) : ECollectItemsCustomRes;  // flags: 2114 
function DampAngleFloatSpring( out  current : Float,  out  velocity : Float,  dest : Float,  smoothTime : Float,  dt : Float);  // flags: 2 
function DampVectorConst( out  currValue : Vector,  out  destValue : Vector,  deltaValue : Float,  dt : Float);  // flags: 2 
function DampFloatSpring( out  current : Float,  out  velocity : Float,  dest : Float,  smoothTime : Float,  dt : Float);  // flags: 2 
function DampVectorSpring( out  current : Vector,  out  velocity : Vector,  dest : Vector,  smoothTime : Float,  dt : Float);  // flags: 2 
function EulerMult( angle : EulerAngles,  value : Float) : EulerAngles;  // flags: 2 
function EulerNeg( angle1 : EulerAngles,  angle2 : EulerAngles) : EulerAngles;  // flags: 2 
function EulerAdd( angle1 : EulerAngles,  angle2 : EulerAngles) : EulerAngles;  // flags: 2 
function ArrayFindMaxF( a : array<Float>) : Int32;  // flags: 2 
function ArrayMaskedFindMaxF( a : array<Float>,  thresholdVal : Float) : Int32;  // flags: 2 
function ArrayFindMinF( a : array<Float>) : Int32;  // flags: 2 
function ArrayFindMinIndexInt( a : array<Int32>) : Int32;  // flags: 2 
function ArrayFindMinInt( a : array<Int32>) : Int32;  // flags: 2 
function ArrayFindMaxInt( a : array<Int32>) : Int32;  // flags: 2 
function ArraySortNames( out  names : array<CName>);  // flags: 2 
function ArraySortNamesByKey( out  names : array<CName>,  out  keys : array<Int32>);  // flags: 2 
function ArraySortNamesByKeyQSort( out  names : array<CName>,  out  keys : array<Int32>,  start : Int32,  stop : Int32);  // flags: 2 
function ArraySortNPCsByKey( out  actors : array<CNewNPC>,  out  keys : array<Int32>);  // flags: 2 
function ArraySortNPCsByKeyQSort( out  actors : array<CNewNPC>,  out  keys : array<Int32>,  start : Int32,  stop : Int32);  // flags: 2 
function ArrayOfNamesAppend( out  first : array<CName>,  second : array<CName>);  // flags: 2 
function ArrayOfNamesAppendUnique( out  first : array<CName>,  second : array<CName>);  // flags: 2 
function ArrayOfNamesPushBackUnique( out  arr : array<CName>,  val : CName);  // flags: 2 
function ArrayOfActorsAppend( out  first : array<CActor>,  second : array<CActor>);  // flags: 2 
function ArrayOfActorsAppendArrayOfGameplayEntities( out  first : array<CActor>,  second : array<CGameplayEntity>);  // flags: 2 
function ArrayOfIdsAppend( out  first : array<SItemUniqueId>,  second : array<SItemUniqueId>);  // flags: 2 
function ArrayOfIdsAppendUnique( out  first : array<SItemUniqueId>,  second : array<SItemUniqueId>);  // flags: 2 
function ArrayOfGameplayEntitiesAppendArrayOfActorsUnique( out  first : array<CGameplayEntity>,  second : array<CActor>);  // flags: 2 
function ArrayOfGameplayEntitiesAppendUnique( out  first : array<CGameplayEntity>,  second : array<CGameplayEntity>);  // flags: 2 
function ArrayOfNamesCount( arr : array<CName>,  item : CName) : Int32;  // flags: 2 
function ArrayOfNamesRemoveAll( out  arr : array<CName>,  item : CName);  // flags: 2 
function Pi() : Float;  // flags: 2 
function SgnF( a : Float) : Float;  // flags: 2 
function ModF( a : Float,  b : Float) : Float;  // flags: 2 
function EnableNewGamePlus( enable : Bool);  // flags: 4098 
function RoundMath( f : Float) : Int32;  // flags: 2 
function StartNewGamePlus( filename : String);  // flags: 258 
function RoundTo( f : Float,  decimal : Int32) : Float;  // flags: 2 
function AngleNormalize180( a : Float) : Float;  // flags: 2 
function LerpAngleF( alpha : Float,  a : Float,  b : Float) : Float;  // flags: 2 
function NodeToNodeAngleDistance( target : CNode,  current : CNode) : Float;  // flags: 2 
function VecRingRand( minRadius : Float,  maxRadius : Float) : Vector;  // flags: 2 
function VecConeRand( coneDir : Float,  coneAngle : Float,  minRadius : Float,  maxRadius : Float) : Vector;  // flags: 2 
function VecRingRandStatic( seed : Int32,  minRadius : Float,  maxRadius : Float) : Vector;  // flags: 2 
function VecRotByAngleXY( vec : Vector,  angleDeg : Float) : Vector;  // flags: 2 
function VecInterpolate( v1 : Vector,  v2 : Vector,  ratio : Float) : Vector;  // flags: 2 
function VecToString( vec : Vector) : String;  // flags: 2 
function VecToStringPrec( vec : Vector,  precision : Int32) : String;  // flags: 2 
function GetOppositeRotation180( rot : EulerAngles) : EulerAngles;  // flags: 2 
function GetBoxSize( box : Box) : Vector;  // flags: 2 
function GetBoxExtents( box : Box) : Vector;  // flags: 2 
function GetBoxRange( box : Box) : Float;  // flags: 2 
function EPSILON() : Float;  // flags: 2 
function GetRangePct_F( minVal : Float,  maxVal : Float,  value : Float) : Float;  // flags: 2 
function GetRangePct_V( range : Vector,  value : Float) : Float;  // flags: 2 
function GetRangeVal_F( minVal : Float,  maxVal : Float,  pct : Float) : Float;  // flags: 2 
function GetRangeVal_V( range : Vector,  pct : Float) : Float;  // flags: 2 
function GetMappedRangeValue( inRange : Vector,  outRange : Vector,  value : Float) : Float;  // flags: 2 
function InterpTo_F( current : Float,  desired : Float,  deltaTime : Float,  interpSpeed : Float) : Float;  // flags: 2 
function InterpConstTo_F( current : Float,  desired : Float,  deltaTime : Float,  interpSpeed : Float) : Float;  // flags: 2 
function InterpEaseIn_F( a : Float,  b : Float,  alpha : Float,  exp : Float) : Float;  // flags: 2 
function InterpEaseOut_F( a : Float,  b : Float,  alpha : Float,  exp : Float) : Float;  // flags: 2 
function InterpEaseInOut_F( a : Float,  b : Float,  alpha : Float,  exp : Float) : Float;  // flags: 2 
function CubicInterp_F( p0 : Float,  t0 : Float,  p1 : Float,  t1 : Float,  a : Float) : Float;  // flags: 2 
function GetVectComponent( v : Vector,  inComp : Int32) : Float;  // flags: 2 
function LerpV( a : Vector,  b : Vector,  alpha : Float) : Vector;  // flags: 2 
function InterpTo_V( current : Vector,  desired : Vector,  deltaTime : Float,  interpSpeed : Float) : Vector;  // flags: 2 
function CubicInterp_V( p0 : Vector,  t0 : Vector,  p1 : Vector,  t1 : Vector,  a : Float) : Vector;  // flags: 2 
function InterpEaseIn_V( a : Vector,  b : Vector,  alpha : Float,  exp : Float) : Vector;  // flags: 2 
function InterpEaseOut_V( a : Vector,  b : Vector,  alpha : Float,  exp : Float) : Vector;  // flags: 2 
function InterpEaseInOut_V( a : Vector,  b : Vector,  alpha : Float,  exp : Float) : Vector;  // flags: 2 
function VecReduceTowardsZero( source : Vector,  ammount : Float) : Vector;  // flags: 2 
function VecReduceNotExceedingV( _VectorV : Vector,  _ReductionAmmountF : Float,  _MinLengthF : Float) : Vector;  // flags: 2 
function VecAddNotExceedingV( _VectorV : Vector,  _AdditionV : Vector,  _MaxLengthF : Float) : Vector;  // flags: 2 
function VecSetZeros( out  vector : Vector);  // flags: 2 
function EulerSetZeros( out  eulerAngles : EulerAngles);  // flags: 2 
function LogVector( vectorName : String,  vector : Vector);  // flags: 2 
function MapF( val : Float,  minOrig : Float,  maxOrig : Float,  minDest : Float,  maxDest : Float) : Float;  // flags: 2 
function BlendLinearF( value : Float,  target : Float,  speed : Float) : Float;  // flags: 2 
function BlendF( origin : Float,  end : Float,  coef : Float) : Float;  // flags: 2 
function SignF( value : Float) : Float;  // flags: 2 
function SignOrZeroF( value : Float) : Float;  // flags: 2 
function IsNameValid( n : CName) : Bool;  // flags: 2 
function LogAssert( condition : Bool,  text : String);  // flags: 2 
function ProcessCompare( comparator : ECompareOp,  valA : Float,  valB : Float) : Bool;  // flags: 2 
function LogAchievements( str : String);  // flags: 2 
function LogAlchemy( str : String);  // flags: 2 
function LogAttackEvents( str : String);  // flags: 2 
function LogAttackRangesDebug( str : String);  // flags: 2 
function LogBgNPC( str : String);  // flags: 2 
function LogBlockGameplayFunctionality( src : String,  msg : String);  // flags: 2 
function LogCharacterStats( str : String);  // flags: 2 
function LogCrafting( str : String);  // flags: 2 
function LogCritical( str : String);  // flags: 2 
function LogCriticalPlayer( str : String);  // flags: 2 
function LogEffects( str : String);  // flags: 2 
function LogFacts( str : String);  // flags: 2 
function LogHaggle( str : String);  // flags: 2 
function LogInput( str : String);  // flags: 2 
function LogItems( str : String);  // flags: 2 
function LogLocalization( str : String);  // flags: 2 
function LogLockable( str : String);  // flags: 2 
function LogOils( str : String);  // flags: 2 
function LogPerks( str : String);  // flags: 2 
function LogPotions( str : String);  // flags: 2 
function LogPS4Light( str : String);  // flags: 2 
function LogQuest( str : String);  // flags: 2 
function LogRandomLoot( str : String);  // flags: 2 
function LogReactionSystem( str : String);  // flags: 2 
function LogSigns( str : String);  // flags: 2 
function LogSkillColors( str : String);  // flags: 2 
function LogSkills( str : String);  // flags: 2 
function LogSound( str : String);  // flags: 2 
function LogSpeed( str : String);  // flags: 2 
function LogStamina( str : String);  // flags: 2 
function LogStats( str : String);  // flags: 2 
function LogThrowable( str : String);  // flags: 2 
function LogTime( str : String);  // flags: 2 
function LogTutorial( str : String);  // flags: 2 
function LogUnitAtt( str : String);  // flags: 2 
function LogItemCollision( str : String);  // flags: 2 
function LogSpecialHeavy( str : String);  // flags: 2 
function LogBoat( str : String);  // flags: 2 
function LogBoatFatal( str : String);  // flags: 2 
function LogDMHits( str : String,  optional  action : W3DamageAction);  // flags: 2 
function NameToInt( n : CName) : Int32;  // flags: 2 
function NameToFloat( n : CName) : Float;  // flags: 2 
function MuteHeadAudio( tag : CName,  mute : Bool);  // flags: 4098 
function NoTrailZeros( f : Float) : String;  // flags: 2 
function GetRandomName() : CName;  // flags: 2 
function SpaceFill( str : String,  length : Int32,  optional  mode : ESpaceFillMode) : String;  // flags: 2 
function StrStartsWith( str : String,  subStr : String) : Bool;  // flags: 2 
function StrContains( str : String,  subStr : String) : Bool;  // flags: 2 
function GCameraShakeLight( strength : Float,  optional  testDistance : Bool,  optional  shakeEpicenter : Vector,  optional  maxDistance : Float,  optional  looping : Bool,  optional  animName : CName,  optional  speed : Float);  // flags: 2 
function AreaIsCold() : Bool;  // flags: 2 
function Drunk( optional  enabled : Bool);  // flags: 258 
function Cat( optional  enabled : Bool);  // flags: 258 
function acticon( contentToActivate : CName);  // flags: 258 
function GetGameplayEffectsComponent( entity : CEntity) : CGameplayEffectsComponent;  // flags: 2 
function Have24HoursPassed( time1 : GameTime,  time2 : GameTime) : Bool;  // flags: 2 
function ConvertRealTimeSecondsToGameSeconds( s : Float) : Float;  // flags: 2 
function ConvertGameSecondsToRealTimeSeconds( s : Float) : Float;  // flags: 2 
function GameTimeCreateFromGameSeconds( seconds : Int32) : GameTime;  // flags: 2 
function GetDayPart( time : GameTime) : EDayPart;  // flags: 2 
function GetHourForDayPart( dp : EDayPart) : Int32;  // flags: 2 
function GameTimeTest();  // flags: 258 
function settime( day : Int32,  optional  hour : Int32,  optional  minute : Int32,  optional  second : Int32);  // flags: 258 
function wait( days : Int32,  optional  hours : Int32,  optional  minutes : Int32,  optional  seconds : Int32);  // flags: 258 
function telltime();  // flags: 258 
function InputKeyToString( keyId : EInputKey) : String;  // flags: 2 
function Pvd( host : String) : Bool;  // flags: 258 
function CollectSoundStates();  // flags: 258 
function SetSoundState( stateGroupName : String,  stateName : String);  // flags: 258 
function soundSequenceOne( sequenceName : String,  sequenceElementOne : String);  // flags: 258 
function soundSequenceTwo( sequenceName : String,  sequenceElementOne : String,  sequenceElementTwo : String);  // flags: 258 
function soundSequenceThree( sequenceName : String,  sequenceElementOne : String,  sequenceElementTwo : String,  sequenceElementThree : String);  // flags: 258 
function soundSequenceFour( sequenceName : String,  sequenceElementOne : String,  sequenceElementTwo : String,  sequenceElementThree : String,  sequenceElementFour : String);  // flags: 258 
function soundSequenceFive( sequenceName : String,  sequenceElementOne : String,  sequenceElementTwo : String,  sequenceElementThree : String,  sequenceElementFour : String,  sequenceElementFive : String);  // flags: 258 
function ForceActorLOD( enable : Bool,  optional  LODIndex : Int32);  // flags: 258 
function IsRequiredAttitudeBetween( one : CEntity,  two : CEntity,  hostile : Bool,  optional  neutral : Bool,  optional  friendly : Bool) : Bool;  // flags: 2 
function GetAttitudeBetween( one : CEntity,  two : CEntity) : EAIAttitude;  // flags: 2 
function GetActorsInRange( center : CNode,  range : Float,  optional  maxResults : Int32,  optional  tag : CName,  optional  onlyAlive : Bool) : array<CActor>;  // flags: 2 
function GetNonFriendlyGameplayEntitiesInRange( center : CNode,  range : Float,  attitudeReferenceActor : CActor,  optional  maxResults : Int32,  optional  tag : CName) : array<CGameplayEntity>;  // flags: 2 
function AT();  // flags: 258 
function PowerStatNameToEnum( n : CName) : ECharacterPowerStats;  // flags: 2 
function PowerStatEnumToName( s : ECharacterPowerStats) : CName;  // flags: 2 
function RegenStatNameToEnum( n : CName) : ECharacterRegenStats;  // flags: 2 
function RegenStatEnumToName( s : ECharacterRegenStats) : CName;  // flags: 2 
function GetStatForRegenStat( stat : ECharacterRegenStats) : EBaseCharacterStats;  // flags: 2 
function GetRegenStatForStat( stat : EBaseCharacterStats) : ECharacterRegenStats;  // flags: 2 
function ResistStatNameToEnum( n : CName,  out  isPointResistance : Bool) : ECharacterDefenseStats;  // flags: 2 
function ResistStatEnumToName( s : ECharacterDefenseStats,  isPointResistance : Bool) : CName;  // flags: 2 
function GetGenericStatValue( statName : CName,  out  valueStr : String);  // flags: 2 
function IsNonPhysicalResistStat( stat : ECharacterDefenseStats) : Bool;  // flags: 2 
function IsPhysicalResistStat( stat : ECharacterDefenseStats) : Bool;  // flags: 2 
function ShowPinsFTInfo();  // flags: 258 
function ShowPathsInfo( show : Bool);  // flags: 258 
function ShowQuestAgents( show : Bool);  // flags: 258 
function ShowShopkeepers( show : Bool);  // flags: 258 
function ShowPinsInfo( value : Int32);  // flags: 258 
function exportglobalmappins();  // flags: 258 
function exportentitymappins();  // flags: 258 
function useinteriors( use : Bool);  // flags: 258 
function testFT();  // flags: 258 
function ShowKnownPins( show : Bool);  // flags: 258 
function ShowPins( show : Bool);  // flags: 258 
function ShowAllFT( show : Bool);  // flags: 258 
function AllowFT( allow : Bool);  // flags: 258 
function gotoWyzima();  // flags: 258 
function gotoNovigrad();  // flags: 258 
function gotoSkellige();  // flags: 258 
function gotoKaerMohren();  // flags: 258 
function gotoProlog();  // flags: 258 
function gotoPrologWinter();  // flags: 258 
function knowMapPin( tag : CName);  // flags: 258 
function discoverMapPin( tag : CName);  // flags: 258 
function disableMapPin( tag : CName);  // flags: 258 
function AngleToDirection( angle : Float) : EDirection;  // flags: 2 
function VectorToDirection( vec : Vector) : EDirection;  // flags: 2 
function GetCurMoonState() : EMoonState;  // flags: 2 
function GetCurWeather() : EWeatherEffect;  // flags: 2 
function FactsSet( ID : String,  val : Int32,  optional  validFor : Int32);  // flags: 2 
function FactsSubstract( ID : String,  optional  val : Int32);  // flags: 2 
function TriggerPerformableEvent( actionList : array<IPerformableAction>,  parnt : CEntity);  // flags: 2 
function TriggerPerformableEventArgNode( actionList : array<IPerformableAction>,  parnt : CEntity,  node : CNode);  // flags: 2 
function UnlockAllAchievements();  // flags: 258 
function achieve( a : EAchievement);  // flags: 258 
function achievei( i : Int32);  // flags: 258 
function printach();  // flags: 258 
function fb2( level : Int32,  optional  path : CName);  // flags: 258 
function GetExpPoints( points : Int32);  // flags: 258 
function GetGlobalEventCategory( scriptedCategory : EScriptedEventCategory) : EGlobalEventCategory;  // flags: 2 
function GetScriptedEventCategory( globalCategory : EGlobalEventCategory) : EScriptedEventCategory;  // flags: 2 
function GetGlobalEventType( scriptedType : EScriptedEventType) : EGlobalEventType;  // flags: 2 
function GetScriptedEventType( globalType : EGlobalEventType) : EScriptedEventType;  // flags: 2 
function AddHitFacts( victimTags : array<CName>,  attackerTags : array<CName>,  hitType : String,  optional  validForever : Bool,  optional  prefix : String);  // flags: 2 
function GetCurrentTextLocCode() : String;  // flags: 2 
function IsPressed( action : SInputAction,  optional  justValue : Bool) : Bool;  // flags: 2 
function IsReleased( action : SInputAction,  optional  justValue : Bool) : Bool;  // flags: 2 
function toggleqt();  // flags: 258 
function togglejdbg();  // flags: 258 
function SetFinalboardQuest( player : CStoryScenePlayer,  isFinalboard : Bool);  // flags: 2050 
function showQuestGroups();  // flags: 258 
function showLoadingScreenVideo( show : Bool);  // flags: 258 
function testMonsterFind();  // flags: 258 
function testMonsterAdvanced();  // flags: 258 
function activateJournalBestiaryEntryWithAlias( entryAlias : String,  journalManager : CWitcherJournalManager);  // flags: 2 
function activateJournalGlossaryGroupWithAlias( entryAlias : String,  journalManager : CWitcherJournalManager);  // flags: 2 
function activateJournalStoryBookPageEntryWithAlias( entryAlias : String,  journalManager : CWitcherJournalManager);  // flags: 2 
function activateJournalCharacterEntryWithAlias( entryAlias : String,  journalManager : CWitcherJournalManager);  // flags: 2 
function activateBaseBestiaryEntryWithAlias( entryAlias : String,  journalManager : CWitcherJournalManager);  // flags: 2 
function testVoiceMap();  // flags: 258 
function testVoiceJournal();  // flags: 258 
function testVoiceInventory();  // flags: 258 
function testVoiceCharacter();  // flags: 258 
function testVoiceAlchemy();  // flags: 258 
function GetItemCategoryLocalisedString( cat : CName) : String;  // flags: 2 
function GetAttributeNameLocStr( attName : CName,  isMult : Bool) : String;  // flags: 2 
function GetLocStringByKeyExtWithParams( stringKey : String,  optional  intParamsArray : array<Int32>,  optional  floatParamsArray : array<Float>,  optional  stringParamsArray : array<String>,  optional  addNbspTag : Bool) : String;  // flags: 2 
function GetLocStringByIdWithParams( stringId : Int32,  optional  intParamsArray : array<Int32>,  optional  floatParamsArray : array<Float>,  optional  stringParamsArray : array<String>) : String;  // flags: 2 
function GetItemTooltipText( item : SItemUniqueId,  inv : CInventoryComponent) : String;  // flags: 2 
function GetBaseStatLocalizedName( stat : EBaseCharacterStats) : String;  // flags: 2 
function GetBaseStatLocalizedDesc( stat : EBaseCharacterStats) : String;  // flags: 2 
function GetRegenStatLocalizedName( stat : ECharacterRegenStats) : String;  // flags: 2 
function GetRegenStatLocalizedDesc( stat : ECharacterRegenStats) : String;  // flags: 2 
function GetPowerStatLocalizedName( stat : ECharacterPowerStats) : String;  // flags: 2 
function GetPowerStatLocalizedDesc( stat : ECharacterPowerStats) : String;  // flags: 2 
function GetResistStatLocalizedName( s : ECharacterDefenseStats,  isPointResistance : Bool) : String;  // flags: 2 
function GetResistStatLocalizedDesc( s : ECharacterDefenseStats,  isPointResistance : Bool) : String;  // flags: 2 
function HasLolcalizationTags( s : String) : Bool;  // flags: 2 
function GetIconByPlatform( tag : String) : String;  // flags: 2 
function ReplaceTagsToIcons( s : String) : String;  // flags: 2 
function GetIconForKey( key : EInputKey,  optional  isGuiKey : Bool) : String;  // flags: 2 
function GetHoldLabel() : String;  // flags: 2 
function GetBracketSymbols( out  openingSymbol : String,  out  closingSymbol : String,  optional  isRoundBrackets : Bool);  // flags: 2 
function GetHTMLForICO( icon : String) : String;  // flags: 2 
function GetHTMLForMouseICO( icon : String) : String;  // flags: 2 
function GetHTMLForItemICO( icon : String) : String;  // flags: 2 
function GetBookTexture( tag : String) : String;  // flags: 2 
function GetIconForTag( tag : String) : String;  // flags: 2 
function GetIconOrColorForTag2( tag : String) : String;  // flags: 2 
function GetIconOrColorForTag3( tag : String) : String;  // flags: 2 
function GetIconNameForKey( key : EInputKey) : String;  // flags: 2 
function GetPadFileName( type : String) : String;  // flags: 2 
function hintloc();  // flags: 258 
function DEBUG_Test_GetIconForTag( out  text : String,  tag : String);  // flags: 2 
function DEBUG_Test_GetIconNameForKey( out  text : String,  key : EInputKey);  // flags: 2 
function tutico( optional  num : Int32);  // flags: 258 
function testLocKeyboardKeyNames();  // flags: 258 
function hasSaveDataToLoad() : Bool;  // flags: 2 
function reduceitems();  // flags: 258 
function fillChest( optional  tag : CName);  // flags: 258 
function fillShop( optional  tag : CName);  // flags: 258 
function ListHair();  // flags: 258 
function OpenDoor( doorTag : CName);  // flags: 258 
function FixNoticeboard( boardTag : CName);  // flags: 258 
function SetHostile( ownerName : CName);  // flags: 258 
function GetAtt( actor1Name : CName);  // flags: 258 
function GetActorAtt( actor1Name : CName,  actor2Name : CName);  // flags: 258 
function GetActorAttGroup( actor1Name : CName);  // flags: 258 
function addrepairkits();  // flags: 258 
function invdebug();  // flags: 258 
function tuten( optional  e : Bool);  // flags: 258 
function testtut( optional  scriptTag : CName,  optional  x : Float,  optional  y : Float,  optional  dur : Float,  optional  dontEnableMessages : Bool,  optional  fullscreen : Bool,  optional  noHorResize : Bool);  // flags: 258 
function testtutanim();  // flags: 258 
function dicoverMappin( pinTag : CName);  // flags: 258 
function closeUI();  // flags: 258 
function itemquality();  // flags: 258 
function addFTmaps();  // flags: 258 
function mutagentest();  // flags: 258 
function readabook( bookName : CName);  // flags: 258 
function changeweather( weatherName : CName);  // flags: 258 
function showhudmess( message : String);  // flags: 258 
function testreward();  // flags: 258 
function untut();  // flags: 258 
function eqbomb( itemName : CName,  optional  slotID : Int32);  // flags: 258 
function FD( n : Float,  f : Float,  dt : Float,  ds : Float);  // flags: 258 
function dismember();  // flags: 258 
function pb_test();  // flags: 258 
function boat_destr( idxParts : Int32,  index : Int32);  // flags: 258 
function test_wound( wound : CName);  // flags: 258 
function test_scent( actionType : EFocusEffectActivationAction,  effectName : CName,  entityTag : CName,  duration : Float);  // flags: 258 
function r4quest();  // flags: 258 
function r4ryanalchemy();  // flags: 258 
function r4inventory();  // flags: 258 
import function Max( a : Int32,  b : Int32) : Int32;  // flags: 11 
function FDON();  // flags: 258 
import function Min( a : Int32,  b : Int32) : Int32;  // flags: 11 
function FDOFF();  // flags: 258 
function FON();  // flags: 258 
function BehGraphIntToName( graphEnum : Int32) : CName;  // flags: 2 
function FOFF();  // flags: 258 
function DoStorySceneGameplayAction( out  callbackInfo : SStorySceneGameplayActionCallbackInfo);  // flags: 2 
function FMON();  // flags: 258 
function FMOFF();  // flags: 258 
function fhint();  // flags: 258 
function med( val : Bool);  // flags: 258 
function addSkillPoints( amount : Int32);  // flags: 258 
function medthr( val : Float);  // flags: 258 
function staticcam();  // flags: 258 
function gamecam( blend : Float);  // flags: 258 
function Ciri();  // flags: 258 
function Geralt();  // flags: 258 
function replaceplayer( who : String);  // flags: 258 
function TM( hoursPerMinute : Float);  // flags: 258 
function TON();  // flags: 258 
function TOFF();  // flags: 258 
function SetMove( flag : Bool);  // flags: 258 
function autoloot();  // flags: 258 
function SM();  // flags: 258 
function GT();  // flags: 258 
function FM();  // flags: 258 
function testtutorial( msgName : CName,  optional  isNotHint : Bool,  optional  duration : Float);  // flags: 258 
function printability( tag : CName);  // flags: 258 
function DebugActivateJournal();  // flags: 258 
function TempDemoStats();  // flags: 4098 
function CostPlayer();  // flags: 258 
function CostActor( tag : CName);  // flags: 258 
function CostCombat( optional  combatName : String,  optional  range : Float);  // flags: 258 
function ActivateTeleport( teleportTag : CName);  // flags: 258 
function TestAb();  // flags: 258 
function addabl( ablName : CName);  // flags: 258 
function targetaddabl( ablName : CName,  tag : CName);  // flags: 258 
function rmvabl( ablName : CName);  // flags: 258 
function DispSkeleton( entTag : CName);  // flags: 258 
function DispSkeletonAll( entTag : CName);  // flags: 258 
function DispSkeletonAxis( entTag : CName);  // flags: 258 
function Hour();  // flags: 258 
function addIngr();  // flags: 258 
function ParryStart( flag : Bool);  // flags: 258 
function PerformParry( flag : Bool);  // flags: 258 
function addFocus();  // flags: 258 
function FixMovement();  // flags: 258 
function addbombs( optional  notInfinite : Bool);  // flags: 258 
function freezetodeath();  // flags: 258 
function addbolts( optional  infinite : Bool);  // flags: 258 
function addcraft();  // flags: 258 
function addsteelswords();  // flags: 258 
function addsteelswords2();  // flags: 258 
function addwolfdlc( optional  dontOpenInv : Bool);  // flags: 258 
function addsilverswords( optional  dontOpenInv : Bool);  // flags: 258 
function addsilverswords2();  // flags: 258 
function addcrossbows();  // flags: 258 
function addarmor();  // flags: 258 
function addarmor2();  // flags: 258 
function addpants();  // flags: 258 
function addboots();  // flags: 258 
function addgloves();  // flags: 258 
function addsets();  // flags: 258 
function addbooks();  // flags: 258 
function addbooks_();  // flags: 2 
function addlore();  // flags: 258 
function addlore2();  // flags: 258 
function addfood();  // flags: 258 
function climb();  // flags: 258 
function adddrinks( optional  cnt : Int32,  optional  noMenu : Bool);  // flags: 258 
function addtrophies();  // flags: 258 
function addmisc();  // flags: 258 
function addhorseitems();  // flags: 258 
function WitcherHairstyle( number : Int32);  // flags: 258 
function IsInInterior( tag : CName);  // flags: 258 
function addupgrades( optional  count : Int32,  optional  dontOpenUI : Bool);  // flags: 258 
function addcraftingingre( optional  quantity : Int32);  // flags: 258 
function addCraftingItem( item : Int32);  // flags: 258 
function learnallschematics();  // flags: 258 
function addcraftedsteel();  // flags: 258 
function testrune();  // flags: 258 
function addcraftedsilver();  // flags: 258 
function addcraftedsteelrelic();  // flags: 258 
function addcraftedsilverrelic();  // flags: 258 
function addcraftedranged();  // flags: 258 
function addcraftedboots();  // flags: 258 
function addschematicsboots();  // flags: 258 
function addschematicspants();  // flags: 258 
function addschematicsgloves();  // flags: 258 
function addschematicsarmor();  // flags: 258 
function addschematicscomponents();  // flags: 258 
function addschematicsupgrades();  // flags: 258 
function addschematicsbolts();  // flags: 258 
function addmutagens();  // flags: 258 
function addmutageningredients();  // flags: 258 
function addmutagenrecipes();  // flags: 258 
function addrecipesoils();  // flags: 258 
function addrecipesbombs();  // flags: 258 
function addrecipespotions();  // flags: 258 
function addrecipespotions2();  // flags: 258 
function addherbs( optional  cnt : Int32,  optional  noMenu : Bool);  // flags: 258 
function addkeys();  // flags: 258 
function addvaluables();  // flags: 258 
function additemfood();  // flags: 2 
function additemalchemy();  // flags: 2 
function additemcrafting();  // flags: 2 
function additemleather();  // flags: 2 
function EnableFastTravelling( enable : Bool);  // flags: 4098 
function additemmetals();  // flags: 2 
function additemrunesupgrades();  // flags: 2 
function additemmonstrous();  // flags: 2 
function additemsprecious();  // flags: 2 
function addjunk();  // flags: 258 
function addjunk2();  // flags: 258 
function addquestitems1();  // flags: 258 
function fff( x : Float);  // flags: 258 
function addquestitems2();  // flags: 258 
function addquestitems3();  // flags: 258 
function addtreasurehuntitems();  // flags: 258 
function addcharacterdecorations();  // flags: 258 
function recycle();  // flags: 258 
function printinv( optional  onlyEquipped : Bool);  // flags: 258 
function printinv2();  // flags: 258 
function printinv2item( index : Int32);  // flags: 258 
function SuppressReactions( toggle : Bool,  areaTag : CName);  // flags: 258 
function dressmeup( i : Int32);  // flags: 258 
function undressme( i : Int32);  // flags: 258 
function healme( optional  perc : Int32);  // flags: 258 
function playstation( e : Bool);  // flags: 258 
function hitme( d : Int32,  optional  playHitAnim : Bool);  // flags: 258 
function hitstamina( d : Int32);  // flags: 258 
function drinkpots( index : Int32);  // flags: 258 
function drinkpot( potionName : CName,  slot : Int32);  // flags: 258 
function addalchrec( nam : CName);  // flags: 258 
function addalch2();  // flags: 258 
function EnableShopkeeper( tag : CName,  enable : Bool);  // flags: 4098 
function addalch3();  // flags: 258 
function EnableMapPath( tag : CName,  enable : Bool,  lineWidth : Float,  segmentLength : Float,  color : Color);  // flags: 4098 
function addalch( optional  quantity : Int32);  // flags: 258 
function EnableDynamicMappin( tag : CName,  optional  enable : Bool,  optional  type : EDM_MappinType,  optional  informUI : Bool);  // flags: 4098 
function PrintInventory( optional  onlyEquipped : Bool);  // flags: 2 
function PrintInventory2();  // flags: 2 
function PrintInventory2Item( index : Int32);  // flags: 2 
function craft( schemName : CName,  level : Int32,  type : Int32);  // flags: 258 
function testuroboros();  // flags: 258 
function unequipitem( n : CName);  // flags: 258 
function hideitem();  // flags: 258 
function removeitem( n : CName);  // flags: 258 
function equipitem( n : CName);  // flags: 258 
function useoil( n : CName,  optional  type : Int32);  // flags: 258 
function oilstats();  // flags: 258 
function oilstatsciri();  // flags: 258 
function SimulateDLCsAvailable( value : Bool);  // flags: 258 
function testoil();  // flags: 258 
function testoilciri();  // flags: 258 
function playerkill( optional  ignoreImmortalityMode : Bool);  // flags: 258 
function PlayerKinematic();  // flags: 258 
function PlayerDynamic( optional  weight : Float);  // flags: 258 
function PlayerDynamicGlobal();  // flags: 2 
function PlayerKinematicGlobal();  // flags: 2 
function itemattributes( itemName : CName);  // flags: 258 
function additem( itemName : CName,  optional  count : Int32,  optional  equip : Bool);  // flags: 258 
function printfact( id : String);  // flags: 258 
function addfact( factID : String,  optional  value : Int32,  optional  expires : Int32);  // flags: 258 
function removefact( factID : String);  // flags: 258 
function klapaucius();  // flags: 258 
function addmoney( val : Int32);  // flags: 258 
function removemoney( val : Int32);  // flags: 258 
function fadein();  // flags: 258 
function pc_snaptonavdata( val : Bool);  // flags: 258 
function god();  // flags: 258 
function god2();  // flags: 258 
function god3();  // flags: 258 
function eatapple();  // flags: 258 
function gametestdummy() : Bool;  // flags: 258 
function spamplayerspeed( optional  enable : Bool);  // flags: 258 
function learnskill( skillName : CName);  // flags: 258 
function statstarget();  // flags: 258 
function statsplayer();  // flags: 258 
function logstats();  // flags: 258 
function Debug_stats( actor : CActor);  // flags: 2 
function Debug_Attributes( n : CActor);  // flags: 2 
function BlockRageOnTarget( lock : Bool,  optional  time : Float);  // flags: 258 
function blockabilityontarget( abilityName : CName);  // flags: 258 
function testpause();  // flags: 258 
function testunpause();  // flags: 258 
function testlosscontroller();  // flags: 258 
function testregainedcontroller();  // flags: 258 
function dodge();  // flags: 258 
function dcc();  // flags: 258 
function spawnRaw( nam : CName,  optional  quantity : Int32,  optional  distance : Float,  optional  isHostile : Bool);  // flags: 258 
function spawnBoat000();  // flags: 258 
function spawn( nam : CName,  optional  quantity : Int32,  optional  distance : Float,  optional  isHostile : Bool);  // flags: 258 
function likeaboss();  // flags: 258 
function dismounttest();  // flags: 258 
function sfmh();  // flags: 258 
function panic();  // flags: 258 
function freeze( optional  off : Int32,  optional  range : Float,  optional  tag : CName);  // flags: 258 
function twt();  // flags: 258 
function twr();  // flags: 258 
function ut();  // flags: 258 
function setpri( tag : CName,  value : Int32);  // flags: 258 
function setcol( value : Bool);  // flags: 258 
function addpotions();  // flags: 258 
function addoils();  // flags: 258 
function logskills();  // flags: 258 
function obstacle();  // flags: 258 
function addstat( stat : EBaseCharacterStats,  val : Float);  // flags: 258 
function drainstat( stat : EBaseCharacterStats,  val : Float);  // flags: 258 
function printbuffs();  // flags: 258 
function spawnenemy();  // flags: 258 
function ApproachAttack( i : Int32);  // flags: 258 
function TReset();  // flags: 258 
function HPM( hpm : Int32);  // flags: 258 
function weak();  // flags: 258 
function instantMount( vehicleTag : CName);  // flags: 258 
function mute();  // flags: 258 
function unmute();  // flags: 258 
function arcam();  // flags: 258 
function imback();  // flags: 258 
function idoeverything();  // flags: 258 
function resurrect();  // flags: 258 
function cleardevelop();  // flags: 258 
function InputLogging( val : Bool);  // flags: 258 
function testdur();  // flags: 258 
function incdur( item : CName,  val : Int32);  // flags: 258 
function decdur( val : Int32);  // flags: 258 
function buffme( type : EEffectType,  optional  duration : Float,  optional  src : CName);  // flags: 258 
function addtorch();  // flags: 258 
function spawnpukespot();  // flags: 258 
function GetStatValue( statName : CName) : String;  // flags: 2 
function durr();  // flags: 258 
function spawnbarrel();  // flags: 258 
function spawnbarrels();  // flags: 258 
function spawnbees();  // flags: 258 
function damageboat( dmg : Float,  index : Int32);  // flags: 258 
function iu();  // flags: 258 
function RainStrength();  // flags: 258 
function MegaBomb();  // flags: 258 
function LogInputContext();  // flags: 258 
function ResetInput();  // flags: 258 
function spawnwh();  // flags: 258 
function AddAttackMult();  // flags: 258 
function AddAndEquipSkill( skill : ESkill) : Bool;  // flags: 2 
function FB( level : Int32);  // flags: 258 
function RunGossip();  // flags: 258 
function debugtp();  // flags: 258 
function omnom( optional  level : Int32);  // flags: 258 
function ReadBookByName( bookName : CName,  unread : Bool);  // flags: 4098 
function stagger( tag : CName);  // flags: 258 
function printstate();  // flags: 258 
function SetEasy();  // flags: 258 
function SetMedium();  // flags: 258 
function SetHard();  // flags: 258 
function SetHardcore();  // flags: 258 
function difflevel( i : EDifficultyMode);  // flags: 258 
function temp_difflevel( i : EDifficultyMode);  // flags: 2 
function printdiff();  // flags: 258 
function BlockAb( actorTag : CName,  abilityName : CName);  // flags: 258 
function criticalboy();  // flags: 258 
function ProfilerInit( bufforSize : Int32);  // flags: 258 
function ProfilerInitEx( bufforSize : Int32,  bufforSignalsSize : Int32);  // flags: 258 
function ProfilerInitMB( bufforSize : Int32);  // flags: 258 
function ProfilerInitExMB( bufforSize : Int32,  bufforSignalsSize : Int32);  // flags: 258 
function ProfilerScriptEnable();  // flags: 258 
function ProfilerScriptDisable();  // flags: 258 
function ProfilerStart();  // flags: 258 
function ProfilerStop();  // flags: 258 
function ProfilerStore( profileName : String);  // flags: 258 
function ProfilerStoreDef();  // flags: 258 
function faction( i : Int32);  // flags: 258 
function ProfilerStoreInstrFuncList();  // flags: 258 
function ProfilerStartCatchBr();  // flags: 258 
function ProfilerStopCatchBr();  // flags: 258 
function ProfilerSetTimeBr( instrFuncName : String,  time : Float,  stopOnce : Bool);  // flags: 258 
function ProfilerSetHitCountBr( instrFuncName : String,  counter : Int32);  // flags: 258 
function ProfilerDisableTimeBr( instrFuncName : String);  // flags: 258 
function ProfilerDisableHitCountBr( instrFuncName : String);  // flags: 258 
function MoveToPlayer( speed : Float,  optional  actorTag : CName);  // flags: 258 
function MoveToPoint( speed : Float,  waypointTag : CName,  optional  actorTag : CName);  // flags: 258 
function MoveAlongPath( speed : Float,  pathTag : CName,  optional  actorTag : CName);  // flags: 258 
function nopolice();  // flags: 258 
function testdrownerswimming( optional  actorTag : CName);  // flags: 258 
function dismantle();  // flags: 258 
function Skate();  // flags: 258 
function AltCombatCamera( b : Bool);  // flags: 258 
function tuthack();  // flags: 258 
function togglemenus();  // flags: 258 
function toggleinput();  // flags: 258 
function interiorcam( b : Bool);  // flags: 258 
function LogStates( str : String);  // flags: 2 
function slow( factor : Float);  // flags: 258 
function shakeoffgeralt();  // flags: 258 
function immunity( effectName : CName,  optional  actorTag : CName);  // flags: 258 
function CryStart();  // flags: 258 
function ultrafix();  // flags: 258 
function CryStop();  // flags: 258 
function skillblock( skill : ESkill,  block : Bool,  optional  cooldown : Float);  // flags: 258 
function skilleq( skill : ESkill,  optional  id : Int32,  optional  level : Int32);  // flags: 258 
function skilleq_internal( skill : ESkill,  optional  id : Int32,  optional  level : Int32);  // flags: 2 
function skilluneq( id : Int32);  // flags: 258 
function skilleqtest();  // flags: 258 
function printeqskills();  // flags: 258 
function actionBlock( action : EInputActionBlock,  block : Bool);  // flags: 258 
function bft();  // flags: 258 
function uft();  // flags: 258 
function eqmut();  // flags: 258 
function uneqmut( slot : EEquipmentSlots);  // flags: 258 
function medit();  // flags: 258 
function AddMeteorItem();  // flags: 258 
function ToggleCloseCombat();  // flags: 258 
function Panther( enable : Bool);  // flags: 258 
function SecondaryItemTest();  // flags: 258 
function horseLowAtt( val : Bool);  // flags: 258 
function horseLocalSpace( toggle : Bool);  // flags: 258 
function horseSimpleStamina( toggle : Bool);  // flags: 258 
function showAttRange( attRangeName : CName,  optional  actorTag : CName);  // flags: 258 
function TestAdjustMove( val : Bool);  // flags: 258 
function fadeout();  // flags: 258 
function eredins();  // flags: 258 
function settlement();  // flags: 258 
function MovePlayerFwd( distance : Float,  speed : Float,  optional  drawSteel : Bool,  optional  drawSilver : Bool);  // flags: 258 
function followNPC();  // flags: 258 
function magicBubble( toggle : Bool,  optional  actorTag : CName);  // flags: 258 
function upperBody( optional  actorTag : CName);  // flags: 258 
function shootTest( targetTag : CName,  optional  xbow : Bool,  optional  actorTag : CName);  // flags: 258 
function stopUncon( optional  actorTag : CName);  // flags: 258 
function PlayerDebug();  // flags: 258 
function hidetut();  // flags: 258 
function itemkey( localizedString : String);  // flags: 258 
function CamOffsetCorrection( optional  enable : Bool);  // flags: 258 
function playcam( val : CName);  // flags: 258 
function printabs( optional  tag : CName,  optional  fromItems : Bool,  optional  attributes : Bool);  // flags: 258 
function printabstarget( optional  fromItems : Bool,  optional  attributes : Bool);  // flags: 258 
function printabs_f( optional  tag : CName,  optional  fromItems : Bool,  optional  attributes : Bool,  optional  act : CActor);  // flags: 2 
function damageitem( slot : EEquipmentSlots,  perc : Float);  // flags: 258 
function damageitem_g( slot : EEquipmentSlots,  perc : Float);  // flags: 2 
function alert();  // flags: 258 
function muttest( optional  mutPotName : CName,  optional  slot : EEquipmentSlots);  // flags: 258 
function cage();  // flags: 258 
function snowball( optional  actorTag : CName);  // flags: 258 
function addtelemetrytag( tag : String);  // flags: 258 
function remtelemetrytag( tag : String);  // flags: 258 
function giveset( val : CName);  // flags: 258 
function shieldApp( tag : CName);  // flags: 258 
function SwitchAttach( attach : Bool,  parentEntityTag : CName,  childEntityTag : CName,  optional  attachSlot : CName);  // flags: 258 
function slide();  // flags: 258 
function climbJump();  // flags: 258 
function savefix( lockedNr : Int32);  // flags: 258 
function hl( x : Float,  y : Float,  w : Float,  h : Float);  // flags: 258 
function imlerithSecondStage( tag : CName);  // flags: 258 
function changeStyle();  // flags: 258 
function addHair1();  // flags: 258 
function addHair2();  // flags: 258 
function addHair3();  // flags: 258 
function addHairDLC1();  // flags: 258 
function addHairDLC2();  // flags: 258 
function addHairDLC3();  // flags: 258 
function addLightArmors();  // flags: 258 
function addMediumArmors();  // flags: 258 
function addHeavyArmors();  // flags: 258 
function addBearArmors();  // flags: 258 
function addLynxArmors();  // flags: 258 
function addGryphonArmors();  // flags: 258 
function addViperArmors();  // flags: 258 
function addRelicArmors();  // flags: 258 
function addAllArmors();  // flags: 258 
function addCasualArmors();  // flags: 258 
function addAllGloves();  // flags: 258 
function addAllBoots();  // flags: 258 
function addAllPants();  // flags: 258 
function addHorseArmors();  // flags: 258 
function AddAllThMaps();  // flags: 258 
function addAllSkills( val : Int32,  optional  level : Int32);  // flags: 258 
function secretgwint( optional  deckIndex : Int32);  // flags: 258 
function setAIDeck( deckName : CName);  // flags: 258 
function secretgwintAI();  // flags: 258 
function secretdeckbuilder();  // flags: 258 
function SoundEvent( soundName : String);  // flags: 258 
function resetDecks();  // flags: 258 
function winGwint( result : Bool);  // flags: 258 
function unlockDeck( val : Int32);  // flags: 258 
function addCard( cardID : Int32);  // flags: 258 
function givecards( val : CName);  // flags: 258 
function specials( optional  off : Bool);  // flags: 258 
function remactlocks( optional  action : EInputActionBlock,  optional  all : Bool);  // flags: 258 
function testhorse( level : Int32);  // flags: 258 
function additemhorse( itemName : CName,  cnt : Int32);  // flags: 258 
function printhorse();  // flags: 258 
function testBeast();  // flags: 258 
function scaleBubble( magicBubbleTag : CName,  desiredScale : Float,  scaleDuration : Float);  // flags: 258 
function eq_silver( sword_id : Int32,  optional  dir : CName);  // flags: 258 
function eq_steel( sword_id : Int32,  optional  dir : CName);  // flags: 258 
function eq_steel_unique( sword_id : Int32,  optional  dir : CName);  // flags: 258 
function eq_silver_unique( sword_id : Int32,  optional  dir : CName);  // flags: 258 
function activateAllGlossaryCharacters();  // flags: 258 
function activateAllGlossaryEncyclopedia();  // flags: 258 
function activateAllGlossaryStorybook();  // flags: 258 
function activateAllGlossaryBeastiary();  // flags: 258 
function testJournal();  // flags: 258 
function openHorseInv();  // flags: 258 
function dealDamageToBoat( dmg : Float,  index : Int32,  optional  globalHitPos : Vector);  // flags: 258 
function EmitReactionEvent( reactionEventName : CName,  lifetime : Float,  distance : Float,  interval : Float,  recipients : Int32);  // flags: 258 
function test61257();  // flags: 258 
function SetRunType( runType : Int32);  // flags: 258 
function testunlockachievement( achievementName : CName);  // flags: 258 
function sysmsg( optional  hide : Bool);  // flags: 258 
function sysmsgtst();  // flags: 258 
function addgwintcards();  // flags: 258 
function testnotify();  // flags: 258 
function testsaveind();  // flags: 258 
function questProgress();  // flags: 258 
function ResetManualCamera();  // flags: 258 
function activateGate( tag : CName);  // flags: 258 
function statstolog();  // flags: 258 
function showSafeRect( value : Bool);  // flags: 258 
function ClearAndStopCanFindPathEnemiesListUpdate( flag : Bool);  // flags: 258 
function kinecton();  // flags: 258 
function kinectoff();  // flags: 258 
function testgameprogress( perc : Float);  // flags: 258 
function makeitrain();  // flags: 258 
function stoprain();  // flags: 258 
function witchcraft();  // flags: 258 
function vloot( listAllItemDefs : Bool);  // flags: 258 
function vrecycling( listAllItemDefs : Bool);  // flags: 258 
function vcrafting( listAllItemDefs : Bool);  // flags: 258 
function gather( optional  range : Float);  // flags: 258 
function hackknockdown();  // flags: 258 
function zzz();  // flags: 258 
function InvertCamera( invert : Bool);  // flags: 258 
function balanceadapt();  // flags: 258 
function SSPrintJsonObjectsMemoryUsage();  // flags: 258 
function ForceHolster( optional  instant : Bool);  // flags: 258 
function StartRumble( lowFreq : Float,  highFreq : Float,  time : Float);  // flags: 258 
function StopRumble();  // flags: 258 
function PrintRumble();  // flags: 258 
function StopSpecificRumble( lowFreq : Float,  highFreq : Float);  // flags: 258 
function PrintIsSpecificRumbleActive( lowFreq : Float,  highFreq : Float);  // flags: 258 
function PrintContext();  // flags: 258 
function ToggleCameraAutoRotation();  // flags: 258 
function inputTreshold( _inputTreshold : Float);  // flags: 258 
function horseCamMode( mode : Int32);  // flags: 258 
function gwentTournamentCards( optional  val : Int32);  // flags: 258 
function horsePanic();  // flags: 258 
function showMouse( value : Bool);  // flags: 258 
function primarec();  // flags: 258 
function primabooks();  // flags: 258 
function testMessage();  // flags: 258 
function printtags( actorTag : CName);  // flags: 258 
function testLoc( key : String);  // flags: 258 
function testRescale();  // flags: 258 
function testGamma();  // flags: 258 
function spawnt( template_nbr : Int32,  optional  distance : Float);  // flags: 258 
function spawnt_inquistion( template_nbr : Int32,  optional  distance : Float);  // flags: 2 
function spawnt_nilfgard( template_nbr : Int32,  optional  distance : Float);  // flags: 2 
function spawnt_nml_t1( template_nbr : Int32,  optional  distance : Float);  // flags: 2 
function spawnt_nml_t2( template_nbr : Int32,  optional  distance : Float);  // flags: 2 
function spawnt_novigrad( template_nbr : Int32,  optional  distance : Float);  // flags: 2 
function spawnt_redania( template_nbr : Int32,  optional  distance : Float);  // flags: 2 
function spawnt_skellige_t1( template_nbr : Int32,  optional  distance : Float);  // flags: 2 
function spawnt_skellige_t2( template_nbr : Int32,  optional  distance : Float);  // flags: 2 
function spawnt_wild_hunt( template_nbr : Int32,  optional  distance : Float);  // flags: 2 
function spawnt_internal( nam : String,  optional  quantity : Int32,  optional  distance : Float);  // flags: 2 
function AreaNameToType( lName : String) : EAreaName;  // flags: 2 
function AreaTypeToName( type : EAreaName) : String;  // flags: 2 
function ZoneNameToType( lName : CName) : EZoneName;  // flags: 2 
function ZoneTypeToName( type : EZoneName) : CName;  // flags: 2 
function MinDiffMode( a : EDifficultyMode,  b : EDifficultyMode) : EDifficultyMode;  // flags: 2 
function GetDifficultyTagForMode( d : EDifficultyMode) : CName;  // flags: 2 
function ModifyHitSeverityReaction( target : CActor,  type : EHitReactionType) : EHitReactionType;  // flags: 2 
function IsBasicAttack( attackName : CName) : Bool;  // flags: 2 
function MonsterCategoryIsMonster( type : EMonsterCategory) : Bool;  // flags: 2 
function MonsterCategoryToAttackPowerBonus( type : EMonsterCategory) : CName;  // flags: 2 
function MonsterCategoryToCriticalChanceBonus( type : EMonsterCategory) : CName;  // flags: 2 
function MonsterCategoryToCriticalDamageBonus( type : EMonsterCategory) : CName;  // flags: 2 
function MonsterCategoryToResistReduction( type : EMonsterCategory) : CName;  // flags: 2 
function CalculateAttributeValue( att : SAbilityAttributeValue,  optional  disallowNegativeMult : Bool) : Float;  // flags: 2 
function GetAttributeRandomizedValue( min : SAbilityAttributeValue,  max : SAbilityAttributeValue) : SAbilityAttributeValue;  // flags: 2 
function StaminaActionTypeToName( action : EStaminaActionType) : CName;  // flags: 2 
function StatisticEnumToName( s : EStatistic) : CName;  // flags: 2 
function StatisticNameToEnum( f : CName) : EStatistic;  // flags: 2 
function GetBookReadFactName( bookName : CName) : String;  // flags: 2 
function AchievementNameToEnum( n : CName) : EAchievement;  // flags: 2 
function AchievementEnumToName( a : EAchievement) : CName;  // flags: 2 
function GlobalRegisterReactionSceneGroups();  // flags: 2 
function GlobalRegisterReactionSceneGroups_Prologue( reactionManager : CBehTreeReactionManager);  // flags: 2 
function GlobalRegisterReactionSceneGroups_Skellige( reactionManager : CBehTreeReactionManager);  // flags: 2 
function GlobalRegisterReactionSceneGroups_Nml( reactionManager : CBehTreeReactionManager);  // flags: 2 
function GlobalRegisterReactionSceneGroups_Novigrad( reactionManager : CBehTreeReactionManager);  // flags: 2 
function TestCustomAction( optional  actorTag : CName);  // flags: 258 
function SetLightSignsReaction( value : Bool,  tag : CName);  // flags: 4098 
function SetLights( value : Bool,  tag : CName);  // flags: 4098 
function execSetLight( value : Bool,  tag : CName);  // flags: 258 
function execIsLightOn( tag : CName) : Bool;  // flags: 258 
function execSetInteractive( value : Bool,  tag : CName);  // flags: 258 
function blockbeard( optional  block : Bool);  // flags: 258 
function settattoo( hasTattoo : Bool);  // flags: 258 
function shave();  // flags: 258 
function setbeard( maxBeard : Bool,  optional  stage : Int32);  // flags: 258 
function setcustomhead( head : CName,  optional  barberSystem : Bool);  // flags: 258 
function removecustomhead( optional  barberSystem : Bool);  // flags: 258 
function mimictest( optional  animName : CName);  // flags: 258 
function headname();  // flags: 258 
function slotTest();  // flags: 258 
function PrintItem( inv : CInventoryComponent,  weaponItemId : SItemUniqueId);  // flags: 2 
function PlayItemEquipSound( itemCategory : CName);  // flags: 2 
function PlayItemUnequipSound( itemCategory : CName);  // flags: 2 
function ApplyAppearance( entitiesTag : CName,  appearanceName : CName);  // flags: 4098 
import function Log( text : String);  // flags: 11 
function XDPPrintUserStats( statisticName : String);  // flags: 258 
function XDPPrintUserAchievement( achievementName : String);  // flags: 258 
function IsLightOn( tag : CName) : Bool;  // flags: 4098 
function CameraShakeLooped( strength : Float,  loopTime : Float,  animName : CName);  // flags: 4098 
function GCameraShake( strength : Float,  optional  testDistance : Bool,  optional  shakeEpicenter : Vector,  optional  maxDistance : Float,  optional  looping : Bool,  optional  animName : CName,  optional  speed : Float);  // flags: 2 
function ForceGraphicalLOD( lodLevel : Int32);  // flags: 258 
function ApplyOil( oilName : CName,  onSteelSword : Bool);  // flags: 4098 
function NewGamePlus( flag : Bool);  // flags: 258 
function ForceCombatMode( flag : Bool);  // flags: 258 
function CreateReactionEvent( tag : CName,  eventName : CName,  lifetime : Float,  broadcastInterval : Float);  // flags: 258 
import function SetPhysicalEventOnCollision( triggerObject : CComponent,  optional  receiverObject : CObject,  optional  onEventName : CName) : Bool;  // flags: 11 
import function SetPhysicalEventOnTriggerFocusFound( triggerObject : CComponent,  optional  receiverObject : CObject,  optional  onEventName : CName) : Bool;  // flags: 11 
import function SetPhysicalEventOnTriggerFocusLost( triggerObject : CComponent,  optional  receiverObject : CObject,  optional  onEventName : CName) : Bool;  // flags: 11 
import function PhysxDebugger( host : String) : Bool;  // flags: 11 
import function GetMeshSoundTypeIdentification( component : CComponent) : CName;  // flags: 11 
import function GetMeshSoundSizeIdentification( component : CComponent) : CName;  // flags: 11 
function Rand();  // flags: 3 
import function RandRange( max : Int32,  optional  min : Int32) : Int32;  // flags: 11 
import function RandF() : Float;  // flags: 11 
import function RandRangeF( max : Float,  optional  min : Float) : Float;  // flags: 11 
import function RandNoiseF( seed : Int32,  max : Float,  optional  min : Float) : Float;  // flags: 11 
import function RandDifferent( lastValue : Int32,  optional  range : Int32) : Int32;  // flags: 11 
import function Abs( a : Int32) : Int32;  // flags: 11 
import function Clamp( v : Int32,  min : Int32,  max : Int32) : Int32;  // flags: 11 
import function Deg2Rad( deg : Float) : Float;  // flags: 11 
import function Rad2Deg( rad : Float) : Float;  // flags: 11 
import function AbsF( a : Float) : Float;  // flags: 11 
import function SinF( a : Float) : Float;  // flags: 11 
import function AsinF( a : Float) : Float;  // flags: 11 
import function CosF( a : Float) : Float;  // flags: 11 
import function AcosF( a : Float) : Float;  // flags: 11 
import function TanF( a : Float) : Float;  // flags: 11 
import function AtanF( a : Float,  b : Float) : Float;  // flags: 11 
import function ExpF( a : Float) : Float;  // flags: 11 
import function PowF( a : Float,  x : Float) : Float;  // flags: 11 
import function LogF( a : Float) : Float;  // flags: 11 
import function SqrtF( a : Float) : Float;  // flags: 11 
import function SqrF( a : Float) : Float;  // flags: 11 
import function CalcSeed( object : IScriptable) : Int32;  // flags: 11 
import function MinF( a : Float,  b : Float) : Float;  // flags: 11 
import function MaxF( a : Float,  b : Float) : Float;  // flags: 11 
import function ClampF( v : Float,  min : Float,  max : Float) : Float;  // flags: 11 
import function LerpF( alpha : Float,  a : Float,  b : Float,  optional  clamp : Bool) : Float;  // flags: 11 
import function CeilF( a : Float) : Int32;  // flags: 11 
function RestoreHorseManager() : Bool;  // flags: 258 
import function FloorF( a : Float) : Int32;  // flags: 11 
import function RoundF( a : Float) : Int32;  // flags: 11 
function RoundFEx();  // flags: 3 
import function ReinterpretIntAsFloat( a : Int32) : Float;  // flags: 11 
import function AngleNormalize( a : Float) : Float;  // flags: 11 
import function AngleDistance( target : Float,  current : Float) : Float;  // flags: 11 
import function AngleApproach( target : Float,  cur : Float,  step : Float) : Float;  // flags: 11 
import function VecDot2D( a : Vector,  b : Vector) : Float;  // flags: 11 
import function VecDot( a : Vector,  b : Vector) : Float;  // flags: 11 
import function VecCross( a : Vector,  b : Vector) : Vector;  // flags: 11 
import function VecLength2D( a : Vector) : Float;  // flags: 11 
import function VecLength( a : Vector) : Float;  // flags: 11 
import function VecLengthSquared( a : Vector) : Float;  // flags: 11 
import function VecNormalize2D( a : Vector) : Vector;  // flags: 11 
import function VecNormalize( a : Vector) : Vector;  // flags: 11 
import function VecRand2D() : Vector;  // flags: 11 
import function VecRand() : Vector;  // flags: 11 
import function VecMirror( dir : Vector,  normal : Vector) : Vector;  // flags: 11 
import function VecDistance( from : Vector,  to : Vector) : Float;  // flags: 11 
import function VecDistanceSquared( from : Vector,  to : Vector) : Float;  // flags: 11 
import function VecDistance2D( from : Vector,  to : Vector) : Float;  // flags: 11 
import function VecDistanceSquared2D( from : Vector,  to : Vector) : Float;  // flags: 11 
import function VecDistanceToEdge( point : Vector,  a : Vector,  b : Vector) : Float;  // flags: 11 
import function VecNearestPointOnEdge( point : Vector,  a : Vector,  b : Vector) : Vector;  // flags: 11 
import function VecToRotation( dir : Vector) : EulerAngles;  // flags: 11 
import function VecHeading( dir : Vector) : Float;  // flags: 11 
import function VecFromHeading( heading : Float) : Vector;  // flags: 11 
import function VecTransform( m : Matrix,  point : Vector) : Vector;  // flags: 11 
import function VecTransformDir( m : Matrix,  point : Vector) : Vector;  // flags: 11 
import function VecTransformH( m : Matrix,  point : Vector) : Vector;  // flags: 11 
import function VecGetAngleBetween( from : Vector,  to : Vector) : Float;  // flags: 11 
import function VecGetAngleDegAroundAxis( dirA : Vector,  dirB : Vector,  axis : Vector) : Float;  // flags: 11 
import function VecProjectPointToPlane( p1 : Vector,  p2 : Vector,  p3 : Vector,  toProject : Vector) : Vector;  // flags: 11 
import function VecRotateAxis( vector : Vector,  axis : Vector,  angle : Float) : Vector;  // flags: 11 
function VecApproach();  // flags: 3 
import function RotX( rotation : EulerAngles) : Vector;  // flags: 11 
import function RotY( rotation : EulerAngles) : Vector;  // flags: 11 
import function RotZ( rotation : EulerAngles) : Vector;  // flags: 11 
import function RotForward( rotation : EulerAngles) : Vector;  // flags: 11 
import function RotRight( rotation : EulerAngles) : Vector;  // flags: 11 
import function RotUp( rotation : EulerAngles) : Vector;  // flags: 11 
import function RotToMatrix( rotation : EulerAngles) : Matrix;  // flags: 11 
import function RotAxes( rotation : EulerAngles,  out  foward : Vector,  out  right : Vector,  out  up : Vector);  // flags: 11 
import function RotRand( min : Float,  max : Float) : EulerAngles;  // flags: 11 
import function RotDot( a : EulerAngles,  b : EulerAngles);  // flags: 11 
import function MatrixIdentity() : Matrix;  // flags: 11 
import function MatrixBuiltTranslation( move : Vector) : Matrix;  // flags: 11 
import function MatrixBuiltRotation( rot : EulerAngles) : Matrix;  // flags: 11 
import function MatrixBuiltScale( scale : Vector) : Matrix;  // flags: 11 
import function MatrixBuiltPreScale( scale : Vector) : Matrix;  // flags: 11 
import function MatrixBuiltTRS( optional  translation : Vector,  optional  rotation : EulerAngles,  optional  scale : Vector) : Matrix;  // flags: 11 
import function MatrixBuiltRTS( optional  rotation : EulerAngles,  optional  translation : Vector,  optional  scale : Vector) : Matrix;  // flags: 11 
import function MatrixBuildFromDirectionVector( dirVec : Vector) : Matrix;  // flags: 11 
import function MatrixGetTranslation( m : Matrix) : Vector;  // flags: 11 
import function MatrixGetRotation( m : Matrix) : EulerAngles;  // flags: 11 
import function MatrixGetScale( m : Matrix) : Vector;  // flags: 11 
import function MatrixGetAxisX( m : Matrix) : Vector;  // flags: 11 
function proxy();  // flags: 258 
import function MatrixGetAxisY( m : Matrix) : Vector;  // flags: 11 
import function MatrixGetAxisZ( m : Matrix) : Vector;  // flags: 11 
import function MatrixGetDirectionVector( m : Matrix) : Vector;  // flags: 11 
import function MatrixGetInverted( m : Matrix) : Matrix;  // flags: 11 
import function SphereIntersectRay( sphere : Sphere,  orign : Vector,  direction : Vector,  out  enterPoint : Vector,  out  exitPoint : Vector) : Int32;  // flags: 11 
import function SphereIntersectEdge( sphere : Sphere,  a : Vector,  b : Vector,  out  intersectionPoint0 : Vector,  out  intersectionPoint1 : Vector) : Int32;  // flags: 11 
import function Int8ToInt( i : Int8) : Int32;  // flags: 11 
import function IntToInt8( i : Int32) : Int8;  // flags: 11 
import function IntToUint64( i : Int32) : Uint64;  // flags: 11 
import function Uint64ToInt( i : Uint64) : Int32;  // flags: 11 
import function StrLen( str : String) : Int32;  // flags: 11 
import function StrCmp( str : String,  with : String,  optional  length : Int32,  optional  noCase : Bool) : Int32;  // flags: 11 
import function StrFindFirst( str : String,  match : String) : Int32;  // flags: 11 
import function StrFindLast( str : String,  match : String) : Int32;  // flags: 11 
import function StrSplitFirst( str : String,  divider : String,  out  left : String,  out  right : String) : Bool;  // flags: 11 
import function StrSplitLast( str : String,  divider : String,  out  left : String,  out  right : String) : Bool;  // flags: 11 
import function StrReplace( str : String,  match : String,  with : String) : String;  // flags: 11 
import function StrReplaceAll( str : String,  match : String,  with : String) : String;  // flags: 11 
import function StrMid( str : String,  first : Int32,  optional  length : Int32) : String;  // flags: 11 
import function StrLeft( str : String,  length : Int32) : String;  // flags: 11 
import function StrRight( str : String,  length : Int32) : String;  // flags: 11 
function appearance( app : CName);  // flags: 258 
import function StrBeforeFirst( str : String,  match : String) : String;  // flags: 11 
import function StrBeforeLast( str : String,  match : String) : String;  // flags: 11 
import function StrAfterFirst( str : String,  match : String) : String;  // flags: 11 
import function StrAfterLast( str : String,  match : String) : String;  // flags: 11 
import function StrBeginsWith( str : String,  match : String) : Bool;  // flags: 11 
import function StrEndsWith( str : String,  match : String) : Bool;  // flags: 11 
import function StrUpper( str : String) : String;  // flags: 11 
import function StrLower( str : String) : String;  // flags: 11 
import function StrChar( i : Int32) : String;  // flags: 11 
import function NameToString( n : CName) : String;  // flags: 11 
import function FloatToString( value : Float) : String;  // flags: 11 
import function FloatToStringPrec( value : Float,  precision : Int32) : String;  // flags: 11 
import function IntToString( value : Int32) : String;  // flags: 11 
import function StringToInt( value : String,  optional  defValue : Int32) : Int32;  // flags: 11 
import function StringToFloat( value : String,  optional  defValue : Float) : Float;  // flags: 11 
import function StrUpperUTF( str : String) : String;  // flags: 11 
import function StrLowerUTF( str : String) : String;  // flags: 11 
import function EngineTimeFromFloat( seconds : Float) : EngineTime;  // flags: 11 
import function EngineTimeToFloat( time : EngineTime) : Float;  // flags: 11 
function IsEffectNameValid( effectName : CName) : Bool;  // flags: 2 
import function EngineTimeToString( time : EngineTime) : String;  // flags: 11 
import latent function Sleep( time : Float);  // flags: 75 
import latent function SleepOneFrame();  // flags: 75 
import latent function KillThread();  // flags: 75 
import function EntityHandleGet( handle : EntityHandle) : CEntity;  // flags: 11 
import function EntityHandleSet( handle : EntityHandle,  entity : CEntity);  // flags: 11 
function EntityHandleWaitGet();  // flags: 3 
import function PersistentRefSetNode( out  outPersistentRef : PersistentRef,  node : CNode);  // flags: 11 
import function PersistentRefSetOrientation( out  outPersistentRef : PersistentRef,  position : Vector,  rotation : EulerAngles);  // flags: 11 
import function PersistentRefGetEntity( out  persistentRef : PersistentRef) : CEntity;  // flags: 11 
import function PersistentRefGetWorldPosition( out  persistentRef : PersistentRef) : Vector;  // flags: 11 
import function PersistentRefGetWorldRotation( out  persistentRef : PersistentRef) : EulerAngles;  // flags: 11 
import function PersistentRefGetWorldOrientation( out  persistentRef : PersistentRef,  out  outPosition : Vector,  out  outRotation : EulerAngles);  // flags: 11 
import function ResetAnimatedComponentSyncSettings( out  settings : SAnimatedComponentSyncSettings);  // flags: 11 
import function ResetAnimatedComponentSlotAnimationSettings( out  settings : SAnimatedComponentSlotAnimationSettings);  // flags: 11 
import function GetAnimNameFromEventAnimInfo( eventAnimInfo : SAnimationEventAnimInfo) : CName;  // flags: 11 
import function GetLocalAnimTimeFromEventAnimInfo( eventAnimInfo : SAnimationEventAnimInfo) : Float;  // flags: 11 
import function GetEventEndsAtTimeFromEventAnimInfo( eventAnimInfo : SAnimationEventAnimInfo) : Float;  // flags: 11 
import function GetEventDurationFromEventAnimInfo( eventAnimInfo : SAnimationEventAnimInfo) : Float;  // flags: 11 
import function ResetAnimatedSlideSettings( out  settings : SAnimatedSlideSettings);  // flags: 11 
import function ResetActionMatchToSettings( out  settings : SActionMatchToSettings);  // flags: 11 
import function SetActionMatchToTarget_StaticPoint( out  target : SActionMatchToTarget,  point : Vector,  yaw : Float,  position : Bool,  rotation : Bool);  // flags: 11 
function OpenDebugWindows();  // flags: 3 
import function LogChannel( channel : CName,  text : String);  // flags: 11 
import function Trace();  // flags: 11 
import function DebugBreak();  // flags: 11 
import latent function LoadResourceAsync( resource : String,  optional  isDepotPath : Bool) : CResource;  // flags: 75 
import function LoadResource( resource : String,  optional  isDepotPath : Bool) : CResource;  // flags: 11 
import function DumpClassHierarchy( baseClass : CName) : Bool;  // flags: 11 
import function Uint64ToString( i : Uint64) : String;  // flags: 11 
import function ArraySortInts( out  arrayToSort : array<Int32>);  // flags: 11 
import function ArraySortFloats( out  arrayToSort : array<Float>);  // flags: 11 
import function ArraySortStrings( out  arrayToSort : array<String>);  // flags: 11 
import function EnumGetMax( type : CName) : Int32;  // flags: 11 
import function EnumGetMin( type : CName) : Int32;  // flags: 11 
import function GameTimeSeconds( time : GameTime) : Int32;  // flags: 11 
import function GameTimeMinutes( time : GameTime) : Int32;  // flags: 11 
import function GameTimeHours( time : GameTime) : Int32;  // flags: 11 
import function GameTimeDays( time : GameTime) : Int32;  // flags: 11 
import function GameTimeToString( time : GameTime) : String;  // flags: 11 
import function GameTimeToSeconds( time : GameTime) : Int32;  // flags: 11 
import function GameTimeCreate( optional  days : Int32,  optional  hours : Int32,  optional  minutes : Int32,  optional  seconds : Int32) : GameTime;  // flags: 11 
import function ScheduleTimeEvent( context : IScriptable,  functionWithParams : String,  date : GameTime,  optional  relative : Bool,  optional  period : GameTime,  optional  limit : Int32);  // flags: 11 
import function GameTimeIntervalContainsTime( time : GameTime,  timeInterval : GameTimeInterval,  optional  ignoreDays : Bool) : Bool;  // flags: 11 
import function ActivateEnvironmentDefinition( environmentDefinition : CEnvironmentDefinition,  priority : Int32,  blendFactor : Float,  blendInTime : Float) : Int32;  // flags: 11 
import function DeactivateEnvironment( environmentID : Int32,  blendOutTime : Float);  // flags: 11 
import function ActivateQuestEnvironmentDefinition( environmentDefinition : CEnvironmentDefinition,  priority : Int32,  blendFactor : Float,  blendTime : Float);  // flags: 11 
import function RadialBlurSetup( blurSourcePos : Vector,  blurAmount : Float,  sineWaveAmount : Float,  sineWaveSpeed : Float,  sineWaveFreq : Float);  // flags: 11 
import function RadialBlurDisable();  // flags: 11 
import function FullscreenBlurSetup( intensity : Float);  // flags: 11 
import function ForceFakeEnvTime( hour : Float);  // flags: 11 
import function DisableFakeEnvTime();  // flags: 11 
import function SetUnderWaterBrightness( val : Float);  // flags: 11 
import function GetRainStrength() : Float;  // flags: 11 
import function GetSnowStrength() : Float;  // flags: 11 
import function IsSkyClear() : Bool;  // flags: 11 
import function GetWeatherConditionName() : CName;  // flags: 11 
import function RequestWeatherChangeTo( weatherName : CName,  blendTime : Float) : Bool;  // flags: 11 
import function RequestRandomWeatherChange( blendTime : Float) : Bool;  // flags: 11 
import function FindClosestNode( position : Vector,  nodes : array<CNode>) : CNode;  // flags: 11 
import function SortNodesByDistance( position : Vector,  out  nodes : array<CNode>);  // flags: 11 
import function DumpCommunityAgentsCPP();  // flags: 11 
import function FactsAdd( ID : String,  optional  value : Int32,  optional  validFor : Int32);  // flags: 11 
import function FactsQuerySum( ID : String) : Int32;  // flags: 11 
import function FactsQuerySumSince( ID : String,  sinceTime : EngineTime) : Int32;  // flags: 11 
import function FactsQueryLatestValue( ID : String) : Int32;  // flags: 11 
import function FactsDoesExist( ID : String) : Bool;  // flags: 11 
import function FactsRemove( ID : String) : Bool;  // flags: 11 
import function FindGameplayEntitiesInRange( out  entities : array<CGameplayEntity>,  center : CNode,  range : Float,  maxResults : Int32,  optional  tag : CName,  optional  queryFlags : Int32,  optional  target : CGameplayEntity,  optional  className : CName);  // flags: 11 
import function FindGameplayEntitiesInSphere( out  entities : array<CGameplayEntity>,  point : Vector,  range : Float,  maxResults : Int32,  optional  tag : CName,  optional  queryFlags : Int32,  optional  target : CGameplayEntity,  optional  className : CName);  // flags: 11 
import function FindGameplayEntitiesInCylinder( out  entities : array<CGameplayEntity>,  point : Vector,  range : Float,  height : Float,  maxResults : Int32,  optional  tag : CName,  optional  queryFlags : Int32,  optional  target : CGameplayEntity,  optional  className : CName);  // flags: 11 
import function FindGameplayEntitiesInCone( out  entities : array<CGameplayEntity>,  point : Vector,  coneDir : Float,  coneAngle : Float,  range : Float,  maxResults : Int32,  optional  tag : CName,  optional  queryFlags : Int32,  optional  target : CGameplayEntity,  optional  className : CName);  // flags: 11 
import function FindGameplayEntitiesInBox( out  entities : array<CGameplayEntity>,  point : Vector,  boxLS : Box,  maxResults : Int32,  optional  tag : CName,  optional  queryFlags : Int32,  optional  target : CGameplayEntity,  optional  className : CName);  // flags: 11 
import function FindGameplayEntitiesCloseToPoint( out  entities : array<CGameplayEntity>,  point : Vector,  range : Float,  maxResults : Int32,  optional  tag : CName,  optional  queryFlags : Int32,  optional  target : CGameplayEntity,  optional  className : CName);  // flags: 11 
import function FindActorsAtLine( startPos : Vector,  endPos : Vector,  radius : Float,  out  result : array<SRaycastHitResult>,  optional  collisionGroupsNames : array<CName>);  // flags: 11 
function IsItemWeapon();  // flags: 3 
function SetLootChancesScale();  // flags: 3 
function GetLootChancesScale();  // flags: 3 
function UniqueIdToString();  // flags: 3 
function NameToUniqueId();  // flags: 3 
function SetCommunitySpawnRadius();  // flags: 3 
function SetCommunityDespawnRadius();  // flags: 3 
function SetCommunityRadius();  // flags: 3 
import function DebugBehTreeStart( optional  actor : CActor);  // flags: 11 
import function DebugBehTreeStopAll();  // flags: 11 
import function GetLocStringById( stringId : Int32) : String;  // flags: 11 
import function GetLocStringByKey( stringKey : String) : String;  // flags: 11 
import function GetLocStringByKeyExt( stringKey : String) : String;  // flags: 11 
import function FixStringForFont( originalString : String) : String;  // flags: 11 
function IsPointSeenByPlayer();  // flags: 3 
function IsPointFree();  // flags: 3 
function GetRandomReachablePoint();  // flags: 3 
function GetRandomReachablePointWithinArea();  // flags: 3 
function GetFreeReachablePoint();  // flags: 3 
import function ClearAPID( out  apID : SActionPointId);  // flags: 11 
import function IsAPValid( apID : SActionPointId) : Bool;  // flags: 11 
import function Boids_IsLocationInSwarmLair( location : Vector) : Bool;  // flags: 11 
function attitude( tag : CName,  flag : Bool);  // flags: 258 
import function Boids_CastFireInCone( location : Vector,  coneDir : Float,  coneAngle : Float,  range : Float);  // flags: 11 
import function ForceCleanupAllEncounters();  // flags: 11 
import function CPPForceActorLOD( enable : Bool,  optional  LODIndex : Int32);  // flags: 11 
import function EnableCatViewFx( optional  fadeIn : Float);  // flags: 11 
import function DisableCatViewFx( optional  fadeout : Float);  // flags: 11 
import function SetPositionCatViewFx( position : Vector,  optional  autoPositioning : Bool);  // flags: 11 
import function SetTintColorsCatViewFx( tintNear : Vector,  tintFar : Vector,  optional  desaturaion : Float);  // flags: 11 
import function SetBrightnessCatViewFx( optional  brightStrength : Float);  // flags: 11 
import function SetViewRangeCatViewFx( optional  viewRanger : Float);  // flags: 11 
import function SetHightlightCatViewFx( color : Vector,  optional  hightlightInterior : Float,  optional  blurSize : Float);  // flags: 11 
import function SetFogDensityCatViewFx( density : Float,  optional  startOffset : Float);  // flags: 11 
import function EnableDrunkFx( optional  fadeIn : Float);  // flags: 11 
import function DisableDrunkFx( optional  fadeout : Float);  // flags: 11 
import function ScaleDrunkFx( scale : Float);  // flags: 11 
import function PROFILER_Init( bufforSize : Int32);  // flags: 11 
import function PROFILER_InitEx( bufforSize : Int32,  bufforSignalsSize : Int32);  // flags: 11 
import function PROFILER_ScriptEnable();  // flags: 11 
import function PROFILER_ScriptDisable();  // flags: 11 
import function PROFILER_Start();  // flags: 11 
import function PROFILER_Stop();  // flags: 11 
import function PROFILER_Store( profileName : String);  // flags: 11 
import function PROFILER_StoreDef();  // flags: 11 
import function PROFILER_StoreInstrFuncList();  // flags: 11 
import function PROFILER_StartCatchBreakpoint();  // flags: 11 
function GameplayFactsAdd( factName : String,  optional  value : Int32,  optional  realtimeSecsValidFor : Int32);  // flags: 2 
import function PROFILER_StopCatchBreakpoint();  // flags: 11 
function GameplayFactsSet( factName : String,  value : Int32);  // flags: 2 
import function PROFILER_SetTimeBreakpoint( instrFuncName : String,  time : Float,  stopOnce : Bool);  // flags: 11 
function GameplayFactsRemove( factName : String);  // flags: 2 
import function PROFILER_SetHitCountBreakpoint( instrFuncName : String,  counter : Int32);  // flags: 11 
import function PROFILER_DisableTimeBreakpoint( instrFuncName : String);  // flags: 11 
function GameplayFactsQuerySum( factName : String) : Int32;  // flags: 2 
import function PROFILER_DisableHitCountBreakpoint( instrFuncName : String);  // flags: 11 
import function FlyingGroupId_Compare( groupIdA : CFlyingGroupId,  groupIdB : CFlyingGroupId) : Bool;  // flags: 11 
import function FlyingGroupId_IsValid( groupId : CFlyingGroupId) : Bool;  // flags: 11 
function GetGame();  // flags: 3 
import function LoadCSV( filePath : String) : C2dArray;  // flags: 11 
import function t_Identity( a : EngineQsTransform);  // flags: 11 
import function t_SetIdentity() : EngineQsTransform;  // flags: 11 
import function t_BuiltTrans( move : Vector) : EngineQsTransform;  // flags: 11 
import function t_BuiltRotQuat( quat : Vector) : EngineQsTransform;  // flags: 11 
import function t_BuiltRotAngles( x : Float,  y : Float,  z : Float) : EngineQsTransform;  // flags: 11 
import function t_BuiltScale( scale : Vector) : EngineQsTransform;  // flags: 11 
import function t_Trans( a : EngineQsTransform,  move : Vector);  // flags: 11 
import function t_RotQuat( a : EngineQsTransform,  quat : Vector);  // flags: 11 
import function t_Scale( a : EngineQsTransform,  scale : Vector);  // flags: 11 
import function t_SetTrans( a : EngineQsTransform,  move : Vector) : EngineQsTransform;  // flags: 11 
import function t_SetRotQuat( a : EngineQsTransform,  quat : Vector) : EngineQsTransform;  // flags: 11 
import function t_SetScale( a : EngineQsTransform,  scale : Vector) : EngineQsTransform;  // flags: 11 
import function t_GetTrans( a : EngineQsTransform) : Vector;  // flags: 11 
import function t_GetRotQuat( a : EngineQsTransform) : Vector;  // flags: 11 
import function t_GetScale( a : EngineQsTransform) : Vector;  // flags: 11 
import function t_SetMul( a : EngineQsTransform,  b : EngineQsTransform) : EngineQsTransform;  // flags: 11 
import function t_SetMulMulInv( a : EngineQsTransform,  b : EngineQsTransform) : EngineQsTransform;  // flags: 11 
import function t_SetMulInvMul( a : EngineQsTransform,  b : EngineQsTransform) : EngineQsTransform;  // flags: 11 
import function t_SetInterpolate( a : EngineQsTransform,  b : EngineQsTransform,  w : Float) : EngineQsTransform;  // flags: 11 
import function t_IsEqual( a : EngineQsTransform,  b : EngineQsTransform) : Bool;  // flags: 11 
import function t_SetInv( a : EngineQsTransform) : EngineQsTransform;  // flags: 11 
import function t_Inv( a : EngineQsTransform);  // flags: 11 
import function t_NormalizeQuat( a : EngineQsTransform);  // flags: 11 
import function t_BlendNormalize( a : EngineQsTransform,  w : Float);  // flags: 11 
import function t_IsOk( a : EngineQsTransform) : Bool;  // flags: 11 
import function q_SetIdentity() : Vector;  // flags: 11 
import function q_Identity( a : Vector);  // flags: 11 
import function q_SetInv( a : Vector) : Vector;  // flags: 11 
import function q_Inv( a : Vector);  // flags: 11 
import function q_SetNormalize( a : Vector) : Vector;  // flags: 11 
import function q_Normalize( a : Vector);  // flags: 11 
import function q_SetMul( a : Vector,  b : Vector) : Vector;  // flags: 11 
import function q_SetMulMulInv( a : Vector,  b : Vector) : Vector;  // flags: 11 
import function q_SetMulInvMul( a : Vector,  b : Vector) : Vector;  // flags: 11 
import function q_SetShortestRotation( from : Vector,  to : Vector) : Vector;  // flags: 11 
import function q_SetShortestRotationDamped( from : Vector,  to : Vector,  w : Float) : Vector;  // flags: 11 
import function q_SetAxisAngle( axis : Vector,  angle : Float) : Vector;  // flags: 11 
import function q_RemoveAxisComponent( quat : Vector,  axis : Vector);  // flags: 11 
import function q_DecomposeAxis( quat : Vector,  axis : Vector) : Float;  // flags: 11 
import function q_SetSlerp( a : Vector,  b : Vector,  w : Float) : Vector;  // flags: 11 
function EnableLog( enable : Bool);  // flags: 258 
import function q_GetAngle( a : Vector) : Float;  // flags: 11 
import function q_GetAxis( a : Vector) : Vector;  // flags: 11 
import function v_SetInterpolate( a : Vector,  b : Vector,  w : Float) : Vector;  // flags: 11 
import function v_SetRotatedDir( quat : Vector,  dir : Vector) : Vector;  // flags: 11 
import function v_SetTransformedPos( trans : EngineQsTransform,  vec : Vector) : Vector;  // flags: 11 
import function v_ZeroElement( a : Vector,  i : Int32);  // flags: 11 
import function PreloadEffectForEntityTemplate( entityTemplate : CEntityTemplate,  effectName : CName) : Bool;  // flags: 11 
import function PreloadEffectForAnimationForEntityTemplate( entityTemplate : CEntityTemplate,  animName : CName) : Bool;  // flags: 11 
import function FlashArgBool( value : Bool) : SFlashArg;  // flags: 11 
import function FlashArgInt( value : Int32) : SFlashArg;  // flags: 11 
import function FlashArgUInt( value : Int32) : SFlashArg;  // flags: 11 
import function FlashArgNumber( value : Float) : SFlashArg;  // flags: 11 
import function FlashArgString( value : String) : SFlashArg;  // flags: 11 
import function NameToFlashUInt( value : CName) : Int32;  // flags: 11 
import function ItemToFlashUInt( value : SItemUniqueId) : Int32;  // flags: 11 
function EnablePCMode( flag : Bool);  // flags: 258 
function HideHorse();  // flags: 258 
function KillHorse();  // flags: 258 
function PerformCounter( flag : Bool);  // flags: 258 
function Ragdoll( tag : CName);  // flags: 258 
function OpenRift( tag : CName);  // flags: 258 
function CloseRift( tag : CName);  // flags: 258 
function EnableSnapToNavMesh( source : CName,  enable : Bool);  // flags: 258 
function SetTattoo( player : CStoryScenePlayer,  hasTattoo : Bool);  // flags: 2050 
function SetCustomHead( player : CStoryScenePlayer,  head : CName,  barberSystem : Bool);  // flags: 2050 
function RemoveCustomHead( player : CStoryScenePlayer,  barberSystem : Bool);  // flags: 2050 
function StatNameToEnum( n : CName) : EBaseCharacterStats;  // flags: 2 
function StatEnumToName( s : EBaseCharacterStats) : CName;  // flags: 2 
function ResistStatPointNameToEnum( n : CName) : ECharacterDefenseStats;  // flags: 2 
function ResistStatPointEnumToName( s : ECharacterDefenseStats) : CName;  // flags: 2 
function ResistStatPercentNameToEnum( n : CName) : ECharacterDefenseStats;  // flags: 2 
function ResistStatPercentEnumToName( s : ECharacterDefenseStats) : CName;  // flags: 2 
function DisplayHudMessage( localisedStringKey : CName,  localizedStringID : Int32);  // flags: 4098 
latent function DisplayRaceStart( countDownSecondsNumber : Int32);  // flags: 4162 
function PlayItemConsumeSound( item : SItemUniqueId);  // flags: 2 
function IsExplorationOneSided( exploration : SExplorationQueryToken) : Bool;  // flags: 2 
function LogExploration( _TextS : String);  // flags: 2 
function LogExplorationError( _TextS : String);  // flags: 2 
function LogExplorationWarning( _TextS : String);  // flags: 2 
function LogExplorationToken( text : String);  // flags: 2 
function InitExplorationLogs();  // flags: 2 
function LogExplorationClimb( text : String);  // flags: 2 
function LogSlidingTerrain( text : String);  // flags: 2 
function LogCollisionTrajectory( text : String);  // flags: 2 
function PlayCamAnim( optional  i : Int32);  // flags: 258 
function LinkStringToType( str : String) : ESkillColor;  // flags: 2 
latent function OpenWorldMap( player : CStoryScenePlayer) : Bool;  // flags: 2114 
function SkillPathNameToType( n : CName) : ESkillPath;  // flags: 2 
function SkillPathTypeToName( s : ESkillPath) : CName;  // flags: 2 
function SkillPathTypeToLocalisationKey( s : ESkillPath) : CName;  // flags: 2 
function SkillSubPathToLocalisationKey( s : ESkillSubPath) : String;  // flags: 2 
function SkillSubPathNameToType( n : CName) : ESkillSubPath;  // flags: 2 
function SkillSubPathTypeToName( s : ESkillSubPath) : CName;  // flags: 2 
function IsSkillSign( skill : ESkill) : Bool;  // flags: 2 
function dbgskillslots();  // flags: 258 
function getAlchemyRecipeFromName( recipeName : CName) : SAlchemyRecipe;  // flags: 2 
function AlchemyCookedItemTypeStringToEnum( nam : String) : EAlchemyCookedItemType;  // flags: 2 
function AlchemyCookedItemTypeEnumToName( type : EAlchemyCookedItemType) : CName;  // flags: 2 
function AlchemyCookedItemTypeToLocKey( type : EAlchemyCookedItemType) : String;  // flags: 2 
function AlchemyExceptionToString( result : EAlchemyExceptions) : String;  // flags: 2 
function IsAlchemyRecipe( recipeName : CName) : Bool;  // flags: 2 
function ToggleAll( toggle : Bool);  // flags: 258 
function DumpCommunityAgents();  // flags: 258 
function getCraftingSchematicFromName( schematicName : CName) : SCraftingSchematic;  // flags: 2 
function CraftingExceptionToString( result : ECraftingException) : String;  // flags: 2 
function ParseCraftsmanTypeStringToEnum( s : String) : ECraftsmanType;  // flags: 2 
function ParseCraftsmanLevelStringToEnum( s : String) : ECraftsmanLevel;  // flags: 2 
function CraftsmanTypeToLocalizationKey( type : ECraftsmanType) : String;  // flags: 2 
function CraftsmanLevelToLocalizationKey( type : ECraftsmanLevel) : String;  // flags: 2 
function IsCraftingSchematic( recipeName : CName) : Bool;  // flags: 2 
function ForceDismember( b : Bool,  optional  chance : Int32,  optional  n : CName,  optional  e : Bool);  // flags: 258 
function ForceFinisher( b : Bool,  optional  n : CName,  optional  rightStance : Bool);  // flags: 258 
function DamageHitsEssence( damageName : CName) : Bool;  // flags: 2 
function DamageHitsVitality( damageName : CName) : Bool;  // flags: 2 
function DamageHitsMorale( damageName : CName) : Bool;  // flags: 2 
function DamageHitsStamina( damageName : CName) : Bool;  // flags: 2 
function GetBasicAttackDamageAttributeName( attackType : CName,  damageName : CName) : CName;  // flags: 2 
function IsDamageTypeNameValid( damageName : CName) : Bool;  // flags: 2 
function DamageTypeStringToName( damageStr : String) : CName;  // flags: 2 
function GetResistForDamage( damageName : CName,  isDoTDamage : Bool) : ECharacterDefenseStats;  // flags: 2 
function GetMinorShrineBuffs() : array<EEffectType>;  // flags: 2 
function ModifyHitSeverityBuff( target : CActor,  type : EEffectType) : EEffectType;  // flags: 2 
function IsKnockdownEffectType( type : EEffectType) : Bool;  // flags: 2 
function IsCriticalEffectType( type : EEffectType) : Bool;  // flags: 2 
function IsNegativeEffectType( type : EEffectType) : Bool;  // flags: 2 
function GetBuffCriticalType( buff : CBaseGameplayEffect) : ECriticalStateType;  // flags: 2 
function CriticalBuffIsDestroyedOnInterrupt( buff : CBaseGameplayEffect) : Bool;  // flags: 2 
function CriticalBuffIsHitAllowed( buff : CBaseGameplayEffect,  hit : EHitReactionType) : Bool;  // flags: 2 
function IsCriticalEffect( e : CBaseGameplayEffect) : Bool;  // flags: 2 
function IsDoTEffect( e : CBaseGameplayEffect) : Bool;  // flags: 2 
function CriticalEffectCanPlayAnimation( buff : CBaseGameplayEffect) : Bool;  // flags: 2 
function CriticalBuffDisallowPlayAnimation( buff : CBaseGameplayEffect);  // flags: 2 
function CriticalBuffUsesFullBodyAnim( buff : CBaseGameplayEffect) : Bool;  // flags: 2 
function EffectNameToType( effectName : CName,  out  type : EEffectType,  out  abilityName : CName);  // flags: 2 
function HACK_NO_MEMORY_TO_COMPILE_EffectNameToType_Part1( effectName : CName,  out  type : EEffectType,  out  abilityName : CName) : Bool;  // flags: 2 
function HACK_NO_MEMORY_TO_COMPILE_EffectNameToType_Part2( effectName : CName,  out  type : EEffectType,  out  abilityName : CName);  // flags: 2 
function EffectTypeToName( effectType : EEffectType) : CName;  // flags: 2 
function IsBuffAutoBuff( effectType : EEffectType) : Bool;  // flags: 2 
function IsBuffShrine( effectType : EEffectType) : Bool;  // flags: 2 
function EnablePlayerModeTrigger( triggerTag : CName,  enable : Bool);  // flags: 4098 
function CheckNestDestructionAchievement( optional  debugLog : Bool);  // flags: 2 
function ProcessVelen( out  entityMapPins : array<SEntityMapPinInfo>);  // flags: 2 
function testpest();  // flags: 258 
function GetLocNameFromEquipSlot( slotType : EEquipmentSlots) : CName;  // flags: 2 
function IsMultipleSlot( slot : EEquipmentSlots) : Bool;  // flags: 2 
function GetInvalidUniqueId() : SItemUniqueId;  // flags: 2 
function GetFilterTypeName( filterType : EInventoryFilterType) : CName;  // flags: 2 
function GetFilterTypeByName( filterName : CName) : EInventoryFilterType;  // flags: 2 
function GetSlotForItem( category : CName,  tags : array<CName>,  isPlayer : Bool) : EEquipmentSlots;  // flags: 2 
function GetSlotForItemByCategory( category : CName) : EEquipmentSlots;  // flags: 2 
function IsSlotSkillMutagen( slot : EEquipmentSlots) : Bool;  // flags: 2 
function IsSlotPotionMutagen( slot : EEquipmentSlots) : Bool;  // flags: 2 
function IsSlotQuickslot( slot : EEquipmentSlots) : Bool;  // flags: 2 
function IsSlotMutagen( slot : EEquipmentSlots) : Bool;  // flags: 2 
function IsSlotPotionslot( slot : EEquipmentSlots) : Bool;  // flags: 2 
function IsSlotPetardslot( slot : EEquipmentSlots) : Bool;  // flags: 2 
function GetItemActionFriendlyName( itemAction : EInventoryActionType,  optional  isEquipped : Bool) : String;  // flags: 2 
function IsBookTextureTag( tag : String) : Bool;  // flags: 2 
function GetSwitchByTag( tag : CName) : W3Switch;  // flags: 2 
function GetPlayerReputationManager() : W3Reputation;  // flags: 2 
function reptest( i : Int32);  // flags: 258 
function reputationpoints( i : Int32);  // flags: 258 
function addreppoints( i : Int32,  points : Int32);  // flags: 258 
function resetnegativepoints( i : Int32);  // flags: 258 
function bonusvalue( i : Int32);  // flags: 258 
function HideLayer( layerName : String);  // flags: 258 
function FlyingSwarm_RequestGroupStateChange( lairTag : CName,  groupState : CName,  affectAllGroups : Bool);  // flags: 2 
function FlyingSwarm_RequestCreateGroup( lairTag : CName,  boidCount : Int32,  spawnPOI : CName);  // flags: 2 
function FlyingSwarm_RequestAllGroupsInstantDespawn( lairTag : CName);  // flags: 2 
function Swarm_DisablePOIs( poiTag : CName,  disable : Bool);  // flags: 2 
function Swarm_DisableLair( lairTag : CName,  disable : Bool);  // flags: 2 
function TutorialLevelUp();  // flags: 131074 
function mainmenu();  // flags: 258 
function GetObjectFromArrayWithLabel( csArray : CScriptedFlashArray,  variableName : String,  labelName : String,  out  matchingObject : CScriptedFlashObject) : Bool;  // flags: 2 
function exePopup() : Bool;  // flags: 258 
function ExtractStringFromCSV( str : String) : String;  // flags: 2 
function testBlockPrep( block : Bool);  // flags: 258 
function testBlockMap( block : Bool);  // flags: 258 
function testBlockInventory( block : Bool);  // flags: 258 
function testBlockJournal( block : Bool);  // flags: 258 
function testBlockCharacter( block : Bool);  // flags: 258 
function testBlockGlossary( block : Bool);  // flags: 258 
function testBlockAlchemy( block : Bool);  // flags: 258 
function testBlockMeditation( block : Bool);  // flags: 258 
function testBlockMeditateAction( block : Bool);  // flags: 258 
function testBlockDismount( block : Bool);  // flags: 258 
function showCrossbowTut();  // flags: 258 
function GetBaseScreenPosition( out  screenPos : Vector,  entity : CEntity,  optional  comp : CInteractionComponent,  optional  extraZ : Float,  optional  noOppositeCamera : Bool,  optional  normalized : Bool) : Bool;  // flags: 2 
function GetOppositeCameraScreenPos( worldPos : Vector,  out  x : Float,  out  y : Float);  // flags: 2 
function IsPointOnScreen( screenPos : Vector) : Bool;  // flags: 2 
function ui_testmenu();  // flags: 258 
function showoneliner1( plainText : String);  // flags: 258 
function hideoneliner1();  // flags: 258 
function dlgshow();  // flags: 258 
function dlghide();  // flags: 258 
function hudinfo();  // flags: 258 
function HudSetDynamic( value : Bool);  // flags: 258 
function HudSetModuleEnabled( moduleName : String,  value : Bool);  // flags: 258 
function ForceHudScaleRefresh();  // flags: 258 
function testarea( text : String);  // flags: 258 
function testcrosshair( value : Bool);  // flags: 258 
function reduceidur( durability : Float);  // flags: 258 
function reduceidurslot( i : Int32,  durability : Float);  // flags: 258 
function showdebugtext();  // flags: 258 
function hidedebugtext();  // flags: 258 
function contraHint( set : Bool);  // flags: 258 
function dodgeFeedback();  // flags: 258 
function hardlock( set : Bool);  // flags: 258 
function yen1();  // flags: 258 
function yen2();  // flags: 258 
function eitem( enable : Bool);  // flags: 258 
function mm_zoom( zoom : Float);  // flags: 258 
function mm_mask( enable : Bool);  // flags: 258 
function mm_debug( enable : Bool);  // flags: 258 
function mm_borders( enable : Bool);  // flags: 258 
function mm_fade( fadeOut : Bool,  immediately : Bool);  // flags: 258 
function sayoneliner( value : String,  id : Int32);  // flags: 258 
function sayoneliner2( tag : CName,  value : String,  id : Int32);  // flags: 258 
function removeoneliner( id : Int32);  // flags: 258 
function srfdes( value : Bool,  fieldName : String);  // flags: 258 
function esign( enable : Bool);  // flags: 258 
function hud_addsub( speaker : String,  text : String);  // flags: 258 
function hud_remsub();  // flags: 258 
function hud_testwatermark( show : Bool);  // flags: 258 
function AlwaysDisplayHUD( value : Bool);  // flags: 258 
function TestAutosave();  // flags: 258 
function ingamemenu();  // flags: 258 
function crd();  // flags: 258 
function casttest();  // flags: 258 
function gammamenu();  // flags: 258 
function recapmovies();  // flags: 258 
function startupmovies();  // flags: 258 
function IngameMenu_GetOptionTypeFromString( optionType : String) : InGameMenuActionType;  // flags: 2 
function IngameMenu_FillOptionsSubMenuData( flashStorageUtility : CScriptedFlashValueStorage,  isMainMenu : Bool) : CScriptedFlashArray;  // flags: 2 
function IngameMenu_FillArrayFromConfigGroup( flashStorageUtility : CScriptedFlashValueStorage,  groupID : Int32,  rootFlashArray : CScriptedFlashArray);  // flags: 2 
function IngameMenu_FetchAndGenerateGroupMenuObject( flashStorageUtility : CScriptedFlashValueStorage,  displayNamePrefix : String,  groupDisplayName : String,  rootFlashArray : CScriptedFlashArray,  out  optionParentArray : CScriptedFlashArray) : CScriptedFlashObject;  // flags: 2 
function IngameMenu_FillSubMenuOptionsList( flashStorageUtility : CScriptedFlashValueStorage,  groupID : Int32,  groupName : CName,  groupRootObject : CScriptedFlashObject) : Bool;  // flags: 2 
function IngameMenu_AddDifficultyOption( flashStorageUtility : CScriptedFlashValueStorage,  listToAddToo : CScriptedFlashArray);  // flags: 2 
function IngameMenu_ChangePresetValue( groupId : CName,  targetPresetIndex : Int32,  parentMenu : CR4IngameMenu);  // flags: 2 
function IngameMenu_GatherOptionUpdatedValues( groupId : CName,  parentObject : CScriptedFlashObject,  flashStorageUtility : CScriptedFlashValueStorage);  // flags: 2 
function IngameMenu_GatherKeybindData( parentArray : CScriptedFlashArray,  flashStorageUtility : CScriptedFlashValueStorage);  // flags: 2 
function IngameMenu_GetLocalizedKeybindName( keybindName : CName) : String;  // flags: 2 
function IngameMenu_GetPCInputGroupIndex() : Int32;  // flags: 2 
function IngameMenu_GetKeybindTagWithKeybindKey( newKeybindValue : EInputKey) : CName;  // flags: 2 
function inGameMenu_LocalizeKeyString( key : String) : String;  // flags: 2 
function inGameMenu_TryLocalize( key : String) : String;  // flags: 2 
function IngameMenu_UpdateDLCScriptTags();  // flags: 2 
function IngameMenu_PopulateSaveDataForSlotType( flashStorageUtility : CScriptedFlashValueStorage,  saveType : Int32,  parentObject : CScriptedFlashArray,  allowEmptySlot : Bool);  // flags: 2 
function IngameMenu_PopulateImportSaveData( flashStorageUtility : CScriptedFlashValueStorage,  parentObject : CScriptedFlashArray);  // flags: 2 
function InGameMenu_CreateControllerData( flashStorageUtility : CScriptedFlashValueStorage) : CScriptedFlashArray;  // flags: 2 
function InGameMenu_CreateControllerDataCiri( flashStorageUtility : CScriptedFlashValueStorage) : CScriptedFlashArray;  // flags: 2 
function repairmenu();  // flags: 258 
function testLockInHub( locked : Bool);  // flags: 258 
function testLockInMenu( locked : Bool);  // flags: 258 
function deathscreen();  // flags: 258 
function testbes();  // flags: 258 
function loadingmenu();  // flags: 258 
function loadingmenuclose();  // flags: 258 
function map_debug( enable : Bool);  // flags: 258 
function map_unlimitedzoom( enable : Bool);  // flags: 258 
function map_manuallod( enable : Bool);  // flags: 258 
function map_borders( show : Bool);  // flags: 258 
function innkeep();  // flags: 258 
function postermenu();  // flags: 258 
function TheBegining();  // flags: 258 
function SetStartScreenPlatform( value : Int32);  // flags: 258 
function testmenu();  // flags: 258 
function testmenu_transform( x : Float,  y : Float,  z : Float,  scale : Float);  // flags: 258 
function uirescale();  // flags: 258 
function r4glossaryencyclopedia();  // flags: 258 
function AddCharacterHeader( locKey : String,  toArray : CScriptedFlashArray,  flashMaster : CScriptedFlashValueStorage);  // flags: 2 
function AddCharacterStat( tag : String,  varKey : CName,  locKey : String,  iconTag : String,  toArray : CScriptedFlashArray,  flashMaster : CScriptedFlashValueStorage);  // flags: 2 
function AddCharacterStatSigns( tag : String,  varKey : CName,  locKey : String,  iconTag : String,  toArray : CScriptedFlashArray,  flashMaster : CScriptedFlashValueStorage);  // flags: 2 
function AddCharacterStatF( tag : String,  varKey : CName,  locKey : String,  iconTag : String,  toArray : CScriptedFlashArray,  flashMaster : CScriptedFlashValueStorage);  // flags: 2 
function AddCharacterStatU( tag : String,  varKey : CName,  locKey : String,  iconTag : String,  toArray : CScriptedFlashArray,  flashMaster : CScriptedFlashValueStorage);  // flags: 2 
function AddCharacterStatU2( tag : String,  varKey : CName,  locKey : String,  iconTag : String,  toArray : CScriptedFlashArray,  flashMaster : CScriptedFlashValueStorage);  // flags: 2 
function CloseLootPopup();  // flags: 258 
function closeoverlay();  // flags: 258 
function test2popup();  // flags: 258 
function test2popup2();  // flags: 258 
function testpopup();  // flags: 258 
function testpopup2();  // flags: 258 
function GetItemRarityDescriptionFromInt( quality : Int32) : String;  // flags: 2 
function CalculateStatsComparance( itemStats : array<SAttributeTooltip>,  compareItemStats : array<SAttributeTooltip>,  rootGFxObject : CScriptedFlashObject,  out  compResult : CScriptedFlashArray,  optional  ignorePrimStat : Bool,  optional  dontCompare : Bool,  optional  extendedData : Bool);  // flags: 2 
function GetItemAttributeComparison( attrName : String,  attrValue : Float,  equipedItemStats : array<SAttributeTooltip>) : String;  // flags: 2 
function GetStatDiff( a : Float,  b : Float) : String;  // flags: 2 
function IsFireSource( tag : CName);  // flags: 258 
function CalculateCriticalStateTypePriority( type : ECriticalStateType) : Int32;  // flags: 2 
function BehGraphEnumToName( graphEnum : EBehaviorGraph) : CName;  // flags: 2 
function killall( optional  range : Float);  // flags: 258 
function RestoreStamina( optional  val : Int32);  // flags: 258 
function staminaboy();  // flags: 258 
function StaminaBoyInternal( on : Bool);  // flags: 2 
function staminapony();  // flags: 258 
function StaminaPonyInternal( on : Bool);  // flags: 2 
function buffgeralt( buffName : CName,  optional  duration : Float,  optional  src : String);  // flags: 258 
function knockdown();  // flags: 258 
function bufftarget( type : EEffectType,  optional  duration : Float,  optional  src : CName);  // flags: 258 
function HealGeralt();  // flags: 258 
function addexp( amount : Int32);  // flags: 258 
function setlevel( targetLvl : Int32);  // flags: 258 
function levelup( optional  times : Int32);  // flags: 258 
function addskillpoints( optional  value : Int32);  // flags: 258 
function LogPlayerDev();  // flags: 258 
function testsw( tag : CName);  // flags: 258 
function readbook( bookName : CName);  // flags: 258 
function bookread( bookName : CName);  // flags: 258 
function slog();  // flags: 258 
function sgo( sname : CName,  optional  bforce : Bool,  optional  bkeep : Bool);  // flags: 258 
function spop( optional  ball : Bool);  // flags: 258 
function spush( sname : CName);  // flags: 258 
function CombatStage( npcTag : CName,  stage : ENPCFightStage);  // flags: 258 
function ChangeAp( npcTag : CName,  appearanceName : CName);  // flags: 258 
function tptonode( nodeName : CName);  // flags: 258 
function tptopos( x : Float,  y : Float,  z : Float);  // flags: 258 
function xy( x : Float,  y : Float);  // flags: 258 
function TrajectoryDebug( actorTag : CName);  // flags: 258 
function BoatTeleport( tag : CName,  optional  offset : Float);  // flags: 258 
function mountboat( optional  passenger : Bool);  // flags: 258 
function UseNativeTargeting( use : Bool);  // flags: 258 
function SkillNameToEnum( n : CName) : ESkill;  // flags: 2 
function SignEnumToSkillEnum( s : ESignType) : ESkill;  // flags: 2 
function SkillEnumToName( s : ESkill) : CName;  // flags: 2 
function SignNameToEnum( signName : CName) : ESignType;  // flags: 2 
function SignStringToEnum( signString : String) : ESignType;  // flags: 2 
function SignEnumToString( signType : ESignType) : String;  // flags: 2 
function IsBufferActionAttackAction( a : EBufferActionType) : Bool;  // flags: 2 
function IsActionCombat( action : EInputActionBlock) : Bool;  // flags: 2 
function GetWitcherPlayer() : W3PlayerWitcher;  // flags: 2 
function ttt();  // flags: 258 
function hpitch( pitch : Float);  // flags: 258 
function LogSkating( str : String);  // flags: 2 
function BooksMinigameInit( player : CStoryScenePlayer,  minigameTag : CName);  // flags: 2050 
function BooksMinigameSwitch( player : CStoryScenePlayer,  minigameTag : CName,  slotNumber : Int32,  direction : EBookDirection);  // flags: 2050 
function SetTimeScaleQuest( timeScale : Float);  // flags: 4098 
function LaunchCredits();  // flags: 4098 
function MessageDialogPopup( locMessage : String);  // flags: 4098 
function RemoveItemAmmoQuest( itemName : CName,  amount : Int32);  // flags: 4098 
function EnableGlossaryImageOverrideQuest( uniqueEntryTag : CName,  imageFileName : String,  enable : Bool);  // flags: 4098 
function MonsterHuntInvestigationAreaManager( tag : CName,  enable : Bool);  // flags: 4098 
function Q202GiantDisableHitAnim( tag : CName,  enable : Bool);  // flags: 4098 
function ApplyForce( fromNode : CName,  toTag : CName,  force : Float,  optional  destroy : Bool);  // flags: 4098 
function ActorBreakQuen( actorTag : CName);  // flags: 4098 
function DisableHerbsOnMinimapQuest( disableHerbs : Bool);  // flags: 4098 
function SetMapPinStatus( type : EMapPinStatus,  tag : CName,  set : Bool);  // flags: 4098 
latent function SetupTrophySceneQuest( monsterTag : CName,  offset : Float);  // flags: 4162 
latent function ProcessMonsterHuntTrophyQuest( trophyName : CName,  dontTeleportHorse : Bool);  // flags: 4162 
function AlwaysDisplayWolfHead( display : Bool);  // flags: 4098 
function AlwaysDisplayItemInfo( display : Bool);  // flags: 4098 
function BankCollectBillOfExchangeQuest( baseBillPrice : Int32);  // flags: 4098 
function BankCurrencyExchangeQuest( orensExchangeModifier : Float,  florensExchangeModifier : Float);  // flags: 4098 
function SetGeraltHairQuest( hairstyleName : CName);  // flags: 4098 
function SetGeraltTorsoQuest( torsoName : CName);  // flags: 4098 
function SetGeraltPalmsQuest( palmsName : CName);  // flags: 4098 
function E3TurnOffDebugPagesFromFastMenu( turnOn : Bool);  // flags: 4098 
function HealthBarVisiblityQuest( npcTag : CName,  show : Bool);  // flags: 4098 
function DetonatePetardQuest( targetTag : CName,  detonationDelay : Float);  // flags: 4098 
function SetMorphBlendQuest( targetTag : CName,  morphRatio : Float,  blendTime : Float);  // flags: 4098 
function ForceShowUpdateInfo( locKeyText : String,  locKeyTitle : String);  // flags: 4098 
latent function ShowStartScreen( fadeOutTime : Float,  fadeInTime : Float,  endWithBlackscreen : Bool,  isStageDemo : Bool);  // flags: 4162 
latent function ShowEndScreen( fadeOutTime : Float,  fadeInTime : Float,  isStageDemo : Bool);  // flags: 4162 
function ShowCompanionIndicator( enable : Bool,  npcTag : CName,  optional  iconPath : String,  optional  npcTag2 : CName,  optional  iconPath2 : String);  // flags: 4098 
function ShowBossFightIndicator( enable : Bool,  bossTag : CName);  // flags: 4098 
function SetShopPriceMultiplier( priceMult : Float,  merchantTag : CName);  // flags: 4098 
function OpenMeditation();  // flags: 4098 
function ShaveGeralt_Quest();  // flags: 4098 
function SetGeraltBeard_Quest( maxBeard : Bool,  optional  stage : Int32);  // flags: 4098 
function SetTattoo_Quest( hasTattoo : Bool);  // flags: 4098 
function BlockBeardGrowth_Quest( optional  block : Bool);  // flags: 4098 
function SetCustomHead_Quest( head : CName,  barberSystem : Bool);  // flags: 4098 
function RemoveCustomHead_Quest( barberSystem : Bool);  // flags: 4098 
function CopyPlayersEquipmentToNPCQuest( npcTag : CName,  copyHead : Bool,  dontCopyHair : Bool);  // flags: 4098 
function MSDEMO_Init( enable : Bool,  skipCookedItems : Bool,  skipHerbs : Bool);  // flags: 4098 
function ShowTimeLapse( showTime : Float,  optional  timeLapseMessageKey : String,  optional  timeLapseAdditionalMessageKey : String);  // flags: 4098 
function RemoveErrandsFromNoticeboard( boardTag : CName,  errandName : String);  // flags: 4098 
function AddErrandsToTheNoticeBoard( boardTag : CName,  errandDetails : array<ErrandDetailsList>);  // flags: 4098 
function FocusClueManager( tag : CName,  actionType : EFocusClueAttributeAction,  isAvailable : Bool,  isInteractive : Bool,  isReusable : Bool,  isVisible : Bool,  wasDetected : Bool,  isIgnoringFM : Bool);  // flags: 4098 
function FocusDestroyableClueManager( tag : CName,  destroyable : Bool,  triggerDestruction : Bool);  // flags: 4098 
function FocusSoundClueManager( tag : CName,  soundEffectType : EFocusModeSoundEffectType,  startEventOverride : CName,  stopEventOverride : CName);  // flags: 4098 
function FocusAreaIntensity( areaTag : CName,  newIntensity : Float);  // flags: 4098 
function FocusStashManager( tag : CName,  isDisabled : Bool);  // flags: 4098 
function FocusEffect( actionType : EFocusEffectActivationAction,  effectName : CName,  effectEntityTag : CName,  duration : Float);  // flags: 4098 
function FocusSetHighlight( tag : CName,  highlightType : EFocusModeVisibility);  // flags: 4098 
function ChangeWeatherQuest( weatherName : CName,  blendTime : Float,  randomGen : Bool);  // flags: 4098 
function EffectOnCamera( effectName : CName,  play : Bool);  // flags: 4098 
function PlayCameraEffect( animName : ECameraEffect,  strength : Float,  bLoop : Bool);  // flags: 4098 
function SetCameraFOV( newFov : Float);  // flags: 4098 
function RequestCameraRotation( cameraRequest : SQuestCameraRequest);  // flags: 4098 
function ResetCameraRotationRequest();  // flags: 4098 
function EnableFastTravelMapPins( pinTags : array<CName>,  enable : Bool);  // flags: 4098 
function DiscoverFastTravelMapPins( pinTags : array<CName>,  show : Bool);  // flags: 4098 
function EnableGeraltPushing( enable : Bool);  // flags: 4098 
function EnableOrDisableContainers( containersTag : CName,  containerEnabled : Bool);  // flags: 4098 
function CombatStageChange( npcsTag : CName,  stage : ENPCFightStage);  // flags: 4098 
function AppearanceChange( npcsTag : CName,  appearanceName : CName);  // flags: 4098 
function SoundEventQuest( eventName : String,  saveBehavior : ESoundEventSaveBehavior);  // flags: 4098 
function SoundEventOnActorQuest( actorTag : CName,  eventName : String);  // flags: 4098 
latent function EnableFistFightMinigame( toTheDeath : Bool,  npcTag : array<CName>,  optional  npcTeleportTag : array<CName>,  optional  playerTeleportTag : CName) : Bool;  // flags: 4162 
function HidePlayerItemQuest();  // flags: 4098 
function AddItemQuest( targetTag : CName,  itemName : CName,  quantity : Int32,  items : array<SItem>,  informGUI : Bool);  // flags: 4098 
function AddItemQuestExt( targetTag : CName,  items : array<SItemExt>,  informGUI : Bool);  // flags: 4098 
function EquipItemQuest( targetTag : CName,  itemName : CName,  itemCategory : CName,  itemTag : CName,  optional  unequip : Bool,  optional  toHand : Bool);  // flags: 4098 
function DropItemFromSlotQuest( targetTag : CName,  slotName : CName,  optional  removeFromInv : Bool);  // flags: 4098 
function EquipItemQuestExt( targetTag : CName,  itemName : SItemNameProperty,  itemCategory : CName,  itemTag : CName,  optional  unequip : Bool,  optional  toHand : Bool);  // flags: 4098 
function RemoveItemQuest( entityTag : CName,  item_name : CName,  item_category : CName,  item_tag : CName,  optional  quantity : Int32);  // flags: 4098 
function RemoveItemQuestExt( entityTag : CName,  item_name : SItemExt,  item_category : CName,  item_tag : CName);  // flags: 4098 
function PlayEffectQuest( entityTag : CName,  effectName : CName,  activate : Bool,  persistentEffect : Bool,  deactivateAll : Bool,  preventEffectStacking : Bool);  // flags: 4098 
function PlayEffectWithTargetQuest( entityTag : CName,  effectName : CName,  activate : Bool,  targetTag : CName) : Bool;  // flags: 4098 
function PlaySavableEffectQuest( entityTag : CName,  effectName : CName,  activate : Bool,  targetTag : CName,  targetBone : CName);  // flags: 4098 
function ActivateEnvironmentQuest( environmentDefinition : CEnvironmentDefinition,  priority : Int32,  blendFactor : Float,  blendTime : Float);  // flags: 4098 
function DectivateEnvironmentQuest( blendTime : Float);  // flags: 4098 
function SetPlayerOxygen( percents : Int32,  relative : Bool);  // flags: 4098 
function SetPlayerAdrenaline( percents : Int32,  relative : Bool);  // flags: 4098 
function SetHealthQuest( targetTag : CName,  healthPerc : Int32,  relative : Bool,  shouldPlayHitParticle : Bool);  // flags: 4098 
function SetNPCIsAttackableByPlayer( npcTag : CName,  persistent : Bool,  attackable : Bool,  optional  timeout : Float);  // flags: 4098 
function SetRewardModifierQuest( player : CStoryScenePlayer,  rewardName : CName,  modifer : Float,  onlyIfDoesntExist : Bool);  // flags: 4098 
function SetImmortalQuest( targetsTag : CName,  immortalityMode : EActorImmortalityMode,  optional  unconsciousMinDuration : Float);  // flags: 4098 
function ChangeUnconsciousDuration( targetsTag : CName,  newMinDuration : Float);  // flags: 4098 
latent function ChangePlayerQuest( designatedTemplate : EQuestReplacerEntities);  // flags: 4162 
function ModifyNPCAbilityQuest( npcTag : CName,  abilityName : CName,  remove : Bool);  // flags: 4098 
function ModifyPlayerAbilityQuest( abilityName : CName,  remove : Bool);  // flags: 4098 
function ResetFactQuest( factID : CName);  // flags: 4098 
function RemoveFactQuest( factId : CName);  // flags: 4098 
function CloneFactQuest( SourceFactID : CName,  TargetFactID : CName);  // flags: 4098 
function FadeOutQuest( fadeTime : Float,  fadeColor : Color);  // flags: 4098 
function FadeInQuest( fadeTime : Float);  // flags: 4098 
function ShowFastTravelLoadingScreen( fadeTime : Float,  enable : Bool);  // flags: 4098 
function SwitchComponentStateQuest( shouldBeEnabled : Bool,  objectTag : CName,  componentName : String);  // flags: 4098 
function TransferPlayerItemsQuest( designatedContainerTag : CName,  itemSelectionType : EItemSelectionType,  steelSword : Bool,  silverSword : Bool,  chestArmor : Bool,  boots : Bool,  gloves : Bool,  pants : Bool,  trophy : Bool,  mask : Bool,  bombs : Bool,  lures : Bool,  crossbow : Bool,  secondaryWeapon : Bool,  optional  fromContainerToPlayer : Bool,  optional  equipAfterTransfer : Bool);  // flags: 4098 
function TransferItemQuest( sourceTag : CName,  targetTag : CName,  itemName : CName,  itemCategory : CName,  itemTag : CName,  quantity : Int32);  // flags: 4098 
function RememberPlayerEquipment();  // flags: 4098 
function UnequipPlayerItemsQuest( steelSword : Bool,  silverSword : Bool,  chestArmor : Bool,  boots : Bool,  gloves : Bool,  pants : Bool,  trophy : Bool,  bombs : Bool,  lures : Bool,  mask : Bool,  potions : Bool,  quickslot : Bool,  bolts : Bool,  all : Bool,  crossbow : Bool,  equipItems : Bool,  rememberEquipment : Bool,  excludedItems : array<SItemNameProperty>,  excludeHair : Bool,  secondaryWeapon : Bool);  // flags: 4098 
function ChangeNPCStateQuest( npcTag : CName,  npcState : EQuestNPCStates,  ignoreImmortalityMode : Bool);  // flags: 4098 
function ChangeNPCStanceQuest( npcTag : CName,  npcStance : ENpcStance);  // flags: 4098 
function AddNPCModifierQuest( npcTag : CName,  buffEffects : array<EEffectType>,  remove : Bool,  removeAll : Bool,  duration : Float,  valueAdditive : Float,  valueMultiplicative : Float,  valueBase : Float,  pause : Bool,  resume : Bool,  force : Bool,  pauseResumeSource : CName);  // flags: 4098 
function DrawWeaponQuest( weapon : EDrawWeaponQuestType,  dontIgnoreDrawActionLock : Bool);  // flags: 4098 
function DespawnNPCsWithTag( tag : CName);  // flags: 4098 
function RequestSwarmAttackPlayer( tag : CName,  stateAfterAttack : ESwarmStateOnArrival,  onArrivalFactID : String,  onArrivalFactValue : Int32);  // flags: 4098 
function RequestSwarmGoTo( lairTag : CName,  initialStateName : CName,  stateAfterAttack : ESwarmStateOnArrival,  onArrivalFactID : String,  onArrivalFactValue : Int32);  // flags: 4098 
function SwarmFlying_RequestGroupStateChange_Quest( lairTag : CName,  groupState : CName,  affectAllGroups : Bool);  // flags: 4098 
function SwarmFlying_RequestAllGroupsInstantDespawn_Quest( lairTag : CName);  // flags: 4098 
function ActivateQuestBonus( merchantTag : CName);  // flags: 4098 
function Swarm_DisablePOIs_Quest( poiTag : CName,  disable : Bool);  // flags: 4098 
function GetItem( inv : CInventoryComponent,  category : CName,  out  itemId : SItemUniqueId) : Bool;  // flags: 2 
function Swarm_DisableLair_Quest( lairTag : CName,  disable : Bool);  // flags: 4098 
function AnimalNervousState( npcsTag : CName,  reactionType : EAnimalReaction,  percents : Int32);  // flags: 4098 
function TeleportObject( objectTag : CName,  destinationTag : CName,  xOffset : Float,  yOffset : Float,  zOffset : Float,  useSafePlacement : Bool,  onSafePlacementFailUseBruteForce : Bool);  // flags: 4098 
function FaceObjectQuest( objectsTag : CName,  TargetTag : CName,  degreeModifier : Float);  // flags: 4098 
function AddTagToEntitiesQuest( entityTag : CName,  newTag : CName,  remove : Bool);  // flags: 4098 
function AddTagToNPCsQuest( npcTag : CName,  newTag : CName,  remove : Bool);  // flags: 4098 
function AddTagToNearestActorQuest( actorTag : CName,  newTag : CName,  remove : Bool);  // flags: 4098 
function AddTagToClosestNode( nodesTag : CName,  newTag : CName,  remove : Bool);  // flags: 4098 
function ChangeCombatStyleByTag( preferedCombatStyle : EBehaviorGraph,  npcTag : CName);  // flags: 4098 
function CameraShake( strength : Float);  // flags: 4098 
function StopCameraShake( animName : CName);  // flags: 4098 
function InstantMountPlayer( vehicleTag : CName,  vehicleType : EVehicleType,  dismount : Bool,  useAnim : Bool);  // flags: 4098 
function InstantDismountPlayer();  // flags: 4098 
function InstantMountNPC( npcTag : CName);  // flags: 4098 
function InstantDismountNPC( npcTag : CName,  dismountType : EDismountType);  // flags: 4098 
function TameHorse( horseTag : CName,  tame : Bool,  riderTag : CName);  // flags: 4098 
function SoundSetState( soundState : ESoundGameState);  // flags: 4098 
function DoorChangeState( tag : CName,  newState : EDoorQuestState,  optional  keyItemName : CName,  optional  removeKeyOnUse : Bool,  optional  smoooth : Bool);  // flags: 4098 
function BlockLockableInteraction( tag : CName,  block : Bool);  // flags: 4098 
latent function QuestHelper_BlockGameplayFunctionality( act : EInputActionBlock,  sourceName : CName,  lock : Bool);  // flags: 66 
latent function BlockGameplayFunctionality( lock : Bool,  sourceName : CName,  signs : Bool,  drawWeapon : Bool,  openInventory : Bool,  openPreparation : Bool,  radialMenu : Bool,  callHorse : Bool,  fastTravel : Bool,  movement : Bool,  jump : Bool,  meditation : Bool,  bombThrow : Bool,  runAndSprint : Bool,  sprint : Bool,  openMap : Bool,  openCharacterPanel : Bool,  openJournal : Bool,  highlightObjective : Bool,  openAlchemy : Bool,  explorationFocus : Bool,  dive : Bool,  interactions : Bool,  explorations : Bool,  climb : Bool,  slide : Bool,  mount : Bool,  dismount : Bool,  fistFight : Bool,  swordAttacks : Bool,  lightAttacks : Bool,  heavyAttacks : Bool,  dodgee : Bool,  roll : Bool,  parry : Bool,  counter : Bool,  quickslots : Bool,  custom0 : Bool,  crossbow : Bool,  usableItem : Bool,  openGlossary : Bool,  hardLockTarget : Bool,  meditationWaiting : Bool,  interactionContainers : Bool,  XXXXXXX : Bool,  allGUI : Bool,  all : Bool,  sheatheWeaponIfDrawn : Bool,  specialLightAttack : Bool,  specialHeavyAttack : Bool,  openGwint : Bool,  openFastMenu : Bool,  openMeditation : Bool);  // flags: 4162 
function ShootProjectileByTag( projectileTag : CName,  optional  targetTag : CName,  optional  speed : Float,  optional  angle : Float,  optional  range : Float);  // flags: 4098 
function ShootProjectileByEntityName( advProjectileName : String,  sourceTag : CName,  optional  slotName : CName,  targetTag : CName,  optional  speed : Float,  optional  angle : Float,  optional  range : Float,  optional  damage : Float);  // flags: 4098 
function bgfsinglechannels();  // flags: 258 
function bgfstatus();  // flags: 258 
latent function TogglePhysicalDamageMechanismByTag( tag : CName,  toggle : Bool);  // flags: 4162 
function KillPlayer( ignoreImmortalityMode : Bool);  // flags: 4098 
function spawnBoatAndMount();  // flags: 258 
function DrawableComponentVisiblityQuest( objectTag : CName,  componentName : CName,  on : Bool);  // flags: 4098 
function ToggleRagdollByTag( tag : CName,  toggle : Bool);  // flags: 4098 
function MonsterHuntingClueHandler( huntingNumber : CName,  clueNumber : CName) : Bool;  // flags: 4098 
function TryToAddUniqueFact( uniqueFactName : CName) : Bool;  // flags: 4098 
function DispelIllusionQuest( spawnerTag : CName);  // flags: 4098 
function EnableIllusionQuest( illusionTag : CName,  enabled : Bool);  // flags: 4098 
function SwitchTrapActivation( activate : Bool,  trapTag : CName,  optional  targetTag : CName,  armInsteadOfActivate : Bool);  // flags: 4098 
function EnableTrapTrigger( triggerTag : CName,  enable : Bool);  // flags: 4098 
function ManageDamageAreaTrigger( damageAreaTag : CName,  affectedEntityTag : CName,  activate : Bool);  // flags: 4098 
function ManageEffectAreaTrigger( effectAreaTag : CName,  activate : Bool,  updateEffects : Bool);  // flags: 4098 
function ManageOilBarrels( barrelsTag : CName,  executeAction : array<EOilBarrelOperation>);  // flags: 4098 
function ManageRift( riftTag : CName,  activate : Bool,  dontActivateEncounter : Bool);  // flags: 4098 
function ManageRiftDisabling( riftTag : CName,  canBeDisabled : Bool);  // flags: 4098 
function ManageTeleport( teleportTag : CName,  enabling_activating : Bool,  value : Bool,  keepBlackscreen : Bool,  activationTime : Float);  // flags: 4098 
function ManageToxicCloud( toxicCloudsTag : CName,  executeAction : array<EToxicCloudOperation>);  // flags: 4098 
function BlockActorAbility( actorTag : CName,  abilityName : CName,  unBlock : Bool);  // flags: 4098 
function BroadcastDanger( lifetime : Float,  distance : Float,  interval : Float);  // flags: 4098 
function AddRaceSlowMo( factor : Float);  // flags: 4098 
function RemoveRaceSlowMo();  // flags: 4098 
function SetBarrelsOnFire( tag : CName,  explodeTime : Float,  optional  randomize : Bool);  // flags: 4098 
function EnableBeeSwarm( tag : CName);  // flags: 4098 
function StartHeartFight( tag : CName);  // flags: 4098 
function KillHeart( tag : CName);  // flags: 4098 
function HorseWhistle();  // flags: 4098 
function LockReactions( toggle : Bool,  areaTag : CName);  // flags: 4098 
function MeditationStop();  // flags: 4098 
function ToggleHorseCanFlee( tag : CName,  value : Bool);  // flags: 4098 
function AddItemOnNPC_S( player : CStoryScenePlayer,  npc : CName,  item_name : CName,  optional  quantity : Int32,  dontInformGUI : Bool);  // flags: 2050 
function ForceDismount( horseTag : CName);  // flags: 4098 
function E3_StageDemoInit();  // flags: 4098 
function E3_LongDemoInit();  // flags: 4098 
function SetCiriLevel( level : Int32);  // flags: 4098 
function SetNPCLevel( npcTag : CName,  level : Int32);  // flags: 4098 
import class IScriptable extends ISerializable {

  import public function ToString() : String;  // flags: 65545 
  function GetClass();  // flags: 1 
  function IsA();  // flags: 1 
  function IsExactlyA();  // flags: 1 
  import public function PushState( stateName : CName);  // flags: 65545 
  import public final function IsInState( stateName : CName) : Bool;  // flags: 65561 
  import public function PopState( optional  popAll : Bool);  // flags: 65545 
  import public function GotoState( optional  newState : CName,  optional  keepStack : Bool,  optional  forceEvents : Bool);  // flags: 65545 
  import public final function GotoStateAuto();  // flags: 65561 
  import public final function LogStates();  // flags: 65561 
  import public final function GetState( stateName : CName) : CScriptableState;  // flags: 65561 
  import public final function GetCurrentState() : CScriptableState;  // flags: 65561 
  import public final function GetCurrentStateName() : CName;  // flags: 65561 
  function ChangeState();  // flags: 1 
  function StopState();  // flags: 1 
  import public final function LockEntryFunction( lock : Bool);  // flags: 65561 
  import public final function SetCleanupFunction( functionName : CName);  // flags: 65561 
  import public final function ClearCleanupFunction();  // flags: 65561 
  import public final function DebugDumpEntryFunctionCalls( enabled : Bool);  // flags: 65561 

}
import class CurveDamper extends CObject {

  public final function IsValid() : Bool;  // flags: 65552 
  public final function SetCurve( c : CCurve);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function Init( curr : Float,  dest : Float);  // flags: 65552 
  public final function SetValue( value : Float);  // flags: 65552 
  public final function ResetValue( value : Float);  // flags: 65552 
  public final function GetValue() : Float;  // flags: 65552 
  public final function GetDestValue() : Float;  // flags: 65552 
  public function Update( dt : Float);  // flags: 65536 
  public final function UpdateAndGet( dt : Float) : Float;  // flags: 65552 
  private function CalcValue() : Float;  // flags: 16384 
  protected function InterpolateValue( progress : Float,  a : Float,  b : Float) : Float;  // flags: 32768 
  public final function IsRunning() : Bool;  // flags: 65552 
  public final function GetProgress() : Float;  // flags: 65552 

}
import class CObject extends IScriptable {

  import public function GetParent() : CObject;  // flags: 65545 
  import public function Clone( newParent : CObject) : CObject;  // flags: 65545 
  function IsIn();  // flags: 1 

}
import class AngleCurveDamper extends CurveDamper {

  protected function InterpolateValue( progress : Float,  a : Float,  b : Float) : Float;  // flags: 32768 

}
import class CResource extends CObject {

  import public final function GetPath() : String;  // flags: 65561 

}
import class CurveDamper3d extends CObject {

  public final function IsValid() : Bool;  // flags: 65552 
  public final function SetCurve( c : CCurve);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function Init( curr : Vector,  dest : Vector);  // flags: 65552 
  public final function SetValue( value : Vector);  // flags: 65552 
  public final function ResetValue( value : Vector);  // flags: 65552 
  public final function GetValue() : Vector;  // flags: 65552 
  public final function GetDestValue() : Vector;  // flags: 65552 
  public function Update( dt : Float);  // flags: 65536 
  public final function UpdateAndGet( dt : Float) : Vector;  // flags: 65552 
  public final function IsRunning() : Bool;  // flags: 65552 

}
import class W3DamageAction extends CDamageData {

  public function Initialize( att : CGameplayEntity,  vict : CGameplayEntity,  caus : IScriptable,  src : String,  hrt : EHitReactionType,  pwrStatType : ECharacterPowerStats,  isM : Bool,  isR : Bool,  isW : Bool,  isE : Bool,  optional  hitFX_ : CName,  optional  hitBackFX_ : CName,  optional  hitParriedFX_ : CName,  optional  hitBackParriedFX_ : CName);  // flags: 65536 
  protected function Clear();  // flags: 32768 
  public function SetSignSkill( skill : ESkill);  // flags: 65536 
  public function GetSignSkill() : ESkill;  // flags: 65536 
  public function AddDamage( dmgType : CName,  dmgVal : Float);  // flags: 65536 
  public function AddEffectInfo( effectType : EEffectType,  optional  duration : Float,  optional  effectCustomValue : SAbilityAttributeValue,  optional  effectAbilityName : CName,  optional  customParams : W3BuffCustomParams,  optional  buffApplyChance : Float);  // flags: 65536 
  public function RemoveBuff( index : Int32);  // flags: 65536 
  public final function RemoveBuffsByType( type : EEffectType);  // flags: 65552 
  public function SetHitReactionType( hrt : EHitReactionType,  optional  setDefaultHitFXs : Bool);  // flags: 65536 
  public function SetHitAnimationPlayType( type : EActionHitAnim);  // flags: 65536 
  public function GetHitAnimationPlayType() : EActionHitAnim;  // flags: 65536 
  public function GetEffects( out  effects : array<SEffectInfo>) : Int32;  // flags: 65536 
  public function GetEffectsCount() : Int32;  // flags: 65536 
  public function HasAnyCriticalEffect() : Bool;  // flags: 65536 
  public function GetEffectTypes( out  effectTypes : array<EEffectType>) : Int32;  // flags: 65536 
  public function GetDTs( out  dmgTypes : array<SRawDamage>) : Int32;  // flags: 65536 
  public function GetDTCount() : Int32;  // flags: 65536 
  public function GetDTsNames( out  dtNames : array<CName>) : Int32;  // flags: 65536 
  protected function SetDefaultHitFXs();  // flags: 32768 
  protected function GetPowerStatBonusAbilityTag() : CName;  // flags: 32768 
  public function CanBeParried() : Bool;  // flags: 65536 
  public function CanBeDodged() : Bool;  // flags: 65536 
  public function SetPointResistIgnored( b : Bool);  // flags: 65536 
  public function CanPlayHitParticle() : Bool;  // flags: 65536 
  public function SetCanPlayHitParticle( b : Bool);  // flags: 65536 
  public function GetBuffSourceName() : String;  // flags: 65536 
  public function GetCannotReturnDamage() : Bool;  // flags: 65536 
  public function SetCannotReturnDamage( b : Bool);  // flags: 65536 
  public function ClearDamage();  // flags: 65536 
  public function ClearEffects();  // flags: 65536 
  public function GetHitReactionType() : EHitReactionType;  // flags: 65536 
  public function IsPointResistIgnored() : Bool;  // flags: 65536 
  public function GetSwingType() : EAttackSwingType;  // flags: 65536 
  public function GetSwingDirection() : EAttackSwingDirection;  // flags: 65536 
  public function SetWasDodged();  // flags: 65536 
  public function WasDodged() : Bool;  // flags: 65536 
  public function IsDoTDamage() : Bool;  // flags: 65536 
  public function SetIsDoTDamage( dt : Float);  // flags: 65536 
  public function GetDoTdt() : Float;  // flags: 65536 
  public function GetHitEffect( optional  isBack : Bool,  optional  isParried : Bool) : CName;  // flags: 65536 
  public function SetHitEffect( newFX : CName,  optional  isBack : Bool,  optional  isParried : Bool);  // flags: 65536 
  public function DealsAnyDamage() : Bool;  // flags: 65536 
  public function DealtDamage() : Bool;  // flags: 65536 
  public function SetDealtDamage();  // flags: 65536 
  public function DealsPhysicalOrSilverDamage() : Bool;  // flags: 65536 
  public function GetDamageDealt() : Float;  // flags: 65536 
  public function GetPowerStatValue() : SAbilityAttributeValue;  // flags: 65536 
  public function SetAllProcessedDamageAs( val : Float);  // flags: 65536 
  public function MultiplyAllDamageBy( val : Float);  // flags: 65536 
  public final function IsActionMelee() : Bool;  // flags: 65552 
  public final function IsActionRanged() : Bool;  // flags: 65552 
  public final function IsActionWitcherSign() : Bool;  // flags: 65552 
  public final function IsActionEnvironment() : Bool;  // flags: 65552 
  public final function IsParryStagger() : Bool;  // flags: 65552 
  public final function SetParryStagger();  // flags: 65552 
  public final function ProcessBuffsIfNoDamage() : Bool;  // flags: 65552 
  public final function SetProcessBuffsIfNoDamage( b : Bool);  // flags: 65552 
  public final function SetIgnoreImmortalityMode( b : Bool);  // flags: 65552 
  public final function GetIgnoreImmortalityMode() : Bool;  // flags: 65552 
  public final function SetDealtFireDamage( b : Bool);  // flags: 65552 
  public final function HasDealtFireDamage() : Bool;  // flags: 65552 
  public final function SetHeadShot();  // flags: 65552 
  public final function GetIsHeadShot() : Bool;  // flags: 65552 
  public final function SetWasKilledBySingleHit();  // flags: 65552 
  public final function WasKilledBySingleHit() : Bool;  // flags: 65552 
  public final function GetIgnoreArmor() : Bool;  // flags: 65552 
  public final function SetIgnoreArmor( b : Bool);  // flags: 65552 
  public final function SuppressHitSounds() : Bool;  // flags: 65552 
  public final function SetSuppressHitSounds( b : Bool);  // flags: 65552 
  public final function SetEndsQuen( b : Bool);  // flags: 65552 
  public final function EndsQuen() : Bool;  // flags: 65552 
  public final function SetArmorReducedDamageToZero();  // flags: 65552 
  public final function DidArmorReduceDamageToZero() : Bool;  // flags: 65552 
  public final function SetUnderwaterDisplayDamageHack();  // flags: 65552 
  public final function GetUnderwaterDisplayDamageHack() : Bool;  // flags: 65552 
  public final function GetDamageValue( damageName : CName) : Float;  // flags: 65552 
  public final function GetDamageValueTotal() : Float;  // flags: 65552 

}
import class W3Effect_Frozen extends W3ImmobilizeEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public function KillOnHit() : Bool;  // flags: 65536 
  public function OnTimeUpdated( deltaTime : Float);  // flags: 65536 
  public function CacheSettings();  // flags: 65536 
  public function GetAdditionalDamagePercents() : Float;  // flags: 65536 

}
import class W3Action_Attack extends W3DamageAction {

  public function Init( attackr : CGameplayEntity,  victm : CGameplayEntity,  causr : IScriptable,  weapId : SItemUniqueId,  attName : CName,  src : String,  hrt : EHitReactionType,  canParry : Bool,  canDodge : Bool,  skillName : CName,  swType : EAttackSwingType,  swDir : EAttackSwingDirection,  isM : Bool,  isR : Bool,  isW : Bool,  isE : Bool,  optional  hitFX_ : CName,  optional  hitBackFX_ : CName,  optional  hitParriedFX_ : CName,  optional  hitBackParriedFX_ : CName,  optional  crossId : SItemUniqueId);  // flags: 65536 
  protected function Clear();  // flags: 32768 
  public function Initialize( att : CGameplayEntity,  vict : CGameplayEntity,  caus : IScriptable,  src : String,  hrt : EHitReactionType,  pwrStatType : ECharacterPowerStats,  isM : Bool,  isR : Bool,  isW : Bool,  isE : Bool,  optional  hitFX_ : CName,  optional  hitBackFX_ : CName,  optional  hitParriedFX_ : CName,  optional  hitBackParriedFX_ : CName);  // flags: 65536 
  private function FillDataFromWeapon();  // flags: 16384 
  private function FillDataFromAttackName();  // flags: 16384 
  public function GetHitEffect( optional  isBack : Bool,  optional  isParried : Bool) : CName;  // flags: 65536 
  public function AddDamage( dmgType : CName,  dmgVal : Float);  // flags: 65536 
  public function AddEffectInfo( effectType : EEffectType,  optional  duration : Float,  optional  effectCustomValue : SAbilityAttributeValue,  optional  effectAbilityName : CName,  optional  customParams : W3BuffCustomParams,  optional  buffApplyChance : Float);  // flags: 65536 
  public function GetPowerStatBonusAbilityTag() : CName;  // flags: 65536 
  public function GetWeaponId() : SItemUniqueId;  // flags: 65536 
  public function SetIsParried( b : Bool);  // flags: 65536 
  public function IsParried() : Bool;  // flags: 65536 
  public function SetIsCountered( b : Bool);  // flags: 65536 
  public function IsCountered() : Bool;  // flags: 65536 
  public function SetAttackAnimName( a : CName);  // flags: 65536 
  public function GetAttackAnimName() : CName;  // flags: 65536 
  public function SetHitTime( t : Float);  // flags: 65536 
  public function GetHitTime() : Float;  // flags: 65536 
  public function SetWeaponEntity( e : CItemEntity);  // flags: 65536 
  public function GetWeaponEntity() : CItemEntity;  // flags: 65536 
  public function SetCriticalHit();  // flags: 65536 
  public function IsCriticalHit() : Bool;  // flags: 65536 
  public function SetForceExplosionDismemberment();  // flags: 65536 
  public function HasForceExplosionDismemberment() : Bool;  // flags: 65536 
  public function SetWeaponSlot( w : CName);  // flags: 65536 
  public function GetWeaponSlot() : CName;  // flags: 65536 
  public function SetSoundAttackType( s : CName);  // flags: 65536 
  public function GetSoundAttackType() : CName;  // flags: 65536 
  public function SetInstantKill();  // flags: 65536 
  public function GetInstantKill() : Bool;  // flags: 65536 
  public function GetAttackName() : CName;  // flags: 65536 
  public function GetAttackTypeName() : CName;  // flags: 65536 
  public function GetPowerStatValue() : SAbilityAttributeValue;  // flags: 65536 
  public final function GetHitBoneIndex() : Int32;  // flags: 65552 

}
import class CR4ScriptedHud extends CR4Hud {

  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  protected function UpdateLootPopupContext();  // flags: 32768 
  public function StartDeathTimer( duration : Float);  // flags: 65536 
  private function UpdateDeathTimer( timeDelta : Float);  // flags: 16384 
  private function GetHudEventController() : CR4HudEventController;  // flags: 16384 
  private function OnInputContextChanged();  // flags: 16384 
  public function RefreshHudConfiguration();  // flags: 65536 
  public function UpdateScaleformStageSize();  // flags: 65536 
  public function GetScaleformPoint( x : Float,  y : Float) : Vector;  // flags: 65536 
  public function UpdateHudScale();  // flags: 65536 
  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function ForceShow( show : Bool);  // flags: 65536 
  public function UpdateAcceptCancelSwaping();  // flags: 65536 
  protected function UpdateControlSchemeLock();  // flags: 32768 
  public function UpdateInputDevice();  // flags: 65536 
  public function UpdateHudConfigs();  // flags: 65536 
  public function UpdateHudConfig( configName : CName,  updateHud : Bool);  // flags: 65536 
  public function EnableBuffedMonsterDisplay( value : Bool);  // flags: 65536 
  public function Toggle24HRFormat( value : Bool);  // flags: 65536 
  public function AddHudModuleReference( hudModule : CR4HudModuleBase);  // flags: 65536 
  public function HandleDialogClosed( messageId : Int32);  // flags: 65536 
  public function GetDialogModule() : CR4HudModuleDialog;  // flags: 65536 
  public function GetDamagedItemModule() : CR4HudModuleDamagedItems;  // flags: 65536 
  public function RescaleModules();  // flags: 65536 
  public function IsRadialMenuOpened() : Bool;  // flags: 65536 
  public function IsRadialMenuOverwritenByContext( context : CName) : Bool;  // flags: 65536 
  public event function OnDialogHudShow() : Bool;  // flags: 65568 
  public event function OnDialogHudHide() : Bool;  // flags: 65568 
  public event function OnDialogSentenceSet( text : String) : Bool;  // flags: 65568 
  public event function OnDialogPreviousSentenceSet( text : String) : Bool;  // flags: 65568 
  public event function OnDialogPreviousSentenceHide() : Bool;  // flags: 65568 
  public event function OnDialogSentenceHide() : Bool;  // flags: 65568 
  public event function OnDialogChoicesSet( choices : array<SSceneChoice>) : Bool;  // flags: 65568 
  public event function OnDialogChoiceTimeoutSet( timeOutPercent : Float) : Bool;  // flags: 65568 
  public event function OnDialogChoiceTimeoutHide() : Bool;  // flags: 65568 
  public event function OnDialogSkipConfirmShow() : Bool;  // flags: 65568 
  public event function OnDialogSkipConfirmHide() : Bool;  // flags: 65568 
  public event function OnSubtitleAdded( id : Int32,  speakerNameDisplayText : String,  htmlString : String) : Bool;  // flags: 65568 
  public event function OnSubtitleRemoved( id : Int32) : Bool;  // flags: 65568 
  public event function OnVideoSubtitles( subtitles : String) : Bool;  // flags: 65568 
  public event function OnCreateOneliner( target : CEntity,  value : String,  ID : Int32) : Bool;  // flags: 65568 
  public event function OnRemoveOneliner( ID : Int32) : Bool;  // flags: 65568 
  public event function OnInteractionsUpdated( component : CInteractionComponent) : Bool;  // flags: 65568 
  public function IsInteractionInCameraView( interaction : CInteractionComponent) : Bool;  // flags: 65536 
  public event function OnDebugTextShown( text : String) : Bool;  // flags: 65568 
  public event function OnDebugTextHidden() : Bool;  // flags: 65568 
  public event function OnCharacterEvent( journalCharacter : CJournalCharacter) : Bool;  // flags: 65568 
  public event function OnCharacterDescriptionEvent( journalCharacterDescription : CJournalCharacterDescription) : Bool;  // flags: 65568 
  public event function OnCreatureEvent( journalCreature : CJournalCreature) : Bool;  // flags: 65568 
  public event function OnCreatureDescriptionEvent( journalCreatureDescription : CJournalCreatureDescriptionEntry) : Bool;  // flags: 65568 
  public event function OnGlossaryEvent( journalGlossary : CJournalGlossary) : Bool;  // flags: 65568 
  public event function OnGlossaryDescriptionEvent( journalGlossaryDescription : CJournalGlossaryDescription) : Bool;  // flags: 65568 
  public event function OnStoryBookPageEvent( journalStoryBookPage : CJournalStoryBookPage) : Bool;  // flags: 65568 
  public event function OnTutorialEvent( journalTutorial : CJournalTutorial) : Bool;  // flags: 65568 
  public event function OnPlaceEvent( journalPlace : CJournalPlace) : Bool;  // flags: 65568 
  public event function OnPlaceDescriptionEvent( journalPlaceDescription : CJournalPlaceDescription) : Bool;  // flags: 65568 
  public event function OnQuestEvent( journalQuest : CJournalQuest) : Bool;  // flags: 65568 
  public event function OnQuestObjectiveEvent( journalQuest : CJournalQuest,  journalObjective : CJournalQuestObjective) : Bool;  // flags: 65568 
  public function OnQuestUpdate( journalQuest : CJournalQuest,  isQuestUpdate : Bool);  // flags: 65536 
  public function OnLevelUpUpdate( level : Int32,  show : Bool);  // flags: 65536 
  public function OnShowLevelUpIndicator( show : Bool);  // flags: 65536 
  public function OnExperienceUpdate( exp : Int32,  show : Bool);  // flags: 65536 
  public function OnMapPinUpdate( mapPinTag : CName);  // flags: 65536 
  public function OnItemRecivedDuringScene( itemName : CName,  optional  quantity : Int32);  // flags: 65536 
  public function OnJournalUpdate( journalEntry : CJournalBase,  isDescription : Bool);  // flags: 65536 
  public function OnCraftingSchematicUpdate( schematicName : CName);  // flags: 65536 
  public function OnAlchemySchematicUpdate( schematicName : CName);  // flags: 65536 
  public event function OnQuestTrackingStarted( journalQuest : CJournalQuest) : Bool;  // flags: 65568 
  public event function OnTrackedQuestUpdated( journalQuest : CJournalQuest) : Bool;  // flags: 65568 
  public event function OnTrackedQuestObjectivesUpdated( journalObjective : CJournalQuestObjective) : Bool;  // flags: 65568 
  public event function OnTrackedQuestObjectiveCounterUpdated( journalObjective : CJournalQuestObjective) : Bool;  // flags: 65568 
  public event function OnTrackedQuestObjectiveHighlighted( journalObjective : CJournalQuestObjective,  journalObjectiveIndex : Int32) : Bool;  // flags: 65568 
  public function __PrintInfo();  // flags: 65536 
  private function SetHudSize( size : Int32,  update : Bool);  // flags: 16384 
  public function IsEnabledMinimapRotation() : Bool;  // flags: 65536 
  private function EnableMinimapRotation( enable : Bool);  // flags: 16384 
  public function SetMinimapZoom( zoom : Float);  // flags: 65536 
  public function GetMinimapZoom() : Float;  // flags: 65536 
  public function HudConsoleMsg( msgText : String);  // flags: 65536 
  public function HudConsoleTest();  // flags: 65536 
  public function HudConsoleCleanup();  // flags: 65536 
  public function SetDynamic( value : Bool);  // flags: 65536 
  public function GetDynamic() : Bool;  // flags: 65536 
  public function UpdateHUD();  // flags: 65536 
  public function DisplayTutorialHighlight( tutorialName : CName,  bShow : Bool);  // flags: 65536 
  public function IsCachedPositionForEntity( entity : CEntity) : Bool;  // flags: 65536 
  public function GetCachedPositionForEntity( entity : CEntity) : Vector;  // flags: 65536 
  public function SetCachedPositionForEntity( entity : CEntity,  pos : Vector);  // flags: 65536 
  public function ClearCachedPositionForEntity();  // flags: 65536 

}
import class CLightEntitySimple extends CScheduledUsableEntity {

  public function Activate( flag : Bool);  // flags: 65536 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnFrostHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  protected function TurnLightOn();  // flags: 32768 
  protected function TurnLightOff();  // flags: 32768 
  public function StopSmoke( dt : Float,  id : Int32);  // flags: 66560 
  public function IsOn() : Bool;  // flags: 65536 

}
import class W3ApplicatorEffect extends CBaseGameplayEffect {

  protected function ApplySpawnsOn( victimGE : CGameplayEntity);  // flags: 32768 
  protected function HasNeutralSpawn() : Bool;  // flags: 32768 
  public function UpdateParams();  // flags: 65536 
  public function CacheSettings();  // flags: 65536 

}
import class CR4HudModuleEnemyFocus extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  private function GetAttitudeOfTargetActor( target : CGameplayEntity) : EAIAttitude;  // flags: 16384 
  public function SetDodgeFeedback( target : CActor);  // flags: 65536 
  public function ShowOnlyName( show : Bool);  // flags: 65536 
  public function ShowDamageType( valueType : EFloatingValueType,  value : Float,  optional  stringParam : String);  // flags: 65536 
  private function SetDamageText( label : String,  value : Int32,  color : Float);  // flags: 16384 
  public function HideDamageText();  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function SetContraHint( set : Bool);  // flags: 65536 
  public function SetShowHardLock( set : Bool);  // flags: 65536 
  protected function UpdateScale( scale : Float,  flashModule : CScriptedFlashSprite) : Bool;  // flags: 32768 
  private function UpdateQuestIcon( target : CNewNPC);  // flags: 16384 

}
import class CMonsterNestEntityStateIntact extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CMonsterNestEntityStateSettingExplosives extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function PlayAnimationAndSetExplosives();  // flags: 65664 

}
import class CMonsterNestEntityStateExplosion extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function Explosion();  // flags: 65664 
  private function ProcessExplosion();  // flags: 16384 
  private function ProcessExplosionEffects();  // flags: 16384 
  private function ProcessExplosionDamage();  // flags: 16384 

}
import class CMonsterNestEntityStateNestRebuilding extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CMonsterNestEntityStateNestRebuild extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function Rebuild();  // flags: 65664 

}
import class CMonsterNestEntityStateNestDestroyedBoss extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CMonsterNestEntityStateNestDestroyed extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CMajorPlaceOfPowerEntityStatePlaceOfPower_Idle extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class CMajorPlaceOfPowerEntityStatePlaceOfPower_Channeling extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function PlaceOfPower_Channel();  // flags: 65664 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class CMajorPlaceOfPowerEntityStatePlaceOfPower_Activated extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  private function GrantSkillPointIfPossible();  // flags: 16384 
  private function GrantBuff();  // flags: 16384 
  private function GetStatFromEnum( statName : EShrineBuffs) : EEffectType;  // flags: 16384 

}
import class CMajorPlaceOfPowerEntityStatePlaceOfPower_Recharging extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function Recharge( timeDelta : GameTime,  id : Int32);  // flags: 66560 

}
import class CRiftEntityStateIntact extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CRiftEntityStateClosed extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function CloseRift();  // flags: 65664 

}
import class W3MeteorProjectile_CreateMarkerEntityHelper extends CCreateEntityHelper {

  public event function OnEntityCreated( entity : CEntity) : Bool;  // flags: 65568 

}
import class W3ArrowProjectile extends W3AdvancedProjectile {

  public event function OnProjectileShot( targetCurrentPosition : Vector,  optional  target : CNode) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public function ToggleFire( toggle : Bool);  // flags: 65536 
  public function ToggleUnderwater( toggle : Bool);  // flags: 65536 
  public function SmartDestroy();  // flags: 65536 
  public function ActivateTrail( trailName : CName);  // flags: 65536 
  public function StopActiveTrail();  // flags: 65536 
  public function CheckIfInfWaterLoop( timeDelta : Float,  id : Int32);  // flags: 66560 
  protected function CheckIfInfWater() : Bool;  // flags: 32768 
  public function ThrowProjectile( targetPosIn : Vector);  // flags: 65536 
  public function AttachArrowToShield( victim : CActor,  pos : Vector);  // flags: 65536 
  public function AttachArrowToRagdoll( victim : CActor,  pos : Vector,  boneName : CName);  // flags: 65536 
  protected function ProcessDamageAction( victim : CGameplayEntity,  pos : Vector,  boneName : CName);  // flags: 32768 
  public function SetShouldBeAttachedToVictim( val : Bool);  // flags: 65536 
  public function GetShouldBeAttachedToVictim() : Bool;  // flags: 65536 

}
import class CBookMinigameSlot extends CGameplayEntity {

  public function init();  // flags: 65536 
  public function FillSlot( newBook : CBookMinigameBook);  // flags: 65536 
  public function CheckBook() : Bool;  // flags: 65536 

}
import class CBooksMinigameManager extends CGameplayEntity {

  public function init();  // flags: 65536 
  public function MoveBook( bookSlotNumber : Int32,  direction : EBookDirection);  // flags: 65536 
  public function CheckBooksOrder();  // flags: 65536 

}
import class W3QuestCond_EntityComponentEnabled extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function FindEntity();  // flags: 65536 

}
import class W3QuestCond_EntityComponentEnabled_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3QuestCond_EntityComponentExists extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function FindEntity();  // flags: 65536 

}
import class W3QuestCond_EntityComponentExists_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3QuestCond_A_closerToTargetThan_B extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function ContainsTag( tag : CName) : Bool;  // flags: 65536 
  public function FindEntities();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_A_closerToTargetThan_B_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3QuestCond_IsEffectActive extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function FindEntity();  // flags: 65536 

}
import class W3QuestCond_IsEffectActive_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3QuestCond_GameplayFact extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class W3QuestCond_GameplayFact_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventString( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : String) : Bool;  // flags: 65568 

}
import class W3QuestCond_playerKnowsRecipe extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class W3QuestCond_playerKnowsRecipe_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3QuestCond_playerKnowsSchematics extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class W3QuestCond_playerKnowsSchematics_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3QuestCond_ActorIsDespawned extends CQuestScriptedCondition {

  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function FindActors();  // flags: 65536 

}
import class W3QuestCond_ActorIsDespawned_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3QuestCond_BookHasBeenRead extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class W3QuestCond_BookHasBeenReadExt extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class W3QuestCond_BookHasBeenRead_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventString( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : String) : Bool;  // flags: 65568 

}
import class W3QuestCond_BookHasBeenRead_Listener_Ext extends IGlobalEventScriptedListener {

  public event function OnGlobalEventString( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : String) : Bool;  // flags: 65568 

}
import class W3QuestCond_CanSeePlayer extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function FindActor();  // flags: 65536 

}
import class InterpCurvePoint extends CObject {

  public function InterpCurvePoint();  // flags: 65536 
  public function IsCurveKey() : Bool;  // flags: 65536 

}
import class W3QuestCond_CanSeePlayer_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class CStaticCameraArea extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private final function IsActivatorValid( activator : CComponent) : Bool;  // flags: 16400 

}
import class W3QuestCond_CheckLightState extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function FindEntity();  // flags: 65536 

}
import class CReactionRandomCondition extends CReactionScriptedCondition {

  public function Perform( source : CNode,  target : CNode,  interestPoint : CInterestPointInstance) : Bool;  // flags: 65536 

}
import class CSpawner extends CEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Respawn( t : Float,  id : Int32);  // flags: 66560 

}
import class W3QuestCond_CheckLightState_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3KillTestTrigger extends CGameplayEntity {

  public function acttimer( dt : Float,  id : Int32);  // flags: 66560 
  public function DoStuff();  // flags: 65536 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3QuestCond_Container extends CQuestScriptedCondition {

  public function RegisterGlobalListener( flag : Bool);  // flags: 65536 
  public function RegisterInventoryListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 
  public function FindInventory();  // flags: 65536 

}
import class W2BalanceCalc extends CObject {

  public function SetActorStats( actor : CActor);  // flags: 65536 
  public function PrintActorStats( actor : CActor);  // flags: 65536 
  public function CalculateActorCost();  // flags: 65536 
  public function SetPlayerStats();  // flags: 65536 
  public function SetCosts();  // flags: 65536 
  public function CalculateCostsForPlayer();  // flags: 65536 
  public function PrintPlayerStats();  // flags: 65536 

}
import class ARDebugCameraRot extends ICustomCameraScriptedPivotRotationController {

  protected function ControllerUpdate( out  currentRotation : EulerAngles,  out  currentVelocity : EulerAngles,  timeDelta : Float);  // flags: 32768 
  protected function ControllerUpdateInput( out  movedHorizontal : Bool,  out  movedVertical : Bool);  // flags: 32768 

}
import class ARDebugCameraDist extends ICustomCameraScriptedPivotDistanceController {

  protected function ControllerUpdate( out  currDistance : Float,  out  currVelocity : Float,  timeDelta : Float);  // flags: 32768 

}
import class W3QuestCond_Container_GlobalListener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3DebugScriptBehaviorToolComponent extends CSpriteComponent {

  public event function OnEditorEnabled( e : CEntity) : Bool;  // flags: 65568 
  public event function OnEditorDisabled() : Bool;  // flags: 65568 
  public event function OnTick( dt : Float) : Bool;  // flags: 65568 

}
import class W3QuestCond_Container_InventoryListener extends IInventoryScriptedListener {

  public event function OnInventoryScriptedEvent( eventType : EInventoryEventType,  itemId : SItemUniqueId,  quantity : Int32,  fromAssociatedInventory : Bool) : Bool;  // flags: 65568 

}
import class CHumanAICombatStorage extends CBaseAICombatStorage {

  public function IncParryCount();  // flags: 65536 
  public function GetParryCount() : Int32;  // flags: 65536 
  public function ResetParryCount();  // flags: 65536 
  public function SetPreferedCombatStyle( newStyle : EBehaviorGraph);  // flags: 65536 
  public function GetPreferedCombatStyle() : EBehaviorGraph;  // flags: 65536 
  public function SetActiveCombatStyle( newStyle : EBehaviorGraph);  // flags: 65536 
  public function GetActiveCombatStyle() : EBehaviorGraph;  // flags: 65536 
  public function LeaveCurrentCombatStyle();  // flags: 65536 
  public function StopLeavingCurrentCombatStyle();  // flags: 65536 
  public function IsLeavingStyle() : Bool;  // flags: 65536 
  public function CalculateCombatStylePriority( combatStyle : EBehaviorGraph) : Int32;  // flags: 65536 
  public function ReturnWeaponSubTypeForActiveCombatStyle() : Int32;  // flags: 65536 
  public function IsProcessingItems() : Bool;  // flags: 65536 
  public function SetProcessingItems( toggle : Bool);  // flags: 65536 
  public function DoesProcessingRequiresIdle() : Bool;  // flags: 65536 
  public function SetProcessingRequiresIdle( toggle : Bool);  // flags: 65536 
  public function SetProjectile( proj : W3AdvancedProjectile);  // flags: 65536 
  public function GetProjectile() : W3AdvancedProjectile;  // flags: 65536 
  public function AddNewProjectile( proj : W3AdvancedProjectile);  // flags: 65536 
  public function GetProjectiles() : array<W3AdvancedProjectile>;  // flags: 65536 
  public function DetachAndDestroyProjectile();  // flags: 65536 
  public function SetProtectedByQuen( toggle : Bool);  // flags: 65536 
  public function IsProtectedByQuen() : Bool;  // flags: 65536 
  public function BecomeAFollower();  // flags: 65536 
  public function NoLongerFollowing();  // flags: 65536 
  public function IsAFollower() : Bool;  // flags: 65536 
  public function ShouldAttack( currentTime : Float) : Bool;  // flags: 65536 
  public function ShouldKeepDistanceToPlayer() : Bool;  // flags: 65536 

}
import class W3AdvancedProjectile extends CThrowable {

  public function SetLifeSpan( _duration : Float);  // flags: 65536 
  public function AddColidedEntity( _colider : CGameplayEntity);  // flags: 65536 
  public function ClearColidedEntities();  // flags: 65536 
  public function TimeDestroy( deltaTime : Float,  id : Int32);  // flags: 66560 
  public final function ShootProjectileAtPosition( angle : Float,  velocity : Float,  target : Vector,  optional  range : Float,  optional  collisionGroups : array<CName>);  // flags: 65552 
  public final function ShootProjectileAtNode( angle : Float,  velocity : Float,  target : CNode,  optional  range : Float,  optional  collisionGroups : array<CName>);  // flags: 65552 
  public final function ShootProjectileAtBone( angle : Float,  velocity : Float,  target : CEntity,  targetBone : CName,  optional  range : Float,  optional  collisionGroups : array<CName>);  // flags: 65552 
  public final function ShootCakeProjectileAtPosition( cakeAngle : Float,  cakeHeight : Float,  shootAngle : Float,  velocity : Float,  target : Vector,  range : Float,  optional  collisionGroups : array<CName>);  // flags: 65552 
  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileShot( targetCurrentPosition : Vector,  optional  target : CNode) : Bool;  // flags: 65568 
  public function DestroyRequest();  // flags: 65536 

}
import class CBossAICombatStorage extends CHumanAICombatStorage {

  public function SetIsParryAvailable( value : Bool);  // flags: 65536 
  public function GetIsParryAvailable() : Bool;  // flags: 65536 
  public function SetIsSiphonAvailable( value : Bool);  // flags: 65536 
  public function GetIsSiphonAvailable() : Bool;  // flags: 65536 
  public function SetIsDodgeAvailable( value : Bool);  // flags: 65536 
  public function GetIsDodgeAvailable() : Bool;  // flags: 65536 
  public function SetIsStaminaRegenAvailable( value : Bool);  // flags: 65536 
  public function GetIsStaminaRegenAvailable() : Bool;  // flags: 65536 
  public function SetIsPhaseChangeAvailable( value : Bool);  // flags: 65536 
  public function GetIsPhaseChangeAvailable() : Bool;  // flags: 65536 
  public function SetIsInSpecialAttack( value : Bool);  // flags: 65536 
  public function GetIsInSpecialAttack() : Bool;  // flags: 65536 
  public function SetIsAttackAvailable( attack : EBossSpecialAttacks,  val : Bool);  // flags: 65536 
  public function IsAttackAvailable( attack : EBossSpecialAttacks) : Bool;  // flags: 65536 

}
import class CR4HudModuleMinimap2 extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function AddMapPath( path : SMapPathInstance);  // flags: 65536 
  public function DeleteMapPaths( ids : array<Int32>);  // flags: 65536 
  public function NotifyPlayerEnteredInterior( areaPos : Vector,  areaYaw : Float,  texture : String);  // flags: 65536 
  public function NotifyPlayerExitedInterior();  // flags: 65536 
  public function NotifyPlayerMountedBoat();  // flags: 65536 
  public function NotifyPlayerDismountedBoat();  // flags: 65536 
  private function UpdateZoom();  // flags: 16384 
  private function UpdatePlayerPositionAndRotation( timeDelta : Float);  // flags: 16384 
  private function UpdateBuffedMonsterDisplay();  // flags: 16384 
  private function HAXGetMonsterIconFromJournalName( jourName : CName) : CName;  // flags: 16384 
  private function HAXGetMonsterNameByIcon( icon : CName) : String;  // flags: 16384 
  private function GetCurrentTimeString() : String;  // flags: 16384 
  public function RefreshTimeDisplay();  // flags: 65536 
  private function UpdateWeatherDisplay();  // flags: 16384 
  public function EnableMask( enable : Bool);  // flags: 65536 
  public function EnableDebug( enable : Bool);  // flags: 65536 
  public function EnableBorders( enable : Bool);  // flags: 65536 
  private function LoadMinimapSettings();  // flags: 16384 
  public function DoFading( fadeOut : Bool,  immediately : Bool);  // flags: 65536 
  public function EnableRotation( enable : Bool);  // flags: 65536 
  public function SetZoom( newValue : Float,  immediately : Bool);  // flags: 65536 

}
import class CAIStorageReactionData extends CObject {

  public function IsAlarmed( timeStamp : Float) : Bool;  // flags: 65536 
  public function IsAngry( timeStamp : Float) : Bool;  // flags: 65536 
  public function SetAlarmed( timeStamp : Float);  // flags: 65536 
  public function IncreaseTauntCounter( timeStamp : Float,  owner : CNewNPC);  // flags: 65536 
  public function Reset();  // flags: 65536 
  public function ChangeAttitudeIfNeeded( owner : CNewNPC,  _actor : CActor);  // flags: 65536 
  public function NewTempHostileActor( owner : CActor,  _actor : CActor);  // flags: 65536 
  public function ResetAttitudes( owner : CActor);  // flags: 65536 

}
import class CBTEnumBehaviorGraph extends IBehTreeValueEnum {

  public function SetVal( val : Int32);  // flags: 65536 

}
import class CBTEnumMoveType extends IBehTreeValueEnum {

  public function SetVal( val : Int32);  // flags: 65536 

}
import class CBTEnumCriticalState extends IBehTreeValueEnum {

  public function SetVal( val : Int32);  // flags: 65536 

}
import class W3QuestCond_ItemAmmo extends CQuestScriptedCondition {

  public function RegisterAmmoListener( flag : Bool);  // flags: 65536 
  public function RegisterInventoryListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class CBTEnumHitReactionType extends IBehTreeValueEnum {

  public function SetVal( val : Int32);  // flags: 65536 

}
import class CBTEnumHitReactionSide extends IBehTreeValueEnum {

  public function SetVal( val : Int32);  // flags: 65536 

}
import class CBTEnumHitReactionDirection extends IBehTreeValueEnum {

  public function SetVal( val : Int32);  // flags: 65536 

}
import class W3QuestCond_ItemAmmo_AmmoListener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class CBTEnumAttackSwingType extends IBehTreeValueEnum {

  public function SetVal( val : Int32);  // flags: 65536 

}
import class W3QuestCond_ItemAmmo_InventoryListener extends IInventoryScriptedListener {

  public event function OnInventoryScriptedEvent( eventType : EInventoryEventType,  itemId : SItemUniqueId,  quantity : Int32,  fromAssociatedInventory : Bool) : Bool;  // flags: 65568 

}
import class CBTEnumAttackSwingDriection extends IBehTreeValueEnum {

  public function SetVal( val : Int32);  // flags: 65536 

}
import class W3QuestCond_IsItemEquipped extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class CHorseTagAIParameters extends ICustomValAIParameters {

  public function SetCNameValue( value : CName);  // flags: 65536 

}
import class W3QuestCond_IsItemEquipped_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class SpawnOnHorseEffector extends IBehTreeOnSpawnEffector {

  public function Run();  // flags: 65536 

}
import class W3QuestCond_IsItemQuantityMet extends CQuestScriptedCondition {

  public function RegisterGlobalListener( flag : Bool);  // flags: 65536 
  public function RegisterInventoryListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 
  public function FindInventory();  // flags: 65536 

}
import class SetNPCTypeEffector extends IBehTreeOnSpawnEffector {

  public function Run();  // flags: 65536 

}
import class W3QuestCond_IsItemQuantityMet_GlobalListener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3QuestCond_IsItemQuantityMet_InventoryListener extends IInventoryScriptedListener {

  public event function OnInventoryScriptedEvent( eventType : EInventoryEventType,  itemId : SItemUniqueId,  quantity : Int32,  fromAssociatedInventory : Bool) : Bool;  // flags: 65568 

}
import class W3BehTreeValNameArray extends IScriptable {

  public function GetArray() : array<CName>;  // flags: 65536 

}
import class W3QuestCond_IsItemUsed extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class W3QuestCond_IsItemUsed_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventString( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : String) : Bool;  // flags: 65568 

}
import class CAICarryingItemsParams extends CAINpcWanderParams {

  public function Init();  // flags: 65536 

}
import class W3QuestCond_OilApplied extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class W3QuestCond_OilApplied_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class CBTTaskCanUseChatScene extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskIsAtWork extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class W3QuestCond_ReusableClueUsed extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class CAIFollowAction extends IAIBaseAction {

  public function Init();  // flags: 65536 

}
import class CAIFollowParams extends IAIActionParameters {

  public function Init();  // flags: 65536 

}
import class CAIFollowSideBySideAction extends CAIFollowAction {

  public function Init();  // flags: 65536 

}
import class CAIRiderFollowAction extends IRiderActionTree {

  public function Init();  // flags: 65536 

}
import class CAIRiderFollowActionParams extends IRiderActionParameters {

  public function Init();  // flags: 65536 
  public function CopyTo( followParams : CAIFollowParams);  // flags: 65536 

}
import class W3QuestCond_ReusableClueUsed_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class W3QuestCond_SwitchState extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function FindSwitch();  // flags: 65536 

}
import class CAIRiderFollowSideBySideActionParams extends CAIRiderFollowActionParams {

  public function Init();  // flags: 65536 
  public function CopyTo_SideBySide( followSideBySideAction : CAIFollowSideBySideAction);  // flags: 65536 

}
import class W3QuestCond_SwitchState_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class CAIMoveAlongPathAction extends IAIBaseAction {

  public function Init();  // flags: 65536 
  public function OnPostLoad() : Bool;  // flags: 65536 

}
import class CAIMoveAlongPathParams extends IAIActionParameters {

  public function Init();  // flags: 65536 

}
import class W3QuestCond_SelectedSign extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class W3QuestCond_SelectedSign_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventString( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : String) : Bool;  // flags: 65568 

}
import class CAIMoveAlongPathWithCompanionAction extends CAIMoveAlongPathAction {

  public function Init();  // flags: 65536 

}
import class CAIMoveAlongPathAwareOfTailAction extends CAIMoveAlongPathAction {

  public function Init();  // flags: 65536 

}
import class W3QuestCond_UncoveredBoatFTPoint extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class W3QuestCond_UncoveredBoatFTPoint_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class CAIRaceAlongPathAction extends CAIMoveAlongPathAction {

  public function Init();  // flags: 65536 

}
import class W3QuestCond_WasMeditating extends CQuestScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 
  public function EvaluateImpl();  // flags: 65536 

}
import class CAIRaceAlongPathParams extends CAIMoveAlongPathParams {

  public function Init();  // flags: 65536 

}
import class CAIRiderMoveAlongPathActionParams extends IRiderActionParameters {

  public function Init();  // flags: 65536 
  public function CopyTo( moveAlongPathParams : CAIMoveAlongPathParams);  // flags: 65536 

}
import class W3QuestCond_WasMeditating_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventString( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : String) : Bool;  // flags: 65568 

}
import class CAIRiderMoveAlongPathWithCompanionActionParams extends CAIRiderMoveAlongPathActionParams {

  public function CopyTo_2( moveAlongPathParams : CAIMoveAlongPathWithCompanionParams);  // flags: 65536 

}
import class CAIRiderRaceAlongPathActionParams extends IRiderActionParameters {

  public function Init();  // flags: 65536 
  public function CopyTo( raceAlongPathParams : CAIRaceAlongPathParams);  // flags: 65536 

}
import class CAIRiderRideHorseAction extends IRiderActionTree {

  public function Init();  // flags: 65536 
  public function CopyTo( horseDoNothingAction : CAIHorseDoNothingAction);  // flags: 65536 

}
import class CAISailorMountBoatActionParams extends ISailorActionParameters {

  public function Init();  // flags: 65536 

}
import class CAISailorMoveToActionParams extends ISailorActionParameters {

  public function Init();  // flags: 65536 

}
import class CAISailorMoveAlongPathActionParams extends ISailorActionParameters {

  public function Init();  // flags: 65536 

}
import class CAISailorRaceAlongPathActionParams extends ISailorActionParameters {

  public function Init();  // flags: 65536 

}
import class W3QuestCond_IsTargetOf extends CQCActorScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function OnActivate( actor : CActor) : Bool;  // flags: 65536 
  public function OnDeactivate( actor : CActor) : Bool;  // flags: 65536 
  public function Evaluate( actor : CActor) : Bool;  // flags: 65536 
  public function FindAttacker();  // flags: 65536 

}
import class W3QuestCond_IsTargetOf_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class CAIMoveToPoint extends IAIBaseAction {

  public function Init();  // flags: 65536 

}
import class W3QuestCond_ActorRotationToNode extends CQCActorScriptedCondition {

  public function RegisterListener( flag : Bool);  // flags: 65536 
  public function OnActivate( actor : CActor) : Bool;  // flags: 65536 
  public function OnDeactivate( actor : CActor) : Bool;  // flags: 65536 
  public function Evaluate( act : CActor) : Bool;  // flags: 65536 
  public function FindTarget();  // flags: 65536 

}
import class W3QuestCond_ActorRotationToNode_Listener extends IGlobalEventScriptedListener {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 

}
import class CAIMoveToAction extends IAIBaseAction {

  public function Init();  // flags: 65536 

}
import class CAIRiderMoveToActionParams extends IRiderActionParameters {

  public function CopyTo( moveToParams : CAIMoveToParams);  // flags: 65536 

}
import class CAIFormationLeadActionTree extends IAIFormationActionTree {

  public function Init();  // flags: 65536 

}
import class CAIAnimalDefaults extends CAIDefaults {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecorator extends CAIIdleDecoratorTree {

  public function Init();  // flags: 65536 

}
import class CAIAnimalDeath extends CAINpcDeath {

  public function Init();  // flags: 65536 

}
import class CAIRaceHorseDefaults extends CAIHorseDefaults {

  public function Init();  // flags: 65536 

}
import class CAnimalIdleDecoratorTree extends CAIMainTree {

  public function Init();  // flags: 65536 

}
import class CAIRiderIdle extends CAINpcIdle {

  public function Init();  // flags: 65536 

}
import class CAIShootActionTree extends IAICustomActionTree {

  public function Init();  // flags: 65536 

}
import class CAILambertTrainingActionTree extends IAICustomActionTree {

  public function Init();  // flags: 65536 

}
import class CAICiriSnowballFightActionTree extends IAICustomActionTree {

  public function Init();  // flags: 65536 

}
import class CAIMageBossFightActionTree extends IAICustomActionTree {

  public function Init();  // flags: 65536 

}
import class CAINpcReactionsTree extends CAIReactionTree {

  protected function OverriderReactionsPriority( priority : Int32,  optional  priorityWhileActive : Int32);  // flags: 32768 

}
import class CAIActionBeingHit extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionBumpTree extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionCombatNearby extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionDrawSword extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class W3CiriPhantom extends CGameplayEntity {

  public function Init( setOwner : CActor,  setTarget : CActor);  // flags: 65536 
  private function InitDamper();  // flags: 16384 
  private function Rotate( dt : Float,  id : Int32);  // flags: 17408 
  private function SlowMoStart( dt : Float,  id : Int32);  // flags: 17408 
  private function SlowMoEnd( dt : Float,  id : Int32);  // flags: 17408 
  private function RotateToTarget( dt : Float);  // flags: 16384 
  public event function OnPreAttackEvent( animEventName : CName,  animEventType : EAnimationEventType,  data : CPreAttackEventData,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  protected function Attack( hitTarget : CGameplayEntity,  animData : CPreAttackEventData,  weaponId : SItemUniqueId,  parriedBy : array<CActor>,  attackAnimationName : CName,  hitTime : Float,  weaponEntity : CItemEntity);  // flags: 32768 
  protected function PrepareAttackAction( hitTarget : CGameplayEntity,  animData : CPreAttackEventData,  weaponId : SItemUniqueId,  parriedBy : array<CActor>,  attackAnimationName : CName,  hitTime : Float,  weaponEntity : CItemEntity,  out  attackAction : W3Action_Attack) : Bool;  // flags: 32768 
  public event function OnAnimEvent_AllowBlend( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_fx_trail( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function PlayEffectOnHeldWeapon( effectName : CName) : Bool;  // flags: 65536 
  private function SmartSetVisible( toggle : Bool);  // flags: 16384 

}
import class CAIActionAttack extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionCastSign extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionCrossbowShot extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionBombExplosion extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionLooting extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionTaunt extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionRain extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionJump extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionCombatStarted extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionGossip extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionQuestion extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionGreeting extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class EulerAnglesSpringDamper extends CObject {

  public final function SetSmoothTime( value : Float);  // flags: 65552 
  public final function Init( curr : EulerAngles,  dest : EulerAngles);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function SetValue( value : EulerAngles);  // flags: 65552 
  public final function GetValue() : EulerAngles;  // flags: 65552 
  public final function GetDestValue() : EulerAngles;  // flags: 65552 
  public final function Update( dt : Float);  // flags: 65552 
  public final function UpdateAndGet( dt : Float,  value : EulerAngles) : EulerAngles;  // flags: 65552 
  public function UpdateManual( out  current : EulerAngles,  out  velocity : EulerAngles,  dest : EulerAngles,  dt : Float);  // flags: 65536 

}
import class CAIActionBarter extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIQuestActionPlayerPresence extends CAIActionPlayerPresence {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleAction extends IAIActionTree {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleEat extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDig extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleClean extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleOnGroundAndClean extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleSit extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleLie extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleOnGround extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleHowl extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleSleep extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleRoll extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleStretch extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleCough extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleStrikeFists extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleGrowl extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleWings extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleLookAround extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleYawn extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleSniff extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleFlyBarrel extends CAIMonsterFlyIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleFlyAirDive extends CAIMonsterFlyIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdlePlayAround extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterSearchFoodTree extends CAISubTree {

  public function Init();  // flags: 65536 

}
import class CAIMonsterSearchFoodIdleParams extends CAISubTreeParameters {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorParams extends CAIIdleParameters {

  public function Init();  // flags: 65536 

}
import class CAIMonsterReactionsTree extends CAIReactionTree {

  public function Init();  // flags: 65536 

}
import class W3SignProjectile extends CProjectileTrajectory {

  public function ExtInit( signOwner : W3SignOwner,  sign : ESkill,  signEnt : W3SignEntity,  optional  reusable : Bool);  // flags: 65536 
  public function ShootTarget( target : CNode,  distance : Float,  optional  hitOnlyTarget : Bool,  optional  collisionGroups : array<CName>);  // flags: 65536 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public function SetAttackRange( ar : CAIAttackRange);  // flags: 65536 
  public function GetSignEntity() : W3SignEntity;  // flags: 65536 
  protected function ShouldCheckAttitude() : Bool;  // flags: 32768 
  public function ProcessAttackRange();  // flags: 65536 
  public event function OnAttackRangeHit( entity : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 
  protected function ProcessCollision( collider : CGameplayEntity,  pos : Vector,  normal : Vector);  // flags: 32768 
  public function ClearHitEntities();  // flags: 65536 
  public function GetSignSkill() : ESkill;  // flags: 65536 
  public function GetCaster() : CEntity;  // flags: 65536 

}
import class W3AardProjectile extends W3SignProjectile {

  protected function ProcessCollision( collider : CGameplayEntity,  pos : Vector,  normal : Vector);  // flags: 32768 
  public event function OnAttackRangeHit( entity : CGameplayEntity) : Bool;  // flags: 65568 

}
import class W3AxiiProjectile extends W3SignProjectile {

  protected function ProcessCollision( collider : CGameplayEntity,  pos : Vector,  normal : Vector);  // flags: 32768 
  protected function ShouldCheckAttitude() : Bool;  // flags: 32768 

}
import class W3FireAuraManagerComponent extends CR4Component {

  public event function OnComponentAttached() : Bool;  // flags: 65568 
  public event function OnAardHit() : Bool;  // flags: 65568 
  public event function OnIgniHit() : Bool;  // flags: 65568 
  public function DeactivateAura();  // flags: 65536 
  public function ActivateAura();  // flags: 65536 
  public event function OnAnimEvent_ActivateFireAura( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_DeactivateFireAura( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 

}
import class CAIBaseMonsterDefaults extends CAIDefaults {

  public function Init();  // flags: 65536 

}
import class CAIMonsterSpawn extends CAISubTree {

  public function Init();  // flags: 65536 

}
import class CAIMonsterTaunt extends CAITauntTree {

  public function Init();  // flags: 65536 

}
import class CAIMonsterAxii extends CAIAxiiTree {

  public function Init();  // flags: 65536 

}
import class CAIMonsterCombat extends CAICombatTree {

  public function Init();  // flags: 65536 

}
import class CAIMonsterDeath extends CAINpcDeath {

  public function Init();  // flags: 65536 

}
import class CAIFlyingMonsterCombat extends CAICombatTree {

  public function Init();  // flags: 65536 

}
import class CAIFlyingMonsterDeath extends CAIMonsterDeath {

  public function Init();  // flags: 65536 

}
import class CAIRotfiendDefaults extends CAIDrownerDefaults {

  public function Init();  // flags: 65536 

}
import class CAINoonwraithDoppelgangerDefaults extends CAINoonwraithDefaults {

  public function Init();  // flags: 65536 

}
import class W3BackgroundAnimatedEntity extends CGameplayEntity {

  public function SetupNodes() : Bool;  // flags: 65536 
  public function MoveBetweenWaypoints( timeDelta : Float);  // flags: 65536 
  public function SpawnBackgroundEntities( attachement : CEntity);  // flags: 65536 
  public function StartMoving();  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function TimerMove( td : Float,  id : Int32);  // flags: 66560 

}
import class CAIIceGolemDefaults extends CAIGolemDefaults {

  public function Init();  // flags: 65536 

}
import class CAIMonsterAxiiParams extends CAIAxiiParameters {

  public function Init();  // flags: 65536 

}
import class CR4OverlayPopup extends CR4PopupBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnInputHandled( NavCode : String,  KeyCode : Int32,  ActionId : Int32) : Bool;  // flags: 65568 
  public function RequestMouseCursor( value : Bool);  // flags: 65536 
  public function ForceHideMouseCursor( value : Bool);  // flags: 65536 
  public function UpdateInputDevice();  // flags: 65536 
  private function ShowSoftwareCursor();  // flags: 16384 
  private function HideSoftwareCursor();  // flags: 16384 
  private function ShowCursor();  // flags: 16384 
  private function HideCursor();  // flags: 16384 
  private function UpdateCursorVisibility();  // flags: 16384 
  public function ShowSafeRect( value : Bool);  // flags: 65536 
  public function AppendButton( actionId : Int32,  gpadCode : String,  kbCode : Int32,  label : String,  optional  contextId : CName);  // flags: 65536 
  public function RemoveButton( actionId : Int32,  optional  contextId : CName);  // flags: 65536 
  public function RemoveContextButtons( contextId : CName);  // flags: 65536 
  public function UpdateButtons();  // flags: 65536 
  public function ShowNotification( messageText : String,  optional  duration : Float);  // flags: 65536 
  public function HideNotification();  // flags: 65536 
  public function ShowLoadingIndicator();  // flags: 65536 
  public function HideLoadingIndicator( optional  immediateHide : Bool);  // flags: 65536 
  public function ShowSavingIndicator();  // flags: 65536 
  public function HideSavingIndicator( optional  immediateHide : Bool);  // flags: 65536 

}
import class CAIMonsterTauntParams extends CAITauntParameters {

  public function Init();  // flags: 65536 

}
import class CR4TutorialPopup extends CR4PopupBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateInputDevice();  // flags: 65536 
  public function UpdateData( TutData : W3TutorialPopupData,  optional  showAnimation : Bool);  // flags: 65536 
  public function SetInvisible( value : Bool,  forced : Bool);  // flags: 65536 
  public event function OnStartHiding() : Bool;  // flags: 65568 
  public event function OnHideTimer() : Bool;  // flags: 65568 
  public event function OnGotoGlossary() : Bool;  // flags: 65568 
  public event function OnCloseByUser() : Bool;  // flags: 65568 
  public event function OnClosingPopup() : Bool;  // flags: 65568 
  private function CanEnableGlossaryLink() : Bool;  // flags: 16384 
  public function ShowTutorialHint( hintData : W3TutorialPopupData);  // flags: 65536 
  public function PlayFeedbackAnim( isCorrect : Bool);  // flags: 65536 
  public function RequestUnpause();  // flags: 65536 
  public function RequestClose( optional  byUser : Bool,  optional  willBeCloned : Bool);  // flags: 65536 
  protected function EnableGlossaryLink( value : Bool);  // flags: 32768 
  public function setArabicAligmentMode();  // flags: 65536 
  protected function CreateTutorialHint( optional  showAnimation : Bool);  // flags: 32768 

}
import class CR4GlossaryTutorialsMenu extends CR4ListBaseMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnUpdateTutorials() : Bool;  // flags: 65568 
  public function UpdateImage( tag : CName);  // flags: 65536 
  private function PopulateData();  // flags: 16384 
  public function UpdateDescription( entryName : CName);  // flags: 65536 
  public function UpdateItems( tag : CName);  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CAIMonsterCombatLogic extends CAISubTree {

  public function Init();  // flags: 65536 

}
import class CAIMonsterCombatParams extends CAIBaseMonsterCombatParams {

  public function Init();  // flags: 65536 

}
import class CAINpcCriticalState extends CAICombatActionTree {

  public function Init();  // flags: 65536 

}
import class CAIMonsterCombatReactionsTree extends CAIReactionTree {

  public function Init();  // flags: 65536 

}
import class CAIFlyingMonsterCombatParams extends CAIBaseMonsterCombatParams {

  public function Init();  // flags: 65536 

}
import class CR4CommonMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  protected function GetSavedDataMenuName() : CName;  // flags: 32768 
  public function SaveStateData();  // flags: 65536 
  protected function GetFirstChildMenuName( parentName : CName) : CName;  // flags: 32768 
  protected function GetMenuParentName( menuName : CName) : CName;  // flags: 32768 
  protected function HasMenuDefined( menuName : CName) : Bool;  // flags: 32768 
  protected function HasMenuWithStateDefined( menuName : CName,  stateName : CName) : Bool;  // flags: 32768 
  protected function GetSavedMenuFromParentName( parentMenuName : CName) : CName;  // flags: 32768 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public function SetInputFeedbackVisibility( value : Bool);  // flags: 65536 
  public function SwitchToSubMenu( MenuName : CName,  MenuState : String);  // flags: 65536 
  public event function OnHideChildMenu() : Bool;  // flags: 65568 
  public event function OnRequestMenu( MenuName : CName,  MenuState : String) : Bool;  // flags: 65568 
  public function ChildMenuConfigured();  // flags: 65536 
  public function HaxGetPanelStateName( stateName : String) : CName;  // flags: 65536 
  public event function OnSwipe( swipe : Int32) : Bool;  // flags: 65568 
  public event function OnInputHandled( NavCode : String,  KeyCode : Int32,  ActionId : Int32) : Bool;  // flags: 65568 
  public function SetMenuNavigationEnabled( enabled : Bool);  // flags: 65536 
  public function UpdateTutorialRestruction();  // flags: 65536 
  private function DefineMenuStructure();  // flags: 16384 
  private function DisableNotAllowedTabs();  // flags: 16384 
  public function ActionBlockStateChange( action : EInputActionBlock,  blocked : Bool);  // flags: 65536 
  private function CheckTutorialRestrictions();  // flags: 16384 
  private function DefineSceneMenuStructure();  // flags: 16384 
  private function GetInitGameplayEntity() : IScriptable;  // flags: 16384 
  private function AddMerchantTagIfMissing_HACK();  // flags: 16384 
  private function CheckCraftingComponent() : Bool;  // flags: 16384 
  private function CheckRepairPanelEnabled() : Bool;  // flags: 16384 
  private function CheckAlchemyPanelEnabled() : Bool;  // flags: 16384 
  private function CheckShopPanelEnabled() : Bool;  // flags: 16384 
  private function DefineMenuItem( itemName : CName,  itemLabel : String,  optional  parentMenuItem : CName,  optional  menuState : CName);  // flags: 16384 
  private function SetupMenu();  // flags: 16384 
  private function GetGFxMenuStruct( out  StructGFx : CScriptedFlashArray);  // flags: 16384 
  private function GetGFxMenuItem( MenuItemData : SMenuTab,  out  GFxObjectData : CScriptedFlashObject);  // flags: 16384 
  private function UpdateTabs();  // flags: 16384 
  public function SetMenuTabVisible( tabName : CName,  value : Bool);  // flags: 65536 
  public function SetMenuTabeEnable( tabName : CName,  value : Bool,  optional  stateName : CName);  // flags: 65536 
  public function SetSingleMenuTabEnabled( tabName : CName);  // flags: 65536 
  public function GoNextMenu();  // flags: 65536 
  public function GoPriorMenu();  // flags: 65536 
  public function ShowBackground( value : Bool);  // flags: 65536 
  public function UpdatePlayerOrens();  // flags: 65536 
  public function UpdatePlayerLevel();  // flags: 65536 
  public function UpdateItemsCounter() : Int32;  // flags: 65536 
  private function GetCurrentLevel() : Int32;  // flags: 16384 
  private function GetCurrentExperience() : Float;  // flags: 16384 
  private function GetLevelExperience() : Float;  // flags: 16384 
  private function GetTargetExperience() : Float;  // flags: 16384 
  public function SetMenuAlpha( value : Int32);  // flags: 65536 
  public function CloseMenuRequest();  // flags: 65536 
  public event function OnFailedCreateMenu() : Bool;  // flags: 65568 
  public function ChildRequestCloseMenu();  // flags: 65536 
  public function UpdateGFxButtons( gfxButtonsList : array<SKeyBinding>,  optional  populateData : Bool);  // flags: 65536 
  public function UpdateDefaultButtons( defaultButtonsList : array<SKeyBinding>,  optional  populateData : Bool);  // flags: 65536 
  public function UpdateContextButtons( contextButtonsList : array<SKeyBinding>,  optional  populateData : Bool);  // flags: 65536 
  protected function GatherBindersArray( out  resultArray : CScriptedFlashArray,  bindersList : array<SKeyBinding>,  optional  level : Int32,  optional  isContextBinding : Bool);  // flags: 32768 
  public function UpdateInputFeedback();  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 
  public event function OnPlaySoundEvent( soundName : String) : Bool;  // flags: 65568 
  public event function OnOpenSubPanel( menuName : CName) : Bool;  // flags: 65568 
  public event function OnCloseSubPanel( menuName : CName) : Bool;  // flags: 65568 
  public event function OnControllerChanged( isGamepad : Bool) : Bool;  // flags: 65568 
  public function SetMeditationMode( value : Bool);  // flags: 65536 
  private function StopMeditation();  // flags: 16384 
  private function SendLastItemInfoData();  // flags: 16384 
  private function SendQuestsInfoData();  // flags: 16384 
  private function SendGlossaryInfoData();  // flags: 16384 
  private function SendAlchemyInfoData();  // flags: 16384 
  private function SendSkillsInfoData();  // flags: 16384 
  private function SendMappinInfoData();  // flags: 16384 
  private function GetNewItemsGFxMenuStruct( out  StructGFx : CScriptedFlashArray);  // flags: 16384 
  private function GetTrackedQuestGFxMenuStruct( out  StructGFx : CScriptedFlashArray);  // flags: 16384 
  private function GetGlossaryGFxMenuStruct( out  StructGFx : CScriptedFlashArray);  // flags: 16384 
  private function GetAlchemyGFxMenuStruct( out  StructGFx : CScriptedFlashArray);  // flags: 16384 
  public function GetEntryTitle( journalBase : CJournalBase) : String;  // flags: 65536 
  private function GetSkillGFxMenuStruct( out  StructGFx : CScriptedFlashArray);  // flags: 16384 
  private function GetMappinGFxMenuStruct( out  StructGFx : CScriptedFlashArray);  // flags: 16384 
  public event function OnRefreshHubInfo( fromAs : Bool) : Bool;  // flags: 65568 
  public event function OnVideoStopped() : Bool;  // flags: 65568 
  public function SetLockedInHub( value : Bool);  // flags: 65536 
  public function SetLockedInMenu( value : Bool);  // flags: 65536 
  public function IsLockedInHub() : Bool;  // flags: 65536 
  public function IsLockedInMenu() : Bool;  // flags: 65536 
  public event function OnHotkeyTriggered( keyCode : EInputKey) : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 

}
import class CAINpcCriticalStateFlying extends CAICombatActionTree {

  public function Init();  // flags: 65536 

}
import class CAIWolfCombatLogicParams extends CAIMonsterCombatLogicParams {

  public function Init();  // flags: 65536 

}
import class CAIArachasCombatLogicParams extends CAIMonsterCombatLogicParams {

  public function Init();  // flags: 65536 

}
import class CAIDamageReactionTreeParams extends CAISubTreeParameters {

  public function Init();  // flags: 65536 

}
import class CAIMonsterDefeatedParams extends CAIDeathParameters {

  public function Init();  // flags: 65536 

}
import class CAINpcUnconsciousTree extends CAIDeathTree {

  public function Init();  // flags: 65536 

}
import class CAIActionSearchForTarget extends CAIMonsterActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionAllySearchesTarget extends CAIMonsterActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionPlayWithTarget extends CAIMonsterActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionMoveToLure extends CAIMonsterActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionMoveOut extends CAIMonsterActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionMoveInPack extends CAIMonsterActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionRunWildInPack extends CAIMonsterActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionLeadEscape extends CAIMonsterActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIActionEscapeInPack extends CAIMonsterActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAINpcCombat extends CAICombatTree {

  public function Init();  // flags: 65536 

}
import class CAINpcCombatParams extends CAICombatParameters {

  public function Init();  // flags: 65536 
  protected function SetupCombatStyles();  // flags: 32768 
  protected function SetupCSFinisherAnims();  // flags: 32768 
  protected function ClearCSFinisherAnims();  // flags: 32768 
  public function InitializeCombatStyles();  // flags: 65536 

}
import class CAINpcCombatStyle extends CAISubTree {

  public function Init();  // flags: 65536 

}
import class CAINpcDefaults extends CAIDefaults {

  public function Init();  // flags: 65536 

}
import class CR4MenuBase extends CR4Menu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnFailedCreateMenu() : Bool;  // flags: 65568 
  public event function OnClearSlotNewFlag( item : SItemUniqueId) : Bool;  // flags: 65568 
  public function UpdateRestrictDirectClosing( value : Bool);  // flags: 65536 
  public function ActionBlockStateChange( action : EInputActionBlock,  blocked : Bool);  // flags: 65536 
  public event function OnSendNotification( locKey : String) : Bool;  // flags: 65568 
  protected function SetTutorialVisibility( value : Bool,  forced : Bool);  // flags: 32768 
  protected function SendCombatState();  // flags: 32768 
  protected function GetSavedData();  // flags: 32768 
  protected function GetSavedDataMenuName() : CName;  // flags: 32768 
  public function OnRequestSubMenu( menuName : CName,  optional  initData : IScriptable);  // flags: 65536 
  protected function IsCategoryOpened( categoryName : CName) : Bool;  // flags: 32768 
  protected function UpdateAcceptCancelSwaping();  // flags: 32768 
  protected function UpdateControlSchemeLock();  // flags: 32768 
  public function UpdateInputDevice();  // flags: 65536 
  protected function SetControllerType( isGamepad : Bool);  // flags: 32768 
  public function SetPlatformType( platformType : Platform);  // flags: 65536 
  protected function UpdateSceneEntityFromCreatureDataComponent( entity : CEntity);  // flags: 32768 
  protected function ShowRenderToTexture( targetName : String);  // flags: 32768 
  public function SetMenuNavigationEnabled( enabled : Bool);  // flags: 65536 
  public function SetButtons();  // flags: 65536 
  public event function OnMenuShown() : Bool;  // flags: 65568 
  public function showNotification( notificationText : String,  optional  duration : Float);  // flags: 65536 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function RestoreInput();  // flags: 65536 
  public function SetParentMenu( menu : CR4MenuBase);  // flags: 65536 
  public function GetParentMenu() : CR4MenuBase;  // flags: 65536 
  public event function OnBreakPoint( text : String) : Bool;  // flags: 65568 
  public function UpdateButtons( ButtonsDef : array<SMenuButtonDef>);  // flags: 65536 
  public function UpdateButton( ButtonDef : SMenuButtonDef,  ID : Int32);  // flags: 65536 
  protected function AddButtonDef( out  targetList : array<SMenuButtonDef>,  navCode : String,  label : String);  // flags: 32768 
  protected function AddInputBinding( label : String,  padNavCode : String,  optional  keyboardKeyCode : Int32);  // flags: 32768 
  public function setColorBlindMode( value : Bool);  // flags: 65536 
  public function setArabicAligmentMode();  // flags: 65536 
  public function GetLastChild() : CR4MenuBase;  // flags: 65536 
  public function SetMenuState( newState : CName);  // flags: 65536 
  public function BlurLayer( value : Bool);  // flags: 65536 
  protected function HandleMenuLoaded();  // flags: 32768 
  protected function ActivateContext( targetContext : W3UIContext);  // flags: 32768 
  protected function ResetContext();  // flags: 32768 
  protected function GetRootMenu() : CR4MenuBase;  // flags: 32768 
  public function ChildRequestCloseMenu();  // flags: 65536 
  public event function OnPlaySoundEvent( soundName : String) : Bool;  // flags: 65568 
  public function PlayOpenSoundEvent();  // flags: 65536 
  public event function OnModuleSelected( moduleID : Int32,  moduleBindingName : String) : Bool;  // flags: 65568 
  public event function OnAppendButton( actionId : Int32,  gamepadNavCode : String,  keyboardKeyCode : Int32,  label : String) : Bool;  // flags: 65568 
  public event function OnRemoveButton( actionId : Int32) : Bool;  // flags: 65568 
  public event function OnCleanupButtons() : Bool;  // flags: 65568 
  public event function OnUpdateGFxButtonsList() : Bool;  // flags: 65568 
  public event function OnAppendGFxButton( actionId : Int32,  gamepadNavCode : String,  keyboardKeyCode : Int32,  label : String,  holdPrefix : Bool) : Bool;  // flags: 65568 
  public event function OnRemoveGFxButton( actionId : Int32) : Bool;  // flags: 65568 
  protected function RemoveGFxButtonById( actionId : Int32);  // flags: 32768 
  protected function SelectCurrentModule();  // flags: 32768 
  protected function SelectFirstModule();  // flags: 32768 
  public event function OnInputHandled( NavCode : String,  KeyCode : Int32,  ActionId : Int32) : Bool;  // flags: 65568 
  public function Event_OnGuiSceneEntitySpawned();  // flags: 65536 
  public function Event_OnGuiSceneEntityDestroyed();  // flags: 65536 
  protected function GetCommonMenu() : CR4CommonMenu;  // flags: 32768 
  protected function GetNpcInfo( npcEntity : CGameplayEntity,  out  dataObject : CScriptedFlashObject);  // flags: 32768 

}
import class CR4IngameMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnRefresh() : Bool;  // flags: 65568 
  public function OnRequestSubMenu( menuName : CName,  optional  initData : IScriptable);  // flags: 65536 
  public function ChildRequestCloseMenu();  // flags: 65536 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function ReopenMenu();  // flags: 65536 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  protected function CloseCurrentPopup();  // flags: 32768 
  public function SetIgnoreInput( value : Bool);  // flags: 65536 
  public function OnUserSignIn();  // flags: 65536 
  public function OnUserSignInCancelled();  // flags: 65536 
  public function OnSaveLoadingFailed();  // flags: 65536 
  public event function OnItemActivated( actionType : Int32,  menuTag : Int32) : Bool;  // flags: 65568 
  public function HandleLoadGameFailed();  // flags: 65536 
  protected function LoadLastSave();  // flags: 32768 
  protected function ShowActionConfPopup( action : Int32,  title : String,  description : String);  // flags: 32768 
  public function OnActionConfirmed( action : Int32);  // flags: 65536 
  public event function OnPresetApplied( groupId : CName,  targetPresetIndex : Int32) : Bool;  // flags: 65568 
  public function UpdateOptions( groupId : CName);  // flags: 65536 
  public event function OnOptionValueChanged( groupId : Int32,  optionName : CName,  optionValue : String) : Bool;  // flags: 65568 
  protected function HandleSpecialValueChanged( optionName : CName,  optionValue : String);  // flags: 32768 
  public function OnGraphicsUpdated( keepChanges : Bool);  // flags: 65536 
  public event function OnOptionPanelNavigateBack() : Bool;  // flags: 65568 
  public event function OnNavigatedBack() : Bool;  // flags: 65568 
  public function CancelDifficultyChange();  // flags: 65536 
  protected function SaveChangedSettings();  // flags: 32768 
  public event function OnProfileChange() : Bool;  // flags: 65568 
  public event function OnSaveGameCalled( type : ESaveGameType,  saveArrayIndex : Int32) : Bool;  // flags: 65568 
  public function executeSave( type : ESaveGameType,  slot : Int32);  // flags: 65536 
  public event function OnLoadGameCalled( type : ESaveGameType,  saveListIndex : Int32) : Bool;  // flags: 65568 
  public function LoadSaveRequested( saveSlotRef : SSavegameInfo);  // flags: 65536 
  public event function OnImportGameCalled( menuTag : Int32) : Bool;  // flags: 65568 
  public event function OnNewGamePlusCalled( saveListIndex : Int32) : Bool;  // flags: 65568 
  public event function OnDeleteSaveCalled( type : ESaveGameType,  saveListIndex : Int32,  isSaveMode : Bool) : Bool;  // flags: 65568 
  public function DeleteSave( type : ESaveGameType,  saveListIndex : Int32,  isSaveMode : Bool);  // flags: 65536 
  protected function showHelpPanel();  // flags: 32768 
  public function TryStartNewGame( optionsArray : Int32);  // flags: 65536 
  protected function fetchNewGameConfigFromTag( optionsTag : Int32);  // flags: 32768 
  public function NewGameRequested();  // flags: 65536 
  public event function OnUpdateRescale( hScale : Float,  vScale : Float) : Bool;  // flags: 65568 
  public function ShowTutorialChosen( enabled : Bool);  // flags: 65536 
  public function StartNewGame();  // flags: 65536 
  public function PopulateMenuData();  // flags: 65536 
  protected function addInLoadOption();  // flags: 32768 
  public event function OnBack() : Bool;  // flags: 65568 
  public function HasSavesToImport() : Bool;  // flags: 65536 
  protected function SendImportSaveData();  // flags: 32768 
  protected function hasValidAutosaveData() : Bool;  // flags: 32768 
  public function HandleSaveListUpdate();  // flags: 65536 
  protected function SendLoadData();  // flags: 32768 
  protected function SendSaveData();  // flags: 32768 
  protected function SendNewGamePlusSaves();  // flags: 32768 
  protected function PopulateSaveDataForSlotType( saveType : Int32,  parentObject : CScriptedFlashArray,  allowEmptySlot : Bool);  // flags: 32768 
  public event function OnLoadSaveImageCancelled() : Bool;  // flags: 65568 
  public event function OnScreenshotDataRequested( saveIndex : Int32) : Bool;  // flags: 65568 
  public event function OnCheckScreenshotDataReady() : Bool;  // flags: 65568 
  protected function SendRescaleData();  // flags: 32768 
  protected function SendControllerData();  // flags: 32768 
  protected function SendKeybindData();  // flags: 32768 
  public event function OnClearKeybind( keybindTag : CName) : Bool;  // flags: 65568 
  protected function GetKeybindGroupTag( keybindName : CName) : CName;  // flags: 32768 
  public event function OnChangeKeybind( keybindTag : CName,  newKeybindValue : EInputKey) : Bool;  // flags: 65568 
  public event function OnSmartKeybindEnabledChanged( value : Bool) : Bool;  // flags: 65568 
  public event function OnInvalidKeybindTried( keyCode : EInputKey) : Bool;  // flags: 65568 
  public event function OnLockedKeybindTried() : Bool;  // flags: 65568 
  public event function OnResetKeybinds() : Bool;  // flags: 65568 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CR4HudModuleRadialMenu extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateSwapAcceptCancel();  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function IsRadialMenuOpened() : Bool;  // flags: 65536 
  public event function OnRadialMenuItemSelected( choosenSymbol : String,  isDesaturated : Bool) : Bool;  // flags: 65568 
  public event function OnRadialMenuItemChoose( choosenSymbol : String) : Bool;  // flags: 65568 
  public event function OnRadialMenuConfirmSelection( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnRadialMenuClose( action : SInputAction) : Bool;  // flags: 65568 
  private function UserConfirmSelection();  // flags: 16384 
  public event function OnActivateSlot( slotName : String) : Bool;  // flags: 65568 
  public event function OnRequestCloseRadial() : Bool;  // flags: 65568 
  private function UserClose();  // flags: 16384 
  public event function OnOpenMeditation( action : SInputAction) : Bool;  // flags: 65568 
  public function ResetMeditationSavedData();  // flags: 65536 
  public event function OnRadialMenu( action : SInputAction) : Bool;  // flags: 65568 
  public function ShowRadialMenu();  // flags: 65536 
  private function SelectCurrentSign();  // flags: 16384 
  public event function OnHideRadialMenu() : Bool;  // flags: 65568 
  public function HideRadialMenu();  // flags: 65536 
  private function ResetItemsModule();  // flags: 16384 
  public function UpdateItemsIcons();  // flags: 65536 
  public function GetCiriItem() : SItemUniqueId;  // flags: 65536 
  public function SetDesaturated( value : Bool,  fieldName : String);  // flags: 65536 
  protected function UpdateScale( scale : Float,  flashModule : CScriptedFlashSprite) : Bool;  // flags: 32768 

}
import class CR4LootPopup extends CR4PopupBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  private function setupFunctions();  // flags: 16384 
  public event function OnClosingPopup() : Bool;  // flags: 65568 
  public function UpdateInputContext();  // flags: 65536 
  public function PopulateData();  // flags: 65536 
  public function CompareItemsStats( itemStats : array<SAttributeTooltip>,  compareItemStats : array<SAttributeTooltip>,  out  compResult : CScriptedFlashArray);  // flags: 65536 
  public function GetItemRarityDescription( item : SItemUniqueId,  tooltipInv : CInventoryComponent) : String;  // flags: 65536 
  public event function OnPopupTakeAllItems() : Bool;  // flags: 65568 
  public event function OnPopupTakeItem( Id : Int32) : Bool;  // flags: 65568 
  public event function OnCloseLootWindow() : Bool;  // flags: 65568 
  public function TakeAllAction();  // flags: 65536 
  protected function SignalLootingReactionEvent();  // flags: 32768 
  protected function SignalStealingReactionEvent();  // flags: 32768 
  protected function SignalContainerClosedEvent();  // flags: 32768 

}
import class W3PopupData extends CObject {

  public function OnUserFeedback( KeyCode : String);  // flags: 65536 
  public function GetGFxButtons( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashArray;  // flags: 65536 
  public function SetupOverlayRef( target : CR4MenuPopup);  // flags: 65536 
  public function forceClose();  // flags: 65536 
  public function ClosePopupOverlay();  // flags: 65536 
  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 
  protected function GetContentRef() : String;  // flags: 32768 
  protected function AddButtonDef( label : String,  padNavCode : String,  optional  keyboardNavCode : Int32);  // flags: 32768 
  protected function DefineDefaultButtons();  // flags: 32768 
  protected function ClosePopup();  // flags: 32768 

}
import class CAINpcTacticTree extends CAISubTree {

  public function Init();  // flags: 65536 

}
import class CAINpcTacticTreeParams extends CAISubTreeParameters {

  public function Init();  // flags: 65536 
  public function InitializeSpecialActions();  // flags: 65536 

}
import class CAISpecialAction extends CAISubTree {

  public function Init();  // flags: 65536 

}
import class CAINpcFormationTacticTree extends CAISubTree {

  public function Init();  // flags: 65536 

}
import class CAINpcFormationTacticTreeParams extends CAISubTreeParameters {

  public function Init();  // flags: 65536 

}
import class CAIAttackActionTree extends CAICombatActionTree {

  public function Init();  // flags: 65536 

}
import class CAIAttackBehaviorTree extends CAICombatActionTree {

  public function Init();  // flags: 65536 

}
import class CAIAttackBehaviorTreeParams extends CAICombatActionParameters {

  public function Init();  // flags: 65536 

}
import class CAIAttackActionTreeParams extends CAICombatActionParameters {

  public function Init();  // flags: 65536 

}
import class CAINpcCombatStyleParams extends CAISubTreeParameters {

  public function Init();  // flags: 65536 

}
import class CAINpcStyleSorceressParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcStyleSorcererParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcRiderDefaults extends CAIDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcRiderCombat extends CAICombatTree {

  public function Init();  // flags: 65536 

}
import class CAINpcIdleHorseRider extends CAIRiderIdle {

  public function Init();  // flags: 65536 

}
import class CAINpcRiderCombatParams extends CAICombatParameters {

  public function Init();  // flags: 65536 

}
import class CAINpcActiveIdleParams extends CAIIdleParameters {

  public function Init();  // flags: 65536 

}
import class CAINpcWork extends CAISubTree {

  public function Init();  // flags: 65536 
  public function InitWander();  // flags: 65536 

}
import class CAILeadPackWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CAIDynamicWanderParams extends CAINpcWanderParams {

  public function Init();  // flags: 65536 

}
import class CAIFollowPartyMemberSideBySideTree extends CAIFollowPartyMemeberTree {

  public function Init();  // flags: 65536 

}
import class CAILeadFormationTree extends IAIIdleFormationTree {

  public function Init();  // flags: 65536 

}
import class CAIIdleSpontanousFormationTree extends IAIIdleFormationTree {

  public function Init();  // flags: 65536 

}
import class CAIDefeatedParams extends CAIDeathParameters {

  public function Init();  // flags: 65536 

}
import class CGoatDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CCatDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CRoosterDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CRamDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CGooseDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CSheepDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CPigDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CCowDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CDogDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CDeerDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CHareDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CTamedHorseDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class CWildHorseDynamicWander extends CAIDynamicWander {

  public function Init();  // flags: 65536 

}
import class BTCondAerialSpaceIsFree extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondActorCharmed extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondActorInDanger extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTCondActorInDangerDef extends IBehTreeConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTCondActorInIdleTrigger extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTCondActorInIdleTriggerDef extends IBehTreeConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTCondAppearanceName extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondAttackedDelay extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class BTCondBaseStatLowerThan extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function GetStat( target : CActor) : Float;  // flags: 65536 

}
import class BTCondStaminaLowerThan extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondBehVarCheck extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondCanLandAtPosition extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskChanceFromStat extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Roll() : Bool;  // flags: 65536 
  public function NumberOfOpponents() : Int32;  // flags: 65536 

}
import class BTCondCheckRotationToTarget extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondCheckTargetRotationToActor extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondCleanShot extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function FillOwnerAndTarget();  // flags: 65536 
  public function NavTest() : Bool;  // flags: 65536 
  public function StaticTrace() : Bool;  // flags: 65536 

}
import class BTCondDayTime extends IBehTreeTask {

  public final function IsAvailable() : Bool;  // flags: 65552 

}
import class BTCondDistanceFromGround extends IBehTreeTask {

  public final function Initialize();  // flags: 65552 
  public final function IsAvailable() : Bool;  // flags: 65552 

}
import class BTCondDistanceToTagged extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondDistanceToTarget extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondFightStage extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondHasActorWeaponDrawn extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondHasStaminaFor extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondHasTag extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondHasTarget extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function HasTarget() : Bool;  // flags: 65536 

}
import class BTCondHeightFromTarget extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondHitCounter extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondHorseCanFlee extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondIsBeingHitByIgni extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsChangingWeapon extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class BTCondDoesChangingWeaponRequiresIdle extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CBTCondIsCombatTargetAlive extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondIsDialogOrCutscenePlaying extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsDodging extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsTargetDodging extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsGuarded extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsTargetGuarded extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondIsInBehaviorGraph extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsInBehaviorGraphNode extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class BTCondIsInBehaviorGraphNodeDef extends IBehTreeConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTCondIsInGuardArea extends IBehTreeTask {

  public final function IsAvailable() : Bool;  // flags: 65552 
  private final function GetTargetPos( _TargetName : ETargetName) : Vector;  // flags: 16400 

}
import class BTCondIsInStance extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsInState extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsPlayerUnconscious extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsPlayerInCombatState extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondIsInInterior extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsInTheWay extends IBehTreeTask {

  public final function IsAvailable() : Bool;  // flags: 65552 
  private final function GetTargetPos( _TargetName : ETargetName) : Vector;  // flags: 16400 

}
import class BTCondIsNPCGroupType extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondIsPackLeader extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondIsTargetInWater extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondIsTargetUnderwater extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondIsTargetOnHorse extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondIsTargettedBy extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function IsTargetted() : Bool;  // flags: 65536 

}
import class CBTCondIsTargetThePlayer extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function GetTarget() : CActor;  // flags: 65536 

}
import class CBTCondIsTeleporting extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondIsUnderwater extends IBehTreeTask {

  public final function IsAvailable() : Bool;  // flags: 65552 

}
import class BTCondMonsterTacticIsUsed extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondMorphRatio extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondNumberOfOpponents extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  private function NumberOfOpponents() : Int32;  // flags: 16384 

}
import class BTCondPlayerIsCastingSign extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondSubmersionLevel extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondSwarmShieldAvailable extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CFlyingSwarmMasterLair extends CFlyingCrittersLairEntityScript {

  public function FirstActivation( scriptInput : CFlyingSwarmScriptInput,  deltaTime : Float);  // flags: 65536 
  public function OnTick( scriptInput : CFlyingSwarmScriptInput,  active : Bool,  deltaTime : Float);  // flags: 65536 
  public function SpawnFromBirdMaster( count : Int32);  // flags: 65536 
  public function DespawnFromBirdMaster( count : Int32);  // flags: 65536 
  public function GetTeleportGroupPosition() : Vector;  // flags: 65536 
  public function GetShieldBirdCount() : Int32;  // flags: 65536 
  public function GetGroupId( groupIdStateName : CName) : CFlyingGroupId;  // flags: 65536 
  public function CurrentShieldGroupState() : CName;  // flags: 65536 
  public function GetTeleportBirdCount() : Int32;  // flags: 65536 
  public function GetSpawnCount() : Int32;  // flags: 65536 
  public function CompensateKilledShieldBirds( count : Int32);  // flags: 65536 
  public function DisperseShield() : Bool;  // flags: 65536 
  public function IsBirdMasterAlive() : Bool;  // flags: 65536 

}
import class BTCondSynchronisedDelay extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnCompletion( _Success : Bool);  // flags: 65536 
  public function OnListenedGameplayEvent( _EventName : CName) : Bool;  // flags: 65536 
  public function TriggerEvent();  // flags: 65536 

}
import class BTCondSynchronisedDelayDef extends IBehTreeConditionalTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class BTCondTargetAttackedDelay extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondTargetHasItemHeld extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondTargetHasTag extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondTargetIsAlly extends IBehTreeTask {

  public final function IsAvailable() : Bool;  // flags: 65552 
  public final function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65552 
  private final function SaveTarget();  // flags: 16400 

}
import class BTCondTargetIsAllyDef extends IBehTreeConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTCondThreatLevel extends IBehTreeTask {

  public final function IsAvailable() : Bool;  // flags: 65552 

}
import class BTCondTargetThreatLevel extends IBehTreeTask {

  public final function IsAvailable() : Bool;  // flags: 65552 

}
import class BTCondWasNPCInTalkInteraction extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondWaterDepth extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class W3ItemUpgradeManager extends CObject {

  public function Init();  // flags: 65536 
  public function PurchaseUpgrade( item : SItemUniqueId,  upgradeName : CName) : EItemUpgradeException;  // flags: 65536 
  private function GetUpgradeIndex( item : SItemUniqueId,  upgradeName : CName) : Int32;  // flags: 16384 
  public function CanPurchaseUpgrade( item : SItemUniqueId,  upgradeName : CName) : EItemUpgradeException;  // flags: 65536 
  private function LoadXMLData();  // flags: 16384 

}
import class CBTCondIsWeaponLoaded extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTCondIsTargetAMonster extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondIsTargetOnBoat extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class W3ActorLatentActionFollow extends W3ActorLatentActionFollowPlayer {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class W3ActorLatentActionMoveAlongPath extends IPresetActorLatentAction {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class W3ActorLatentActionMoveAlongPathWithCompanion extends W3ActorLatentActionMoveAlongPath {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class W3ActorLatentActionMoveAlongPathAwareOfTail extends W3ActorLatentActionMoveAlongPath {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class W3ActorLatentActionMoveTo extends IPresetActorLatentAction {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class W3ActorLatentActionPlayAnimation extends IPresetActorLatentAction {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class W3ActorLatentActionSlotAnimation extends IPresetActorLatentAction {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class W3ActorLatentActionBreakAnimations extends IPresetActorLatentAction {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class W3ActorLatentActionPlayVoiceSet extends IPresetActorLatentAction {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class W3ActorLatentActionRotateTo extends IPresetActorLatentAction {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class W3ActorLatentActionWalkToTargetWaitActor extends IPresetActorLatentAction {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class BTCondThreatLevelDifference extends IBehTreeTask {

  public final function IsAvailable() : Bool;  // flags: 65552 
  public final function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65552 
  private final function SaveTarget();  // flags: 16400 

}
import class BTCondThreatLevelDifferenceDef extends IBehTreeConditionalTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskAttack extends CBTTaskPlayAnimationEventDecorator {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function ApplyCriticalEffectOnTarget();  // flags: 65536 

}
import class CBTTaskDespawn extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskDespawnDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTTaskEmpty extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskRaiseAnimationEvent extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class BTSaveNamedTargetOnEvent extends IBehTreeTask {

  public final function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65552 
  private final function SaveTarget();  // flags: 16400 

}
import class BTSaveNamedTargetOnEventDef extends IBehTreeTaskDefinition {

  public final function OnSpawn( taskGen : IBehTreeTask);  // flags: 65552 

}
import class BTTaskSaveTargetPosAsCustomTarget extends IBehTreeTask {

  public final function OnActivate() : EBTNodeStatus;  // flags: 65552 
  public final function OnDeactivate();  // flags: 65552 
  public final function SaveTarget();  // flags: 65552 

}
import class CBTTaskSelectTargetFromListDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskSendTutorialEvent extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function SendEvent();  // flags: 65536 

}
import class BTTaskSoundSwitch extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  private function OnDeactivate();  // flags: 16384 
  private function SwitchSound();  // flags: 16384 

}
import class CBTTaskPlaySyncedAnimationDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskWait extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskWaitDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskForceWait extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate();  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskForceWaitDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTTask_DebugLog extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTCondAnimalIsScaredDef extends IBehTreeHorseConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTCondAnimalFlee extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskReactToHostility extends IBehTreeTask {

  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskReactToHostilityDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTask3StageIdle extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskAnimalFlee extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskAxiiCharmMonitor extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function CharmCheck() : Bool;  // flags: 65536 

}
import class CBTTaskNervousState extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class W3PlayerModeTrigger extends CGameplayEntity {

  private function Activate();  // flags: 16384 
  private function Deactivate();  // flags: 16384 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function Enable( e : Bool);  // flags: 65536 

}
import class CBTTaskNervousStateDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTask3StateWithRot extends CBTTask3StateAttack {

  public function ChooseAnim();  // flags: 65536 

}
import class CBTTask3StateWithDist extends CBTTask3StateAttack {

  public function ChooseAnim();  // flags: 65536 

}
import class CBTTask3StateWithDistAndRot extends CBTTask3StateAttack {

  public function ChooseAnim();  // flags: 65536 

}
import class CBTTask3StateAddEffectAttack extends CBTTask3StateAttack {

  public latent function Loop() : Int32;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function ApplyEffect( b : Bool);  // flags: 65536 

}
import class CBTTask3StateTaunt extends CBTTaskPlayAnimationEventDecorator {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskAddEffectToTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function ApplyEffect();  // flags: 65536 

}
import class BTTaskAdditiveHitListener extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class BTTaskAdditiveHitListenerDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTTaskAdditiveTaunt extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskBoatAttack extends IBehTreeTask {

  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( _EventName : CName) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( _EventName : CName) : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  private final function GetBoat() : CEntity;  // flags: 16400 
  private function FreeGrabSlot();  // flags: 16384 
  private function DamageBoat( _Amount : Float);  // flags: 16384 

}
import class CBTTaskBoatAttackDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskBoatGrab extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnGameplayEvent( _EventName : CName) : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  private final function GetBoat() : CEntity;  // flags: 16400 

}
import class W3SignOwnerBTTaskCastSign extends W3SignOwner {

  public function Init( parentActor : CActor,  task : CBTTaskCastSign);  // flags: 65536 
  public function HasStaminaToUseSkill( skill : ESkill,  optional  perSec : Bool,  optional  signHack : Bool) : Bool;  // flags: 65536 
  public function HasCustomAttackRange() : Bool;  // flags: 65536 
  public function GetCustomAttackRange() : CName;  // flags: 65536 

}
import class CBTTaskCastAard extends CBTTaskCastSign {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskCastIgni extends CBTTaskCastSign {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CR4HudModuleAreaInfo extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function ShowAreaInfo( localisationKey : String);  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 

}
import class CBTTaskCastQuen extends CBTTaskCastSign {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function Started();  // flags: 65536 
  public function Throw();  // flags: 65536 
  public function ProcessAction( data : CDamageData);  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function PlayHitEffect( optional  data : CDamageData);  // flags: 65536 
  public function SetupSignType();  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CR4HudModuleDebugText extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function ShowElement( bShow : Bool,  optional  bImmediately : Bool);  // flags: 65536 
  public function ShowDebugText( text : String);  // flags: 65536 
  public function HideDebugText();  // flags: 65536 

}
import class CBTTaskCastQuenDef extends CBTTaskCastSignDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskCharge extends CBTTaskAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CR4HudModuleWatermark extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 

}
import class CBTTaskCombatStorage extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CBehTreeTaskCombatStorageCleanup extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CBTTaskPreCombatWarning extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CBTTaskGetPreCombatWarning extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CBehTreeCombatTargetSelectionTaskDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskCounterDecorator extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskDash extends CBTTaskPlayAnimationEventDecorator {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function checkDistance() : Bool;  // flags: 65536 
  public function Dash() : Bool;  // flags: 65536 
  public function GetDashStats();  // flags: 65536 
  public function chooseAndCheckDash() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskDashDef extends CBTTaskPlayAnimationEventDecoratorDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskDefend extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  private function SetHitReactionDirection();  // flags: 16384 

}
import class CBTTaskDelay extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskActivateOnlyOnce extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnCompletion( success : Bool);  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskActivateOnlyOnceDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskDodgeDef extends CBTTaskPlayAnimationEventDecoratorDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskCombatStyleDodge extends CBTTaskDodge {

  public function GetActiveCombatStyle() : EBehaviorGraph;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CBTTaskCircularDodge extends CBTTaskDodge {

  public function ChooseAndCheckDodge() : Bool;  // flags: 65536 
  public function RotateToAngle( angleDeg : Float);  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBehTreeTaskEquipMonsterWeapons extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskEquipItem extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskFear extends CBTTaskPlayAnimationEventDecorator {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskFinishable extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function FinisherSyncAnim();  // flags: 65536 

}
import class BTTaskFrostAreaAttack extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private function SpawnDefenseWall();  // flags: 16384 
  private function SpawnAttack();  // flags: 16384 
  public function CreateEntity( _SpawnPos : Vector,  _Rotation : EulerAngles) : CEntity;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class W3PostFXOnGroundComponent extends CSelfUpdatingComponent {

  public function GetRange() : Float;  // flags: 65536 
  public event function OnComponentAttached() : Bool;  // flags: 65568 
  public event function OnComponentTick( _Dt : Float) : Bool;  // flags: 65568 
  public function OverrideValues( _FadeInTime : Float,  _ActiveTime : Float,  _FadeOutTime : Float,  _Range : Float);  // flags: 65536 
  public function RestoreValues();  // flags: 65536 
  private function Update( _Dt : Float);  // flags: 16384 

}
import class BTTaskFrostAreaAttackDef extends IBehTreeTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class BTTaskFrostSnakeAttack extends CBTTaskAttack {

  public final function Initialize();  // flags: 65552 
  public final function OnActivate() : EBTNodeStatus;  // flags: 65552 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private final function MoveHead( _DeltaTime : Float);  // flags: 16400 
  private final function SpawnAttack( optional  _Pos : Vector);  // flags: 16400 
  private final function CreateEntity( _SpawnPos : Vector,  _Rotation : EulerAngles) : CEntity;  // flags: 16400 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskImlerithShieldDestruction extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function ProcessShieldDestruction();  // flags: 65536 
  public function GetEssence() : Float;  // flags: 65536 

}
import class CBTTaskIsFriendlyNearTarget extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public final function CheckIfFriendlyIsInAoe() : Bool;  // flags: 65552 

}
import class CBTTaskIsHostileAndNoFriendlyNearTarget extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public final function CheckPotentialTargetsInAoe() : Bool;  // flags: 65552 

}
import class CBTTaskJumpBack extends CBTTaskPlayAnimationEventDecorator {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskKill extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function Execute();  // flags: 65536 

}
import class CBTTaskMagicRangeAttack extends CBTTaskMagicAttack {

  public function PerformMagicAttack();  // flags: 65536 
  public function NewCurrentAttackData( attackData : CPreAttackEventData);  // flags: 65536 

}
import class CBTTaskMagicFXAttack extends CBTTaskMagicAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function PerformMagicAttack();  // flags: 65536 
  public function NewCurrentAttackData( attackData : CPreAttackEventData);  // flags: 65536 
  public function SpawnEffect( attackData : CPreAttackEventData) : Bool;  // flags: 65536 
  public function GetEffectPositionAndRotation( out  pos : Vector,  out  rot : EulerAngles);  // flags: 65536 

}
import class CBTTaskMagicBomb extends CBTTaskAttack {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskPerformParryDef extends CBTTaskPlayAnimationEventDecoratorDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskCombatStylePerformParry extends CBTTaskPerformParry {

  public function GetActiveCombatStyle() : EBehaviorGraph;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskPlayEventLatent extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskProjectileAttack extends CBTTaskAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function CreateAndShootProjectile( optional  customHeading : Float,  optional  projectileIndex : Int32);  // flags: 65536 
  public function CreateProjectile( optional  _Quantity : Int32);  // flags: 65536 
  public function Initialize();  // flags: 65536 
  protected function GetProjectileStartPosition() : Vector;  // flags: 32768 

}
import class CBTTaskProjectileAttackDef extends CBTTaskAttackDef {

  public function Initialize();  // flags: 65536 
  public function OnSpawn( task : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskProjectileAttackWithPrepare extends CBTTaskProjectileAttack {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function CreateAndShootProjectile( optional  customHeading : Float,  optional  projectileIndex : Int32);  // flags: 65536 

}
import class CBTTaskReactionDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBehTreeTaskRequiredItems extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  private function RequiredItems() : Bool;  // flags: 16384 
  public function WitcherRequiredItems() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function PutBoltInHand() : W3AdvancedProjectile;  // flags: 65536 
  public function TakeBowArrow();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CBehTreeTaskRequiredItemsDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTTaskSearchTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class BTTaskSetAdditiveHitFlag extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  private function OnDeactivate();  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  private function Execute( _Flag : Bool,  _criticalStateFlag : Bool);  // flags: 16384 

}
import class CBTTaskShootDef extends CBTTaskPlayAnimationEventDecoratorDef {

  public function Initialize();  // flags: 65536 

}
import class W3SummonerComponent extends CScriptedComponent {

  public function AddEntity( _EntityToAdd : CEntity);  // flags: 65536 
  public function RemoveEntity( _EntityToRemove : CEntity);  // flags: 65536 
  public function GetSummonedEntities() : array<CEntity>;  // flags: 65536 
  public function GetNumberOfSummonedEntities() : Int32;  // flags: 65536 
  private function UpdateArray();  // flags: 16384 
  public function OnDeath();  // flags: 65536 

}
import class CBTTaskSpawnMultipleEntities3StateAttack extends CBTTaskSpawnMultipleEntitiesAttack {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function SpawnEntity();  // flags: 65536 
  public latent function LatentSpawnEntity();  // flags: 65600 
  public function CreateEntity( _SpawnPos : Vector,  _Rotation : EulerAngles) : CEntity;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskSpawnMultipleProjectilesAttack extends CBTTaskSpawnMultipleEntitiesAttack {

  public function CreateEntity( _SpawnPos : Vector,  _Rotation : EulerAngles) : CEntity;  // flags: 65536 

}
import class CBTTaskSpawnObject extends IBehTreeTask {

  public function InitSpawnObject();  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function FindPositionOnGround( out  position : Vector);  // flags: 65536 
  public function SpawnObject();  // flags: 65536 

}
import class CBTTaskSummonCreaturesDef extends CBTTaskPlayAnimationEventDecoratorDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskTaunt extends CBTTaskPlayAnimationEventDecorator {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskThrowBomb extends CBTTaskAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function InitializeBombs() : Bool;  // flags: 65536 
  public function CheckIfFriendlyIsInAoe() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function SelectProperBomb( out  bomb : SItemUniqueId) : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class W3Petard extends CThrowable {

  public event function OnDestroyed() : Bool;  // flags: 65568 
  public event function OnProcessThrowEvent( animEventName : CName) : Bool;  // flags: 65568 
  public function GetAudioImpactName() : CName;  // flags: 65536 
  protected function LoadDataFromItemXMLStats();  // flags: 32768 
  public function ThrowProjectile( targetPosIn : Vector);  // flags: 65536 
  public function ReleaseProjectile( time : Float,  id : Int32);  // flags: 66560 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  protected function StopFlying();  // flags: 32768 
  public event function OnRangeReached() : Bool;  // flags: 65568 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function DetonationTimer( detlaTime : Float,  id : Int32);  // flags: 66560 
  public function ProcessEffect( optional  explosionPosition : Vector,  optional  collidedTarget : CGameplayEntity);  // flags: 65536 
  protected function SnapComponents( isImpact : Bool);  // flags: 32768 
  protected function ProcessLoopEffect();  // flags: 32768 
  protected function LoopComponentsEnable( enable : Bool);  // flags: 32768 
  public function Loop( dt : Float,  id : Int32);  // flags: 66560 
  protected function ProcessPetardDestruction();  // flags: 32768 
  protected function LoopFunction( dt : Float);  // flags: 32768 
  protected function ProcessTargetInArea( actor : CGameplayEntity,  dt : Float);  // flags: 32768 
  protected function ProcessTargetOutOfArea( entity : CGameplayEntity);  // flags: 32768 
  public function OnTimeEnded( dt : Float,  id : Int32);  // flags: 66560 
  protected function OnTimeEndedFunction( dt : Float);  // flags: 32768 
  protected function ProcessEffectPlayFXs( isImpact : Bool);  // flags: 32768 
  protected function ProcessMechanicalEffect( targets : array<CGameplayEntity>,  isImpact : Bool,  optional  dt : Float);  // flags: 32768 
  protected function BlockTargetsAbility( target : CActor,  abilityName : CName,  blockDuration : Float,  optional  unlock : Bool) : Bool;  // flags: 32768 
  public function DelayedRestoreCollisions( dt : Float,  id : Int32);  // flags: 66560 
  private function ProcessClusterBombs();  // flags: 16384 
  public function DestroyWhenNoFXPlayed( dt : Float,  id : Int32);  // flags: 66560 
  protected function DestroyWhenNoFXPlayedFunction( dt : Float) : Bool;  // flags: 32768 
  protected function PlayEffectInternal( fx : CName);  // flags: 32768 
  public function DismembersOnKill() : Bool;  // flags: 65536 
  public function GetImpactRange() : Float;  // flags: 65536 
  public function GetAoERange() : Float;  // flags: 65536 
  public function IsStuck() : Bool;  // flags: 65536 
  public function DisableProximity();  // flags: 65536 
  public function IsProximity() : Bool;  // flags: 65536 
  private function PrintFactFriendlyPetardName() : String;  // flags: 16384 

}
import class CBTTaskThrowDwimeritiumBomb extends CBTTaskThrowBomb {

  public function SelectProperBomb( out  bomb : SItemUniqueId) : Bool;  // flags: 65536 

}
import class CTicketAlgorithmSimple extends ITicketAlgorithmScript {

  public function CalculateTicketImportance() : Float;  // flags: 65536 

}
import class CTicketAlgorithmCheckHP extends ITicketAlgorithmScript {

  public function CalculateTicketImportance() : Float;  // flags: 65536 

}
import class CTicketBaseAlgorithm extends ITicketAlgorithmScript {

  public function ShouldAskForTicket() : Bool;  // flags: 65536 
  public function GetDistanceImportance() : Float;  // flags: 65536 
  public function GetInvertedDistanceImportance() : Float;  // flags: 65536 
  public function GetThreatLevelImportance() : Float;  // flags: 65536 
  public function GetActivationImportance() : Float;  // flags: 65536 

}
import class CTicketAlgorithmApproach extends CTicketBaseAlgorithm {

  public function CalculateTicketImportance() : Float;  // flags: 65536 
  public final function ShouldAskForTicket() : Bool;  // flags: 65552 

}
import class CTicketAttackAlgorithm extends CTicketBaseAlgorithm {

  public function CalculateTicketImportance() : Float;  // flags: 65536 

}
import class CTicketAlgorithmMelee extends ITicketAlgorithmScript {

  public function CalculateTicketImportance() : Float;  // flags: 65536 

}
import class CTicketAlgorithmMeleeDefinition extends ITicketAlgorithmScriptDefinition {

  public function Initialize();  // flags: 65536 

}
import class BTCondCheckStatValue extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function GetStat( target : CActor) : Float;  // flags: 65536 

}
import class CBTCondCheckFact extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTCondFinisherWasInterrupted extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTCondLairEntityInRange extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class W3DestroyableClue extends W3MonsterClue {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  public event function OnWeaponHit( act : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnFireHit( entity : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnFrostHit( entity : CGameplayEntity) : Bool;  // flags: 65568 
  private function ProcessBombDestruction( entity : CGameplayEntity);  // flags: 16384 
  public function GetFocusActionName() : CName;  // flags: 65536 
  public function CanShowFocusInteractionIcon() : Bool;  // flags: 65536 
  private function ProcessDestructionWrapper();  // flags: 16384 
  public function ProcessDestructionTimer( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function ProcessDestruction();  // flags: 65536 
  public function SetDestroyable( isDestroyable : Bool);  // flags: 65536 
  public function ExecuteDestruction();  // flags: 65536 
  public function DelayedDestruction( dt : Float,  id : Int32);  // flags: 66560 
  public function GetAreFistsEquipped() : Bool;  // flags: 65536 
  private function DestructionSystemCheck() : Bool;  // flags: 16384 

}
import class CBTTaskPlayAgonySyncedFinisher extends CBTTaskPlaySyncedAnimation {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskActionFail extends CBTTaskPlayAnimationEventDecorator {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskActivateRift extends CBTTaskAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class BTTaskAddBuffs extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  private function OnDeactivate();  // flags: 16384 
  private function AddBuffs();  // flags: 16384 

}
import class BTTaskAddRemoveAbility extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  private function Execute();  // flags: 16384 

}
import class CBehTreeTaskAgony extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Roll() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function AgonySyncAnim();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function CombatCheck() : Bool;  // flags: 65536 

}
import class CBehTreeAgonyDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBehTreeTaskBehaviorGraph extends IBehTreeTask {

  public function Evaluate() : Int32;  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public latent function FillWeaponSubTypeBasedOnHeldItem();  // flags: 65600 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CBTTaskCaranthirMeteor extends CBTTaskProjectileAttack {

  protected function GetProjectileStartPosition() : Vector;  // flags: 32768 
  public function CreateAndShootProjectile( optional  customHeading : Float,  optional  projectileIndex : Int32);  // flags: 65536 
  public function Initialize();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskCarryBox extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CTTaskCarryBoxDef extends IBehTreeTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskRestBetweenBoxes extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class W3SavedAppearanceEntity extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function SetAppearance( appName : CName);  // flags: 65536 

}
import class CBTTaskChance extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Roll() : Bool;  // flags: 65536 
  public function NumberOfOpponents() : Int32;  // flags: 65536 

}
import class CBTTaskChangeAppearance extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskCheckActorSpeed extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function CheckSpeed() : Bool;  // flags: 65536 

}
import class CBTTaskCheckFlyingActors extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function ActorNumberCheck() : Bool;  // flags: 65536 

}
import class CBTTaskSmartSetVisible extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function SmartSetVisible( toggle : Bool);  // flags: 65536 
  public function SetVisible( toggle : Bool,  compList : array<CComponent>);  // flags: 65536 
  public function MakeInvulnerable( toggle : Bool);  // flags: 65536 

}
import class CBehTreeCombatStyleManager extends IBehTreeTask {

  public function Evaluate() : Int32;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function ProjectileFailSafe();  // flags: 65536 
  public function IsRangedCombatStyleActive() : Bool;  // flags: 65536 
  public function CheckIfShouldSwitchToMelee( sqrDist : Float);  // flags: 65536 
  public function CheckIfShouldSwitchToRange( sqrDist : Float);  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CBehTreeCombatStyleManagerDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTTaskCompleteOnAnimEvent extends IBehTreeTask {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class BTTaskCompleteOnAnimEventDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTTaskCompleteOnGameplayEvent extends IBehTreeTask {

  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskCrabAttack extends IBehTreeTask {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBehTreeTaskCriticalStateDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBehTreeTaskCSEffectDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBehTreeTaskCSEffectFlying extends CBehTreeTaskCSEffect {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnGroundContact();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskDestroyEntity extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  private function FindAndDestoryEntity();  // flags: 16384 

}
import class CBTTaskDisableHitReaction extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskSetUnstoppable extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskDisableHitReactionFor extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskDiveCheck extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function CheckWater() : Bool;  // flags: 65536 

}
import class BTTaskDrainStat extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  private function Execute();  // flags: 16384 

}
import class CBTTaskDrink extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskDrinkDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskBaseDuration extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function Roll() : Bool;  // flags: 65536 

}
import class CBTTaskXMLBasedDuration extends CBTTaskBaseDuration {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  private function GetStats();  // flags: 16384 

}
import class CBTTaskEventBasedDuration extends CBTTaskDuration {

  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskEventBasedDurationDef extends CBTTaskDurationDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskEnableLookAt extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function GetLookAtTarget() : CNode;  // flags: 65536 

}
import class CBTTaskEnterDrinkingMinigame extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskEnterDrinkingMinigameDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskChangePriority extends IBehTreeTask {

  public function Evaluate() : Int32;  // flags: 65536 

}
import class CBTTaskChangePriorityTillAnimEvent extends IBehTreeTask {

  public function Evaluate() : Int32;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskFlightStyle extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function IsAlternateFlightStyle() : Bool;  // flags: 65536 
  public function FlightStyleChange();  // flags: 65536 

}
import class BTTaskForceHitReaction extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class BTTaskGameplayEventListener extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class BTTaskGameplayEventListenerDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 
  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class BTTaskMultipleGameplayEventListenerDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskGuardChange extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function GuardChange();  // flags: 65536 
  public function GetStats();  // flags: 65536 

}
import class CBTTaskForceChangeGuard extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function GuardChange();  // flags: 65536 

}
import class CBTTaskHasAbility extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskHasAvailableAbility extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskHideAllWeapons extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskHitReactionDecoratorDef extends CBTTaskPlayAnimationEventDecoratorDef {

  public function Initialize();  // flags: 65536 
  public function InitializeEvents();  // flags: 65536 

}
import class CBTCondBeingHit extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTCondBeingHitDef extends IBehTreeConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTCompleteOnHit extends IBehTreeTask {

  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskIfTargetHasEffect extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskIfTargetHasEffects extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskHasEffects extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskImlerithBreakAttachment extends IBehTreeTask {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskKillEntityByTag extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function KillEntityByTag();  // flags: 65536 

}
import class CBTTaskReactionSystemLogReport extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class BTTaskLookat extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class BTTaskAimingUpdateLookatTarget extends BTTaskUpdateLookatTarget {

  public function PredictPosition( target : CActor,  targetPos : Vector) : Vector;  // flags: 65536 

}
import class BTTaskUpdateLookatTargetByTag extends BTTaskUpdateLookatTarget {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskActivateMagicBubble extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function ToggleActivateEntity( toggle : Bool);  // flags: 65536 
  public function CreateAndAttachEntity();  // flags: 65536 

}
import class CBTTaskDeactivateMagicBubble extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function DespawnEntity();  // flags: 65536 

}
import class BTTaskManageAnimatedMovement extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  private function OnDeactivate();  // flags: 16384 
  private final function Execute( _Flag : Bool);  // flags: 16400 

}
import class CBTTaskManageBuffImmunity extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class TaskManageCapsuleCollision extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  private function EnableCol( _Enable : Bool);  // flags: 16384 

}
import class BTTaskManageDjinnRage extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private function EnterRageState();  // flags: 16384 
  private function RemoveRageState();  // flags: 16384 
  private function EnterWeakenedState();  // flags: 16384 
  private function RemoveWeakenedState();  // flags: 16384 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class BTTaskManageDjinnRageDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskManageFact extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class BTTaskManageFXInstance extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private function OnDeactivate();  // flags: 16384 
  private latent function Execute();  // flags: 16448 

}
import class CBTTaskManageGravity extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  private final function Execute();  // flags: 16400 
  private final function SwitchGravity( on : Bool);  // flags: 16400 

}
import class CBTManageIsPlayerFollower extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function SetIsFollowerFlags( activation : Bool);  // flags: 65536 

}
import class CBTManageIsPlayerFollowerDef extends IBehTreeTaskDefinition {

  public function OnSpawn( task : IBehTreeTask);  // flags: 65536 

}
import class BTTaskManagePackLeader extends IBehTreeTask {

  private function OnDeactivate();  // flags: 16384 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskManageRepulseProjectileEventsDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTTaskManageSnappingNavigableSpace extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class BTTaskManageSpectralForm extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private final function CanSwitchToShadow() : Bool;  // flags: 16400 
  private final function ActivateShadowForm();  // flags: 16400 
  private final function DeactivateShadowForm();  // flags: 16400 
  public final function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65552 

}
import class BTTaskManageSpectralFormDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTTaskManageSplashEffect extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function DistanceFromWaterSurface() : Float;  // flags: 65536 
  private function SpawnWaterSplash();  // flags: 16384 

}
import class TaskManageVisibility extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class TaskManageVulnerability extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public final function SwitchVulnerability( _Vulnerable : Bool);  // flags: 65552 

}
import class CBehTreeTaskMonsterBehaviorGraph extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskNavTestToTarget extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Check() : Bool;  // flags: 65536 

}
import class CBTTaskNPCNotInFrontOfPLayer extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class W3TrapTrigger extends W3GameplayTrigger {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Enable( _NewState : Bool);  // flags: 65536 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private function ShouldExcludeEntity( _Entity : CNode) : Bool;  // flags: 16384 

}
import class CBTTaskPlayEffect extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnCompletion( success : Bool);  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function ProcessEffect();  // flags: 65536 

}
import class W3DamageAreaTrigger extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function SetEnable( enable : Bool);  // flags: 65536 
  public function Activate( _affectedEntity : CEntity);  // flags: 65536 
  public function Deactivate( _affectedEntity : CEntity);  // flags: 65536 
  public function RootAttackTimer( delta : Float,  id : Int32);  // flags: 66560 
  public function DealDamageDelay( delta : Float,  id : Int32);  // flags: 66560 
  public function PoisonDamageDelay( delta : Float,  id : Int32);  // flags: 66560 
  public function PreAttackTimer( delta : Float,  id : Int32);  // flags: 66560 
  public function ContinuedPoisoning( keepPoisoning : Bool);  // flags: 65536 
  public function PoisonVictim();  // flags: 65536 
  public function PreAttack();  // flags: 65536 
  public function PrepareRootAttack( rot : EulerAngles);  // flags: 65536 
  public function RootAttack();  // flags: 65536 
  public function DealDamage();  // flags: 65536 
  public function StopRootTimers();  // flags: 65536 

}
import class CBTTaskPlayerBehaviorMonitor extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function SendEvent();  // flags: 65536 
  public function ResetValues();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskFindNodeClosestToPlayer extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBehTreeTaskPoseChangeMonitor extends IBehTreeTask {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class W3EffectAreaTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function ProcessArea( dt : Float,  id : Int32);  // flags: 66560 

}
import class BTTaskPullObjectsFromGroundAndShoot extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  private latent function PullObjectsFromGround( _DeltaTime : Float);  // flags: 16448 
  private function SetProjectilesPullPositions();  // flags: 16384 
  public latent function LatentSpawnEntity();  // flags: 65600 
  public function CreateEntity( _SpawnPos : Vector,  _Rotation : EulerAngles) : CEntity;  // flags: 65536 
  public function ProcessShootEntities( b : Bool);  // flags: 65536 
  public function ShootProjectile( projectile : CEntity,  optional  allDirections : Bool,  optional  deactivate : Bool);  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskRootPitch extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskSearchForThrowableDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskSendInfo extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function GetTarget() : CActor;  // flags: 65536 
  public function GetSender() : CActor;  // flags: 65536 
  public function SendInfo();  // flags: 65536 

}
import class CBTTaskStopMovingBack extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class BTTaskEredinChangeArena extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function CreateRift();  // flags: 65536 

}
import class BTTaskEredinIceSpikesAttack extends BTTaskSpawnEntitiesAttack {

  public function Spawn( position : Vector);  // flags: 65536 

}
import class BTTaskEredinMeteoriteAttack extends BTTaskSpawnEntitiesAttack {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Spawn( position : Vector);  // flags: 65536 

}
import class BTTaskEredinSummonMeteoriteStorm extends IBehTreeTask {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function Spawn();  // flags: 65536 

}
import class CHeartMiniboss extends CNewNPC {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnTakeDamage( action : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnBehaviorNodeActivation() : Bool;  // flags: 65568 
  public event function OnDeathAnimFinished() : Bool;  // flags: 65568 

}
import class BTTaskBlockPlayerActions extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class BTTaskEredinMonitorSignCast extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class BTTaskEredinCanSpawnRift extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function PerformTestForSyncedAnim() : Bool;  // flags: 65536 

}
import class BTTaskEredinCanPerformAction extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class BTTaskEredinSetCanPerformAction extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  private function Execute();  // flags: 16384 
  public function Initialize();  // flags: 65536 

}
import class BTTaskEredinIsAttackAvailable extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class BTTaskEredinSetIsAttackAvailable extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  private function Execute();  // flags: 16384 
  public function Initialize();  // flags: 65536 

}
import class W3RootsEntrance extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Open();  // flags: 65536 
  public function Close();  // flags: 65536 

}
import class BTTaskEredinSetIsInSpecialAttack extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class BTTaskEredinGetIsInSpecialAttack extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class BTTaskEredinIsTaunting extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class BTTaskEredinPhaseChange extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class BTTaskLockCameraToTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class BTTaskIsPlayerReachable extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskSetAppearance extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskSetBehVar extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskSetBehVarOnAnimEvent extends IBehTreeTask {

  public latent function Main();  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskSetBehVarOnScriptEvent extends IBehTreeTask {

  public latent function Main();  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskSetBehVarOnScriptEventDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskSetCanBeFollowed extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class W3ArachasEggCustom extends W3MonsterClue {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  private function ArachasEggSignReaction( selectedMorphTime : Float,  reactionEffect : CName);  // flags: 16384 
  public function DestroyedFinalizeTimer( time : Float,  optional  id : Int32);  // flags: 66560 
  public function TurnEffectsOffTimer( time : Float,  optional  id : Int32);  // flags: 66560 
  public function MorphEgg( time : Float,  optional  id : Int32);  // flags: 66560 
  public function ManualEggDestruction( addFact : Bool);  // flags: 65536 

}
import class BTTaskSetEncounterAsActionTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  private function Execute();  // flags: 16384 

}
import class BTTaskSetEncounterAsActionTargetDef extends IBehTreeTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class W3InteractionSwitch extends W3PhysicalSwitch {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Enable( enable : Bool);  // flags: 65536 
  public function Lock( lock : Bool);  // flags: 65536 
  public function InteractWith( on : Bool,  switchType : PhysicalSwitchAnimationType);  // flags: 65536 
  public function UpdateInteractionComponent( optional  component : CComponent);  // flags: 65536 
  public event function OnInteractionAttached( interaction : CInteractionComponent) : Bool;  // flags: 65568 
  public function UpdateFocusModeHighlight();  // flags: 65536 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionDeactivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteraction( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAnimEvent_SwitchOnEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_SwitchOffEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 

}
import class BTTaskSetEntityAsActionTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class BTTaskSetEntityAsActionTargetDef extends IBehTreeTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class BTTaskSetGuardAreaAsActionTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  private function Execute();  // flags: 16384 

}
import class W3ReplacerWarningArea extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function Toggle( toggle : Bool);  // flags: 65536 
  public function ShowMessage( dt : Float,  id : Int32);  // flags: 66560 
  public function HideMessage();  // flags: 65536 
  public final function SetEnabled( en : Bool);  // flags: 65552 

}
import class BTTaskSetMorph extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  private final function OnDeactivate();  // flags: 16400 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  private final function StartMorph( _Ratio : Float,  _Time : Float);  // flags: 16400 

}
import class BTTaskSetThreatLevel extends IBehTreeTask {

  private function OnActivate() : EBTNodeStatus;  // flags: 16384 

}
import class CBTTaskSignalGameplayEvent extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnCompletion( success : Bool);  // flags: 65536 

}
import class CBTTaskSimpleEvent extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskSimpleEventDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskSirenTakeOff extends IBehTreeTask {

  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskSlideToTarget extends IBehTreeTask {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CSignReactiveEntity extends W3MonsterClue {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function EnableSignReactivness( enable : Bool);  // flags: 65536 
  private function Init();  // flags: 16384 
  private function HitByFire();  // flags: 16384 
  private function StopDestroyedEffect( timeDelta : Float,  id : Int32);  // flags: 17408 
  private function ApplyDestroyAppearance( timeDelta : Float,  id : Int32);  // flags: 17408 
  public event function OnClueDetected() : Bool;  // flags: 65568 
  private function StartDestroyed( destroyed : Bool);  // flags: 16384 
  private function SetDestroyed( destroyed : Bool);  // flags: 16384 

}
import class CBTTaskSorceressAttacksBoid extends CBTTaskMagicMeleeAttack {

  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function GetEffectPositionAndRotation( out  pos : Vector,  out  rot : EulerAngles);  // flags: 65536 

}
import class CBTTaskSpawnFXEntity extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function SpawnEntity();  // flags: 65536 
  public function EvaluatePos( out  pos : Vector,  out  rot : EulerAngles);  // flags: 65536 
  public function Attach( slot : CName);  // flags: 65536 

}
import class CBTTaskManageSpawnFXEntity extends CBTTaskSpawnFXEntity {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function TeleportFXEntity( optional  random : Bool);  // flags: 65536 
  public function RandomPos( out  pos : Vector,  out  rot : EulerAngles);  // flags: 65536 

}
import class CBTTaskManageSpawnFXEntityDef extends CBTTaskSpawnFXEntityDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskStopEffectIfActive extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskSwarmMonitor extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskSwarmShield extends CBTTaskPlayAnimationEventDecorator {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskSwarmSpawnAnim extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public latent function SpawnFromSwarm();  // flags: 65600 
  public function TimeOut();  // flags: 65536 
  public latent function ActivateSpawn();  // flags: 65600 
  public function FailSafeCheck();  // flags: 65536 
  public function OnDeactivate() : EBTNodeStatus;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskSwarmSpawnAnimDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskTackle extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskUpdateBehGraphVariables extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Update();  // flags: 65536 

}
import class CBTTaskWasInCriticalState extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class BTTaskRotateOnRotateEvent extends IBehTreeTask {

  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTasFollowerShouldAttack extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTasFollowerShouldKeepDistanceToPlayer extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskShouldBecomeAFollower extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTCondIsMan extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskMaintainSpeed extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBehTreeHLTaskCombat extends CBehTreeHLTaskCombatBase {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBehTreeHLTaskCombatDef extends IBehTreeHLTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBehTreeHLTaskAnimalCombat extends CBehTreeHLTaskCombatBase {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBehTreeHLTaskAnimalCombatDef extends IBehTreeHLTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBehTreeTaskFlyingMonsterDeath extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function ForceDeathTimer( t : Float,  id : Int32);  // flags: 66560 
  public function OnGroundContact();  // flags: 65536 

}
import class CBehTreeTaskFlyingMonsterDeathDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class W3Replacer extends CR4Player {

  public function GetLevel() : Int32;  // flags: 65536 
  public function SetLevel( lev : Int32);  // flags: 65536 

}
import class CBehTreeCondChooseUnconscious extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBehTreeCondWasDefeatedFromFistFight extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBehTreeTaskDeathState extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function AddWasKilledFacts();  // flags: 65536 
  public function ChangeHeldItemAppearance();  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function chooseDeathAnim( attacker : CGameplayEntity,  optional  damageCauser : IScriptable);  // flags: 65536 
  public function CanBeDesctructed() : Bool;  // flags: 65536 

}
import class CBehTreeTaskDeathStateDef extends IBehTreeTaskDefinition {

  public function Initialize();  // flags: 65536 
  public function InitializeEvents();  // flags: 65536 

}
import class CBehTreeTaskDeathIdle extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskDropLoot extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function LootDrop();  // flags: 65536 
  public function RemoveSaveLock();  // flags: 65536 
  public function AddWasKilledFacts();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskDropLootDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBehTreeHLTaskUnconscious extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBehTreeTaskRevive extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBehTreeTaskDeathAnimDecorator extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function CombatCheck() : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBehTreeTaskDeathAnimDecoratorDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBehTreeHLTaskWander extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTCondHorseIsMountedByPlayer extends CBTCondHorseIsMounted {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondHorseIsMountedByPlayerDef extends CBTCondHorseIsMountedDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTCondHorseCanDoIdle extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function IsMounted( horseComp : W3HorseComponent) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTCondHorseCanDoIdleDef extends IBehTreeHorseConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTCondHorsePerformingAction extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondHorsePlayingAnimWithRider extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondHorseShouldShakeOffRiderDef extends IBehTreeHorseConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskHorseForceStop extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskHorseForceDismount extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskHorseForceIdle extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskHorseTame extends IBehTreeTask {

  public function OnListenedGameplayEvent( gameEventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskHorseTameDef extends IBehTreeHorseTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTCondHorseIsTamed extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondHorseIsGeralts extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTCondHorseParking extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskHorseTurnAwayFromTarget extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskHorseUncontrolable extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTCondHorseIsNervous extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTCondHorseIsNervousDef extends IBehTreeHorseConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskHorseAxiiCalmDown extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnListenedGameplayEvent( gameEventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskHorseAxiiCalmDownDef extends IBehTreeHorseTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskHorsePlayAnimWithRider extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function Work() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskHorseSummon extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskHorseSummonDef extends IBehTreeHorseTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskHorseCharge extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function NavTest() : Bool;  // flags: 65536 
  public function AngleAndDistTest() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTCondHorseScriptedActionPending extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskHorseSheathWeaponsForRider extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTCondRiderCanPerformAttack extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CScriptableState extends IScriptable {

  import public function GetStateName() : CName;  // flags: 65545 
  import public function IsActive() : Bool;  // flags: 65545 
  import public function CanEnterState( prevStateName : CName) : Bool;  // flags: 65545 
  import public function CanLeaveState( nextStateName : CName) : Bool;  // flags: 65545 
  import public function BeginState( prevStateName : CName);  // flags: 65545 
  import public function EndState( nextStateName : CName);  // flags: 65545 
  import public function ContinuedState();  // flags: 65545 
  import public function PausedState();  // flags: 65545 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class CBTTaskHorsePerformRiderAttack extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTCondIsHorseInAreaWithObstacles extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function PerformTest() : Bool;  // flags: 65536 

}
import class CBTTaskHorseSetRiderCombatTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskHorseSetRiderCombatTargetDef extends IBehTreeHorseTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskHorseHasRiderCombatTarget extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskHorseSendInfo extends CBTTaskSendInfo {

  public function GetTarget() : CActor;  // flags: 65536 
  public function GetSender() : CActor;  // flags: 65536 

}
import class CBTTaskHorseChangeAttitudeGroup extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskHorseSetCurrentPlayerInteriorAsActionTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTCondIsHorseOnNavMesh extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskBroadcastEvent extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskRemoveReactionEvent extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskCollideWithCharacterDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskCollideWithCharacter extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  private function CanNPCBeInterrupted() : Bool;  // flags: 16384 
  public function Bump();  // flags: 65536 
  private function IsOtherAHorse() : Bool;  // flags: 16384 
  private function HasToIgnoreBump( fromOther : Vector) : Bool;  // flags: 16384 
  private function GetAngleToMove( fromOther : Vector) : Float;  // flags: 16384 
  private function GetDirectionToMove( angle : Float) : EAttackDirection;  // flags: 16384 
  private function GetPushType() : ENPCCollisionStance;  // flags: 16384 
  private function PrepareRotation( push : ENPCCollisionStance,  angle : Float,  direction : EAttackDirection);  // flags: 16384 

}
import class CBTTaskFlyAround extends CBTTaskVolumetricMove {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function DoTrace( out  dest : Vector);  // flags: 65536 

}
import class CBTTaskVolumetricMove extends IBehTreeTask {

  public function UsePathfinding( currentPosition : Vector,  out  targetPosition : Vector,  optional  predictionDist : Float) : Bool;  // flags: 65536 
  public function CalculateBehaviorVariables( dest : Vector);  // flags: 65536 
  public function DebugDisplayDestination( dest : Vector);  // flags: 65536 
  public function TargetSelection();  // flags: 65536 
  public function UpdatePositions();  // flags: 65536 
  public function UpdateNpcPosition();  // flags: 65536 
  public function UpdateTargetPosition();  // flags: 65536 
  public function CalculateTargetToNpcVec();  // flags: 65536 
  public function CalculateNpcToTargetVec();  // flags: 65536 
  public function HasVolumetricSpaceAround( _Pos : Vector,  _SpaceNeeded : Float,  optional  _CollisionGroupsNames : array<CName>) : Bool;  // flags: 65536 

}
import class CBTTaskFlyAroundDef extends IBehTreeTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class BTTaskGetFoodNearby extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private function GetAvailableScents() : array<CNode>;  // flags: 16384 
  private function UpdateTarget();  // flags: 16384 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnCompletion( success : Bool);  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class W3FoodComponent extends W3ScentComponent {

  public function GetFoodGroup() : EFoodGroup;  // flags: 65536 
  public function GetLockDistance() : Float;  // flags: 65536 
  public event function OnComponentAttached() : Bool;  // flags: 65568 
  public event function OnFireHit() : Bool;  // flags: 65568 
  public function IsAvailable( _ForWhom : CActor) : Bool;  // flags: 65536 
  public function GetEatingPosition( _ForWhom : CActor) : Vector;  // flags: 65536 
  public function AddEater( _Eater : CActor) : Bool;  // flags: 65536 
  public function RemoveEater( _Eater : CActor);  // flags: 65536 
  public function UpdateEaters();  // flags: 65536 

}
import class W3ScentComponent extends CR4Component {

  public function GetFoodGroup() : EFoodGroup;  // flags: 65536 
  public function SetAttractionRange( _Value : Float);  // flags: 65536 
  public function IsInGroup( _FoodGroup : Int32) : Bool;  // flags: 65536 
  public function IsDetected( _ByWhom : CActor) : Bool;  // flags: 65536 
  public function GetAttractionRange() : Float;  // flags: 65536 

}
import class BTTaskGetFoodNearbyDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 
  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskGuard extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function GetIntruders();  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskGuardDef extends IBehTreeTaskDefinition {

  public function Initialize();  // flags: 65536 
  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class BTTaskCheckDelaySinceLastMeal extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class BTTaskResetLastMealDelay extends IBehTreeTask {

  private function OnDeactivate();  // flags: 16384 

}
import class CBTTaskHasVoiceSet extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskDrawItem extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function AddItemIfNeeded();  // flags: 65536 

}
import class CBTTaskHideItem extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskOpenDoors extends IBehTreeTask {

  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskOpenDoorsDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskPlayHorseBumpSound extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function GetNPCType() : ENPCType;  // flags: 65536 

}
import class CBTTaskPlayVoiceSet extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskSetAttitude extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnCompletion( success : Bool);  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function InitializeReactionDataStorage();  // flags: 65536 

}
import class CBTTaskSetAttitudeDef extends IBehTreeTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskUseInteractiveEntitiesInRange extends IBehTreeTask {

  public function GatherEntities() : Bool;  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function UseEntities();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class W3UsableEntity extends CGameplayEntity {

  public function UseEntity();  // flags: 66048 
  public function CanBeUsed() : Bool;  // flags: 66048 

}
import class CBTTaskWaitFor extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskArachasPull extends CBTTask3StateProjectileAttack {

  public latent function Loop() : Int32;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function StopProjectilesEffect();  // flags: 65536 

}
import class CBTTaskBiesCharge extends CBTTask3StateAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Loop() : Int32;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function ChooseAnim();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskBiesHypnotize extends CBTTask3StateAttack {

  public latent function Loop() : Int32;  // flags: 65600 
  public function GetTargets( out  targets : array<CActor>) : Bool;  // flags: 65536 
  public function isPlayerAmongTargets( targets : array<CActor>) : Bool;  // flags: 65536 
  public function ApplyBuff( targets : array<CActor>);  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskBiesHypnotizeDef extends CBTTask3StateAttackDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskElementalDaoStoneSmash extends CBTTaskAttack {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskElementalThrowFire extends CBTTaskAttack {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskElementalThrow extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class BTTaskExplodeAtDeathDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskIceGiantFallingIcicles extends CBTTaskAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskLeshyGrabAttack extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskLeshyRootAttack extends CBTTaskAttack {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public latent function Loop() : Bool;  // flags: 65600 
  public function ChooseAnim();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function ShootProjectile();  // flags: 65536 

}
import class CBTTaskLeshyStageMonitor extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function MinionNumberCheck() : Bool;  // flags: 65536 

}
import class CBTCondLeshyStage extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskLeshyBirdAttack extends CBTTaskSwarm {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function ShootProjectile();  // flags: 65536 

}
import class BTTaskManageFlies extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private function SummonFlies( _Pos : Vector,  optional  _Rotation : EulerAngles);  // flags: 16384 
  private function OnDeactivate();  // flags: 16384 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class BTTaskManageFliesDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class BTTaskManageMistForm extends CBTTaskPlayAnimationEventDecorator {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function DisableMistForm( b : Bool);  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskPickUpAndThrow extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function ScaleAnim();  // flags: 65536 
  public function SpawnAndAttach();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskPickUpAndThrowDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskSearchForOilBarrel extends CBTTaskSearchForObject {

  public final function FilterOutObjects( out  foundObjects : array<CGameplayEntity>);  // flags: 65552 

}
import class CBTTaskSearchForRift extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Search() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CNode extends CObject {
  import var tags : TagList; // 4001
  import var transform : EngineTransform; // 4001
  import var transformParent : *CHardAttachment; // 4000
  import var guid : CGUID; // 4000

  import public final function GetName() : String;  // flags: 65561 
  import public final function GetLocalPosition() : Vector;  // flags: 65561 
  import public final function GetLocalRotation() : EulerAngles;  // flags: 65561 
  import public final function GetLocalScale() : Vector;  // flags: 65561 
  import public final function GetLocalToWorld() : Matrix;  // flags: 65561 
  import public final function GetWorldPosition() : Vector;  // flags: 65561 
  import public final function GetWorldRotation() : EulerAngles;  // flags: 65561 
  import public final function GetWorldForward() : Vector;  // flags: 65561 
  import public final function GetWorldRight() : Vector;  // flags: 65561 
  import public final function GetWorldUp() : Vector;  // flags: 65561 
  import public final function GetHeading() : Float;  // flags: 65561 
  import public final function GetHeadingVector() : Vector;  // flags: 65561 
  import public final function HasTag( tag : CName) : Bool;  // flags: 65561 
  import public final function GetTags() : array<CName>;  // flags: 65561 
  import public final function SetTags( tags : array<CName>);  // flags: 65561 
  import public final function GetTagsString() : String;  // flags: 65561 
  public function AddTag( tag : CName);  // flags: 65536 

}
import class CBTTaskSirenAttack extends CBTTaskAttack {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskTrollAttack extends CBTTaskAttack {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskWraithDrainDance extends CBTTaskPlayAnimationEventDecorator {

  private final function OnDeactivate();  // flags: 16400 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private function AddDrainBuff();  // flags: 16384 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskWraithDrainDanceDef extends CBTTaskPlayAnimationEventDecoratorDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskWraithManageDoppelgangers extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function UpdateDoppelGangersHealth();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  private function Merge();  // flags: 16384 
  private function DestroySplitEntities();  // flags: 16384 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  private function StopDoppelgangers( optional  Kill : Bool);  // flags: 16384 

}
import class CBTTaskFlashStep extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public latent function FlashStep();  // flags: 65600 
  public function ActorInPlayerFOV() : Bool;  // flags: 65536 
  public function CalculateRandVec();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType) : Bool;  // flags: 65536 

}
import class CEntity extends CNode {
  import var components : array<*CComponent>; // 4008
  import var template : CEntityTemplate; // 4000
  import var streamingDataBuffer : SharedDataBuffer; // 4000
  import var streamingDistance : Uint8; // 4000
  import var entityStaticFlags : EEntityStaticFlags; // 4001
  import var autoPlayEffectName : CName; // 4001
  import var entityFlags : Uint8; // 4000

  import public final function AddTimer( timerName : CName,  period : Float,  optional  repeats : Bool,  optional  scatter : Bool,  optional  group : ETickGroup,  optional  saveable : Bool,  optional  overrideExisting : Bool) : Int32;  // flags: 65561 
  import public final function AddGameTimeTimer( timerName : CName,  period : GameTime,  optional  repeats : Bool,  optional  scatter : Bool,  optional  group : ETickGroup,  optional  saveable : Bool,  optional  overrideExisting : Bool) : Int32;  // flags: 65561 
  import public final function RemoveTimer( timerName : CName,  optional  group : ETickGroup);  // flags: 65561 
  import public final function RemoveTimerById( id : Int32,  optional  group : ETickGroup);  // flags: 65561 
  import public final function RemoveTimers();  // flags: 65561 
  import public final function Destroy();  // flags: 65561 
  import public final function Teleport( position : Vector);  // flags: 65561 
  import public final function TeleportWithRotation( position : Vector,  rotation : EulerAngles);  // flags: 65561 
  import public final function TeleportToNode( node : CNode,  optional  applyRotation : Bool) : Bool;  // flags: 65561 
  import public function GetComponent( compName : String) : CComponent;  // flags: 65545 
  import public function GetComponentByClassName( className : CName) : CComponent;  // flags: 65545 
  import public function GetComponentsByClassName( className : CName) : array<CComponent>;  // flags: 65545 
  import public function GetComponentByUsedBoneName( boneIndex : Int32) : array<CComponent>;  // flags: 65545 
  import public function GetComponentsCountByClassName( className : CName) : Int32;  // flags: 65545 
  import public final function RaiseEvent( eventName : CName) : Bool;  // flags: 65561 
  import public final function RaiseForceEvent( eventName : CName) : Bool;  // flags: 65561 
  import public final function RaiseEventWithoutTestCheck( eventName : CName) : Bool;  // flags: 65561 
  import public final function RaiseForceEventWithoutTestCheck( eventName : CName) : Bool;  // flags: 65561 
  import public final function GetBoneIndex( bone : CName) : Int32;  // flags: 65561 
  import public final function GetBoneWorldMatrixByIndex( boneIndex : Int32) : Matrix;  // flags: 65561 
  import public final function GetBoneReferenceMatrixMS( boneIndex : Int32) : Matrix;  // flags: 65561 
  import public final function GetMoveTarget() : Vector;  // flags: 65561 
  import public final function GetMoveHeading() : Float;  // flags: 65561 
  import public final function GetRootAnimatedComponent() : CAnimatedComponent;  // flags: 65561 
  import public latent final function PreloadBehaviorsToActivate( names : array<CName>) : Bool;  // flags: 65625 
  import public latent final function ActivateBehaviors( names : array<CName>) : Bool;  // flags: 65625 
  import public final function ActivateBehaviorsSync( names : array<CName>) : Bool;  // flags: 65561 
  import public latent final function ActivateAndSyncBehavior( names : CName,  optional  timeout : Float) : Bool;  // flags: 65625 
  import public latent final function ActivateAndSyncBehaviors( names : array<CName>,  optional  timeout : Float) : Bool;  // flags: 65625 
  function SetCollisionType();  // flags: 1 
  import public latent final function AttachBehavior( instanceName : CName) : Bool;  // flags: 65625 
  import public final function AttachBehaviorSync( instanceName : CName) : Bool;  // flags: 65561 
  import public final function DetachBehavior( instanceName : CName) : Bool;  // flags: 65561 
  import public final function SetBehaviorVariable( varName : CName,  varValue : Float,  optional  inAllInstances : Bool) : Bool;  // flags: 65561 
  import public final function GetBehaviorVariable( varName : CName,  optional  defaultValue : Float) : Float;  // flags: 65561 
  import public final function SetBehaviorVectorVariable( varName : CName,  varValue : Vector,  optional  inAllInstances : Bool) : Bool;  // flags: 65561 
  import public final function GetBehaviorVectorVariable( varName : CName) : Vector;  // flags: 65561 
  import public final function GetBehaviorGraphInstanceName( optional  index : Int32) : CName;  // flags: 65561 
  import public function PlayEffect( effectName : CName,  optional  target : CNode) : Bool;  // flags: 65545 
  import public function PlayEffectOnBone( effectName : CName,  boneName : CName,  optional  target : CNode) : Bool;  // flags: 65545 
  import public function SetAutoEffect( effectName : CName) : Bool;  // flags: 65545 
  import public function StopEffect( effectName : CName) : Bool;  // flags: 65545 
  import public function DestroyEffect( effectName : CName) : Bool;  // flags: 65545 
  import public function StopAllEffects();  // flags: 65545 
  import public function DestroyAllEffects();  // flags: 65545 
  import public function HasEffect( effectName : CName) : Bool;  // flags: 65545 
  import public function SoundEvent( eventName : String,  optional  boneName : CName,  optional  isSlot : Bool);  // flags: 65545 
  import public function SoundSwitch( swichGroupName : String,  optional  stateName : String,  optional  boneName : CName,  optional  isSlot : Bool);  // flags: 65545 
  import public function SoundParameter( parameterName : String,  value : Float,  optional  boneName : CName,  optional  duration : Float,  optional  isSlot : Bool);  // flags: 65545 
  import public function SoundIsActiveAny() : Bool;  // flags: 65545 
  import public function SoundIsActiveName( eventName : CName) : Bool;  // flags: 65545 
  import public function SoundIsActive( boneName : CName,  optional  isSlot : Bool) : Bool;  // flags: 65545 
  import public function PreloadEffect( effectName : CName) : Bool;  // flags: 65545 
  import public function PreloadEffectForAnimation( animName : CName) : Bool;  // flags: 65545 
  import public final function Fade( fadeIn : Bool);  // flags: 65561 
  import public function CreateAttachment( parentEntity : CEntity,  optional  slot : CName,  optional  relativePosition : Vector,  optional  relativeRotation : EulerAngles) : Bool;  // flags: 65545 
  import public function CreateAttachmentAtBoneWS( parentEntity : CEntity,  bone : CName,  worldLocation : Vector,  worldRotation : EulerAngles) : Bool;  // flags: 65545 
  import public function BreakAttachment() : Bool;  // flags: 65545 
  import public function HasAttachment() : Bool;  // flags: 65545 
  import public function HasSlot( slotName : CName,  optional  recursive : Bool) : Bool;  // flags: 65545 
  import public function CreateChildAttachment( child : CNode,  optional  slot : CName) : Bool;  // flags: 65545 
  import public function BreakChildAttachment( child : CNode,  optional  slot : CName) : Bool;  // flags: 65545 
  import public function HasChildAttachment( child : CNode) : Bool;  // flags: 65545 
  import public final function CalcEntitySlotMatrix( slot : CName,  out  slotMatrix : Matrix) : Bool;  // flags: 65561 
  import public function SetEffectIntensity( effectName : CName,  intensity : Float,  optional  specificComponentName : CName,  optional  effectParameterName : CName);  // flags: 65545 
  import public function SetKinematic( enable : Bool);  // flags: 65545 
  import public function SetStatic();  // flags: 65545 
  import public function IsRagdolled() : Bool;  // flags: 65545 
  import public function IsStatic() : Bool;  // flags: 65545 
  import public function I_GetDisplayName() : String;  // flags: 65545 
  import public function IsEffectActive( effectName : CName,  optional  treatStoppingAsActive : Bool) : Bool;  // flags: 65545 
  import public final function Duplicate( optional  placeOnLayer : CLayer) : CEntity;  // flags: 65561 
  import public final function SetHideInGame( hide : Bool);  // flags: 65561 
  import public function GetGuidHash() : Int32;  // flags: 65545 
  import public function CalcBoundingBox( out  box : Box);  // flags: 65545 
  import public final function HasTagInLayer( tag : CName) : Bool;  // flags: 65561 
  import public latent final function WaitForEventProcessing( eventName : CName,  timeout : Float) : Bool;  // flags: 65625 
  import public latent final function WaitForBehaviorNodeActivation( activationName : CName,  timeout : Float) : Bool;  // flags: 65625 
  import public latent final function WaitForBehaviorNodeDeactivation( deactivationName : CName,  timeout : Float) : Bool;  // flags: 65625 
  import public final function BehaviorNodeDeactivationNotificationReceived( deactivationName : CName) : Bool;  // flags: 65561 
  import public latent final function WaitForAnimationEvent( animEventName : CName,  timeout : Float) : Bool;  // flags: 65625 
  public event function OnBehaviorGraphNotification( notificationName : CName,  stateName : CName) : Bool;  // flags: 65568 
  public final function GetBoneWorldPosition( boneName : CName) : Vector;  // flags: 65552 
  public final function GetBoneWorldPositionByIndex( boneIndex : Int32) : Vector;  // flags: 65552 
  public final function GetBoneWorldRotationByIndex( boneIndex : Int32) : EulerAngles;  // flags: 65552 
  public final function GetBoneWorldPositionAndRotationByIndex( boneIndex : Int32,  out  position : Vector,  out  rotation : EulerAngles);  // flags: 65552 
  public final function GetBoneWorldMatrix( boneName : CName) : Matrix;  // flags: 65552 
  public function PlayEffectSingle( effectName : CName,  optional  target : CNode) : Bool;  // flags: 65536 
  public function StopEffectIfActive( effectName : CName) : Bool;  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnCanCreateParentAttachment( parentEntity : CEntity) : Bool;  // flags: 65568 
  public event function OnCanBreakParentAttachment( parentEntity : CEntity) : Bool;  // flags: 65568 
  public event function OnCanCreateChildAttachment( childEntity : CEntity) : Bool;  // flags: 65568 
  public event function OnCanBreakChildAttachment( childEntity : CEntity) : Bool;  // flags: 65568 
  public event function OnParentAttachmentCreated( parentEntity : CEntity) : Bool;  // flags: 65568 
  public event function OnParentAttachmentBroken( parentEntity : CEntity) : Bool;  // flags: 65568 
  public event function OnChildAttachmentCreated( childEntity : CEntity) : Bool;  // flags: 65568 
  public event function OnChildAttachmentBroken( childEntity : CEntity) : Bool;  // flags: 65568 
  public function GetReadableName() : String;  // flags: 65536 
  public function ApplyAppearance( appearanceName : String);  // flags: 65536 
  public function DestroyAfter( time : Float);  // flags: 65536 
  public function StopAllEffectsAfter( time : Float);  // flags: 65536 
  private function DestroyTimer( delta : Float,  id : Int32);  // flags: 17408 
  private function StopAllEffectsTimer( delta : Float,  id : Int32);  // flags: 17408 
  public final function RemoveTag( tag : CName);  // flags: 65552 
  protected function SnapComponentByName( componentName : CName,  maxHeightDown : Float,  maxHeightUp : Float,  collisionNames : array<CName>,  out  newPos : Vector) : Bool;  // flags: 32768 
  protected function SnapComponent( component : CComponent,  maxHeightDown : Float,  maxHeightUp : Float,  collisionNames : array<CName>,  out  newPos : Vector) : Bool;  // flags: 32768 

}
import class CBTTaskAdjustVertically extends IBehTreeTask {

  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskChangeAltitude extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function IsHighFlight() : Bool;  // flags: 65536 
  public function IsLowFlight() : Bool;  // flags: 65536 
  public function IsOnGround() : Bool;  // flags: 65536 
  public function FlightStyleChange();  // flags: 65536 

}
import class CGame extends CObject {
  import var activeWorld : CWorld; // 4008
  import var visualDebug : *CVisualDebug; // 4000
  import var inputManager : *CInputManager; // 4000
  import var timerScriptKeyword : *CTimerScriptKeyword; // 4008
  import var gameResource : CGameResource; // 4000

  import public final function IsActive() : Bool;  // flags: 65561 
  import public final function IsPaused() : Bool;  // flags: 65561 
  import public final function IsPausedForReason( reason : String) : Bool;  // flags: 65561 
  import public final function IsStopped() : Bool;  // flags: 65561 
  import public final function IsActivelyPaused() : Bool;  // flags: 65561 
  import public final function IsLoadingScreenVideoPlaying() : Bool;  // flags: 65561 
  import public final function GetEngineTime() : EngineTime;  // flags: 65561 
  import public final function GetEngineTimeAsSeconds() : Float;  // flags: 65561 
  import public final function GetTimeScale( optional  forCamera : Bool) : Float;  // flags: 65561 
  import public final function SetTimeScale( timeScale : Float,  sourceName : CName,  priority : Int32,  optional  affectCamera : Bool,  optional  dontSave : Bool);  // flags: 65561 
  import public final function RemoveTimeScale( sourceName : CName);  // flags: 65561 
  import public final function RemoveAllTimeScales();  // flags: 65561 
  import public final function SetOrRemoveTimeScale( timeScale : Float,  sourceName : CName,  priority : Int32,  optional  affectCamera : Bool);  // flags: 65561 
  import public final function LogTimeScales();  // flags: 65561 
  import public final function GetGameTime() : GameTime;  // flags: 65561 
  import public final function SetGameTime( time : GameTime,  callEvents : Bool);  // flags: 65561 
  import public final function SetHoursPerMinute( f : Float);  // flags: 65561 
  import public final function GetHoursPerMinute() : Float;  // flags: 65561 
  import public final function Pause( reason : String);  // flags: 65561 
  import public final function Unpause( reason : String);  // flags: 65561 
  import public final function ExitGame();  // flags: 65561 
  import public final function SetActivePause( flag : Bool);  // flags: 65561 
  import public final function CreateEntity( entityTemplate : CEntityTemplate,  pos : Vector,  optional  rot : EulerAngles,  optional  useAppearancesFromIncludes : Bool,  optional  forceBehaviorPose : Bool,  optional  doNotAdjustPlacement : Bool,  optional  persistanceMode : EPersistanceMode,  optional  tagList : array<CName>) : CEntity;  // flags: 65561 
  function CreateEntityByPath();  // flags: 1 
  import public final function GetNodeByTag( tag : CName) : CNode;  // flags: 65561 
  import public final function GetEntityByTag( tag : CName) : CEntity;  // flags: 65561 
  import public final function GetNodesByTag( tag : CName,  out  nodes : array<CNode>);  // flags: 65561 
  import public final function GetNodesByTags( tagsList : array<CName>,  out  nodes : array<CNode>,  optional  matchAll : Bool);  // flags: 65561 
  import public final function GetWorld() : CWorld;  // flags: 65561 
  import public final function IsFreeCameraEnabled() : Bool;  // flags: 65561 
  import public final function EnableFreeCamera( flag : Bool);  // flags: 65561 
  import public final function GetFreeCameraPosition() : Vector;  // flags: 65561 
  import public final function IsShowFlagEnabled( showFlag : EShowFlags) : Bool;  // flags: 65561 
  import public final function SetShowFlag( showFlag : EShowFlags,  enabled : Bool);  // flags: 65561 
  import public final function AddInitialFact( factName : String);  // flags: 65561 
  import public final function RemoveInitialFact( faceName : String);  // flags: 65561 
  import public final function ClearInitialFacts();  // flags: 65561 
  import public latent final function PlayCutscene( csName : String,  actorNames : array<String>,  actorEntities : array<CEntity>,  csPos : Vector,  csRot : EulerAngles,  optional  cameraNum : Int32) : Bool;  // flags: 65625 
  import public final function PlayCutsceneAsync( csName : String,  actorNames : array<String>,  actorEntities : array<CEntity>,  csPos : Vector,  csRot : EulerAngles,  optional  cameraNum : Int32) : Bool;  // flags: 65561 
  import public final function IsStreaming() : Bool;  // flags: 65561 
  function GetEntityByTag();  // flags: 1 
  import public final function GetEntitiesByTag( tag : CName,  out  entities : array<CEntity>);  // flags: 65561 
  function IsUsingPad();  // flags: 1 
  import public latent final function FadeIn( optional  fadeTime : Float);  // flags: 65625 
  import public latent final function FadeOut( optional  fadeTime : Float,  optional  fadeColor : Color);  // flags: 65625 
  import public final function FadeInAsync( optional  fadeTime : Float);  // flags: 65561 
  import public final function FadeOutAsync( optional  fadeTime : Float,  optional  fadeColor : Color);  // flags: 65561 
  import public final function IsFading() : Bool;  // flags: 65561 
  import public final function IsBlackscreen() : Bool;  // flags: 65561 
  import public final function SetFadeLock( lockName : String);  // flags: 65561 
  import public final function ResetFadeLock( lockName : String);  // flags: 65561 
  import public final function UnlockAchievement( achName : CName) : Bool;  // flags: 65561 
  import public final function LockAchievement( achName : CName) : Bool;  // flags: 65561 
  import public final function GetUnlockedAchievements( out  unlockedAchievments : array<CName>);  // flags: 65561 
  import public final function GetAllAchievements( out  unlockedAchievments : array<CName>);  // flags: 65561 
  import public final function IsAchievementUnlocked( achievement : CName) : Bool;  // flags: 65561 
  import public final function GetDifficultyLevel() : Int32;  // flags: 65561 
  import public final function SetDifficultyLevel( amount : Int32);  // flags: 65561 
  import public final function ToggleUserProfileManagerInputProcessing( enabled : Bool);  // flags: 65561 
  import public final function IsCheatEnabled( cheatFeature : ECheats) : Bool;  // flags: 65561 
  import public final function ReloadGameplayConfig();  // flags: 65561 
  import public final function GetGameplayChoice() : Bool;  // flags: 65561 
  import public final function IsCurrentlyPlayingNonGameplayScene() : Bool;  // flags: 65561 
  import public final function IsFinalBuild() : Bool;  // flags: 65561 
  import public final function PauseCutscenes();  // flags: 65561 
  import public final function UnpauseCutscenes();  // flags: 65561 
  function TogglePad();  // flags: 1 
  import public final function IsPadConnected() : Bool;  // flags: 65561 
  import public final function IsVibrationEnabled() : Bool;  // flags: 65561 
  import public final function SetVibrationEnabled( enabled : Bool);  // flags: 65561 
  import public final function VibrateController( lowFreq : Float,  highFreq : Float,  duration : Float);  // flags: 65561 
  import public final function StopVibrateController();  // flags: 65561 
  import public final function GetCurrentVibrationFreq( out  lowFreq : Float,  out  highFreq : Float);  // flags: 65561 
  import public final function RemoveSpecificRumble( lowFreq : Float,  highFreq : Float);  // flags: 65561 
  import public final function IsSpecificRumbleActive( lowFreq : Float,  highFreq : Float) : Bool;  // flags: 65561 
  import public final function OverrideRumbleDuration( lowFreq : Float,  highFreq : Float,  newDuration : Float);  // flags: 65561 
  import public final function GetGameplayConfigFloatValue( propName : CName) : Float;  // flags: 65561 
  import public final function GetGameplayConfigBoolValue( propName : CName) : Bool;  // flags: 65561 
  import public final function GetGameplayConfigIntValue( propName : CName) : Int32;  // flags: 65561 
  import public final function GetGameplayConfigEnumValue( propName : CName) : Int32;  // flags: 65561 
  import public final function SetAIObjectsLooseTime( time : Float);  // flags: 65561 
  import public final function SetSingleShotLoadingScreen( contextName : CName,  optional  initString : String,  optional  videoToPlay : String);  // flags: 65561 
  import public final function GetCurrentViewportResolution( out  width : Int32,  out  height : Int32);  // flags: 65561 
  import public final function DebugActivateContent( contentToActivate : CName);  // flags: 65561 
  import public final function HasBlackscreenRequested() : Bool;  // flags: 65561 
  public event function OnDifficultyChanged( newDifficulty : Int32) : Bool;  // flags: 66080 

}
import class CBTTaskChangeStance extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  private function InternalChangeStance( _Stance : ENpcStance) : Bool;  // flags: 16384 

}
import class CMoveTRGActorFlee extends CMoveTRGScript {

  public function UpdateChannels( out  goal : SMoveLocomotionGoal);  // flags: 65536 

}
import class CBehTreeActorTaskRunFromDanger extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskFlyAroundTarget extends CBTTaskVolumetricMove {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskIdle extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Rotate() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskManageSwimming extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  private final function Execute( _IsSwimming : Bool);  // flags: 16400 

}
import class CBTTaskManageSwimmingDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskMoveToEnemy extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CDrawableComponent extends CBoundedComponent {
  import var drawableFlags : EDrawableFlags; // 4001
  import var lightChannels : ELightChannel; // 4001
  import var renderingPlane : ERenderingPlane; // 4001

  import public final function IsVisible() : Bool;  // flags: 65561 
  import public final function SetVisible( flag : Bool);  // flags: 65561 
  import public final function SetCastingShadows( flag : Bool);  // flags: 65561 
  function EnableLightChannels();  // flags: 1 
  function AreLightChannelsEnabled();  // flags: 1 
  public function GetObjectBoundingVolume( out  box : Box) : Bool;  // flags: 65536 

}
import class CBTTaskPursueTarget extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskPursueTargetDef extends IBehTreeTaskDefinition {

  public function Initialize();  // flags: 65536 

}
import class CMoveTRGPursueFlee extends CMoveTRGScript {

  public function UpdateChannels( out  goal : SMoveLocomotionGoal);  // flags: 65536 

}
import class CBTTaskMoveTRG extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CMoveTRGFollowLocomotion extends CMoveTRGScript {

  public function UpdateChannels( out  goal : SMoveLocomotionGoal);  // flags: 65536 

}
import class CBTTaskFollowOwnerTRG extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskMoveToWaypoint extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskRotateToEnemy extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskSetTargetDirection extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function SetTargetDirection();  // flags: 65536 

}
import class TaskSetIsTeleporting extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class TaskTeleportInWaterAction extends TaskTeleportAction {

  private function IsPointSuitableForTeleport( out  whereTo : Vector) : Bool;  // flags: 16384 

}
import class CBTTaskTeleportDecorator extends CBTTaskTeleport {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public latent function Teleport( optional  newPos : Vector) : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskFlyingSwarmTeleport extends CBTTaskTeleport {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function DespawnSwarm();  // flags: 65536 

}
import class CBTTaskFlyingSwarmTeleportAttack extends CBTTaskFlyingSwarmTeleport {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskUnderwaterSwimAroundTarget extends CBTTaskVolumetricMove {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskUnderwaterSwimInRandomDirection extends CBTTaskVolumetricMove {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private final function DirectionIsValid( _Pos : Vector,  _Direction : Vector,  _GuardArea : CAreaComponent) : Bool;  // flags: 16400 

}
import class CBTTaskVolumetricPursueTarget extends CBTTaskVolumetricMove {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function IsMinHeightNegativeInit();  // flags: 65536 
  public function FlyPursueSetDest();  // flags: 65536 
  public function CalculateDifferences();  // flags: 65536 
  public function GetHeightDiff( src : Vector,  dest : Vector,  absoluteDiff : Bool) : Float;  // flags: 65536 

}
import class CBTTaskWander extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskPlayerActionDecorator extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskPlayerActionDecoratorDef extends IBehTreePlayerTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskMiscreantCrying extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Main() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  private function GrabMiscreant();  // flags: 16384 
  private function SendBehGraphEvent( eventName : CName);  // flags: 16384 

}
import class CBTTaskMiscreantCryingDef extends CBTTaskQuestDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskCarryMiscreant extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  private function GrabMiscreant();  // flags: 16384 
  private function DisableMiscreantCollision();  // flags: 16384 

}
import class CBTTaskChangeCaranthirStaff extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function ChangeAppearance();  // flags: 65536 

}
import class BTTaskRaiseEventOnDeactivate extends IBehTreeTask {

  public function OnDeactivate();  // flags: 65536 

}
import class CBTCondCheckJobType extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTCondCheckNPCType extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTCondIsActionTargetPlayer extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTCondIsInSettlement extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTCondIsPlayerCiri extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTCondIsReactionTargetInCombat extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTCondIsReactionTargetInTheSameAttitudeGroup extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTCondPlayerHasSwordInHand extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskChangeInteractionPriority extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskCheckAttitudeToTarget extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskCondReactionEvent extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskCondReactionEventDef extends IBehTreeReactionTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskDisableTalkInteraction extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskEventsBroadcaster extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function Roll( chance : Float) : Bool;  // flags: 65536 

}
import class CBTTaskIsSpeaking extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskIsInChatScene extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskStopAllScenes extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskPlayScreamSound extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function PlaySoundEvent( _npcType : ENPCType);  // flags: 65536 
  public function GetNPCType() : ENPCType;  // flags: 65536 

}
import class CBTTaskResetAttitudesDef extends IBehTreeReactionTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskShouldBeScaredOnOverlay extends IBehTreeTask {

  public function ShouldBeScaredOnOverlay() : Bool;  // flags: 65536 

}
import class CBTTaskScaredWhileSitting extends CBTTaskShouldBeScaredOnOverlay {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskScaredWhileSittingDef extends IBehTreeReactionTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTCondIsSittingInInterior extends CBTTaskShouldBeScaredOnOverlay {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CDamageAreaEntity extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionDeactivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function ProcessArea( dt : Float,  id : Int32);  // flags: 66560 
  public function TurnOff( dt : Float,  id : Int32);  // flags: 66560 
  public function StopSpawnEffect( dt : Float,  id : Int32);  // flags: 66560 
  private final function doTrace( comp : CComponent,  out  outZdiff : Float) : Bool;  // flags: 16400 

}
import class W3SummonedEntityComponent extends CScriptedComponent {

  public function GetSummoner() : CActor;  // flags: 65536 
  public function GetSummonedTime() : Float;  // flags: 65536 
  public function Init( _Summoner : CActor);  // flags: 65536 
  public function OnSummonerDeath();  // flags: 65536 
  public function OnDeath();  // flags: 65536 

}
import class CBTTaskSetActionTargetFromGameplayEvent extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskSetActionTargetFromGameplayEventDef extends IBehTreeReactionTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskShouldUseReactionOneLiners extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskSignalReactionEvent extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnCompletion( success : Bool);  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function TriggerEvent();  // flags: 65536 

}
import class CBTTaskSignalReactionEventDef extends IBehTreeReactionTaskDefinition {

  public function Initialize();  // flags: 65536 

}
import class CBTTaskStopBeingScared extends IBehTreeTask {

  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskRidingManagerPlayerBoatMount extends CBTTaskRidingManagerBoatMount {

  public latent function OnMountStarted( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFinishedSuccessfully( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFailed( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 

}
import class CBTTaskRidingManagerNPCBoatMount extends CBTTaskRidingManagerBoatMount {

  public latent function OnMountFinishedSuccessfully( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 

}
import class CBTTaskRidingManagerPlayerBoatDismount extends CBTTaskRidingManagerBoatDismount {

  public function OnDismountStarted( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public function OnDismountFinishedA( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public latent function OnDismountFinishedB_Latent( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 

}
import class CBTTaskRidingManagerNPCBoatDismount extends CBTTaskRidingManagerBoatDismount {

  public function OnDismountStarted( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public function OnDismountFinishedA( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public latent function OnDismountFinishedB_Latent( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 

}
import class CBTTaskRidingManagerNPCHorseMount extends CBTTaskRidingManagerHorseMount {

  public latent function OnMountStarted( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFinishedSuccessfully( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFailed( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskRidingManagerPlayerHorseMount extends CBTTaskRidingManagerHorseMount {

  public latent function OnMountStarted( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFinishedSuccessfully( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFailed( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskRidingManagerHorseDismountDef extends CBTTaskRidingManagerVehicleDismountDef {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskRidingManagerNPCHorseDismount extends CBTTaskRidingManagerHorseDismount {

  public function OnDismountStarted( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public function OnDismountFinishedA( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public latent function OnDismountFinishedB_Latent( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 

}
import class CBTTaskRidingManagerPlayerHorseDismount extends CBTTaskRidingManagerHorseDismount {

  public function OnDismountStarted( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public function OnDismountFinishedA( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 

}
import class CBTCondMyHorseIsMountedDef extends IBehTreeRiderConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTCondRiderHasPairedHorseDef extends IBehTreeRiderConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTCondIsTargetMounted extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class CBTTaskRiderWaitForDismount extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskRiderWaitForDismountDef extends IBehTreeRiderTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBTTaskRiderSetFollowActionOnHorse extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderSetFollowSideBySideActionOnHorse extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderSetDoNothingActionOnHorse extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderSetMoveToActionOnHorse extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderSetMoveAlongPathActionOnHorse extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderSetMoveAlongPathWithCompanionActionOnHorse extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderSetRaceAlongPathActionOnHorse extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderSetCanBeFollowed extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskTeleportToEntity extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class CBTTaskNpcRider extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskNpcRiderDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CCameraPivotPositionControllerDrift extends ICustomCameraScriptedPivotPositionController {

  protected function ControllerUpdate( out  currentPosition : Vector,  out  currentVelocity : Vector,  timeDelta : Float);  // flags: 32768 
  protected function UpdateDistances( timeDelta : Float);  // flags: 32768 
  protected function GetTargetPosition( timeDelta : Float) : Vector;  // flags: 32768 
  protected function ControllerActivate( currentOffset : Float);  // flags: 32768 

}
import class CCameraRotationControllerDrift extends ICustomCameraScriptedPivotRotationController {

  protected function ControllerUpdate( out  currentRotation : EulerAngles,  out  currentVelocity : EulerAngles,  timeDelta : Float);  // flags: 32768 
  protected function ControllerActivate( currentRotation : EulerAngles);  // flags: 32768 

}
import class CCameraPivotPositionControllerExplorationInteraction extends CCameraPivotPositionControllerJump {

  protected function ControllerActivate( currentOffset : Float);  // flags: 32768 
  protected function ControllerDeactivate();  // flags: 32768 

}
import class CCameraRotationControllerInteraction extends ICustomCameraScriptedPivotRotationController {

  protected function ControllerUpdate( out  currentRotation : EulerAngles,  out  currentVelocity : EulerAngles,  timeDelta : Float);  // flags: 32768 
  protected function ControllerActivate( currentRotation : EulerAngles);  // flags: 32768 

}
import class CCameraRotationControllerJump extends ICustomCameraScriptedPivotRotationController {

  protected function ControllerUpdate( out  currentRotation : EulerAngles,  out  currentVelocity : EulerAngles,  timeDelta : Float);  // flags: 32768 
  protected function ControllerActivate( currentRotation : EulerAngles);  // flags: 32768 

}
import class CCameraPivotPositionControllerKeepRelative extends ICustomCameraScriptedPivotPositionController {

  protected function ControllerUpdate( out  currentPosition : Vector,  out  currentVelocity : Vector,  timeDelta : Float);  // flags: 32768 
  protected function ControllerActivate( currentOffset : Float);  // flags: 32768 

}
import class W3MeditationCameraRotationController extends ICustomCameraScriptedPivotRotationController {

  protected function ControllerActivate( currentRotation : EulerAngles);  // flags: 32768 
  protected function ControllerUpdate( out  currentRotation : EulerAngles,  out  currentVelocity : EulerAngles,  timeDelta : Float);  // flags: 32768 
  protected function ControllerUpdateInput( out  movedHorizontal : Bool,  out  movedVertical : Bool);  // flags: 32768 
  protected function ControllerSetDesiredYaw( yaw : Float,  mult : Float);  // flags: 32768 
  public function GetFixedYaw() : Float;  // flags: 65536 

}
import class CCameraPivotPositionControllerSlide extends ICustomCameraScriptedPivotPositionController {

  protected function ControllerUpdate( out  currentPosition : Vector,  out  currentVelocity : Vector,  timeDelta : Float);  // flags: 32768 
  protected function ControllerActivate( currentOffset : Float);  // flags: 32768 

}
import class W3SlideToTargetComponent extends CSelfUpdatingComponent {

  public function SetStopDistance( _Distance : Float);  // flags: 65536 
  public function SetSpeed( _Speed : Float);  // flags: 65536 
  public function SetOffset( _Offset : Vector);  // flags: 65536 
  public function SetFallBackSpeed( _Speed : Float);  // flags: 65536 
  public function SetNormalSpeed( _Speed : Float);  // flags: 65536 
  public function SetVerticalSpeed( _Speed : Float);  // flags: 65536 
  public function SetGameplayEvent( _Event : CName);  // flags: 65536 
  public function SetTriggerOnTarget( _OnTarget : Bool);  // flags: 65536 
  public function SetDestroyDelayAtDest( _Delay : Float);  // flags: 65536 
  public function SetSuccessDelay( _Delay : Float);  // flags: 65536 
  public function SetStopEffect( _Name : CName);  // flags: 65536 
  public function SetStayAboveNav( _Stay : Bool);  // flags: 65536 
  public function SetSpeedOscillation( _Min : Float,  _Max : Float,  _OscSpeed : Float);  // flags: 65536 
  public function SetNormalSpeedOscillation( _Min : Float,  _Max : Float,  _OscSpeed : Float);  // flags: 65536 
  public function SetVerticalOscillation( _Min : Float,  _Max : Float,  _OscSpeed : Float);  // flags: 65536 
  public event function OnComponentAttached() : Bool;  // flags: 65568 
  private function Oscilliate( _Dt : Float);  // flags: 16384 
  public event function OnComponentTick( _Dt : Float) : Bool;  // flags: 65568 
  public function SetTargetNode( _Target : CNode);  // flags: 65536 
  public function SetTargetVector( _Vector : Vector);  // flags: 65536 
  public function IsAtDestination() : Bool;  // flags: 65536 
  public function GetTargetPosition() : Vector;  // flags: 65536 
  public function GetTimeLeftToDestination() : Float;  // flags: 65536 
  public function GetDistanceToTarget() : Float;  // flags: 65536 

}
import class W3YrdenEntityStateYrdenShock extends W3SignEntityStateActive {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function ActivateShock();  // flags: 65664 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public final function ShootDownProjectile( projectile : CProjectileTrajectory);  // flags: 65552 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private function ShootTarget( targetNode : CNode,  useTargetsPositionCorrection : Bool,  extraRayCastLengthPerc : Float,  useProjectileGroups : Bool) : CEntity;  // flags: 16384 
  private final function YrdenTrapHitEnemy( entity : CEntity,  hitPosition : Vector);  // flags: 16400 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags,  selected : Bool) : Bool;  // flags: 65568 

}
import class W3TargetingManagementComponent extends CSelfUpdatingComponent {

  public event function OnComponentAttached() : Bool;  // flags: 65568 
  private final function UpdateVectors();  // flags: 16400 
  public event function OnComponentTick( _Dt : Float) : Bool;  // flags: 65568 

}
import class W3ForceAttackArea extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3ExplorationObject extends CEntity {

  public event function OnExplorationStarted( entity : CEntity) : Bool;  // flags: 66080 
  public event function OnExplorationFinished( entity : CEntity) : Bool;  // flags: 66080 
  public event function OnAnimationStarted( entity : CEntity,  data : CName) : Bool;  // flags: 66080 
  public event function OnAnimationFinished( entity : CEntity,  data : CName) : Bool;  // flags: 66080 
  public event function OnSlideFinished( entity : CEntity) : Bool;  // flags: 66080 
  public event function OnExplorationEvent( entity : CEntity,  data : CName) : Bool;  // flags: 66080 

}
import class CMovingAgentComponent extends CAnimatedComponent {
  import var ragdollRadius : Float; // 4001
  import var steeringBehavior : CMoveSteeringBehavior; // 4001
  import var steeringControlledMovement : Bool; // 4001
  import var snapToNavigableSpace : Bool; // 4001
  import var physicalRepresentation : Bool; // 4001
  import var movementAdjustor : *CMovementAdjustor; // 4008
  import var triggerAutoActivator : Bool; // 4001
  import var triggerActivatorRadius : Float; // 4001
  import var triggerActivatorHeight : Float; // 4001
  import var triggerChannels : ETriggerChannel; // 4001
  import var triggerEnableCCD : Bool; // 4001
  import var triggerMaxSingleFrameDistance : Float; // 4001

  import public final function SetMaxMoveRotationPerSec( rotSpeed : Float);  // flags: 65561 
  import public final function GetCurrentMoveSpeedAbs() : Float;  // flags: 65561 
  function AddDeltaMovement();  // flags: 1 
  import public final function TeleportBehindCamera( continueMovement : Bool) : Bool;  // flags: 65561 
  import public final function SetMoveType( moveType : EMoveType);  // flags: 65561 
  import public final function EnableCombatMode( combat : Bool) : Bool;  // flags: 65561 
  import public final function EnableVirtualController( virtualControllerName : CName,  enabled : Bool);  // flags: 65561 
  import public final function SetVirtualRadius( radiusName : CName,  optional  virtualControllerName : CName);  // flags: 65561 
  import public final function SetVirtualRadiusImmediately( radiusName : CName);  // flags: 65561 
  import public final function ResetVirtualRadius( optional  virtualControllerName : CName);  // flags: 65561 
  import public final function SetHeight( height : Float);  // flags: 65561 
  import public final function ResetHeight();  // flags: 65561 
  import public final function GetSpeed() : Float;  // flags: 65561 
  import public final function GetRelativeMoveSpeed() : Float;  // flags: 65561 
  import public final function GetMoveTypeRelativeMoveSpeed( moveType : EMoveType) : Float;  // flags: 65561 
  import public final function ForceSetRelativeMoveSpeed( relativeMoveSpeed : Float);  // flags: 65561 
  import public final function SetGameplayRelativeMoveSpeed( relativeMoveSpeed : Float);  // flags: 65561 
  import public final function SetGameplayMoveDirection( actorDirection : Float);  // flags: 65561 
  import public final function SetDirectionChangeRate( directionChangeRate : Float);  // flags: 65561 
  import public final function GetMaxSpeed() : Float;  // flags: 65561 
  import public final function GetVelocity() : Vector;  // flags: 65561 
  import public final function GetVelocityBasedOnRequestedMovement() : Vector;  // flags: 65561 
  import public final function AdjustRequestedMovementDirectionPhysics( out  directionWS : Vector,  out  shouldStop : Bool,  speed : Float,  angleToDeflect : Float,  freeSideDistanceRequired : Float,  out  cornerDetected : Bool,  out  portal : Bool) : Bool;  // flags: 65561 
  import public final function AdjustRequestedMovementDirectionNavMesh( out  directionWS : Vector,  speed : Float,  maxAngle : Float,  maxIteration : Int32,  maxIterationStartSide : Int32,  preferedDirection : Vector,  optional  checkExploration : Bool) : Bool;  // flags: 65561 
  import public final function StartRoadFollowing( speed : Float,  maxAngle : Float,  maxDistance : Float,  out  correctedDirection : Vector) : Bool;  // flags: 65561 
  import public final function ResetRoadFollowing();  // flags: 65561 
  import public final function GetAgentPosition() : Vector;  // flags: 65561 
  import public final function GetPathPointInDistance( distance : Float,  out  position : Vector) : Bool;  // flags: 65561 
  import public final function SnapToNavigableSpace( snap : Bool);  // flags: 65561 
  import public final function IsOnNavigableSpace() : Bool;  // flags: 65561 
  import public final function IsEntityRepresentationForced() : Int32;  // flags: 65561 
  import public final function GetLastNavigablePosition() : Vector;  // flags: 65561 
  import public final function CanGoStraightToDestination( destination : Vector) : Bool;  // flags: 65561 
  import public final function IsPositionValid( position : Vector) : Bool;  // flags: 65561 
  import public final function GetEndOfLineNavMeshPosition( pos : Vector,  out  outPos : Vector) : Bool;  // flags: 65561 
  import public final function IsEndOfLinePositionValid( position : Vector) : Bool;  // flags: 65561 
  function IsInSameRoom();  // flags: 1 
  import public final function GetMovementAdjustor() : CMovementAdjustor;  // flags: 65561 
  import public final function PredictWorldPosition( inTime : Float) : Vector;  // flags: 65561 
  import public final function SetTriggerActivatorRadius( radius : Float);  // flags: 65561 
  import public final function SetTriggerActivatorHeight( height : Float);  // flags: 65561 
  import public final function AddTriggerActivatorChannel( channel : ETriggerChannels);  // flags: 65561 
  import public final function RemoveTriggerActivatorChannel( channel : ETriggerChannels);  // flags: 65561 
  import public final function SetEnabledFeetIK( enable : Bool,  optional  blendTime : Float);  // flags: 65561 
  import public final function GetEnabledFeetIK() : Bool;  // flags: 65561 
  import public final function SetEnabledHandsIK( enable : Bool);  // flags: 65561 
  import public final function SetHandsIKOffsets( left : Float,  right : Float);  // flags: 65561 
  import public final function SetEnabledSlidingOnSlopeIK( enable : Bool);  // flags: 65561 
  import public final function GetEnabledSlidingOnSlopeIK() : Bool;  // flags: 65561 
  import public final function SetUseEntityForPelvisOffset( optional  entity : CEntity);  // flags: 65561 
  import public final function GetUseEntityForPelvisOffset() : CEntity;  // flags: 65561 
  import public final function SetAdditionalOffsetWhenAttachingToEntity( optional  entity : CEntity,  optional  time : Float);  // flags: 65561 
  import public final function SetAdditionalOffsetToConsumePointWS( transformWS : Matrix,  optional  time : Float);  // flags: 65561 
  import public final function SetAdditionalOffsetToConsumeMS( pos : Vector,  rot : EulerAngles,  time : Float);  // flags: 65561 
  public final function SetEnabledRestorePosition( enabled : Bool) : Bool;  // flags: 65552 
  public function ResetMoveRequests();  // flags: 65536 

}
import class CComponent extends CNode {
  import var name : String; // 4001
  import var isStreamed : Bool; // 4001

  import public final function GetEntity() : CEntity;  // flags: 65561 
  import public final function IsEnabled() : Bool;  // flags: 65561 
  import public final function SetEnabled( flag : Bool);  // flags: 65561 
  import public final function SetPosition( position : Vector);  // flags: 65561 
  import public final function SetRotation( rotation : EulerAngles);  // flags: 65561 
  import public final function SetScale( scale : Vector);  // flags: 65561 
  import public final function HasDynamicPhysic() : Bool;  // flags: 65561 
  import public final function HasCollisionType( collisionTypeName : CName,  optional  actorIndex : Int32,  optional  shapeIndex : Int32) : Bool;  // flags: 65561 
  import public final function GetPhysicalObjectLinearVelocity( optional  actorIndex : Int32) : Vector;  // flags: 65561 
  import public final function GetPhysicalObjectAngularVelocity( optional  actorIndex : Int32) : Vector;  // flags: 65561 
  import public final function SetPhysicalObjectLinearVelocity( velocity : Vector,  optional  actorIndex : Int32) : Bool;  // flags: 65561 
  import public final function SetPhysicalObjectAngularVelocity( velocity : Vector,  optional  actorIndex : Int32) : Bool;  // flags: 65561 
  import public final function GetPhysicalObjectMass( optional  actorIndex : Int32) : Float;  // flags: 65561 
  import public final function ApplyTorqueToPhysicalObject( torque : Vector,  optional  actorIndex : Int32);  // flags: 65561 
  import public final function ApplyForceAtPointToPhysicalObject( force : Vector,  point : Vector,  optional  actorIndex : Int32);  // flags: 65561 
  function ApplyForceToPhysicalObject();  // flags: 1 
  import public final function ApplyLocalImpulseToPhysicalObject( impulse : Vector,  optional  actorIndex : Int32);  // flags: 65561 
  import public final function ApplyTorqueImpulseToPhysicalObject( impulse : Vector,  optional  actorIndex : Int32);  // flags: 65561 
  import public final function GetPhysicalObjectBoundingVolume( out  box : Box) : Bool;  // flags: 65561 
  import public final function SetShouldSave( shouldSave : Bool);  // flags: 65561 
  public function SignalCustomEvent( eventName : CName);  // flags: 65536 

}
import class CAppearanceComponent extends CComponent {
  import var forcedAppearance : CName; // 4001
  import var attachmentReplacements : SAttachmentReplacements; // 4000
  import var appearanceAttachments : array<SAppearanceAttachments>; // 4000

  import public final function ApplyAppearance( appearanceName : String);  // flags: 65561 
  function GetAppearance();  // flags: 1 
  import public final function IncludeAppearanceTemplate( template : CEntityTemplate);  // flags: 65561 
  import public final function ExcludeAppearanceTemplate( template : CEntityTemplate);  // flags: 65561 

}
import class CBoundedComponent extends CComponent {
  import var boundingBox : Box; // 4000

  import public final function GetBoundingBox() : Box;  // flags: 65561 

}
import class CCurve extends CObject {
  import var color : Color; // 4001
  import var dataBaseType : ECurveBaseType; // 4000
  import var data.m_loop : Bool; // 4001

  import public function GetValue( time : Float) : Float;  // flags: 65545 
  import public function GetDuration() : Float;  // flags: 65545 

}
import class CWorld extends CResource {
  import var startupCameraPosition : Vector; // 4000
  import var startupCameraRotation : EulerAngles; // 4000
  import var terrainClipMap : *CClipMap; // 4000
  import var newLayerGroupFormat : Bool; // 4000
  import var hasEmbeddedLayerInfos : Bool; // 4000
  import var initialyHidenLayerGroups : C2dArray; // 4003
  import var umbraScene : CUmbraScene; // 4005
  import var globalWater : *CGlobalWater; // 4000
  import var pathLib : *CPathLibWorld; // 4005
  import var worldDimensions : Float; // 4001
  import var shadowConfig : CWorldShadowConfig; // 4001
  import var environmentParameters : SWorldEnvironmentParameters; // 4005
  import var soundBanksDependency : array<CName>; // 4001
  import var soundEventsOnAttach : array<StringAnsi>; // 4001
  import var soundEventsOnDetach : array<StringAnsi>; // 4001
  import var foliageScene : *CFoliageScene; // 4005
  import var playGoChunks : array<CName>; // 4001
  import var minimapsPath : String; // 4011
  import var hubmapsPath : String; // 4011
  import var mergedGeometry : *CMergedWorldGeometry; // 4005

  import public final function ShowLayerGroup( layerGroupName : String);  // flags: 65561 
  import public final function HideLayerGroup( layerGroupName : String);  // flags: 65561 
  import public final function PointProjectionTest( point : Vector,  normal : EulerAngles,  range : Float) : Bool;  // flags: 65561 
  import public final function StaticTrace( pointA : Vector,  pointB : Vector,  out  position : Vector,  out  normal : Vector,  optional  collisionGroupsNames : array<CName>) : Bool;  // flags: 65561 
  import public final function StaticTraceWithAdditionalInfo( pointA : Vector,  pointB : Vector,  out  position : Vector,  out  normal : Vector,  out  material : CName,  out  component : CComponent,  optional  collisionGroupsNames : array<CName>) : Bool;  // flags: 65561 
  import public final function GetWaterLevel( point : Vector,  optional  dontUseApproximation : Bool) : Float;  // flags: 65561 
  import public final function GetWaterDepth( point : Vector,  optional  dontUseApproximation : Bool) : Float;  // flags: 65561 
  import public final function GetWaterTangent( point : Vector,  direction : Vector,  optional  resolution : Float) : Vector;  // flags: 65561 
  import public final function SweepTest( pointA : Vector,  pointB : Vector,  radius : Float,  out  position : Vector,  out  normal : Vector,  optional  collisionGroupsNames : array<CName>) : Bool;  // flags: 65561 
  import public final function SphereOverlapTest( out  entities : array<CEntity>,  position : Vector,  radius : Float,  optional  collisionGroupsNames : array<CName>) : Int32;  // flags: 65561 
  import public final function NavigationLineTest( pos1 : Vector,  pos2 : Vector,  radius : Float,  optional  ignoreObstacles : Bool,  optional  noEndpointZ : Bool) : Bool;  // flags: 65561 
  import public final function NavigationCircleTest( position : Vector,  radius : Float,  optional  ignoreObstacles : Bool) : Bool;  // flags: 65561 
  import public final function NavigationClosestObstacleToLine( pos1 : Vector,  pos2 : Vector,  radius : Float,  out  closestPointOnLine : Vector,  out  closestPointOnGeometry : Vector,  optional  ignoreObstacles : Bool) : Float;  // flags: 65561 
  import public final function NavigationClosestObstacleToCircle( position : Vector,  radius : Float,  out  closestPointOnGeometry : Vector,  optional  ignoreObstacles : Bool) : Float;  // flags: 65561 
  import public final function NavigationClearLineInDirection( pos1 : Vector,  pos2 : Vector,  radius : Float,  out  closestPointOnLine : Vector) : Bool;  // flags: 65561 
  import public final function NavigationFindSafeSpot( position : Vector,  personalSpace : Float,  searchRadius : Float,  out  outSafeSpot : Vector) : Bool;  // flags: 65561 
  import public final function NavigationComputeZ( position : Vector,  zMin : Float,  zMax : Float,  out  z : Float) : Bool;  // flags: 65561 
  import public final function PhysicsCorrectZ( position : Vector,  out  z : Float) : Bool;  // flags: 65561 
  import public final function GetDepotPath() : String;  // flags: 65561 
  import public final function ForceGraphicalLOD( lodLevel : Int32);  // flags: 65561 
  import public final function GetTerrainParameters( out  terrainSize : Float,  out  tilesCount : Int32) : Bool;  // flags: 65561 
  import public final function GetTraceManager() : CScriptBatchQueryAccessor;  // flags: 65561 
  public event function OnWeatherChange() : Bool;  // flags: 65568 

}
import class CAnimatedComponent extends CComponent {
  import var ragdoll : CRagdoll; // 4001
  import var ragdollCollisionType : CPhysicalCollision; // 4001
  import var skeleton : CSkeleton; // 4001
  import var physicsRepresentation : *CAnimatedComponentPhysicsRepresentation; // 4005
  import var animationSets : array<CSkeletalAnimationSet>; // 4001
  import var behaviorInstanceSlots : array<SBehaviorGraphInstanceSlot>; // 4001
  import var useExtractedMotion : Bool; // 4001
  import var stickRagdollToCapsule : Bool; // 4001
  import var includedInAllAppearances : Bool; // 4001
  import var savable : Bool; // 4001
  import var defaultBehaviorAnimationSlotNode : CName; // 4001
  import var isFrozenOnStart : Bool; // 4001
  import var defaultSpeedConfigKey : CName; // 4001
  import var overrideBudgetedTickDistance : Float; // 4001
  import var overrideDisableTickDistance : Float; // 4001
  import var runtimeBehaviorInstanceSlots : array<SBehaviorGraphInstanceSlot>; // 4000

  import public final function UseExtractedMotion() : Bool;  // flags: 65561 
  import public final function SetUseExtractedMotion( use : Bool);  // flags: 65561 
  import public final function StickRagdollToCapsule( stick : Bool);  // flags: 65561 
  import public latent final function ActivateBehaviors( names : array<CName>) : Bool;  // flags: 65625 
  import public latent final function AttachBehavior( instanceName : CName) : Bool;  // flags: 65625 
  import public final function DetachBehavior( instanceName : CName) : Bool;  // flags: 65561 
  import public final function SetBehaviorVariable( varName : CName,  varValue : Float) : Bool;  // flags: 65561 
  import public final function GetBehaviorVariable( varName : CName) : Float;  // flags: 65561 
  import public final function SetBehaviorVectorVariable( varName : CName,  varValue : Vector) : Bool;  // flags: 65561 
  import public final function GetBehaviorVectorVariable( varName : CName) : Vector;  // flags: 65561 
  import public final function DisplaySkeleton( bone : Bool,  optional  axis : Bool,  optional  names : Bool);  // flags: 65561 
  import public final function GetAnimationTimeMultiplier() : Float;  // flags: 65561 
  import public final function SetAnimationTimeMultiplier( mult : Float);  // flags: 65561 
  import public final function GetMoveSpeedAbs() : Float;  // flags: 65561 
  function GetMoveDirWorldSpace();  // flags: 1 
  import public final function RaiseBehaviorEvent( eventName : CName) : Bool;  // flags: 65561 
  import public final function RaiseBehaviorForceEvent( eventName : CName) : Bool;  // flags: 65561 
  import public final function FindNearestBoneWS( out  position : Vector) : Int32;  // flags: 65561 
  import public final function FindNearestBoneToEdgeWS( a : Vector,  b : Vector) : Int32;  // flags: 65561 
  import public final function GetCurrentBehaviorState( optional  instanceName : CName) : String;  // flags: 65561 
  import public final function FreezePose();  // flags: 65561 
  import public final function UnfreezePose();  // flags: 65561 
  import public final function FreezePoseFadeIn( fadeInTime : Float);  // flags: 65561 
  import public final function UnfreezePoseFadeOut( fadeOutTime : Float);  // flags: 65561 
  import public final function HasFrozenPose() : Bool;  // flags: 65561 
  import public final function SyncTo( slaveComponent : CAnimatedComponent,  ass : SAnimatedComponentSyncSettings) : Bool;  // flags: 65561 
  import public final function HasRagdoll() : Bool;  // flags: 65561 
  import public final function GetRagdollBoneName( actorIndex : Int32) : CName;  // flags: 65561 
  import public final function PlaySlotAnimationAsync( animation : CName,  slotName : CName,  optional  settings : SAnimatedComponentSlotAnimationSettings) : Bool;  // flags: 65561 
  import public final function PlaySkeletalAnimationAsync( animation : CName,  optional  looped : Bool) : Bool;  // flags: 65561 
  import public final function GetMoveSpeedRel() : Float;  // flags: 65561 
  import public final function GetBoneMatrixMovementModelSpaceInAnimation( boneIndex : Int32,  animation : CName,  time : Float,  deltaTime : Float,  out  boneAtTimeMS : Matrix,  out  boneWithDeltaTimeMS : Matrix);  // flags: 65561 
  import public final function DontUpdateByOtherAnimatedComponent();  // flags: 65561 
  import public final function UpdateByOtherAnimatedComponent( slaveComponent : CAnimatedComponent);  // flags: 65561 
  public function SetAnimationSpeedMultiplier( mul : Float) : Int32;  // flags: 65536 
  private function CalculateFinalAnimationSpeedMultiplier() : Float;  // flags: 16384 
  public function ResetAnimationSpeedMultiplier( id : Int32);  // flags: 65536 

}
import class CInputManager extends CObject {
  import var gestureSystem : *CGestureSystem; // 4000

  import public final function GetLastActivationTime( actionName : CName) : Float;  // flags: 65561 
  import public final function GetActionValue( actionName : CName) : Float;  // flags: 65561 
  import public final function GetAction( actionName : CName) : SInputAction;  // flags: 65561 
  function IgnoreGameInput();  // flags: 1 
  import public final function ClearIgnoredInput();  // flags: 65561 
  import public final function IsInputIgnored( actionName : CName) : Bool;  // flags: 65561 
  import public final function SetContext( contextName : CName);  // flags: 65561 
  import public final function GetContext() : CName;  // flags: 65561 
  import public final function UnregisterListener( listener : IScriptable,  actionName : CName);  // flags: 65561 
  import public final function RegisterListener( listener : IScriptable,  eventName : CName,  actionName : CName);  // flags: 65561 
  import public final function EnableLog( val : Bool);  // flags: 65561 
  import public final function StoreContext( newContext : CName);  // flags: 65561 
  import public final function RestoreContext( storedContext : CName,  contextCouldChange : Bool);  // flags: 65561 
  import public final function LastUsedPCInput() : Bool;  // flags: 65561 
  import public final function LastUsedGamepad() : Bool;  // flags: 65561 
  import public final function ForceDeactivateAction( actionName : CName);  // flags: 65561 
  import public final function GetPCKeysForAction( actionName : CName,  out  outKeys : array<EInputKey>);  // flags: 65561 
  import public final function GetPadKeysForAction( actionName : CName,  out  outKeys : array<EInputKey>);  // flags: 65561 
  import public final function GetCurrentKeysForAction( actionName : CName,  out  outKeys : array<EInputKey>);  // flags: 65561 
  import public final function GetPCKeysForActionStr( actionName : String,  out  outKeys : array<EInputKey>);  // flags: 65561 
  import public final function GetPadKeysForActionStr( actionName : String,  out  outKeys : array<EInputKey>);  // flags: 65561 
  import public final function GetCurrentKeysForActionStr( actionName : String,  out  outKeys : array<EInputKey>);  // flags: 65561 
  import public final function UsesPlaystationPad() : Bool;  // flags: 65561 
  import public final function SetInvertCamera( invert : Bool);  // flags: 65561 
  public final function UsesPlaystationPadScript() : Bool;  // flags: 65552 
  public function IsActionPressed( actionName : CName) : Bool;  // flags: 65536 
  public function IsActionReleased( actionName : CName) : Bool;  // flags: 65536 
  public function IsActionJustPressed( actionName : CName) : Bool;  // flags: 65536 
  public function IsActionJustReleased( actionName : CName) : Bool;  // flags: 65536 
  public event function OnInputDeviceChanged() : Bool;  // flags: 65568 
  public function IsAttackWithAlternateBound() : Bool;  // flags: 65536 
  public function IsToggleSprintBound() : Bool;  // flags: 65536 

}
import class CPeristentEntity extends CEntity {
  import var idTag : IdTag; // 4003
  import var isSaveable : Bool; // 4001

  public event function OnBehaviorSnaphot() : Bool;  // flags: 65568 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 

}
import class IPerformableAction extends CObject {

  import public final function Trigger( parnt : CEntity);  // flags: 65561 
  import public final function TriggerArgNode( parnt : CEntity,  node : CNode);  // flags: 65561 
  import public final function TriggerArgFloat( parnt : CEntity,  value : Float);  // flags: 65561 

}
import class CCameraDirector extends CObject {

  import public final function ViewCoordsToWorldVector( x : Int32,  y : Int32,  out  rayStart : Vector,  out  rayDirection : Vector);  // flags: 65561 
  import public final function WorldVectorToViewCoords( worldPos : Vector,  out  x : Int32,  out  y : Int32);  // flags: 65561 
  import public final function WorldVectorToViewRatio( worldPos : Vector,  out  x : Float,  out  y : Float) : Bool;  // flags: 65561 
  import public final function GetCameraPosition() : Vector;  // flags: 65561 
  import public final function GetCameraRotation() : EulerAngles;  // flags: 65561 
  import public final function GetCameraForward() : Vector;  // flags: 65561 
  import public final function GetCameraRight() : Vector;  // flags: 65561 
  import public final function GetCameraUp() : Vector;  // flags: 65561 
  import public final function GetCameraHeading() : Float;  // flags: 65561 
  import public final function GetCameraDirection() : Vector;  // flags: 65561 
  import public final function GetFov() : Float;  // flags: 65561 
  import public final function GetTopmostCameraObject() : IScriptable;  // flags: 65561 
  function ProjectPoint();  // flags: 1 
  function UnprojectPoint();  // flags: 1 
  function IsPointInView();  // flags: 1 
  public function GetCameraForwardOnHorizontalPlane() : Vector;  // flags: 65536 

}
import class CCamera extends CEntity {

  import public final function Rotate( leftRightDelta : Float,  upDownDelta : Float);  // flags: 65561 
  import public final function Follow( dest : CEntity);  // flags: 65561 
  import public final function FollowWithRotation( dest : CEntity);  // flags: 65561 
  import public final function LookAt( target : CNode,  optional  duration : Float,  optional  activatingTime : Float);  // flags: 65561 
  import public final function LookAtStatic( staticTarget : Vector,  optional  duration : Float,  optional  activatingTime : Float);  // flags: 65561 
  import public final function LookAtBone( target : CAnimatedComponent,  boneName : String,  optional  duration : Float,  optional  activatingTime : Float);  // flags: 65561 
  import public final function LookAtDeactivation( optional  deactivatingTime : Float);  // flags: 65561 
  import public final function HasLookAt() : Bool;  // flags: 65561 
  import public final function GetLookAtTargetPosition() : Vector;  // flags: 65561 
  import public final function FocusOn( target : CNode,  optional  duration : Float,  optional  activatingTime : Float);  // flags: 65561 
  import public final function FocusOnStatic( staticTarget : Vector,  optional  duration : Float,  optional  activatingTime : Float);  // flags: 65561 
  import public final function FocusOnBone( target : CAnimatedComponent,  boneName : String,  optional  duration : Float,  optional  activatingTime : Float);  // flags: 65561 
  import public final function FocusDeactivation( optional  deactivatingTime : Float);  // flags: 65561 
  import public final function IsFocused() : Bool;  // flags: 65561 
  import public final function GetFocusTargetPosition() : Vector;  // flags: 65561 
  import public final function SetActive( blendTime : Float);  // flags: 65561 
  import public final function IsActive() : Bool;  // flags: 65561 
  import public final function IsOnStack() : Bool;  // flags: 65561 
  import public final function GetCameraDirection() : Vector;  // flags: 65561 
  import public final function GetCameraPosition() : Vector;  // flags: 65561 
  import public final function GetCameraMatrixWorldSpace() : Matrix;  // flags: 65561 
  import public final function SetFov( fov : Float);  // flags: 65561 
  import public final function GetFov() : Float;  // flags: 65561 
  import public final function SetZoom( value : Float);  // flags: 65561 
  import public final function GetZoom() : Float;  // flags: 65561 
  import public final function Reset();  // flags: 65561 
  import public final function ResetRotation( optional  smoothly : Bool,  optional  horizontal : Bool,  optional  vertical : Bool,  optional  duration : Float);  // flags: 65561 
  import public final function ResetRotationTo( smoothly : Bool,  horizontalAngle : Float,  optional  verticalAngle : Float,  optional  duration : Float);  // flags: 65561 
  public final function SetCameraState( newState : ECameraState) : Bool;  // flags: 65552 
  public final function GetCameraState() : ECameraState;  // flags: 65552 
  public final function CameraShakeLooped( strength : Float,  optional  cameraShakeType : ECameraShakeState);  // flags: 65552 
  public final function GCameraShake( strength : Float,  optional  testDistance : Bool,  optional  shakeEpicenter : Vector,  optional  maxDistance : Float);  // flags: 65552 
  public final function SetCameraShakeState( newState : ECameraShakeState,  strength : Float) : Bool;  // flags: 65552 

}
import class CStaticCamera extends CCamera {
  import var solver : ECameraSolver; // 4001
  import var activationDuration : Float; // 6001
  import var deactivationDuration : Float; // 6001
  import var timeout : Float; // 6001
  import var zoom : Float; // 4001
  import var fov : Float; // 4001
  import var animState : Int32; // 4001
  import var guiEffect : Int32; // 4001
  import var blockPlayer : Bool; // 4001
  import var resetPlayerCamera : Bool; // 4001
  import var fadeStartDuration : Float; // 6001
  import var fadeStartColor : Color; // 4001
  import var isFadeStartFadeIn : Bool; // 4001
  import var fadeEndDuration : Float; // 6001
  import var fadeEndColor : Color; // 4001
  import var isFadeEndFadeIn : Bool; // 4001

  import public final function Run() : Bool;  // flags: 65561 
  import public latent final function RunAndWait( optional  timeout : Float) : Bool;  // flags: 65625 
  import public final function IsRunning() : Bool;  // flags: 65561 
  import public final function AutoDeactivating() : Bool;  // flags: 65561 
  import public final function Stop();  // flags: 65561 

}
import class CMorphedMeshManagerComponent extends CComponent {
  import var Default morph ratio : Float; // 4001
  import var morphCurve : CCurve; // 4001
  import var morphRatio : Float; // 4009

  import public final function SetMorphBlend( morphRatio : Float,  blendtime : Float);  // flags: 65561 
  import public final function GetMorphBlend() : Float;  // flags: 65561 

}
import class CStaticMeshComponent extends CMeshComponent {
  import var pathLibCollisionType : EPathLibCollision; // 4001
  import var fadeOnCameraCollision : Bool; // 4001
  import var physicalCollisionType : CPhysicalCollision; // 4001

  function GetPhysicalObjectBoundingVolume();  // flags: 1 

}
import class CRigidMeshComponent extends CStaticMeshComponent {
  import var motionType : EMotionType; // 4001
  import var linearDamping : Float; // 4001
  import var angularDamping : Float; // 4001
  import var linearVelocityClamp : Float; // 4001

  import public function EnableBuoyancy( enable : Bool) : Bool;  // flags: 65545 

}
import class CScriptedDestroyableComponent extends CRigidMeshComponent {
  import var destroyWay : EDestroyWay; // 4001

  import public final function GetDestroyWay() : EDestroyWay;  // flags: 65561 
  function GetDistanceValue();  // flags: 1 
  import public function GetDestroyAtTime() : Float;  // flags: 65545 
  import public function GetDestroyTimeDuration() : Float;  // flags: 65545 
  public function GetDistanceToTargetValue() : Float;  // flags: 65536 
  public function GetDestroyTimeDurationValue() : Float;  // flags: 65536 
  public function GetContactDestroyDelayValue() : Float;  // flags: 65536 
  public function GetDestroyAtTimeValue() : Float;  // flags: 65536 
  public function IdleTick( time : Float);  // flags: 66048 
  public function PreDestroyTick( time : Float);  // flags: 66048 
  public function DestroyTick( time : Float);  // flags: 66048 
  public function PostDestroyTick( time : Float);  // flags: 66048 

}
import class CPhantomComponent extends CComponent {
  import var collisionGroupName : CName; // 4001
  import var triggeringCollisionGroupNames : array<CName>; // 4001
  import var shapeType : EPhantomShape; // 4001
  import var shapeDimensions : Vector; // 4001
  import var onTriggerEnteredScriptEvent : CName; // 4001
  import var onTriggerExitedScriptEvent : CName; // 4001
  import var eventsCalledOnComponent : Bool; // 4001
  import var useInQueries : Bool; // 4001
  import var meshCollision : CMesh; // 4001

  import public final function Activate();  // flags: 65561 
  import public final function Deactivate();  // flags: 65561 
  import public final function GetTriggeringCollisionGroupNames( out  names : array<CName>);  // flags: 65561 
  import public final function GetNumObjectsInside() : Int32;  // flags: 65561 

}
import class CPathComponent extends CComponent {
  import var curve : SMultiCurve; // 4001
  import var speedCurve : SSimpleCurve; // 4001

  import public final function FindClosestEdge( point : Vector) : Int32;  // flags: 65561 
  import public final function GetAlphaOnEdge( point : Vector,  edgeIdx : Int32,  optional  epsilon : Float) : Float;  // flags: 65561 
  import public final function GetClosestPointOnPath( point : Vector,  optional  epsilon : Float) : Vector;  // flags: 65561 
  import public final function GetClosestPointOnPathExt( point : Vector,  out  edgeIdx : Int32,  out  edgeAlpha : Float,  optional  epsilon : Float) : Vector;  // flags: 65561 
  import public final function GetDistanceToPath( point : Vector,  optional  epsilon : Float) : Float;  // flags: 65561 
  import public final function GetNextPointOnPath( point : Vector,  distance : Float,  out  isEndOfPath : Bool,  optional  epsilon : Float) : Vector;  // flags: 65561 
  import public final function GetNextPointOnPathExt( out  edgeIdx : Int32,  out  edgeAlpha : Float,  distance : Float,  out  isEndOfPath : Bool,  optional  epsilon : Float) : Vector;  // flags: 65561 
  import public final function GetWorldPoint( index : Int32) : Vector;  // flags: 65561 
  import public final function GetPointsCount() : Int32;  // flags: 65561 

}
import class CAreaComponent extends CBoundedComponent {
  import var height : Float; // 4001
  import var color : Color; // 4001
  import var terrainSide : EAreaTerrainSide; // 4001
  import var clippingMode : EAreaClippingMode; // 4001
  import var clippingAreaTags : TagList; // 4001
  import var saveShapeToLayer : Bool; // 4001
  import var localPoints : array<Vector>; // 4000
  import var worldPoints : array<Vector>; // 4000

  import public final function TestEntityOverlap( ent : CEntity) : Bool;  // flags: 65561 
  import public final function TestPointOverlap( point : Vector) : Bool;  // flags: 65561 
  function GetLocalPoints();  // flags: 1 
  import public final function GetWorldPoints( out  points : array<Vector>);  // flags: 65561 
  function GetBoudingAreaRadius();  // flags: 1 

}
import class CExplorationStateAirCollision extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  private function AddAnimEventCallbacks();  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  private function PrepareImpulseToJump();  // flags: 16384 
  private function InputWantsToClimb() : Bool;  // flags: 16384 
  private function WantsToInteractWithExploration() : Bool;  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function GetDebugText() : String;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function UpdateCameraIfNeeded( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CDestructionSystemComponent extends CDrawableComponent {
  import var m_resource : CApexResource; // 4001
  import var targetEntityCollisionScriptName : CName; // 4001
  import var parentEntityCollisionScriptEventName : CName; // 4001
  import var parameters.m_materials : array<CMaterialGraph>; // 4001
  import var m_physicalCollisionType : CPhysicalCollision; // 4001
  import var m_fracturedPhysicalCollisionType : CPhysicalCollision; // 4001
  import var dispacher selection : EDispatcherSelection; // 4001
  import var dynamic : Bool; // 4001
  import var supportDepth : Uint32; // 4001
  import var useAssetDefinedSupport : Bool; // 4001
  import var debrisDepth : Int32; // 4001
  import var essentialDepth : Uint32; // 4001
  import var debrisTimeout : Bool; // 4001
  import var debrisLifetimeMin : Float; // 4001
  import var debrisLifetimeMax : Float; // 4001
  import var debrisMaxSeparation : Bool; // 4001
  import var debrisMaxSeparationMin : Float; // 4001
  import var debrisMaxSeparationMax : Float; // 4001
  import var fadeOutTime : Float; // 4001
  import var minimumFractureDepth : Uint32; // 4001
  import var preset : EDestructionPreset; // 4001
  import var debrisDestructionProbability : Float; // 4001
  import var crumbleSmallestChunks : Bool; // 4001
  import var accumulateDamage : Bool; // 4001
  import var damageCap : Float; // 4001
  import var damageThreshold : Float; // 4001
  import var damageToRadius : Float; // 4001
  import var forceToDamage : Float; // 4001
  import var fractureImpulseScale : Float; // 4001
  import var impactDamageDefaultDepth : Int32; // 4001
  import var impactVelocityThreshold : Float; // 4001
  import var materialStrength : Float; // 4001
  import var maxChunkSpeed : Float; // 4001
  import var useWorldSupport : Bool; // 4001
  import var useHardSleeping : Bool; // 4001
  import var useStressSolver : Bool; // 4001
  import var stressSolverTimeDelay : Float; // 4001
  import var stressSolverMassThreshold : Float; // 4001
  import var sleepVelocityFrameDecayConstant : Float; // 4001
  import var eventOnDestruction : array<*IPerformableAction>; // 4005
  import var pathLibCollisionType : EPathLibCollision; // 4001
  import var disableObstacleOnDestruction : Bool; // 4001
  import var shadowDistanceOverride : Float; // 4001

  import public final function IsDestroyed() : Bool;  // flags: 65561 
  import public final function GetFractureRatio() : Float;  // flags: 65561 
  import public final function ApplyFracture() : Bool;  // flags: 65561 
  function ApplyForce();  // flags: 1 
  function ApplyDamageAtPoint();  // flags: 1 
  function ApplyRadiusDamage();  // flags: 1 
  public function GetObjectBoundingVolume( out  box : Box) : Bool;  // flags: 65536 

}
import class CClothComponent extends CMeshTypeComponent {
  import var resource : CApexResource; // 4001
  import var dispacher selection : EDispatcherSelection; // 4001
  import var recomputeNormals : Bool; // 4001
  import var correctSimulationNormals : Bool; // 4001
  import var slowStart : Bool; // 4001
  import var useStiffSolver : Bool; // 4001
  import var pressure : Float; // 4001
  import var lodWeights.maxDistance : Float; // 4001
  import var lodWeights.distanceWeight : Float; // 4001
  import var lodWeights.bias : Float; // 4001
  import var lodWeights.benefitsBias : Float; // 4001
  import var maxDistanceBlendTime : Float; // 4001
  import var uvChannelForTangentUpdate : Uint32; // 4001
  import var maxDistanceScale.Multipliable : Bool; // 4001
  import var maxDistanceScale.Scale : Float; // 4001
  import var collisionResponseCoefficient : Float; // 4001
  import var allowAdaptiveTargetFrequency : Bool; // 4001
  import var windScaler : Float; // 4001
  import var triggeringCollisionGroupNames : array<CName>; // 4001
  import var triggerType : ETriggerShape; // 4001
  import var triggerDimensions : Vector; // 4001
  import var triggerLocalOffset.V[ 3 ] : Vector; // 4001
  import var shadowDistanceOverride : Float; // 4001

  import public final function SetSimulated( value : Bool);  // flags: 65561 
  import public final function SetMaxDistanceScale( scale : Float);  // flags: 65561 
  import public final function SetFrozen( frozen : Bool);  // flags: 65561 

}
import class CGameplayEffectsComponent extends CComponent {

  import public final function SetGameplayEffectFlag( flag : EEntityGameplayEffectFlags,  value : Bool);  // flags: 65561 
  import public final function GetGameplayEffectFlag( flag : EEntityGameplayEffectFlags) : Bool;  // flags: 65561 
  import public final function ResetGameplayEffectFlag( flag : EEntityGameplayEffectFlags) : Bool;  // flags: 65561 

}
import class CDismembermentComponent extends CComponent {

  import public final function IsWoundDefined( woundName : CName) : Bool;  // flags: 65561 
  import public final function SetVisibleWound( woundName : CName,  optional  spawnEntity : Bool,  optional  createParticles : Bool,  optional  dropEquipment : Bool,  optional  playSound : Bool,  optional  direction : Vector,  optional  playEffect : Bool);  // flags: 65561 
  import public final function ClearVisibleWound();  // flags: 65561 
  import public final function GetVisibleWoundName() : CName;  // flags: 65561 
  import public final function CreateWoundParticles( woundName : CName) : Bool;  // flags: 65561 
  import public final function GetNearestWoundName( positionMS : Vector,  normalMS : Vector,  optional  woundTypeFlags : EWoundTypeFlags) : CName;  // flags: 65561 
  import public final function GetNearestWoundNameForBone( boneIndex : Int32,  normalWS : Vector,  optional  woundTypeFlags : EWoundTypeFlags) : CName;  // flags: 65561 
  import public final function GetWoundsNames( out  names : array<CName>,  optional  woundTypeFlags : EWoundTypeFlags);  // flags: 65561 
  import public final function IsExplosionWound( woundName : CName) : Bool;  // flags: 65561 
  import public final function IsFrostWound( woundName : CName) : Bool;  // flags: 65561 
  import public final function GetMainCurveName( woundName : CName) : CName;  // flags: 65561 

}
import class CTriggerAreaComponent extends CAreaComponent {
  import var isEnabled : Bool; // 4001
  import var includedChannels : ETriggerChannel; // 4001
  import var excludedChannels : ETriggerChannel; // 4001
  import var triggerPriority : Uint32; // 4001
  import var enableCCD : Bool; // 4001

  import public final function SetChannelMask( includedChannels : Int32,  excludedChannes : Int32);  // flags: 65561 
  import public final function AddIncludedChannel( channel : ETriggerChannels);  // flags: 65561 
  import public final function RemoveIncludedChannel( channel : ETriggerChannels);  // flags: 65561 
  import public final function AddExcludedChannel( channel : ETriggerChannels);  // flags: 65561 
  import public final function RemoveExcludedChannel( channel : ETriggerChannels);  // flags: 65561 
  public function GetGameplayEntitiesInArea( out  entities : array<CGameplayEntity>,  optional  range : Float,  optional  onlyActors : Bool);  // flags: 65536 

}
import class CTriggerActivatorComponent extends CComponent {
  import var radius : Float; // 4001
  import var height : Float; // 4001
  import var channels : ETriggerChannel; // 4001
  import var enableCCD : Bool; // 4001
  import var maxContinousDistance : Float; // 4001

  import public final function SetRadius( radius : Float);  // flags: 65561 
  import public final function SetHeight( height : Float);  // flags: 65561 
  import public final function AddTriggerChannel( channel : ETriggerChannels);  // flags: 65561 
  import public final function RemoveTriggerChannel( channel : ETriggerChannels);  // flags: 65561 

}
import class CExplorationStateCombat extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function ChangeToExploration();  // flags: 16384 
  private function CancelToExploration();  // flags: 16384 
  private function PrepareFall();  // flags: 16384 
  private function ChangeToCombat();  // flags: 16384 
  public function ReactToChanceToFallAndSlide() : Bool;  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToBeingHit() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateIdle extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function GetDebugText() : String;  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  private function PrepareRollHack();  // flags: 16384 
  private function PrepareFallFromIdle();  // flags: 16384 
  public function ReactToBeingHit() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 
  private function UpdateMacVelocity();  // flags: 16384 
  private function UpdateSubstate();  // flags: 16384 
  private function UpdateSlideHysteresys( _Dt : Float);  // flags: 16384 
  private function UpdateCamera( _Dt : Float);  // flags: 16384 
  private function UpdateCameraOffset( _Dt : Float);  // flags: 16384 
  private function UpdateTestCameraAnim();  // flags: 16384 
  private function PlayNewCamera();  // flags: 16384 
  private function StopLastCamera();  // flags: 16384 

}
import class CExplorationStateIdleJump extends CExplorationStateTransitionAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  private function AddAnimEventCallbacks();  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 
  private function StartMovementAdjustorTranslation();  // flags: 16384 
  private function StopMovementAdjustorTranslationTest();  // flags: 16384 

}
import class CExplorationStateInteraction extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  protected function AddActionsToBlock();  // flags: 32768 
  private function AddAnimEventCallbacks();  // flags: 16384 
  private function StartExploring( exploration : SExplorationQueryToken);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToBeingHit() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function GetCameraSet( out  cameraSet : CCameraParametersSet) : Bool;  // flags: 65536 
  public function CameraChangesRotationController() : Bool;  // flags: 65536 
  private function WantsToExploreStatics( tryingToInteractClimb : Bool,  tryingToInteractLadder : Bool) : Bool;  // flags: 16384 
  private function WantsToExploreBoat( tryingToInteractClimb : Bool) : Bool;  // flags: 16384 
  private function IsLadderInUse( exploration : SExplorationQueryToken) : Bool;  // flags: 16384 

}
import class CExplorationStateLand extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  protected function AddActionsToBlock();  // flags: 32768 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  private function SetLandFootForward();  // flags: 16384 
  private function AddAnimEventCallbacks();  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  public function CanInteract() : Bool;  // flags: 65536 
  private function ApplyProperLandParameters( damage : Float,  jumpTotalDiff : Float,  fallDiff : Float);  // flags: 16384 
  private function SetLandBehGraphParams( isDead : Bool);  // flags: 16384 
  private function CheckIfRolling( stateLast : CName,  fallDiff : Float,  jumpTotalDiff : Float) : Bool;  // flags: 16384 
  private function RollShouldBeJustCrouch( jumpTotalDiff : Float,  fallDiff : Float) : Bool;  // flags: 16384 
  private function FindLandType( damagePerc : Float,  jumpTotalDiff : Float,  fallDiff : Float) : ELandType;  // flags: 16384 
  private function LandParametersSetFromType( landType : ELandType);  // flags: 16384 
  private function SetThisParameters( parameters : SLandData);  // flags: 16384 
  private function SetProperLandIK();  // flags: 16384 
  private function LandTypeInitialize();  // flags: 16384 
  private function LandTypeUpdateChange();  // flags: 16384 
  private function GetLandRunCoefFromInput() : Float;  // flags: 16384 
  private function CheckGoToSlideOneFrameAfter();  // flags: 16384 
  private function CanChainJump() : Bool;  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function ReactToBeingHit() : Bool;  // flags: 65536 
  public function ReactToSlide() : Bool;  // flags: 65536 
  public function OnBehGraphNodeExited();  // flags: 65536 
  private function LogExplorationLandExit( text : String);  // flags: 16384 

}
import class CExplorationStatePrepareJump extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStatePushed extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  private function AddAnimEventCallbacks();  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToBeingHit() : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 
  private function LogExplorationPushed( text : String);  // flags: 16384 
  private function StartStep( angle : Float,  side : EPushSide);  // flags: 16384 
  private function ComputeAngleToMove() : Float;  // flags: 16384 
  private function ComputeSide( angle : Float) : EPushSide;  // flags: 16384 
  private function PrepareRotation( angle : Float);  // flags: 16384 
  private function RotateToCollider();  // flags: 16384 
  private function ModifyRotation( angle : Float);  // flags: 16384 

}
import class CExplorationStateRagdoll extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  public function StateCanExitToTo( nextStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function CanInteract() : Bool;  // flags: 65536 
  public function ReactToCriticalState( enabled : Bool) : Bool;  // flags: 65536 
  public function ReactToBeingHit() : Bool;  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 

}
import class CExplorationStateRoll extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  protected function AddActionsToBlock();  // flags: 32768 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  private function AddAnimEventCallbacks();  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  public function CanInteract() : Bool;  // flags: 65536 
  private function FallUpdate( _Dt : Float);  // flags: 16384 
  private function RunOrIdleUpdate();  // flags: 16384 
  private function CanChainJump() : Bool;  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function ReactToBeingHit() : Bool;  // flags: 65536 
  private function LogExplorationRoll( text : String);  // flags: 16384 

}
import class CExplorationStateSprint extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateStartFalling extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateStepLand extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  private function AddAnimEventCallbacks();  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  private function FindDirectionToFall();  // flags: 16384 
  private function PrepareMovementAdjustor();  // flags: 16384 

}
import class CExplorationStateTest extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateSwim extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function UpdateCollisionSolving( _Dt : Float);  // flags: 16384 
  private function GetPenetrationDistanceAndNormal( out  penetration : Float,  out  normal : Vector) : Bool;  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToBeingHit() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateWallSlide extends CExplorationStateSlide {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  protected function CheckLandingDamage();  // flags: 32768 

}
import class CxplorationTransitionPrepareToJump extends CExplorationStateTransitionAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CxplorationTransitionSwimToInteract extends CExplorationStateTransitionAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  private function AddAnimEventCallbacks();  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  private function WantsToInteractWithExploration() : Bool;  // flags: 16384 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CxplorationTransitionTurnToJump extends CExplorationStateTransitionAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  protected function AddActionsToBlock();  // flags: 32768 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateSkatingBackwards extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  protected function StateEnterSpecific( prevStateName : CName);  // flags: 32768 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  protected function StateExitSpecific( nextStateName : CName);  // flags: 32768 
  protected function UpdateExit( _Dt : Float,  braking : Bool);  // flags: 32768 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateSkatingDashAttack extends CExplorationStateSkatingDash {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  protected function StateEnterSpecific( prevStateName : CName);  // flags: 32768 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function UpdateAttack( _Dt : Float);  // flags: 16384 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 

}
import class CExplorationStateSkatingDashLocked extends CExplorationInterceptorStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function UpdateTargetLocation();  // flags: 16384 
  private function UpdateAttack( _Dt : Float);  // flags: 16384 
  private function UpdateAttackFlow();  // flags: 16384 
  private function UpdateTimeScale( _Dt : Float);  // flags: 16384 
  private function UpateDebug();  // flags: 16384 
  private function OrientToTarget();  // flags: 16384 
  private function UpdateOrientation();  // flags: 16384 
  private function GetAValidTarget() : Bool;  // flags: 16384 
  private function GatherTargetAttackData();  // flags: 16384 
  private function GetTargetPosition() : Vector;  // flags: 16384 

}
import class CExplorationStateSkatingHitFrontal extends CExplorationInterceptorStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateSkatingHitLateral extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function GetCollisionAngle() : Float;  // flags: 16384 
  private function SetOrientation( yawTarget : Float);  // flags: 16384 
  private function ReduceSpeed();  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateSkatingIdle extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function HackDirectionSet();  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateSkateJump extends CExplorationStateJump {

  protected function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 32768 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  protected function StateEnterSpecific( prevStateName : CName);  // flags: 32768 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function UpdateJumpAttack();  // flags: 16384 

}
import class CExplorationSkateLand extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function CanInteract() : Bool;  // flags: 65536 
  private function CheckStartActionChain();  // flags: 16384 
  private function CheckUpdateActionChain();  // flags: 16384 
  private function ApplyQueuedChain();  // flags: 16384 
  private function CheckFallingDamage();  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 

}
import class CExplorationStateSkatingPrepareJump extends CExplorationInterceptorStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateSkatingRun extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function UpdateBaseSpeed();  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CExplorationStateSkateSlide extends CExplorationStateSkatingDrift {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  protected function StateEnterSpecific( prevStateName : CName);  // flags: 32768 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  protected function StateExitSpecific( nextStateName : CName);  // flags: 32768 

}
import class CExplorationStateSkateStopFast extends CExplorationStateSkatingDrift {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 

}
import class CDoorMarkingTester extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnSpawnedEditor( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  private function Spawned( spawnData : SEntitySpawnData);  // flags: 16384 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags) : Bool;  // flags: 65568 

}
import class W3PosterStatePosterNotObserved extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class W3PosterStatePosterObserved extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class W3StallEntity extends CGameplayEntity {

  public function ChangeStallApearance();  // flags: 65536 
  public function ChangeStallApearanceTimer( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 

}
import class W3SyncAnimationManagerStateActive extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 
  public function Run();  // flags: 65664 

}
import class IBehaviorScript extends CObject {
  import var inputFloatNum : Uint32; // 4001
  import var inputVectorNum : Uint32; // 4001

  function DrawSphere();  // flags: 1 
  function DrawLine();  // flags: 1 
  function DrawBox();  // flags: 1 
  function DrawBoxRadius();  // flags: 1 

}
import class AnimationTrajectoryPlayerScriptWrapper extends CObject {

  import public final function Init( entity : CEntity,  optional  slotName : CName);  // flags: 65561 
  import public final function Deinit();  // flags: 65561 
  import public final function SelectAnimation( input : SAnimationTrajectoryPlayerInput) : SAnimationTrajectoryPlayerToken;  // flags: 65561 
  import public final function PlayAnimation( animationToken : SAnimationTrajectoryPlayerToken) : Bool;  // flags: 65561 
  import public final function Tick( dt : Float);  // flags: 65561 
  import public final function IsPlayingAnimation() : Bool;  // flags: 65561 
  import public final function IsBeforeSyncTime() : Bool;  // flags: 65561 
  import public final function UpdateCurrentPoint( pointWS : Vector);  // flags: 65561 
  import public final function UpdateCurrentPointM( l2w : Matrix,  pointWS : Vector);  // flags: 65561 
  import public final function GetTime() : Float;  // flags: 65561 
  import public latent final function WaitForSyncTime() : Bool;  // flags: 65625 
  import public latent final function WaitForFinish() : Bool;  // flags: 65625 

}
import class CActionMoveAnimationProxy extends CObject {
  import var isInitialized : Bool; // 4000
  import var isValid : Bool; // 4000
  import var duration : Float; // 4000
  import var prevTime : Float; // 4000
  import var currTime : Float; // 4000
  import var finished : Bool; // 4000

  import public function IsInitialized() : Bool;  // flags: 65545 
  import public function IsValid() : Bool;  // flags: 65545 
  import public function IsFinished() : Bool;  // flags: 65545 
  import public function WillBeFinished( time : Float) : Bool;  // flags: 65545 

}
import class CDropPhysicsComponent extends CComponent {
  import var dropSetups : array<CDropPhysicsSetup>; // 4005

  import public final function DropMeshByName( meshName : String,  optional  direction : Vector,  optional  curveName : CName) : Bool;  // flags: 65561 
  import public final function DropMeshByTag( meshTag : CName,  optional  direction : Vector,  optional  curveName : CName) : Bool;  // flags: 65561 

}
import class CBirdsManagerStateDefault extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function StateDefault();  // flags: 65664 

}
import class W3CurveFishManagerStateDefault extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function StateDefault();  // flags: 65664 

}
import class W3WhaleAreaStateWhaleDefault extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function StateDefault();  // flags: 65664 

}
import class CSpawnTreeInitializerSetImmortality extends ISpawnTreeScriptedInitializer {

  public function GetEditorFriendlyName() : String;  // flags: 65536 
  public function Init( actor : CActor) : Bool;  // flags: 65536 

}
import class CScriptSoundSystem extends CObject {

  import public function SoundSwitch( swichGroupName : String,  optional  stateName : String);  // flags: 65545 
  import private function SoundState( stateGroupName : String,  optional  stateName : String);  // flags: 16393 
  import public function SoundEvent( eventName : String);  // flags: 65545 
  import public function SoundParameter( parameterName : String,  value : Float,  optional  duration : Float);  // flags: 65545 
  import public function SoundGlobalParameter( parameterName : String,  value : Float,  optional  duration : Float);  // flags: 65545 
  import public function SoundSequence( sequenceName : String,  sequence : array<String>);  // flags: 65545 
  import public function SoundEventAddToSave( eventName : String);  // flags: 65545 
  import public function SoundEventClearSaved();  // flags: 65545 
  public event function OnBlackscreenStart() : Bool;  // flags: 65568 
  public event function OnBlackscreenEnd() : Bool;  // flags: 65568 
  private function IsValidBlackscreenState( gameState : ESoundGameState) : Bool;  // flags: 16384 
  public function Initialize();  // flags: 65536 
  public function IsInDefaultState() : Bool;  // flags: 65536 
  private function IsThisStateDefault( gameState : ESoundGameState) : Bool;  // flags: 16384 
  private function EnterDefaultState();  // flags: 16384 
  private function SoundGameStateChange( gameState : ESoundGameState);  // flags: 16384 
  public function ChangeSoundState( stateGroupName : String,  optional  stateName : String) : Bool;  // flags: 65536 
  public function EnterGameState( gameState : ESoundGameState) : Bool;  // flags: 65536 
  public function LeaveGameState( gameState : ESoundGameState) : Bool;  // flags: 65536 
  public function GetCurrentGameState() : ESoundGameState;  // flags: 65536 
  public function SetDefaultGameState( gameState : ESoundGameState);  // flags: 65536 
  public function GetDefaultGameState() : ESoundGameState;  // flags: 65536 
  public function GetMonster() : Bool;  // flags: 65536 
  public function GetMonsterHunt() : Bool;  // flags: 65536 
  public function InitializeAreaMusic( worldArea : EAreaName);  // flags: 65536 
  private function GameStateToString( enumName : ESoundGameState) : String;  // flags: 16384 
  public function Finalize();  // flags: 65536 
  private function FillDefaultStatesArray();  // flags: 16384 
  public function SetIsGameStopped( val : Bool);  // flags: 65536 
  public function GetIsGameStopped() : Bool;  // flags: 65536 
  public function StopMusic();  // flags: 65536 
  public function SendThreatRating();  // flags: 65536 
  public function CalculateThreat();  // flags: 65536 
  public function UpdateThreatDamp();  // flags: 65536 
  public function IsMonsterFromMonsterHunt( monster : CActor) : Bool;  // flags: 65536 
  public function UpdateSoundSettings();  // flags: 65536 

}
import class W3DisplayMount extends W3Container {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public event function OnUpdateContainer() : Bool;  // flags: 65568 
  public function UpdateDisplayMount();  // flags: 65536 

}
import class W3ElevatorStateOnStartPos extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function OnStartPosInit();  // flags: 65664 

}
import class W3ElevatorStateOnEndPos extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function OnEndPosInit();  // flags: 65664 

}
import class W3ElevatorStateMoving extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function MovingInit();  // flags: 65664 
  public function MovingLoop( timeDelta : Float,  id : Int32);  // flags: 66560 

}
import class CVisualDebug extends CObject {

  import public final function AddText( dbgName : CName,  text : String,  optional  position : Vector,  optional  absolutePos : Bool,  optional  line : Uint8,  optional  color : Color,  optional  background : Bool,  optional  timeout : Float);  // flags: 65561 
  import public final function AddSphere( dbgName : CName,  radius : Float,  optional  position : Vector,  optional  absolutePos : Bool,  optional  color : Color,  optional  timeout : Float);  // flags: 65561 
  import public final function AddBox( dbgName : CName,  size : Vector,  optional  position : Vector,  optional  rotation : EulerAngles,  optional  absolutePos : Bool,  optional  color : Color,  optional  timeout : Float);  // flags: 65561 
  import public final function AddAxis( dbgName : CName,  optional  scale : Float,  optional  position : Vector,  optional  rotation : EulerAngles,  optional  absolutePos : Bool,  optional  timeout : Float);  // flags: 65561 
  import public final function AddLine( dbgName : CName,  optional  startPosition : Vector,  optional  endPosition : Vector,  optional  absolutePos : Bool,  optional  color : Color,  optional  timeout : Float);  // flags: 65561 
  import public final function AddBar( dbgName : CName,  x : Int32,  y : Int32,  width : Int32,  height : Int32,  progress : Float,  color : Color,  optional  text : String,  optional  timeout : Float);  // flags: 65561 
  import public final function AddBarColorSmooth( dbgName : CName,  x : Int32,  y : Int32,  width : Int32,  height : Int32,  progress : Float,  color : Color,  optional  text : String,  optional  timeout : Float);  // flags: 65561 
  import public final function AddBarColorAreas( dbgName : CName,  x : Int32,  y : Int32,  width : Int32,  height : Int32,  progress : Float,  optional  text : String,  optional  timeout : Float);  // flags: 65561 
  import public final function AddArrow( dbgName : CName,  optional  start : Vector,  optional  end : Vector,  optional  arrowPostionOnLine01 : Float,  optional  arrowSizeX : Float,  optional  arrowSizeY : Float,  optional  absolutePos : Bool,  optional  color : Color,  optional  overlay : Bool,  optional  timeout : Float);  // flags: 65561 
  import public final function RemoveText( dbgName : CName);  // flags: 65561 
  import public final function RemoveSphere( dbgName : CName);  // flags: 65561 
  import public final function RemoveBox( dbgName : CName);  // flags: 65561 
  import public final function RemoveAxis( dbgName : CName);  // flags: 65561 
  import public final function RemoveLine( dbgName : CName);  // flags: 65561 
  import public final function RemoveBar( dbgName : CName);  // flags: 65561 
  import public final function RemoveArrow( dbgName : CName);  // flags: 65561 

}
import class CDebugAttributesManager extends CObject {

  import public final function AddAttribute( debugName : CName,  propertyName : CName,  context : IScriptable,  optional  groupName : CName) : Bool;  // flags: 65561 

}
import class W3TrapAlarm extends W3Trap {

  public function Activate( optional  _Target : CNode);  // flags: 65536 

}
import class W3TrapDestructSelf extends W3Trap {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private final function ExcludedActorIsInArea() : Bool;  // flags: 16400 
  private final function ShouldExcludeActor( _Actor : CActor) : Bool;  // flags: 16400 
  public final function Activate( optional  _Target : CNode);  // flags: 65552 
  private final function DestructSelf();  // flags: 16400 

}
import class W3TrapSpawnEntity extends W3Trap {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private function ShouldExcludeActor( _Actor : CActor) : Bool;  // flags: 16384 
  public function Activate( optional  _Target : CNode);  // flags: 65536 
  public function SpawnEntity();  // flags: 65536 

}
import class W3TrapWolfPit extends W3Trap {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class CSwitchableFoliageComponent extends CComponent {
  import var resource : CSwitchableFoliageResource; // 4001
  import var minimumStreamingDistance : Uint32; // 4001

  import private final function SetEntry( entryName : CName);  // flags: 16409 
  public function SetAndSaveEntry( entryName : CName);  // flags: 65536 
  public function GetEntry() : CName;  // flags: 65536 

}
import class W3RaisePowerStatEffect extends CBaseGameplayEffect {

  public function Init( params : SEffectInitInfo);  // flags: 65536 

}
import class W3Potion_VitalityRegen extends W3RegenEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 

}
import class IInstantEffectExecutor extends IGameplayEffectExecutor {

  public function Execute( executor : CGameplayEntity,  target : CActor,  optional  source : String) : Bool;  // flags: 65536 
  public final function GetEffectIconPath() : String;  // flags: 65552 
  public final function GetEffectNameLocalisationKey() : String;  // flags: 65552 
  public final function GetEffectDescriptionLocalisationKey() : String;  // flags: 65552 

}
import class CBuffEffectExecutor extends IGameplayEffectExecutor {

  public function Execute( executor : CGameplayEntity,  target : CActor,  optional  source : String) : Bool;  // flags: 65536 
  public function GetEffectNameLocalisationKey() : String;  // flags: 65536 
  public function GetEffectDescriptionLocalisationKey() : String;  // flags: 65536 
  public function GetEffectIconPath() : String;  // flags: 65536 

}
import class W3Executor_InstantDeath extends IInstantEffectExecutor {

  public function Execute( executor : CGameplayEntity,  target : CActor,  optional  source : String) : Bool;  // flags: 65536 

}
import class CEncounterActivator extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  private function FindEncounter();  // flags: 16384 
  private function ActivateEncounter();  // flags: 16384 
  private function DeactivateEncounter();  // flags: 16384 
  private function ChangeEncounterActiveState( isEncounterEnabled : Bool);  // flags: 16384 

}
import class CEncounterStateRequest extends CScriptedEntityStateChangeRequest {

  public function Execute( entity : CGameplayEntity);  // flags: 65536 

}
import class W3FactCondition extends ISpawnScriptCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class W3KilledCounterCondition extends ISpawnScriptCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class W3KilledCounterByEntryCondition extends ISpawnScriptCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class W3SpawnedCounterCondition extends ISpawnScriptCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class W3SpawnedCounterByEntryCondition extends ISpawnScriptCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class W3ConditionSpawnDuringCombat extends ISpawnScriptCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class W3CreaturesGroupEnabledCondition extends ISpawnScriptCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class W3HasItemCondition extends ISpawnScriptCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class W3HasItemByCategoryCondition extends ISpawnScriptCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class W3PlayerLevelCondition extends ISpawnScriptCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class CNewNPC extends CActor {
  import var aiEnabled : Bool; // 4001
  import var berserkTime : EngineTime; // 4000
  import var npcGroupType : ENPCGroupType; // 6000

  import public final function IsInInterior() : Bool;  // flags: 65561 
  import public final function IsInDanger() : Bool;  // flags: 65561 
  import public final function IsSeeingNonFriendlyNPC() : Bool;  // flags: 65561 
  import public final function IsAIEnabled() : Bool;  // flags: 65561 
  import public final function FindActionPoint( out  apID : SActionPointId,  out  category : CName);  // flags: 65561 
  import public final function GetDefaultDespawnPoint( out  spawnPoint : Vector) : Bool;  // flags: 65561 
  import public final function NoticeActor( actor : CActor);  // flags: 65561 
  import public final function ForgetActor( actor : CActor);  // flags: 65561 
  import public final function ForgetAllActors();  // flags: 65561 
  import public final function GetNoticedObject( index : Int32) : CActor;  // flags: 65561 
  import public final function GetActiveActionPoint() : SActionPointId;  // flags: 65561 
  import public final function PlayDialog( optional  forceSpawnedActors : Bool) : Bool;  // flags: 65561 
  import public final function GetPerceptionRange() : Float;  // flags: 65561 
  function SetWristWrestlingParams();  // flags: 1 
  import public final function GetReactionScript( index : Int32) : CReactionScript;  // flags: 65561 
  import public final function IfCanSeePlayer() : Bool;  // flags: 65561 
  import public final function GetGuardArea() : CAreaComponent;  // flags: 65561 
  import public final function SetGuardArea( areaComponent : CAreaComponent);  // flags: 65561 
  import public final function IsConsciousAtWork() : Bool;  // flags: 65561 
  import public final function GetCurrentJTType() : Int32;  // flags: 65561 
  import public final function IsSittingAtWork() : Bool;  // flags: 65561 
  import public final function IsAtWork() : Bool;  // flags: 65561 
  import public final function IsPlayingChatScene() : Bool;  // flags: 65561 
  import public final function CanUseChatInCurrentAP() : Bool;  // flags: 65561 
  import public final function NoticeActorInGuardArea( actor : CActor);  // flags: 65561 
  import public final function IsInLeaveAction() : Bool;  // flags: 65561 
  function I_ForceKnowledgeUpdate();  // flags: 1 
  function I_IsNoticedObjectVisible();  // flags: 1 
  function I_GetLastKnownPosition();  // flags: 1 
  public event function OnGameDifficultyChanged( previousDifficulty : Int32,  currentDifficulty : Int32) : Bool;  // flags: 65568 
  public function ResetTalkInteractionFlag( td : Float,  id : Int32);  // flags: 66560 
  protected function OnCombatModeSet( toggle : Bool);  // flags: 32768 
  public function SetImmortalityInitialized();  // flags: 65536 
  public function SetNPCType( type : ENPCGroupType);  // flags: 65536 
  public function GetNPCType() : ENPCGroupType;  // flags: 65536 
  public function SetCanBeFollowed( val : Bool);  // flags: 65536 
  public function CanBeFollowed() : Bool;  // flags: 65536 
  public event function OnPreAttackEvent( animEventName : CName,  animEventType : EAnimationEventType,  data : CPreAttackEventData,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function SetDodgeFeedback( flag : Bool);  // flags: 65536 
  public event function OnBlockingSceneEnded( optional  output : CStorySceneOutput) : Bool;  // flags: 65568 
  public function WasInCutscene() : Bool;  // flags: 65536 
  public function IsVIP() : Bool;  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  protected function SetAbilityManager();  // flags: 32768 
  protected function SetEffectManager();  // flags: 32768 
  public function SetLevel( _level : Int32);  // flags: 65536 
  private function SetThreatLevel();  // flags: 16384 
  public function ChangeThreatLevel( newValue : Int32);  // flags: 65536 
  public function GetHorseUser() : CActor;  // flags: 65536 
  public function GetPreferedCombatStyle() : EBehaviorGraph;  // flags: 65536 
  public function SetPreferedCombatStyle( _preferedCombatStyle : EBehaviorGraph);  // flags: 65536 
  public function WeatherBonusCheck( dt : Float,  id : Int32);  // flags: 66560 
  public function IsFlying() : Bool;  // flags: 65536 
  public function IsRanged() : Bool;  // flags: 65536 
  public function IsVisuallyOffGround() : Bool;  // flags: 65536 
  public function SetIsHorse();  // flags: 65536 
  public function IsHorse() : Bool;  // flags: 65536 
  public function GetHorseComponent() : W3HorseComponent;  // flags: 65536 
  public function HideHorseAfter( time : Float);  // flags: 65536 
  private function HideHorse( delta : Float,  id : Int32);  // flags: 17408 
  public function KillHorseAfter( time : Float);  // flags: 65536 
  private function KillHorse( delta : Float,  id : Int32);  // flags: 17408 
  public function RemoveAxiiFromHorse( delta : Float,  id : Int32);  // flags: 66560 
  public function ToggleCanFlee( val : Bool);  // flags: 65536 
  public function GetCanFlee() : Bool;  // flags: 65536 
  public function SetIsFallingFromHorse( val : Bool);  // flags: 65536 
  public function GetIsFallingFromHorse() : Bool;  // flags: 65536 
  public function SetCounterWindowStartTime( time : EngineTime);  // flags: 65536 
  public function GetCounterWindowStartTime() : EngineTime;  // flags: 65536 
  public function GetThreatLevel() : Int32;  // flags: 65536 
  public function GetSoundValue() : Int32;  // flags: 65536 
  public function WasTauntedToAttack();  // flags: 65536 
  public function MaintainSpeedTimer( d : Float,  id : Int32);  // flags: 66560 
  public function MaintainFlySpeedTimer( d : Float,  id : Int32);  // flags: 66560 
  public function SetIsInHitAnim( toggle : Bool);  // flags: 65536 
  public function IsInHitAnim() : Bool;  // flags: 65536 
  public function CanChangeBehGraph() : Bool;  // flags: 65536 
  public function WeaponSoundType() : CItemEntity;  // flags: 65536 
  public function EnableCounterParryFor( time : Float);  // flags: 65536 
  public function DisableCounterParry( td : Float,  id : Int32);  // flags: 66560 
  public final function IsAttacking() : Bool;  // flags: 65552 
  public final function RecalcLevel();  // flags: 65552 
  protected function PerformCounterCheck( parryInfo : SParryInfo) : Bool;  // flags: 32768 
  protected function PerformParryCheck( parryInfo : SParryInfo) : Bool;  // flags: 32768 
  public function GetTotalSignSpellPower( signSkill : ESkill) : SAbilityAttributeValue;  // flags: 65536 
  public function AddLevelBonuses( dt : Float,  id : Int32);  // flags: 66560 
  public function GainStat( stat : EBaseCharacterStats,  amount : Float);  // flags: 65536 
  public function ForceSetStat( stat : EBaseCharacterStats,  val : Float);  // flags: 65536 
  public function FundamentalsAchFailTimer( dt : Float,  id : Int32);  // flags: 66560 
  protected function CriticalBuffInformBehavior( buff : CBaseGameplayEffect);  // flags: 32768 
  public function StartCSAnim( buff : CBaseGameplayEffect) : Bool;  // flags: 65536 
  public function CSAnimStarted( buff : CBaseGameplayEffect) : Bool;  // flags: 65536 
  public function SetCanPlayHitAnim( flag : Bool);  // flags: 65536 
  public event function OnStartFistfightMinigame() : Bool;  // flags: 65568 
  public event function OnEndFistfightMinigame() : Bool;  // flags: 65568 
  private function FistFightHealthSetup();  // flags: 16384 
  private function FistFightersHealthDiff();  // flags: 16384 
  private function ApplyFistFightLevelDiff();  // flags: 16384 
  private function RemoveFistFightLevelDiff();  // flags: 16384 
  private function IsThisStanceRegular( Stance : ENpcStance) : Bool;  // flags: 16384 
  private function IsThisStanceDefensive( Stance : ENpcStance) : Bool;  // flags: 16384 
  public function GetCurrentStance() : ENpcStance;  // flags: 65536 
  public function GetRegularStance() : ENpcStance;  // flags: 65536 
  public function ReturnToRegularStance();  // flags: 65536 
  public function IsInRegularStance() : Bool;  // flags: 65536 
  public function ChangeStance( newStance : ENpcStance) : Bool;  // flags: 65536 
  public function RaiseGuard() : Bool;  // flags: 65536 
  public function LowerGuard() : Bool;  // flags: 65536 
  public function IsInAgony() : Bool;  // flags: 65536 
  public function EnterAgony();  // flags: 65536 
  public function EndAgony();  // flags: 65536 
  public function EnableDeathAndAgony();  // flags: 65536 
  public function EnableDeath();  // flags: 65536 
  public function EnableAgony();  // flags: 65536 
  public function DisableDeathAndAgony();  // flags: 65536 
  public function DisableAgony();  // flags: 65536 
  public function IsAgonyDisabled() : Bool;  // flags: 65536 
  public function IsInFinisherAnim() : Bool;  // flags: 65536 
  public function FinisherAnimStart();  // flags: 65536 
  public function FinisherAnimInterrupted();  // flags: 65536 
  public function ResetFinisherAnimInterruptionState();  // flags: 65536 
  public function WasFinisherAnimInterrupted() : Bool;  // flags: 65536 
  public function FinisherAnimEnd();  // flags: 65536 
  public function ShouldPlayDeathAnim() : Bool;  // flags: 65536 
  public function NPCGetAgonyAnim() : CName;  // flags: 65536 
  public function GeraltGetAgonyAnim() : CName;  // flags: 65536 
  protected function PlayHitAnimation( damageAction : W3DamageAction,  animType : EHitReactionType);  // flags: 32768 
  public function ReactToBeingHit( damageAction : W3DamageAction,  optional  buffNotApplied : Bool) : Bool;  // flags: 65536 
  public function GetHitCounter( optional  total : Bool) : Int32;  // flags: 65536 
  public function IncHitCounter();  // flags: 65536 
  private function ResetHitCounter( deta : Float,  id : Int32);  // flags: 17408 
  public function Kill( optional  ignoreImmortalityMode : Bool,  optional  attacker : CGameplayEntity,  optional  source : CName);  // flags: 65536 
  public final function GetLevel() : Int32;  // flags: 65552 
  public function GetExperienceDifferenceLevelName( out  strLevel : String) : String;  // flags: 65536 
  private function ShouldGiveExp( attacker : CGameplayEntity) : Bool;  // flags: 16384 
  public function AddBestiaryKnowledge();  // flags: 65536 
  public function CalculateExperiencePoints( optional  skipLog : Bool) : Int32;  // flags: 65536 
  public event function OnDeath( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnChangeDyingInteractionPriorityIfNeeded() : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnAxiiHit( sign : W3AxiiProjectile) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  public function IsBeingHitByIgni() : Bool;  // flags: 65536 
  public function ToggleEffectOnShield( effectName : CName,  toggle : Bool);  // flags: 65536 
  public function IgniCleanup( dt : Float,  id : Int32);  // flags: 66560 
  public function IgnoreSignsTimeOut( dt : Float,  id : Int32);  // flags: 66560 
  public function SetIsTeleporting( b : Bool);  // flags: 65536 
  public function IsTeleporting() : Bool;  // flags: 65536 
  public function SetUnstoppable( toggle : Bool);  // flags: 65536 
  public function IsUnstoppable() : Bool;  // flags: 65536 
  public function SetIsCountering( toggle : Bool);  // flags: 65536 
  public function IsCountering() : Bool;  // flags: 65536 
  public function Tick( deltaTime : Float,  id : Int32);  // flags: 66560 
  private function UpdateBumpCollision();  // flags: 16384 
  public function SetIsTranslationScaled( b : Bool);  // flags: 65536 
  public function GetIsTranslationScaled() : Bool;  // flags: 65536 
  public event function OnAnimEvent_EquipItemL( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_HideItemL( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_HideWeapons( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_TemporaryOffGround( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_weaponSoundType( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_OwlSwitchOpen( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_OwlSwitchClose( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Goose01OpenWings( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Goose01CloseWings( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Goose02OpenWings( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Goose02CloseWings( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_NullifyBurning( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_setVisible( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_extensionWalk( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnEquippedItem( category : CName,  slotName : CName) : Bool;  // flags: 65568 
  public event function OnHolsteredItem( category : CName,  slotName : CName) : Bool;  // flags: 65568 
  public function IsTalkDisabled() : Bool;  // flags: 65536 
  public function DisableTalking( disable : Bool,  optional  temporary : Bool);  // flags: 65536 
  public function CanStartTalk() : Bool;  // flags: 65536 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionTalkTest() : Bool;  // flags: 65568 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionDeactivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnBehaviorGraphNotification( notificationName : CName,  stateName : CName) : Bool;  // flags: 65568 
  public function ActivateSignalBehaviorGraphNotification( notificationName : CName);  // flags: 65536 
  public function DeactivateSignalBehaviorGraphNotification( notificationName : CName);  // flags: 65536 
  public function IsShielded( target : CNode) : Bool;  // flags: 65536 
  public function HasShieldedAbility() : Bool;  // flags: 65536 
  public function RaiseShield();  // flags: 65536 
  public function LowerShield( td : Float,  id : Int32);  // flags: 66560 
  public function ProcessShieldDestruction();  // flags: 65536 
  public event function OnIncomingProjectile( isBomb : Bool) : Bool;  // flags: 65568 
  public function ShouldAttackImmidiately() : Bool;  // flags: 65536 
  public function CanAttackKnockeddownTarget() : Bool;  // flags: 65536 
  public event function OnProcessRequiredItemsFinish() : Bool;  // flags: 65568 
  public function ProcessSpearDestruction() : Bool;  // flags: 65536 
  public function PlayVitalSpotAmbientSound( soundEvent : String);  // flags: 65536 
  public function StopVitalSpotAmbientSound( soundEvent : String);  // flags: 65536 
  public event function OnScriptReloaded() : Bool;  // flags: 65568 
  public function ChangeFightStage( fightStage : ENPCFightStage);  // flags: 65536 
  public function SetCurrentFightStage();  // flags: 65536 
  public function GetCurrentFightStage() : ENPCFightStage;  // flags: 65536 
  public function SetBleedBurnPoison();  // flags: 65536 
  public function WasBurnedBleedingPoisoned() : Bool;  // flags: 65536 
  public function HasAlternateQuen() : Bool;  // flags: 65536 
  public function GetIsMonsterTypeGroup() : Bool;  // flags: 65536 
  public function UpdateAIVisualDebug();  // flags: 65536 
  public event function OnAllowBehGraphChange() : Bool;  // flags: 65568 
  public event function OnDisallowBehGraphChange() : Bool;  // flags: 65568 
  public event function OnObstacleCollision( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnActorCollision( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnActorSideCollision( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnStaticCollision( component : CComponent) : Bool;  // flags: 65568 
  public event function OnBoatCollision( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public function IsUnderwater() : Bool;  // flags: 65536 
  public function ToggleIsUnderwater( toggle : Bool);  // flags: 65536 
  public event function OnOceanTriggerEnter() : Bool;  // flags: 65568 
  public event function OnOceanTriggerLeave() : Bool;  // flags: 65568 
  public event function OnInAirStarted() : Bool;  // flags: 65568 
  public event function OnRagdollOnGround() : Bool;  // flags: 65568 
  public event function OnRagdollStart() : Bool;  // flags: 65568 
  public event function OnNoLongerInRagdoll() : Bool;  // flags: 65568 
  public function DelayRagdollSwitch( td : Float,  id : Int32);  // flags: 66560 
  public event function OnRagdollIsAwayFromCapsule( ragdollPosition : Vector,  entityPosition : Vector) : Bool;  // flags: 65568 
  public event function OnRagdollCloseToCapsule( ragdollPosition : Vector,  entityPosition : Vector) : Bool;  // flags: 65568 
  public event function OnTakeDamage( action : W3DamageAction) : Bool;  // flags: 65568 
  public function GetInteractionData( out  actionName : CName,  out  text : String) : Bool;  // flags: 65536 
  public function IsAtWorkDependentOnFireSource() : Bool;  // flags: 65536 
  public function FinishQuen();  // flags: 65536 
  public function IsAxiied() : Bool;  // flags: 65536 

}
import class CActor extends CGameplayEntity {
  import var actorGroups : EPathEngineAgentType; // 4001
  import var aimOffset : Float; // 4001
  import var barOffset : Float; // 4001
  import var isAttackableByPlayer : Bool; // e009
  import var losTestBoneIndex : Int32; // 4008
  import var attackTarget : CActor; // 4008
  import var attackTargetSetTime : EngineTime; // 4008
  import var frontPushAnim : CName; // 4001
  import var backPushAnim : CName; // 4001
  import var isCollidable : Bool; // 4001
  import var isVisibileFromFar : Bool; // 4001
  import var voiceTag : CName; // 4003
  import var voiceToRandomize : array<StringAnsi>; // 4001
  import var behTreeMachine : *CBehTreeMachine; // 4008
  import var useHiResShadows : Bool; // 4009
  import var pelvisBoneName : CName; // 4001
  import var torsoBoneName : CName; // 4001
  import var headBoneName : CName; // 4001
  import var useAnimationEventFilter : Bool; // 4001
  import var encounterGroupUsedToSpawn : Int32; // c000

  import public final function SetDebugAttackRange( rangeName : CName);  // flags: 65561 
  import public final function EnableDebugARTraceDraw( enable : Bool);  // flags: 65561 
  import public final function SignalGameplayDamageEvent( eventName : CName,  data : CDamageData);  // flags: 65561 
  import public final function SignalGameplayEvent( eventName : CName);  // flags: 65561 
  import public final function SignalGameplayEventParamCName( eventName : CName,  param : CName);  // flags: 65561 
  import public final function SignalGameplayEventParamInt( eventName : CName,  param : Int32);  // flags: 65561 
  import public final function SignalGameplayEventParamFloat( eventName : CName,  param : Float);  // flags: 65561 
  import public final function SignalGameplayEventParamObject( eventName : CName,  param : IScriptable);  // flags: 65561 
  import public final function SignalGameplayEventReturnCName( eventName : CName,  defaultVal : CName) : CName;  // flags: 65561 
  import public final function SignalGameplayEventReturnInt( eventName : CName,  defaultVal : Int32) : Int32;  // flags: 65561 
  import public final function SignalGameplayEventReturnFloat( eventName : CName,  defaultVal : Float) : Float;  // flags: 65561 
  import public final function ForceAIUpdate();  // flags: 65561 
  import public final function GetRadius() : Float;  // flags: 65561 
  import public final function PlayVoiceset( priority : Int32,  voiceset : String,  optional  breakCurrentSpeach : Bool) : Bool;  // flags: 65561 
  import public final function StopAllVoicesets( optional  cleanupQueue : Bool);  // flags: 65561 
  import public final function HasVoiceset( voiceset : String) : EAsyncCheckResult;  // flags: 65561 
  import public final function PlayScene( input : String) : Bool;  // flags: 65561 
  import public final function StopAllScenes();  // flags: 65561 
  import public final function EmptyHands();  // flags: 65561 
  import public final function IsRotatedTowards( node : CNode,  optional  maxAngle : Float) : Bool;  // flags: 65561 
  import public final function IsRotatedTowardsPoint( point : Vector,  optional  maxAngle : Float) : Bool;  // flags: 65561 
  import protected final function GetAliveFlag() : Bool;  // flags: 32793 
  import public final function SetAlive( flag : Bool);  // flags: 65561 
  import public final function IsExternalyControlled() : Bool;  // flags: 65561 
  import public final function IsInCombat() : Bool;  // flags: 65561 
  import public final function IsMoving() : Bool;  // flags: 65561 
  import public final function GetMoveDestination() : Vector;  // flags: 65561 
  import public final function GetPositionOrMoveDestination() : Vector;  // flags: 65561 
  import public final function GetVisualDebug() : CVisualDebug;  // flags: 65561 
  import public final function GetVoicetag() : CName;  // flags: 65561 
  import public final function GetSkeletonType() : ESkeletonType;  // flags: 65561 
  import public final function UseItem( itemId : SItemUniqueId) : Bool;  // flags: 65561 
  import public final function SetVisibility( isVisible : Bool);  // flags: 65561 
  import public final function GetVisibility() : Bool;  // flags: 65561 
  import public final function SetAppearance( appearanceName : CName);  // flags: 65561 
  import public final function GetAppearance() : CName;  // flags: 65561 
  import public final function GetHeadAngleHorizontal() : Float;  // flags: 65561 
  import public final function GetHeadAngleVertical() : Float;  // flags: 65561 
  import public final function GetAnimationTimeMultiplier() : Float;  // flags: 65561 
  import public final function SetAnimationTimeMultiplier( mult : Float);  // flags: 65561 
  import public final function GetMovingAgentComponent() : CMovingAgentComponent;  // flags: 65561 
  import public final function GetMorphedMeshManagerComponent() : CMorphedMeshManagerComponent;  // flags: 65561 
  import public final function EnablePathEngineAgent( flag : Bool);  // flags: 65561 
  import public final function IsRagdollObstacle() : Bool;  // flags: 65561 
  import public final function ClearRotationTarget();  // flags: 65561 
  import public final function SetRotationTarget( node : CNode,  optional  clamping : Bool);  // flags: 65561 
  import public final function SetRotationTargetPos( position : Vector,  optional  clamping : Bool);  // flags: 65561 
  import public final function EnableCollisionInfoReportingForItem( itemId : SItemUniqueId,  enable : Bool);  // flags: 65561 
  import public final function EnablePhysicalMovement( enable : Bool) : Bool;  // flags: 65561 
  import public final function EnableCharacterCollisions( enable : Bool) : Bool;  // flags: 65561 
  import public final function EnableDynamicCollisions( enable : Bool) : Bool;  // flags: 65561 
  import public final function EnableStaticCollisions( enable : Bool) : Bool;  // flags: 65561 
  import public final function IsInNonGameplayCutscene() : Bool;  // flags: 65561 
  import public final function IsInGameplayScene() : Bool;  // flags: 65561 
  import public final function PlayLine( stringId : Int32,  subtitle : Bool);  // flags: 65561 
  import public final function PlayLineByStringKey( stringKey : String,  subtitle : Bool);  // flags: 65561 
  import public final function EndLine();  // flags: 65561 
  import public final function IsSpeaking( optional  stringId : Int32) : Bool;  // flags: 65561 
  import public function EnableDynamicLookAt( node : CNode,  duration : Float);  // flags: 65545 
  import public function EnableStaticLookAt( point : Vector,  duration : Float);  // flags: 65545 
  import public function DisableLookAt();  // flags: 65545 
  function CutBodyPart();  // flags: 1 
  import public final function IsAttackableByPlayer() : Bool;  // flags: 65561 
  import public final function SetAttackableByPlayerPersistent( flag : Bool);  // flags: 65561 
  import public final function SetAttackableByPlayerRuntime( flag : Bool,  optional  timeout : Float);  // flags: 65561 
  import public final function InAttackRange( target : CGameplayEntity,  optional  rangeName : CName) : Bool;  // flags: 65561 
  import public final function GetNearestPointInPersonalSpace( position : Vector) : Vector;  // flags: 65561 
  import public final function GetNearestPointInPersonalSpaceAt( myPosition : Vector,  otherPosition : Vector) : Vector;  // flags: 65561 
  import public final function GatherEntitiesInAttackRange( out  entities : array<CGameplayEntity>,  optional  rangeName : CName);  // flags: 65561 
  import public final function CalculateHeight() : Float;  // flags: 65561 
  import public final function PlayMimicAnimationAsync( animation : CName) : Bool;  // flags: 65561 
  import public final function CanPlayQuestScene() : Bool;  // flags: 65561 
  import public final function HasInteractionScene() : Bool;  // flags: 65561 
  import public final function CanTalk( optional  ignoreCurrentSpeech : Bool) : Bool;  // flags: 65561 
  import public final function GetActorAnimState() : Int32;  // flags: 65561 
  import public final function IsInView() : Bool;  // flags: 65561 
  import public final function GetHeadBoneIndex() : Int32;  // flags: 65561 
  import public final function GetTorsoBoneIndex() : Int32;  // flags: 65561 
  import public final function GetTarget() : CActor;  // flags: 65561 
  import public final function IsDangerous( actor : CActor) : Bool;  // flags: 65561 
  import public final function GetAttitude( actor : CActor) : EAIAttitude;  // flags: 65561 
  import public final function SetAttitude( actor : CActor,  attitude : EAIAttitude);  // flags: 65561 
  import public final function ResetAttitude( actor : CActor);  // flags: 65561 
  import public final function HasAttitudeTowards( actor : CActor) : Bool;  // flags: 65561 
  import public final function ClearAttitudes( hostile : Bool,  neutral : Bool,  friendly : Bool);  // flags: 65561 
  import public final function GetAttitudeGroup() : CName;  // flags: 65561 
  import public final function GetBaseAttitudeGroup() : CName;  // flags: 65561 
  import public final function SetBaseAttitudeGroup( groupName : CName);  // flags: 65561 
  import public final function ResetBaseAttitudeGroup();  // flags: 65561 
  import public final function SetTemporaryAttitudeGroup( groupName : CName,  priority : EAttitudeGroupPriority);  // flags: 65561 
  import public final function ResetTemporaryAttitudeGroup( priority : EAttitudeGroupPriority);  // flags: 65561 
  function SetAttitudeGroup();  // flags: 1 
  function ResetAttitudeGroup();  // flags: 1 
  import public final function CanStealOtherActor( actor : CActor) : Bool;  // flags: 65561 
  import public final function DrawItems( instant : Bool,  itemId : SItemUniqueId,  optional  itemId2 : SItemUniqueId,  optional  itemId3 : SItemUniqueId) : Bool;  // flags: 65561 
  import public final function HolsterItems( instant : Bool,  itemId : SItemUniqueId,  optional  itemId2 : SItemUniqueId,  optional  itemId3 : SItemUniqueId) : Bool;  // flags: 65561 
  import public latent final function DrawItemsLatent( itemId : SItemUniqueId,  optional  itemId2 : SItemUniqueId,  optional  itemId3 : SItemUniqueId) : Bool;  // flags: 65625 
  import public latent final function HolsterItemsLatent( itemId : SItemUniqueId,  optional  itemId2 : SItemUniqueId,  optional  itemId3 : SItemUniqueId) : Bool;  // flags: 65625 
  function HasLatentItemAction();  // flags: 1 
  import public latent function WaitForFinishedAllLatentItemActions() : Bool;  // flags: 65609 
  import public latent final function DrawWeaponAndAttackLatent( itemId : SItemUniqueId) : Bool;  // flags: 65625 
  import public final function SetBehaviorMimicVariable( varName : CName,  varValue : Float) : Bool;  // flags: 65561 
  function RaiseBehaviorMimicEvent();  // flags: 1 
  import public function SetLookAtMode( mode : ELookAtMode);  // flags: 65545 
  import public function ResetLookAtMode( mode : ELookAtMode);  // flags: 65545 
  import public final function IsUsingExploration() : Bool;  // flags: 65561 
  import public final function GetAnimCombatSlots( animSlotName : CName,  out  outSlots : array<Matrix>,  slotsNum : Int32,  mainEnemyMatrix : Matrix) : Bool;  // flags: 65561 
  import public final function ForceAIBehavior( tree : IAITree,  forceLevel : EArbitratorPriorities,  optional  forceEventName : CName) : Int32;  // flags: 65561 
  import public final function CancelAIBehavior( forceActionId : Int32) : Bool;  // flags: 65561 
  import public final function GetAIStorageObject( storageItemName : CName) : IScriptable;  // flags: 65561 
  import public final function GetAutoEffects( out  effects : array<CName>);  // flags: 65561 
  import public final function SetInteractionPriority( priority : EInteractionPriority);  // flags: 65561 
  import public final function SetOriginalInteractionPriority( priority : EInteractionPriority);  // flags: 65561 
  import public final function RestoreOriginalInteractionPriority();  // flags: 65561 
  import public final function GetOriginalInteractionPriority() : EInteractionPriority;  // flags: 65561 
  import public final function GetInteractionPriority() : EInteractionPriority;  // flags: 65561 
  import public final function SetUnpushableTarget( target : CActor) : CActor;  // flags: 65561 
  import public final function EnableCollisions( val : Bool);  // flags: 65561 
  import public final function PredictWorldPosition( inTime : Float) : Vector;  // flags: 65561 
  import public final function IsReadyForNewAction() : Bool;  // flags: 65561 
  import public final function ActionCancelAll();  // flags: 65561 
  import public final function GetCurrentActionPriority() : Int32;  // flags: 65561 
  import public final function IsDoingSomethingMoreImportant( priority : Int32) : Bool;  // flags: 65561 
  import public final function IsCurrentActionInProgress() : Bool;  // flags: 65561 
  import public final function IsCurrentActionSucceded() : Bool;  // flags: 65561 
  import public final function IsCurrentActionFailed() : Bool;  // flags: 65561 
  import public latent final function ActionMoveToNode( target : CNode,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65625 
  import public final function ActionMoveToNodeAsync( target : CNode,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65561 
  import public latent final function ActionMoveToNodeWithHeading( target : CNode,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65625 
  import public final function ActionMoveToNodeWithHeadingAsync( target : CNode,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65561 
  import public latent final function ActionMoveTo( target : Vector,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65625 
  function ActionMoveToChangeTargetAsync();  // flags: 1 
  import public final function ActionMoveToAsync( target : Vector,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65561 
  import public latent final function ActionMoveToWithHeading( target : Vector,  heading : Float,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65625 
  import public final function ActionMoveToWithHeadingAsync( target : Vector,  heading : Float,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65561 
  import public latent final function ActionMoveAwayFromNode( position : CNode,  distance : Float,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65625 
  import public final function ActionMoveAwayFromNodeAsync( position : CNode,  distance : Float,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65561 
  import public latent final function ActionMoveAwayFromLine( positionA : Vector,  positionB : Vector,  distance : Float,  makeMinimalMovement : Bool,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65625 
  import public final function ActionMoveAwayFromLineAsync( positionA : Vector,  positionB : Vector,  distance : Float,  makeMinimalMovement : Bool,  optional  moveType : EMoveType,  optional  absSpeed : Float,  optional  radius : Float,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65561 
  import public latent final function ActionMoveCustom( targeter : CMoveTRGScript) : Bool;  // flags: 65625 
  import public final function ActionMoveCustomAsync( targeter : CMoveTRGScript) : Bool;  // flags: 65561 
  import public latent final function ActionMoveToDynamicNode( target : CNode,  moveType : EMoveType,  absSpeed : Float,  range : Float,  optional  keepDistance : Bool,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65625 
  import public final function ActionMoveToDynamicNodeAsync( target : CNode,  moveType : EMoveType,  absSpeed : Float,  range : Float,  optional  keepDistance : Bool,  optional  failureAction : EMoveFailureAction) : Bool;  // flags: 65561 
  import public latent final function ActionSlideThrough( explorationAreaToUse : CActionAreaComponent) : Bool;  // flags: 65625 
  import public final function ActionSlideThroughAsync( explorationAreaToUse : CActionAreaComponent) : Bool;  // flags: 65561 
  import public latent final function ActionSlideTo( target : Vector,  duration : Float) : Bool;  // flags: 65625 
  import public final function ActionSlideToAsync( target : Vector,  duration : Float) : Bool;  // flags: 65561 
  import public final function ActionSlideToWithHeadingAsync( target : Vector,  heading : Float,  duration : Float,  optional  rotation : ESlideRotation) : Bool;  // flags: 65561 
  import public latent final function ActionSlideToWithHeading( target : Vector,  heading : Float,  duration : Float,  optional  rotation : ESlideRotation) : Bool;  // flags: 65625 
  import public latent final function ActionMoveOnCurveTo( target : Vector,  duration : Float,  rightShift : Bool) : Bool;  // flags: 65625 
  import public final function ActionMoveOnCurveToAsync( target : Vector,  duration : Float,  rightShift : Bool) : Bool;  // flags: 65561 
  import public latent final function ActionRotateTo( target : Vector) : Bool;  // flags: 65625 
  import public latent final function ActionSetOrientation( orientation : Float) : Bool;  // flags: 65625 
  import public final function ActionRotateToAsync( target : Vector) : Bool;  // flags: 65561 
  import public latent final function ActionPlaySlotAnimation( slotName : CName,  animationName : CName,  optional  blendIn : Float,  optional  blendOut : Float,  optional  continuePlaying : Bool) : Bool;  // flags: 65625 
  import public final function ActionPlaySlotAnimationAsync( slotName : CName,  animationName : CName,  optional  blendIn : Float,  optional  blendOut : Float,  optional  continuePlaying : Bool) : Bool;  // flags: 65561 
  function ActionRaiseEvent();  // flags: 1 
  function ActionRaiseForceEvent();  // flags: 1 
  function ActionRaiseEventAsync();  // flags: 1 
  function ActionRaiseForceEventAsync();  // flags: 1 
  import public latent final function ActionExitWork( optional  fast : Bool) : Bool;  // flags: 65625 
  import public final function ActionExitWorkAsync( optional  fast : Bool) : Bool;  // flags: 65561 
  import public latent final function ActionExploration( exploration : SExplorationQueryToken,  optional  listener : IScriptable,  optional  steeringGraphTargetNode : CNode) : Bool;  // flags: 65625 
  import public latent final function ActionAnimatedSlideToStatic( settings : SAnimatedSlideSettings,  target : Vector,  heading : Float,  translation : Bool,  rotation : Bool) : Bool;  // flags: 65625 
  import public final function ActionAnimatedSlideToStaticAsync( settings : SAnimatedSlideSettings,  target : Vector,  heading : Float,  translation : Bool,  rotation : Bool) : Bool;  // flags: 65561 
  import public final function ActionAnimatedSlideToStaticAsync_P( settings : SAnimatedSlideSettings,  target : Vector,  heading : Float,  translation : Bool,  rotation : Bool,  out  animProxy : CActionMoveAnimationProxy) : Bool;  // flags: 65561 
  import public latent final function ActionAnimatedSlideTo( settings : SAnimatedSlideSettings,  target : CNode,  translation : Bool,  rotation : Bool) : Bool;  // flags: 65625 
  import public final function ActionAnimatedSlideToAsync( settings : SAnimatedSlideSettings,  target : CNode,  translation : Bool,  rotation : Bool) : Bool;  // flags: 65561 
  import public final function ActionAnimatedSlideToAsync_P( settings : SAnimatedSlideSettings,  target : CNode,  translation : Bool,  rotation : Bool,  out  animProxy : CActionMoveAnimationProxy) : Bool;  // flags: 65561 
  import public latent final function ActionMatchTo( settings : SAnimatedSlideSettings,  target : SActionMatchToTarget) : Bool;  // flags: 65625 
  import public final function ActionMatchToAsync( settings : SActionMatchToSettings,  target : SActionMatchToTarget) : Bool;  // flags: 65561 
  import public final function ActionMatchToAsync_P( settings : SActionMatchToSettings,  target : SActionMatchToTarget,  out  animProxy : CActionMoveAnimationProxy) : Bool;  // flags: 65561 
  import public final function GetCurrentActionType() : EActorActionType;  // flags: 65561 
  import public final function SetErrorState( description : String);  // flags: 65561 
  function WasVisibleLastFrame();  // flags: 1 
  import public final function PushAway( pusher : CMovingAgentComponent,  optional  strength : Float,  optional  speed : Float);  // flags: 65561 
  import public final function PushInDirection( pusherPos : Vector,  direction : Vector,  optional  speed : Float,  optional  playAnimation : Bool,  optional  applyRotation : Bool);  // flags: 65561 
  function SetMovementType();  // flags: 1 
  function GetMovementType();  // flags: 1 
  import public final function IssueRequiredItems( leftItem : CName,  rightItem : CName);  // flags: 65561 
  import public final function SetRequiredItems( leftItem : CName,  rightItem : CName);  // flags: 65561 
  import public final function IssueRequiredItemsGeneric( items : array<CName>,  slots : array<CName>);  // flags: 65561 
  import public final function SetRequiredItemsGeneric( items : array<CName>,  slots : array<CName>);  // flags: 65561 
  import public latent final function ActivateAndSyncBehaviorWithItemsParallel( names : CName,  optional  timeout : Float) : Bool;  // flags: 65625 
  import public latent final function ActivateAndSyncBehaviorWithItemsSequence( names : CName,  optional  timeout : Float) : Bool;  // flags: 65625 
  import public latent final function ProcessRequiredItems( optional  instant : Bool);  // flags: 65625 
  import public final function PlayPushAnimation( pushDirection : EPushingDirection);  // flags: 65561 
  import public final function GetFallTauntEvent() : String;  // flags: 65561 
  import public function GetCharacterStatsParam( abilities : array<CName>);  // flags: 65545 
  import public function ApplyItemAbilities( itemId : SItemUniqueId) : Bool;  // flags: 65545 
  import public function RemoveItemAbilities( itemId : SItemUniqueId) : Bool;  // flags: 65545 
  import public function ReportDeathToSpawnSystems();  // flags: 65545 
  import public function CanPush( canPush : Bool);  // flags: 65545 
  import public function MuteHeadAudio( mute : Bool);  // flags: 65545 
  public function GetIgnoreImmortalDodge() : Bool;  // flags: 65536 
  public function SetTatgetableByPlayer( isTargetAble : Bool);  // flags: 65536 
  public function IsTargetableByPlayer() : Bool;  // flags: 65536 
  public function IsUsingTooltip() : Bool;  // flags: 65536 
  public function SetIsUsingTooltip( hasTooltip : Bool);  // flags: 65536 
  public function GetTotalWeaponDamage( weaponId : SItemUniqueId,  damageTypeName : CName,  crossbowId : SItemUniqueId) : Float;  // flags: 65536 
  public function GetAttributeValue( attributeName : CName,  optional  tags : array<CName>,  optional  ignoreDeath : Bool) : SAbilityAttributeValue;  // flags: 65536 
  public function CanAddAttribute( attributeName : CName,  abilityName : CName) : Bool;  // flags: 65536 
  public function GetListOfCannotAddAttributes( out  attributes : array<CName>);  // flags: 65536 
  public event function OnAbilityAdded( abilityName : CName) : Bool;  // flags: 65568 
  public event function OnAbilityRemoved( abilityName : CName) : Bool;  // flags: 65568 
  public function IsAbilityBlocked( abilityName : CName) : Bool;  // flags: 65536 
  public function BlockAbility( abilityName : CName,  block : Bool,  optional  cooldown : Float) : Bool;  // flags: 65536 
  public function GetAbilities( includeAbilitiesFromItems : Bool) : array<CName>;  // flags: 65536 
  private function GetPureImmortalityFlags() : Int32;  // flags: 16384 
  public function WillBeUnconscious() : Bool;  // flags: 65536 
  public function IsImmortal() : Bool;  // flags: 65536 
  public function IsInvulnerable() : Bool;  // flags: 65536 
  public function IsVulnerable() : Bool;  // flags: 65536 
  public function GetImmortalityMode() : EActorImmortalityMode;  // flags: 65536 
  public function LogAllAbilities();  // flags: 65536 
  public function ForceVulnerable();  // flags: 65536 
  public function ForceVulnerableImmortalityMode();  // flags: 65536 
  public function RestoreImmortalityMode();  // flags: 65536 
  public function SetImmortalityMode( mode : EActorImmortalityMode,  channel : EActorImmortalityChanel,  optional  lockMode : Bool);  // flags: 65536 
  public function GetTraverser() : CScriptedExplorationTraverser;  // flags: 65536 
  public function UpdateTraverser( time : Float,  id : Int32);  // flags: 66560 
  public event function OnStartTraversingExploration( t : CScriptedExplorationTraverser) : Bool;  // flags: 65568 
  public event function OnFinishTraversingExploration() : Bool;  // flags: 65568 
  public function SetCombatStartTime();  // flags: 65536 
  public function GetCombatStartTime() : Float;  // flags: 65536 
  public function ResetCombatStartTime();  // flags: 65536 
  public function SetCombatPartStartTime();  // flags: 65536 
  public function ResetCombatPartStartTime();  // flags: 65536 
  public function GetCombatTime() : Float;  // flags: 65536 
  public function GetCombatPartTime() : Float;  // flags: 65536 
  protected function OnCombatModeSet( toggle : Bool);  // flags: 32768 
  public function HasHitTarget() : Bool;  // flags: 65536 
  public function WasDefeatedFromFistFight() : Bool;  // flags: 65536 
  public function IsFistFighting() : Bool;  // flags: 65536 
  public event function OnStartFistfightMinigame() : Bool;  // flags: 65568 
  public event function OnEndFistfightMinigame() : Bool;  // flags: 65568 
  public function IsInFistFightMiniGame() : Bool;  // flags: 65536 
  public function IsInAir() : Bool;  // flags: 65536 
  public function SetIsInAir( b : Bool);  // flags: 65536 
  public latent function RotateTo( target : Vector,  optional  duration : Float) : Bool;  // flags: 65600 
  public latent function RotateToNode( node : CNode,  optional  duration : Float) : Bool;  // flags: 65600 
  public event function OnBehTreeEnded() : Bool;  // flags: 65568 
  public final function IsAlive() : Bool;  // flags: 65552 
  public function Heal( amount : Float);  // flags: 65536 
  public function SetHealthPerc( amount : Float);  // flags: 65536 
  public function SetHealth( amount : Float);  // flags: 65536 
  public function IsFrozen() : Bool;  // flags: 65536 
  public final function SetRotationTargetWithTimeout( node : CNode,  clamping : Bool,  optional  timeout : Float);  // flags: 65552 
  public final function ClearRotationTargetWithTimeout();  // flags: 65552 
  public function ClearRotationTargetTimer( td : Float,  id : Int32);  // flags: 66560 
  public function GetNearestPoint( position : Vector,  distance : Float) : Vector;  // flags: 65536 
  public function GetNearestPointInBothPersonalSpaces( position : Vector) : Vector;  // flags: 65536 
  public function GetNearestPointInBothPersonalSpacesAt( myPosition : Vector,  otherPosition : Vector) : Vector;  // flags: 65536 
  public function GetVectorBetweenTwoNearestPoints( actorA : CActor,  actorB : CActor) : Vector;  // flags: 65536 
  public function IsOnGround() : Bool;  // flags: 65536 
  public function IsFalling() : Bool;  // flags: 65536 
  public function GetDistanceFromGround( _MaxTestDistance : Float,  optional  _CollisionGroupNames : array<CName>) : Float;  // flags: 65536 
  public function SetGameplayVisibility( b : Bool);  // flags: 65536 
  public function GetGameplayVisibility() : Bool;  // flags: 65536 
  public function SetAnimationSpeedMultiplier( mul : Float,  optional  overrideExistingId : Int32) : Int32;  // flags: 65536 
  private function CalculateFinalAnimationSpeedMultiplier() : Float;  // flags: 16384 
  public function ResetAnimationSpeedMultiplier( id : Int32);  // flags: 65536 
  public latent final function WaitForEndOfSpeach();  // flags: 65616 
  public function GetAttackableNPCsAndPlayersInRange( range : Float,  optional  maxResults : Int32,  optional  tag : CName) : array<CActor>;  // flags: 65536 
  public function GetNPCsAndPlayersInRange( range : Float,  optional  maxResults : Int32,  optional  tag : CName,  optional  queryFlags : Int32) : array<CActor>;  // flags: 65536 
  public function GetAttackableNPCsAndPlayersInCone( range : Float,  coneDir : Float,  coneAngle : Float,  optional  maxResults : Int32,  optional  tag : CName) : array<CActor>;  // flags: 65536 
  public function GetNPCsAndPlayersInCone( range : Float,  coneDir : Float,  coneAngle : Float,  optional  maxResults : Int32,  optional  tag : CName,  optional  queryFlags : Int32) : array<CActor>;  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  protected function SetEffectManager();  // flags: 32768 
  public function MountHorseIfNeeded();  // flags: 65536 
  public function UpdateSoundInfo();  // flags: 65536 
  public function DelaySoundInfoUpdate( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnAppearanceChanged() : Bool;  // flags: 65568 
  public function RestoreOriginalInteractionPriorityTimer( optional  deltaTime : Float,  id : Int32);  // flags: 66560 
  public function CanBeTeleporting() : Bool;  // flags: 65536 
  public function CanBeStrafed() : Bool;  // flags: 65536 
  public function CanBeTargeted() : Bool;  // flags: 65536 
  public function IsHuman() : Bool;  // flags: 65536 
  public function IsWoman() : Bool;  // flags: 65536 
  public function IsMan() : Bool;  // flags: 65536 
  public function IsMonster() : Bool;  // flags: 65536 
  public function IsAnimal() : Bool;  // flags: 65536 
  protected function SetAbilityManager();  // flags: 33280 
  public function CheckBlockedAbilities( dt : Float,  id : Int32);  // flags: 66560 
  protected function GetKillAction( optional  ignoreImmortalityMode : Bool,  optional  attacker : CGameplayEntity,  optional  source : CName) : W3DamageAction;  // flags: 32768 
  public function Kill( optional  ignoreImmortalityMode : Bool,  optional  attacker : CGameplayEntity,  optional  source : CName);  // flags: 65536 
  private function InterfaceKill( force : Bool,  attacker : CActor);  // flags: 16384 
  public function HasStaminaToParry( attActionName : CName) : Bool;  // flags: 65536 
  public function CanParryAttack() : Bool;  // flags: 65536 
  public function CanCounterParryAttack( attActionName : CName) : Bool;  // flags: 65536 
  public function FistFightCheck( target : CActor,  attacker : CActor,  out  bothUsingFists : Bool) : Bool;  // flags: 65536 
  public function ProcessSwordOrFistHitReaction( target : CActor,  attacker : CActor) : Float;  // flags: 65536 
  public function IsWeaponHeld( itemCategory : CName) : Bool;  // flags: 65536 
  public function IsAnyWeaponHeld() : Bool;  // flags: 65536 
  public function IsSecondaryWeaponHeld() : Bool;  // flags: 65536 
  public function IsSwordWooden() : Bool;  // flags: 65536 
  public function IsDeadlySwordHeld() : Bool;  // flags: 65536 
  public function SetIsCurrentlyDodging( b : Bool,  optional  isRolling : Bool);  // flags: 65536 
  public function IsCurrentlyDodging() : Bool;  // flags: 65536 
  public function SetParryEnabled( flag : Bool);  // flags: 65536 
  public function GetLastAttackRangeName() : CName;  // flags: 65536 
  public function CanPerformCounter() : Bool;  // flags: 65536 
  public function IsGuarded() : Bool;  // flags: 65536 
  public function SetGuarded( flag : Bool);  // flags: 65536 
  public function CanGuard() : Bool;  // flags: 65536 
  public function DisableHitAnimFor( time : Float);  // flags: 65536 
  public function UseAdditiveHit() : Bool;  // flags: 65536 
  public function SetUseAdditiveHit( _Flag : Bool,  optional  _CriticalCancelAdditiveHit : Bool,  optional  _OneTimeActivation : Bool);  // flags: 65536 
  public function UseAdditiveCriticalState() : Bool;  // flags: 65536 
  public function SetUseAdditiveCriticalStateAnim( flag : Bool);  // flags: 65536 
  public function SetCanPlayHitAnim( flag : Bool);  // flags: 65536 
  public function CanPlayHitAnim() : Bool;  // flags: 65536 
  public final function StopRotateEventAdjustments();  // flags: 65552 
  public function DrainStamina( action : EStaminaActionType,  optional  fixedCost : Float,  optional  fixedDelay : Float,  optional  abilityName : CName,  optional  dt : Float,  optional  costMult : Float);  // flags: 65536 
  public function DrainAir( cost : Float,  optional  regenDelay : Float);  // flags: 65536 
  public function DrainSwimmingStamina( cost : Float,  optional  regenDelay : Float);  // flags: 65536 
  public function DrainMorale( amount : Float);  // flags: 65536 
  public function DrainVitality( amount : Float);  // flags: 65536 
  public function DrainEssence( amount : Float);  // flags: 65536 
  public function AddPanic( amount : Float);  // flags: 65536 
  public function GainStat( stat : EBaseCharacterStats,  amount : Float);  // flags: 65536 
  public function UpdateStatMax( stat : EBaseCharacterStats);  // flags: 65536 
  public function ForceSetStat( stat : EBaseCharacterStats,  val : Float);  // flags: 65536 
  public function GetPowerStatValue( stat : ECharacterPowerStats,  optional  abilityName : CName,  optional  ignoreDeath : Bool) : SAbilityAttributeValue;  // flags: 65536 
  public function GetResistValue( stat : ECharacterDefenseStats,  out  points : Float,  out  percents : Float);  // flags: 65536 
  public function ResumeEffects( type : EEffectType,  sourceName : CName);  // flags: 65536 
  public function PauseEffects( type : EEffectType,  sourceName : CName,  optional  singleLock : Bool,  optional  duration : Float,  optional  useMaxDuration : Bool);  // flags: 65536 
  public function HasDefaultAbilitySet() : Bool;  // flags: 65536 
  public function IgnoresDifficultySettings() : Bool;  // flags: 65536 
  public function HasStaminaToUseAction( action : EStaminaActionType,  optional  abilityName : CName,  optional  dt : Float,  optional  multiplier : Float) : Bool;  // flags: 65536 
  public function GetStaminaActionCost( action : EStaminaActionType,  optional  abilityName : CName,  optional  dt : Float) : Float;  // flags: 65536 
  public function GetStaminaActionDelay( action : EStaminaActionType,  optional  abilityName : CName,  optional  dt : Float) : Float;  // flags: 65536 
  public function GetHealthPercents() : Float;  // flags: 65536 
  public final function GetHealth() : Float;  // flags: 65552 
  public function GetStaminaPercents() : Float;  // flags: 65536 
  public function GetMaxHealth() : Float;  // flags: 65536 
  public function GetCurrentHealth() : Float;  // flags: 65536 
  public function UsesVitality() : Bool;  // flags: 65536 
  public function UsesEssence() : Bool;  // flags: 65536 
  public function GetStat( stat : EBaseCharacterStats,  optional  ignoreLock : Bool) : Float;  // flags: 65536 
  public function GetStatMax( stat : EBaseCharacterStats) : Float;  // flags: 65536 
  public function GetStats( stat : EBaseCharacterStats,  out  curr : Float,  out  max : Float);  // flags: 65536 
  public function GetStatPercents( stat : EBaseCharacterStats) : Float;  // flags: 65536 
  public function GetThreatLevel() : Int32;  // flags: 65536 
  public event function OnTakeDamage( action : W3DamageAction) : Bool;  // flags: 65568 
  public function Revive();  // flags: 65536 
  public function ApplyActionEffects( action : W3DamageAction) : Bool;  // flags: 65536 
  public function ReactToReflectedAttack( target : CGameplayEntity);  // flags: 65536 
  public function ReactToBeingHit( damageAction : W3DamageAction,  optional  buffNotApplied : Bool) : Bool;  // flags: 65536 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public final function ProcessHitSound( damageAction : W3DamageAction,  hitAnimPlayed : Bool);  // flags: 65552 
  public function SetHitSoundData( action : W3DamageAction);  // flags: 65536 
  protected function SetDamageActionMagicHitSound( causer : CEntity);  // flags: 32768 
  public function PlayHitEffect( damageAction : W3DamageAction);  // flags: 65536 
  public event function OnReactToBeingHit( damageAction : W3DamageAction) : Bool;  // flags: 66080 
  public function InterruptCombatFocusMode();  // flags: 66048 
  protected function PlayHitAnimation( damageAction : W3DamageAction,  animType : EHitReactionType);  // flags: 33280 
  public function SetHitReactionDirection( attacker : CNode);  // flags: 65536 
  public function SetDetailedHitReaction( type : EAttackSwingType,  dir : EAttackSwingDirection);  // flags: 65536 
  public event function OnBlockingSceneStarted( scene : CStoryScene) : Bool;  // flags: 65568 
  public event function OnBlockingSceneEnded( optional  output : CStorySceneOutput) : Bool;  // flags: 65568 
  public event function OnDeath( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  public function OnRevived();  // flags: 65536 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  public event function OnCanFindPath( sender : CActor) : Bool;  // flags: 65568 
  public event function OnCannotFindPath( sender : CActor) : Bool;  // flags: 65568 
  public event function OnBecomeAwareAndCanAttack( sender : CActor) : Bool;  // flags: 65568 
  public event function OnBecomeUnawareOrCannotAttack( sender : CActor) : Bool;  // flags: 65568 
  public event function OnApproachAttack( sender : CActor) : Bool;  // flags: 65568 
  public event function OnApproachAttackEnd( sender : CActor) : Bool;  // flags: 65568 
  public event function OnAttack( sender : CActor) : Bool;  // flags: 65568 
  public event function OnAttackEnd( sender : CActor) : Bool;  // flags: 65568 
  public event function OnAxiied( attacker : CActor) : Bool;  // flags: 65568 
  public function SetEffectsUpdateTicking( on : Bool,  optional  dontCheckEffectsManager : Bool);  // flags: 65536 
  public function IsEffectsUpdateTicking() : Bool;  // flags: 65536 
  public function StartVitalityRegen() : Bool;  // flags: 65536 
  public function StopVitalityRegen();  // flags: 65536 
  public function StartEssenceRegen() : Bool;  // flags: 65536 
  public function StopEssenceRegen();  // flags: 65536 
  public function StartStaminaRegen() : Bool;  // flags: 65536 
  public function StopStaminaRegen();  // flags: 65536 
  public function StartMoraleRegen() : Bool;  // flags: 65536 
  public function StopMoraleRegen();  // flags: 65536 
  public function StartPanicRegen() : Bool;  // flags: 65536 
  public function StopPanicRegen();  // flags: 65536 
  public function StartAirRegen() : Bool;  // flags: 65536 
  public function StopAirRegen();  // flags: 65536 
  public function StartSwimmingStaminaRegen() : Bool;  // flags: 65536 
  public function StopSwimmingStaminaRegen();  // flags: 65536 
  public function EffectsUpdate( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function UpdateRequestedDirectionVariables( headingYawWS : Float,  orientationYawWS : Float);  // flags: 65536 
  public function UpdateLookAtVariables( lookAtTargetActive : Float,  lookAtTarget : Vector);  // flags: 65536 
  protected function CriticalBuffInformBehavior( buff : CBaseGameplayEffect);  // flags: 33280 
  public function GetNewRequestedCS() : CBaseGameplayEffect;  // flags: 65536 
  public function SetNewRequestedCS( buff : CBaseGameplayEffect);  // flags: 65536 
  public function StartCSAnim( buff : CBaseGameplayEffect) : Bool;  // flags: 65536 
  public event function OnCriticalStateAnimStart() : Bool;  // flags: 65568 
  public function CriticalEffectAnimationInterrupted( reason : String) : Bool;  // flags: 65536 
  public function RequestCriticalAnimStop( optional  dontSetCriticalToStopped : Bool);  // flags: 65536 
  public function CriticalStateAnimStopped( forceRemoveBuff : Bool);  // flags: 65536 
  public function ChooseNextCriticalBuffForAnim() : CBaseGameplayEffect;  // flags: 65536 
  public function ChooseCurrentCriticalBuffForAnim() : CBaseGameplayEffect;  // flags: 65536 
  public function GetCriticalBuffs() : array<CBaseGameplayEffect>;  // flags: 65536 
  public final function IsCriticalTypeHigherThanAllCurrent( crit : ECriticalStateType) : Bool;  // flags: 65552 
  public function RecalcEffectDurations();  // flags: 65536 
  public function UpdateApplicatorBuffs();  // flags: 65536 
  public function GetApplicatorParamsFor( applicator : W3ApplicatorEffect,  out  pwrStatValue : SAbilityAttributeValue);  // flags: 65536 
  public function AddEffectCustom( params : SCustomEffectParams) : EEffectInteract;  // flags: 65536 
  public function AddEffectDefault( effectType : EEffectType,  creat : CGameplayEntity,  optional  srcName : String,  optional  signEffect : Bool) : EEffectInteract;  // flags: 65536 
  public function ProcessOnHitEffects( victim : CActor,  silverSword : Bool,  steelSword : Bool,  sign : Bool);  // flags: 65536 
  public function RemoveBuff( effectType : EEffectType,  optional  csForcedRemove : Bool,  optional  sourceName : String);  // flags: 65536 
  public function RemoveEffect( effect : CBaseGameplayEffect,  optional  csForcedRemove : Bool);  // flags: 65536 
  public function RemoveAllNonAutoBuffs();  // flags: 65536 
  public function RemoveAllBuffsOfType( effectType : EEffectType);  // flags: 65536 
  public function HasBuff( effectType : EEffectType) : Bool;  // flags: 65536 
  public function GetBuffTimePercentageByType( effectType : EEffectType) : Int32;  // flags: 65536 
  public function GetBuffTimePercentage( effect : CBaseGameplayEffect) : Int32;  // flags: 65536 
  public function GetCriticalBuffsCount() : Int32;  // flags: 65536 
  public function GetCurrentlyAnimatedCS() : CBaseGameplayEffect;  // flags: 65536 
  public function GetBuff( effectType : EEffectType,  optional  sourceName : String) : CBaseGameplayEffect;  // flags: 65536 
  public function GetBuffs( optional  type : EEffectType,  optional  sourceName : String,  optional  partialSourceNameSearch : Bool) : array<CBaseGameplayEffect>;  // flags: 65536 
  public final function HasPotionBuff() : Bool;  // flags: 65552 
  public function IsImmuneToBuff( effect : EEffectType) : Bool;  // flags: 65536 
  public function AddBuffImmunity_AllCritical( source : CName,  removeIfPresent : Bool);  // flags: 65536 
  public function AddBuffImmunity_AllNegative( source : CName,  removeIfPresent : Bool);  // flags: 65536 
  public function AddBuffImmunity( effect : EEffectType,  source : CName,  removeBuffIfPresent : Bool);  // flags: 65536 
  public function RemoveBuffImmunity_AllCritical( optional  source : CName);  // flags: 65536 
  public function RemoveBuffImmunity_AllNegative( optional  source : CName);  // flags: 65536 
  public function RemoveBuffImmunity( effect : EEffectType,  optional  source : CName);  // flags: 65536 
  public function PauseHPRegenEffects( sourceName : CName,  optional  duration : Float);  // flags: 65536 
  public function ResumeHPRegenEffects( sourceName : CName);  // flags: 65536 
  public function PauseStaminaRegen( sourceName : CName);  // flags: 65536 
  public function ResumeStaminaRegen( sourceName : CName);  // flags: 65536 
  public function GetCriticalStateCounter( optional  total : Bool) : Int32;  // flags: 65536 
  public function IncCriticalStateCounter();  // flags: 65536 
  private function ResetCriticalStateCounter( deta : Float,  id : Int32);  // flags: 17408 
  public function GetTotalSignSpellPower( signSkill : ESkill) : SAbilityAttributeValue;  // flags: 66048 
  public function EnableHighlightTimer( time : Float,  id : Int32);  // flags: 66560 
  public function SetBIsPlayerCurrentTarget( flag : Bool);  // flags: 65536 
  public event function OnSlideToTargetAnimEvent( animEventName : CName,  properties : SSlideToTargetEventProps,  animEventType : EAnimationEventType,  animEventDuration : Float,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnSlideToTargetDistance( animEventName : CName,  properties : SMultiValue,  animEventType : EAnimationEventType,  animEventDuration : Float,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function SetRotationAdjustmentRotateTo( turnTowards : CNode,  optional  offsetHeading : Float);  // flags: 65536 
  public function SetRotationAdjustmentRotateToHeading( heading : Float);  // flags: 65536 
  public function SuspendRotationAdjustment();  // flags: 65536 
  public function GetRotationRateFromAnimEvent( enumValue : Int32) : ERotationRate;  // flags: 65536 
  private function GetWoundNameFromDLCForAnim( animInfo : SAnimationEventAnimInfo) : CName;  // flags: 16384 
  public event function OnEnumAnimEvent( animEventName : CName,  variant : SEnumVariant,  animEventType : EAnimationEventType,  animEventDuration : Float,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function GetWoundNameFromWoundType( woundType : Int32) : CName;  // flags: 65536 
  public event function OnAnimEvent_RotateEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_RotateAwayEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_DeathHitGround( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Shake0( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Shake1( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Shake2( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Shake3( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Shake4( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Shake5( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_DropItem( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_OnGround( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Death( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_MountHorseType( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_HorseRidingOn( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnDeathAnimFinished() : Bool;  // flags: 65568 
  public function EnableFinishComponent( flag : Bool);  // flags: 65536 
  public final function CanBleed() : Bool;  // flags: 65552 
  public final function CreateBloodSpill();  // flags: 65552 
  public function DropItemFromSlot( slotName : CName,  optional  removeFromInv : Bool);  // flags: 65536 
  public function AddDroppedItem( itemName : CName,  entity : CEntity);  // flags: 65536 
  public function RemoveDroppedItem( itemName : CName,  destroy : Bool);  // flags: 65536 
  public function DropEquipment( tag : CName,  optional  direction : Vector);  // flags: 65536 
  public function SetWound( woundName : CName,  optional  spawnEntity : Bool,  optional  createParticles : Bool,  optional  dropEquipment : Bool,  optional  playSound : Bool,  optional  direction : Vector,  optional  playEffects : Bool);  // flags: 65536 
  public function IsCurrentWound( woundName : CName) : Bool;  // flags: 65536 
  public function IsWoundDefined( woundName : CName) : Bool;  // flags: 65536 
  public function GetNearestWoundForBone( boneIndex : Int32,  directionWS : Vector,  woundTypeFlags : EWoundTypeFlags) : CName;  // flags: 65536 
  public function SetDismembermentInfo( woundName : CName,  vec : Vector,  forceRagoll : Bool);  // flags: 65536 
  public function DelayedDismemberTimer( time : Float,  id : Int32);  // flags: 66560 
  private function Dismember();  // flags: 16384 
  public function TurnOnRagdoll();  // flags: 65536 
  private function FindAttackTargets( preAttackData : CPreAttackEventData) : array<CGameplayEntity>;  // flags: 16384 
  public function IsSuperHeavyAttack( attackName : CName) : Bool;  // flags: 65536 
  public function IsHeavyAttack( attackName : CName) : Bool;  // flags: 65536 
  public function IsLightAttack( attackName : CName) : Bool;  // flags: 65536 
  public function BlinkWeapon( optional  weaponId : SItemUniqueId) : Bool;  // flags: 65536 
  public function PlayEffectOnHeldWeapon( effectName : CName,  optional  disable : Bool) : Bool;  // flags: 65536 
  protected function PerformCounterCheck( parryInfo : SParryInfo) : Bool;  // flags: 33280 
  public function PerformParryCheck( parryInfo : SParryInfo) : Bool;  // flags: 66048 
  public event function OnPreAttackEvent( animEventName : CName,  animEventType : EAnimationEventType,  data : CPreAttackEventData,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  private function PreAttackParry();  // flags: 16384 
  private function SetCurrentAttackData( data : CPreAttackEventData,  animInfo : SAnimationEventAnimInfo);  // flags: 16384 
  private function GetCurrentAttackDataAndAnimInfo( out  data : CPreAttackEventData,  out  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 16384 
  public function GetCurrentAttackData( out  data : CPreAttackEventData) : Bool;  // flags: 65536 
  public event function OnCollisionFromItem( collidedActor : CActor,  optional  itemEntity : CItemEntity) : Bool;  // flags: 65568 
  public function SetAttackData( data : CPreAttackEventData);  // flags: 65536 
  protected function TestParryAndCounter( data : CPreAttackEventData,  weaponId : SItemUniqueId,  out  parried : Bool,  out  countered : Bool) : array<CActor>;  // flags: 32768 
  private function SetCounterHint();  // flags: 16384 
  protected function DoAttack( animData : CPreAttackEventData,  weaponId : SItemUniqueId,  parried : Bool,  countered : Bool,  parriedBy : array<CActor>,  attackAnimationName : CName,  hitTime : Float);  // flags: 32768 
  public function PostAttackDebugRangeClear( dt : Float,  id : Int32);  // flags: 66560 
  protected function Attack( hitTarget : CGameplayEntity,  animData : CPreAttackEventData,  weaponId : SItemUniqueId,  parried : Bool,  countered : Bool,  parriedBy : array<CActor>,  attackAnimationName : CName,  hitTime : Float,  weaponEntity : CItemEntity);  // flags: 32768 
  public function SetAttackActionName( nam : CName);  // flags: 65536 
  protected function PrepareAttackAction( hitTarget : CGameplayEntity,  animData : CPreAttackEventData,  weaponId : SItemUniqueId,  parried : Bool,  countered : Bool,  parriedBy : array<CActor>,  attackAnimationName : CName,  hitTime : Float,  weaponEntity : CItemEntity,  out  attackAction : W3Action_Attack) : Bool;  // flags: 32768 
  protected function ChangeHitFxBasedOnWeapon( out  animData : CPreAttackEventData,  weaponId : SItemUniqueId);  // flags: 32768 
  public function ReduceDamage( out  damageData : W3DamageAction);  // flags: 65536 
  public function GetDelaySinceLastAttacked() : Float;  // flags: 65536 
  public function GetDelaySinceLastHit() : Float;  // flags: 65536 
  public function IsAttacked( optional  byPlayer : Bool);  // flags: 65536 
  public function IsAttackerAtBack( attacker : CNode) : Bool;  // flags: 65536 
  public function ProcessSlideToTarget( duration : Float,  slideProperties : SSlideToTargetEventProps);  // flags: 65536 
  public function ProcessSlideToTargetDistance( duration : Float,  targetDist : Float);  // flags: 65536 
  public function SetDetailedHitType( hitType : EDetailedHitType);  // flags: 65536 
  public function ChooseDetailedHitType( parryInfo : SParryInfo) : EDetailedHitType;  // flags: 65536 
  public function ChooseParryTypeIndex( parryInfo : SParryInfo) : Float;  // flags: 65536 
  public function ProcessParryInfo( attacker : CActor,  target : CActor,  attackSwingType : EAttackSwingType,  attackSwingDir : EAttackSwingDirection,  attActionName : CName,  attackerWeaponId : SItemUniqueId,  canBeParried : Bool) : SParryInfo;  // flags: 65536 
  public function DelayDodgeProjectileEventTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function DelayDodgeBombEventTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function DelayRepulseProjectileEventTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function DelayRepulseBombEventTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function GetTotalArmor() : SAbilityAttributeValue;  // flags: 65536 
  public function HasWeaponDrawn( treatFistsAsWeapon : Bool) : Bool;  // flags: 65536 
  public function UnequipItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function EquipItem( item : SItemUniqueId,  optional  slot : EEquipmentSlots,  optional  toHand : Bool) : Bool;  // flags: 65536 
  public function IsInAgony() : Bool;  // flags: 66048 
  public function Agony();  // flags: 66048 
  public function IsKnockedUnconscious() : Bool;  // flags: 65536 
  public function EnterKnockedUnconscious();  // flags: 65536 
  public function EndKnockedUnconscious();  // flags: 65536 
  private function EnableHitAnim( time : Float,  id : Int32);  // flags: 17408 
  public function SetUsedVehicle( ent : CGameplayEntity);  // flags: 65536 
  public function GetUsedVehicle() : CGameplayEntity;  // flags: 65536 
  public function IsUsingVehicle() : Bool;  // flags: 65536 
  public function IsUsingHorse( optional  ignoreMountInProgress : Bool) : Bool;  // flags: 65536 
  public function IsUsingBoat() : Bool;  // flags: 65536 
  public function GetUsedHorseComponent() : W3HorseComponent;  // flags: 65536 
  public final function FindAndMountVehicle( optional  mountType : EVehicleMountType,  optional  maxDistance : Float) : Bool;  // flags: 65552 
  public final function FindTheNearestVehicle( maxDistance : Float,  requireToBeMountable : Bool) : CVehicleComponent;  // flags: 65552 
  private final function SelectTheNearestVehicles( nodes : array<CNode>,  maxDistance : Float) : CEntity;  // flags: 16400 
  public function GetCurrentEffects() : array<CBaseGameplayEffect>;  // flags: 65536 
  public function GetNeedsToReduceFallingDamage( heightDiff : Float) : Bool;  // flags: 65536 
  public function CanReduceFallDamage( heightDiff : Float) : Bool;  // flags: 65536 
  public function ApplyFallingDamage( heightDiff : Float,  optional  reducing : Bool) : Float;  // flags: 65536 
  public event function OnContactEvent( position : Vector,  force : Vector,  otherBody : CComponent,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnCustomCamera( eventName : CName,  properties : SMultiValue,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnFrostHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public function SetIsSwimming( toggle : Bool);  // flags: 65536 
  public function IsSwimming() : Bool;  // flags: 65536 
  public final function IsDiving() : Bool;  // flags: 65552 
  public final function GetSwordTipMovementFromAnimation( animation : CName,  time : Float,  deltaTime : Float,  hitWeapon : CItemEntity) : Vector;  // flags: 65552 
  public function GetLyingDownFacingDirection() : Float;  // flags: 65536 
  public function RegisterCollisionEventsListener();  // flags: 65536 
  public event function OnRagdollOnGround() : Bool;  // flags: 66080 
  public event function OnRagdollInAir() : Bool;  // flags: 66080 
  public event function OnNoLongerInRagdoll() : Bool;  // flags: 66080 
  public function GetCriticalHitDamageBonus( weaponId : SItemUniqueId,  victimMonsterCategory : EMonsterCategory,  isStrikeAtBack : Bool) : SAbilityAttributeValue;  // flags: 65536 
  public function HasAlternateQuen() : Bool;  // flags: 65536 
  public function FinishQuen();  // flags: 66048 
  public function UpdateStatsForDifficultyLevel( d : EDifficultyMode);  // flags: 65536 
  public function GetLevel() : Int32;  // flags: 65536 
  public function GetAbilityCount( abilityName : CName) : Int32;  // flags: 65536 
  public function TestIsInSettlement() : Bool;  // flags: 65536 
  public event function OnSpawnedEditor( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnCutsceneDeath() : Bool;  // flags: 65568 
  public function ShouldAttachArrowToPlayer( action : W3DamageAction);  // flags: 65536 
  private final function CacheHudModuleHealFloater( heal : Float);  // flags: 16400 
  public function HudModuleHealUpdate( dt : Float,  id : Int32);  // flags: 66560 
  private final function CacheHudModuleDoTDamageFloater( dmg : Float);  // flags: 16400 
  public function HudModuleDoTUpdate( dt : Float,  id : Int32);  // flags: 66560 
  public function ShowFloatingValue( type : EFloatingValueType,  value : Float,  cache : Bool,  optional  stringParam : String);  // flags: 65536 
  public function Debug_GetUsedDifficultyMode() : EDifficultyMode;  // flags: 65536 

}
import class CPlayer extends CActor {
  import var npcVoicesetCooldown : Float; // 4001
  import var presenceInterestPoint : *CInterestPoint; // 4005
  import var slowMovementInterestPoint : *CInterestPoint; // 4005
  import var fastMovementInterestPoint : *CInterestPoint; // 4005
  import var weaponDrawnInterestPoint : *CInterestPoint; // 4005
  import var weaponDrawMomentInterestPoint : *CInterestPoint; // 4005
  import var visionInterestPoint : *CInterestPoint; // 4005
  import var isMovable : Bool; // 6008

  import public final function LockButtonInteractions( channel : Int32);  // flags: 65561 
  import public final function UnlockButtonInteractions( channel : Int32);  // flags: 65561 
  import public final function GetActiveExplorationEntity() : CEntity;  // flags: 65561 
  public function IsAdaptiveBalance() : Bool;  // flags: 65536 
  public function SetAdaptiveBalance( val : Bool);  // flags: 65536 
  public function SetTeleportedOnBoatToOtherHUB( val : Bool);  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Debug_ResetInput();  // flags: 65536 
  public function GetTutorialInputHandler() : W3PlayerTutorialInput;  // flags: 65536 
  public function BlockAction( action : EInputActionBlock,  sourceName : CName,  optional  keepOnSpawn : Bool,  optional  isFromQuest : Bool,  optional  isFromPlace : Bool) : Bool;  // flags: 65536 
  public function UnblockAction( action : EInputActionBlock,  sourceName : CName) : Bool;  // flags: 65536 
  public final function TutorialForceUnblockRadial() : array<SInputActionLock>;  // flags: 65552 
  public final function TutorialForceRestoreRadialLocks( radialLocks : array<SInputActionLock>);  // flags: 65552 
  public function GetActionLocks( action : EInputActionBlock) : array<SInputActionLock>;  // flags: 65536 
  public function GetAllActionLocks() : C2dArraySInputActionLock;  // flags: 65536 
  public function IsActionAllowed( action : EInputActionBlock) : Bool;  // flags: 65536 
  public function IsActionBlockedBy( action : EInputActionBlock,  sourceName : CName) : Bool;  // flags: 65536 
  public function IsWeaponActionAllowed( weapon : EPlayerWeapon) : Bool;  // flags: 65536 
  public function BlockAllActions( sourceName : CName,  lock : Bool,  optional  exceptions : array<EInputActionBlock>,  optional  exceptUI : Bool,  optional  saveLock : Bool,  optional  onSpawnedNullPointerHackFix : CPlayer,  optional  isFromPlace : Bool);  // flags: 65536 
  public final function BlockAllQuestActions( sourceName : CName,  lock : Bool);  // flags: 65552 
  public function BlockAllUIQuestActions( sourceName : CName,  lock : Bool);  // flags: 65536 
  public function GetInputHandler() : CPlayerInput;  // flags: 65536 
  public function CheatGod2( on : Bool);  // flags: 65536 
  public function IsInCombatState() : Bool;  // flags: 65536 
  public function DisableCombatState();  // flags: 65536 
  protected function SetAbilityManager();  // flags: 32768 
  public event function OnDamageFromBoids( damage : Float) : Bool;  // flags: 65568 
  public function InitializeParryType();  // flags: 65536 
  public event function OnPlayerTickTimer( deltaTime : Float) : Bool;  // flags: 65568 
  public function PlayerTick( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function IsLookInputIgnored() : Bool;  // flags: 65536 
  public function SetInputHeadingReady( flag : Bool);  // flags: 65536 
  public function IsInputHeadingReady() : Bool;  // flags: 65536 
  public function HandleMovement( deltaTime : Float);  // flags: 65536 
  protected function ProcessLAxisCaching();  // flags: 32768 
  public function ResetLastAxisInputIsMovement();  // flags: 65536 
  protected function ProcessLockTargetSelectionInput( rightStickVector : Vector,  rawLengthR : Float) : Bool;  // flags: 32768 
  private function LAxisReleaseCounter( time : Float,  id : Int32);  // flags: 17408 
  private function LAxisReleaseCounterNoCA( time : Float,  id : Int32);  // flags: 17408 
  public function StopRunDelayedInputCheck( time : Float,  id : Int32);  // flags: 66560 
  public function IsUITakeInput() : Bool;  // flags: 65536 
  public function SetUITakeInput( val : Bool);  // flags: 65536 
  public function GetRawLeftJoyRot() : Float;  // flags: 65536 
  public function SetIsActorLockedToTarget( flag : Bool);  // flags: 65536 
  public function IsActorLockedToTarget() : Bool;  // flags: 65536 
  public function SetIsCameraLockedToTarget( flag : Bool);  // flags: 65536 
  public function IsCameraLockedToTarget() : Bool;  // flags: 65536 
  public function IsLockedToTarget() : Bool;  // flags: 65536 
  public function EnableHardLock( flag : Bool);  // flags: 65536 
  public function IsHardLockEnabled() : Bool;  // flags: 65536 
  public function EnableBroadcastPresence( enable : Bool);  // flags: 65536 
  public function RemoveReactions();  // flags: 65536 
  public function RestartReactionsIfNeeded();  // flags: 65536 
  public event function OnBlockingSceneStarted( scene : CStoryScene) : Bool;  // flags: 65568 
  public event function OnBlockingSceneEnded( optional  output : CStorySceneOutput) : Bool;  // flags: 65568 
  private function RemoveSceneEndedActionBlock( dt : Float,  id : Int32);  // flags: 17408 
  public function SetDeathType( type : EPlayerDeathType);  // flags: 65536 
  public function ResetDeathType();  // flags: 65536 
  public event function OnDeath( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnUnconsciousEnd() : Bool;  // flags: 65568 
  public event function OnDodgeBoost() : Bool;  // flags: 65568 
  public function StopRun();  // flags: 65536 
  public function IsRunPressed() : Bool;  // flags: 65536 
  public function SetSprintActionPressed( enable : Bool,  optional  dontClearTimeStamp : Bool);  // flags: 65536 
  public function GetHowLongSprintButtonWasPressed() : Float;  // flags: 65536 
  public function SetIsSprinting( flag : Bool);  // flags: 65536 
  public function EnableSprintingCamera( flag : Bool);  // flags: 65536 
  public function EnableRunCamera( flag : Bool);  // flags: 65536 
  protected function SprintingTimer( dt : Float,  id : Int32);  // flags: 33792 
  protected function ShouldDrainStaminaWhileSprinting() : Bool;  // flags: 32768 
  protected function ShouldUseStaminaWhileSprinting() : Bool;  // flags: 32768 
  public function GetIsSprinting() : Bool;  // flags: 65536 
  public function GetSprintingTime() : Float;  // flags: 65536 
  public function DisableSprintingTimer( time : Float,  id : Int32);  // flags: 66560 
  public function IsSprintActionPressed() : Bool;  // flags: 65536 
  public function SetSprintToggle( flag : Bool);  // flags: 65536 
  public function GetIsSprintToggled() : Bool;  // flags: 65536 
  public function SetWalkToggle( flag : Bool);  // flags: 65536 
  public function GetIsWalkToggled() : Bool;  // flags: 65536 
  public function GetIsRunning() : Bool;  // flags: 65536 
  public function SetIsRunning( flag : Bool);  // flags: 65536 
  public function GetIsWalking() : Bool;  // flags: 65536 
  public function SetIsWalking( walking : Bool);  // flags: 65536 
  public final function SetIsMovable( flag : Bool);  // flags: 65552 
  public function SetManualControl( movement : Bool,  camera : Bool);  // flags: 65536 
  public final function GetIsMovable() : Bool;  // flags: 65552 
  public function SetBInteractionPressed( flag : Bool);  // flags: 65536 
  public function GetBInteractionPressed() : Bool;  // flags: 65536 
  public function IsInCombatAction() : Bool;  // flags: 65536 
  public function IsInCombatActionFriendly() : Bool;  // flags: 65536 
  public function IsInCombatAction_SpecialAttack() : Bool;  // flags: 65536 
  public function SetBIsInCombatAction( flag : Bool);  // flags: 65536 
  public function SetBIsInCombatActionFriendly( flag : Bool);  // flags: 65536 
  public function RaiseCombatActionFriendlyEvent() : Bool;  // flags: 65536 
  public function CanRaiseCombatActionFriendlyEvent( optional  isShootingCrossbow : Bool) : Bool;  // flags: 65536 
  public final function CanParryAttack() : Bool;  // flags: 65552 
  protected function ParryCounterCheck() : Bool;  // flags: 32768 
  public function SetIsHorseMounted( isOn : Bool);  // flags: 65536 
  public function GetIsHorseMounted() : Bool;  // flags: 65536 
  public function SetIsCompanionFollowing( isOn : Bool);  // flags: 65536 
  public function GetIsCompanionFollowing() : Bool;  // flags: 65536 
  public function SetStartScreenIsOpened( isOpened : Bool);  // flags: 65536 
  public function GetStartScreenIsOpened() : Bool;  // flags: 65536 
  public function SetEndScreenIsOpened( isOpened : Bool);  // flags: 65536 
  public function GetEndScreenIsOpened() : Bool;  // flags: 65536 
  public function SetStartScreenFadeDuration( fadeTime : Float);  // flags: 65536 
  public function GetStartScreenFadeDuration() : Float;  // flags: 65536 
  public function SetStartScreenFadeInDuration( fadeTime : Float);  // flags: 65536 
  public function GetStartScreenFadeInDuration() : Float;  // flags: 65536 
  public function SetStartScreenEndWithBlackScreen( value : Bool);  // flags: 65536 
  public function GetStartScreenEndWithBlackScreen() : Bool;  // flags: 65536 
  public function CanStartTalk() : Bool;  // flags: 65536 
  public function UpdateRequestedDirectionVariables_PlayerDefault();  // flags: 65536 
  public function SetGuarded( flag : Bool);  // flags: 65536 
  public event function OnDelayOrientationChange() : Bool;  // flags: 66080 
  public function SetBIsInputAllowed( flag : Bool,  sourceName : CName);  // flags: 65536 
  public function GetBIsInputAllowed() : Bool;  // flags: 65536 
  public function SetBIsFirstAttackInCombo( flag : Bool);  // flags: 65536 
  public function IsInHitAnim() : Bool;  // flags: 65536 
  public function SetIsInHitAnim( flag : Bool);  // flags: 65536 
  public function SetInputModuleNeededToRun( _inputModuleNeededToRun : Float);  // flags: 65536 
  public function GetInputModuleNeededToRun() : Float;  // flags: 65536 
  public event function OnAnimEvent_AllowInput( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_DisallowInput( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_DisallowHitAnim( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_AllowHitAnim( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_AllowBlend( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_QuickSlotItems( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_SetRagdoll( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_InAirKDCheck( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_EquipMedallion( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_HideMedallion( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnDiving( dir : Int32) : Bool;  // flags: 65568 
  public event function OnDive() : Bool;  // flags: 65568 
  public event function OnCheckDiving() : Bool;  // flags: 65568 
  public event function OnAllowShallowWaterCheck() : Bool;  // flags: 65568 
  public event function OnCheckUnconscious() : Bool;  // flags: 65568 
  public event function OnAllowSwimmingSprint() : Bool;  // flags: 65568 
  public event function OnAllowedDiveDown() : Bool;  // flags: 65568 
  public event function OnDiveInput( divePitch : Float) : Bool;  // flags: 65568 
  public event function OnIsCameraUnderwater() : Bool;  // flags: 65568 
  public event function OnHitGround() : Bool;  // flags: 65568 
  public event function OnHitCeiling() : Bool;  // flags: 65568 
  private function SetTerrModifier( val : Float);  // flags: 16384 
  private function SetTerrTypeOne( type : ETerrainType);  // flags: 16384 
  private function SetTerrTypeTwo( type : ETerrainType);  // flags: 16384 
  public function SteppedOnTerrain( type : ETerrainType);  // flags: 65536 
  public function PlayerCanComment() : Bool;  // flags: 65536 
  public function PlayerCanPlayMonsterCommentary() : Bool;  // flags: 65536 
  public function PlayerCommentary( commentaryType : EPlayerCommentary,  optional  newCommentaryCooldown : Float);  // flags: 65536 
  public function TurnOffOneliner( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function CanPlaySpecificVoiceset() : Bool;  // flags: 65536 
  public function SetCanPlaySpecificVoiceset( val : Bool);  // flags: 65536 
  public function ResetSpecificVoicesetFlag( dt : Float,  id : Int32);  // flags: 66560 
  public function GetThreatLevel() : Int32;  // flags: 65536 
  public function GetBIsCombatActionAllowed() : Bool;  // flags: 65536 
  public function SetVehicleCachedSign( sign : ESignType);  // flags: 65536 
  public function GetVehicleCachedSign() : ESignType;  // flags: 65536 
  public function GetMoney() : Int32;  // flags: 65536 
  public function AddMoney( amount : Int32);  // flags: 65536 
  public function RemoveMoney( amount : Int32);  // flags: 65536 
  public function GetThrowItemMode() : Bool;  // flags: 65536 
  public function GetEquippedSign() : ESignType;  // flags: 65536 
  public function GetCurrentlyCastSign() : ESignType;  // flags: 65536 
  public function IsCastingSign() : Bool;  // flags: 65536 
  public function IsCurrentSignChanneled() : Bool;  // flags: 65536 
  public function OnRadialMenuItemChoose( selectedItem : String);  // flags: 65536 
  public function UpdateQuickSlotItems() : Bool;  // flags: 65536 
  public function SetUpdateQuickSlotItems( bUpdate : Bool);  // flags: 65536 
  public function RemoveAllPotionEffectsBut( skip : CBaseGameplayEffect);  // flags: 65536 
  public function BreakPheromoneEffect() : Bool;  // flags: 65536 
  public function GetCurrentTrackedQuestSystemObjectives() : array<SJournalQuestObjectiveData>;  // flags: 65536 
  public function SetCurrentTrackedQuestSystemObjectives( cTQO : array<SJournalQuestObjectiveData>);  // flags: 65536 
  public function GetCurrentTrackedQuestObjectives() : array<SJournalQuestObjectiveData>;  // flags: 65536 
  public function SetCurrentTrackedQuestObjectives( cTQO : array<SJournalQuestObjectiveData>);  // flags: 65536 
  public function GetCurrentTrackedQuestGUID() : CGUID;  // flags: 65536 
  public function SetCurrentTrackedQuestGUID( cTQG : CGUID);  // flags: 65536 
  public function HAXCheckIfNew( checkGUID : CGUID) : Bool;  // flags: 65536 
  public function GetShowHud() : Bool;  // flags: 65536 
  public function SetShowHud( value : Bool);  // flags: 65536 
  public function DebugKillAll();  // flags: 65536 
  public event function OnHitByObstacle( obstacleComponent : CComponent) : Bool;  // flags: 65568 
  public function DEBUGGetDisplayRadiusMinimapIcons() : Bool;  // flags: 65536 
  public function DEBUGSetDisplayRadiusMinimapIcons( inValue : Bool);  // flags: 65536 
  public function Dbg_UnlockAllActions();  // flags: 65536 
  public event function OnCriticalStateAnimStop() : Bool;  // flags: 65568 
  public event function OnRecoverFromRagdollEnd() : Bool;  // flags: 65568 
  public function ReapplyCriticalBuff();  // flags: 65536 
  public function ReapplyCSTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function IsInAgony() : Bool;  // flags: 65536 
  public function GetOTCameraOffset() : Float;  // flags: 65536 
  public function IsKnockedUnconscious() : Bool;  // flags: 65536 
  public function IsSailing() : Bool;  // flags: 65536 
  public final function spawnBoatAndMount();  // flags: 65552 
  public function DelayedSpawnAndMountBoat( delta : Float,  id : Int32);  // flags: 66560 

}
import class CSpawnTreeInitializerToggleMonsterDefaultIdleBehaviors extends ISpawnTreeInitializerToggleBehavior {

  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeInitializerToggleMonsterSmallGuardAreaBehaviors extends ISpawnTreeInitializerToggleBehavior {

  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeInitializerToggleMonsterCanFlyIdle extends ISpawnTreeInitializerToggleBehavior {

  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeInitializerToggleAreaSceneActor extends ISpawnTreeInitializerToggleBehavior {

  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class ISpawnTreeCreatePortalEntityInitializer extends ISpawnTreeScriptedInitializer {

  public function Init( actor : CActor) : Bool;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class ISpawnAnimEntityInitializer extends ISpawnTreeScriptedInitializer {

  public function Init( actor : CActor) : Bool;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class ISpawnTreeSpawnAroundNodeInitializer extends ISpawnTreeScriptedInitializer {

  public function Init( actor : CActor) : Bool;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class ISpawnTreeSetLootInitializer extends ISpawnTreeScriptedInitializer {

  public function Init( actor : CActor) : Bool;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class ISpawnTreeAddItemInitializer extends ISpawnTreeScriptedInitializer {

  public function Init( actor : CActor) : Bool;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class ISpawnAddAbilityInitializer extends ISpawnTreeScriptedInitializer {

  public function Init( actor : CActor) : Bool;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class ISpawnSetNPCLevelInitializer extends ISpawnTreeScriptedInitializer {

  public function Init( actor : CActor) : Bool;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class ISpawnAddNPCLevelInitializer extends ISpawnTreeScriptedInitializer {

  public function Init( actor : CActor) : Bool;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeMonsterNestMonitorInitializer extends ISpawnTreeSpawnMonitorInitializer {

  public function MonitorCreatureSpawned( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function MonitorCreatureLost( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function MonitorCreatureKilled( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function GetNestInsideEncounter( encounter : CEncounter) : CMonsterNestEntity;  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeDeathCountMonitorInitializer extends ISpawnTreeSpawnMonitorInitializer {

  public function MonitorCreatureKilled( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeKilledCounterByEntryMonitorInitializer extends ISpawnTreeSpawnMonitorInitializer {

  public function MonitorCreatureKilled( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeSpawnedCounterMonitorInitializer extends ISpawnTreeSpawnMonitorInitializer {

  public function MonitorCreatureSpawned( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeSpawnedCounterByEntryMonitorInitializer extends ISpawnTreeSpawnMonitorInitializer {

  public function MonitorCreatureSpawned( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeCurrentlySpawnedCounterMonitorInitializer extends ISpawnTreeSpawnMonitorInitializer {

  public function MonitorCreatureSpawned( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeCurrentlySpawnedCounterByEntryMonitorInitializer extends ISpawnTreeSpawnMonitorInitializer {

  public function MonitorCreatureSpawned( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function MonitorCreatureKilled( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function MonitorCreatureLost( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class CSpawnTreeRiftSpawnedCounterMonitorInitializer extends ISpawnTreeSpawnMonitorInitializer {

  public function MonitorCreatureSpawned( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function GetRiftInsideEncounter( encounter : CEncounter) : CRiftEntity;  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class CRatClue_SpawnTreeDecorator extends ISpawnTreeScriptedDecorator {

  public function OnActivate( encounter : CEncounter) : IScriptable;  // flags: 65536 
  public function OnDeactivate( encounter : CEncounter);  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 
  public latent function Main( userData : IScriptable);  // flags: 65600 

}
import class CCrowClue_SpawnTreeDecorator extends ISpawnTreeScriptedDecorator {

  public function OnActivate( encounter : CEncounter) : IScriptable;  // flags: 65536 
  public function OnDeactivate( encounter : CEncounter);  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 
  public latent function Main( userData : IScriptable);  // flags: 65600 

}
import class W3ActorIdleTrigger extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function SignalIsInsideArea( t : Float,  id : Int32);  // flags: 66560 

}
import class W3GameplayTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3MagicBubbleEntity extends W3BuffImmunityEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function ToggleActivate( toggle : Bool);  // flags: 65536 
  public function ScaleOverTime( scale : Vector,  duration : Float);  // flags: 65536 
  private function ScaleUpdate( dt : Float,  id : Int32);  // flags: 17408 
  public function SetScale( scale : Vector);  // flags: 65536 

}
import class W3BlockGameplayActionsTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private function UpdateHud( block : Bool);  // flags: 16384 

}
import class W3ConditionHasEffect extends W3Condition {

  public function Test( actor : CActor) : Bool;  // flags: 65536 

}
import class W3EffectImmunityAreaTrigger extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3FastTravel extends W3GameplayTrigger {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class CHorseCorrectionTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class CHorseJumpTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private function CheckOrientation( dt : Float,  id : Int32);  // flags: 17408 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3KillTrigger extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function PostponedKills( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3LocationArea extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3MinimapZoomScaleTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3MusicBandActivatorArea extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnDetaching() : Bool;  // flags: 65568 
  public function StartMusic();  // flags: 65536 
  public function StopMusic();  // flags: 65536 
  public function UpdateActiveMusicians() : Bool;  // flags: 65536 
  public function Update( timeDelta : Float,  id : Int32);  // flags: 66560 

}
import class W3SafeModeTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3SettlementTrigger extends CR4JournalPlaceEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function DisplayAreaInfo();  // flags: 65536 
  public function ActivateJournalEntry();  // flags: 65536 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function SetReenterTimer();  // flags: 65536 
  private function ReenterTimer( delta : Float,  id : Int32);  // flags: 17408 
  public function SetLoadTimer();  // flags: 65536 
  private function LoadTimer( delta : Float,  id : Int32);  // flags: 17408 

}
import class W3UnlimitedDivingArea extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class CVFXTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class CGhost extends CNewNPC {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 

}
import class CGhostComponent extends CR4Component {

  public event function OnComponentAttachFinished() : Bool;  // flags: 65568 

}
import class W3IllusionaryAppearance extends W3IllusionaryObstacle {

  public function Dispel();  // flags: 65536 
  private function RemoveIllusion( _delta : Float,  id : Int32);  // flags: 17408 

}
import class W3IllusionaryObstacleStateDefault extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3IllusionaryObstacleStateInteracting extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function Interacting();  // flags: 65664 
  public latent function WaitForUseItemAction();  // flags: 65600 

}
import class W3IllusionaryObstacleStateDestroying extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3BeehiveStandingEntityStateAgitated extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function BrokenEntryFunctionNamesCollision_W3BeehiveStandingEntity_Agitated_Loop();  // flags: 65664 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 

}
import class W3BeeSwarmStateReturnToOrigin extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function BeeSwarm_ReturnToOrigin_Loop();  // flags: 65664 

}
import class W3BeeSwarmStatePursueTarget extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function BeeSwarm_PursueTarget_Loop();  // flags: 65664 

}
import class W3BeeSwarmStateBeeSwarm_Idle extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function BeeSwarm_Idle_Loop();  // flags: 65664 

}
import class W3BeeSwarmStateFarFromPlayer extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 
  public function BeeSwarm_FarFromPlayer_Loop();  // flags: 65664 

}
import class W3BeeSwarmStateDisabled extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3BeeSwarmStateStationary extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CBoatRacingGateEntityStateActive extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 
  private function EnableTrigger( toggle : Bool);  // flags: 16384 
  private function EnableMappin( toggle : Bool);  // flags: 16384 
  private function EnableHudMarker( toggle : Bool);  // flags: 16384 

}
import class W3FireSourceLifeRegen extends W3FireSource {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function LifeRegenUpdate( deltaTime : Float,  id : Int32);  // flags: 66560 
  private function ApplyEffects( target : CActor);  // flags: 16384 
  private function RemoveEffects( target : CActor);  // flags: 16384 

}
import class CGateEntityStateClosed extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  private function Close();  // flags: 16384 

}
import class CGateEntityStateOpened extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  private function Open();  // flags: 16384 

}
import class W3IceWall extends CGameplayEntity {

  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 

}
import class CMeteoriteStormEntity extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Execute( actor : CActor);  // flags: 65536 

}
import class CMeteoriteStormEntityStateStorm extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function Run();  // flags: 65664 
  public function Spawn( position : Vector);  // flags: 65536 
  public function FindPosition() : Vector;  // flags: 65536 
  protected function IsPositionValid( out  whereTo : Vector) : Bool;  // flags: 32768 

}
import class CSkullPileEntity extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3WeatherShrine extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  private function ChangeWeatherTo( newWeather : CName) : Bool;  // flags: 16384 
  private function ChangingWeatherStarted();  // flags: 16384 
  private function EnableInteracitons( dt : Float,  id : Int32);  // flags: 17408 

}
import class W3OilBarrelDestroyedEvent extends CScriptedAction {

  public function PerformArgNode( parnt : CEntity,  node : CNode);  // flags: 65536 

}
import class COilBarrelEntity extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  private function EnableOnFireDamageArea();  // flags: 16384 
  public function SetOnFire( explTime : Float,  randomize : Bool);  // flags: 65536 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function OnFireTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function Explosion( deltaTime : Float,  optional  id : Int32);  // flags: 66560 
  private function GatherTargets() : array<CGameplayEntity>;  // flags: 16384 
  public function DestroyEnt( deltaTime : Float,  id : Int32);  // flags: 66560 
  public event function OnManageOilBarrel( operations : array<EOilBarrelOperation>) : Bool;  // flags: 65568 
  public function CanShowFocusInteractionIcon() : Bool;  // flags: 65536 

}
import class W3MeteorItem extends W3QuestUsableItem {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnUsed( usedBy : CEntity) : Bool;  // flags: 65568 

}
import class W3EyeOfLoki extends W3QuestUsableItem {

  public event function OnUsed( usedBy : CEntity) : Bool;  // flags: 65568 
  public event function OnHidden( hiddenBy : CEntity) : Bool;  // flags: 65568 

}
import class W3HornvalHorn extends W3QuestUsableItem {

  public event function OnUsed( usedBy : CEntity) : Bool;  // flags: 65568 

}
import class W3FiendLure extends W3QuestUsableItem {

  public event function OnUsed( usedBy : CEntity) : Bool;  // flags: 65568 

}
import class W3AardObstacleStateNewWall extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 

}
import class W3AardObstacleStateWallStageOne extends CScriptableState {

  public event function OnStateEnter( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 

}
import class W3AardObstacleStateWallStageTwo extends CScriptableState {

  public event function OnStateEnter( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 

}
import class W3AardObstacleStateWallStageThree extends CScriptableState {

  public event function OnStateEnter( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 

}
import class W3FlammableDamageEntityStateUntouched extends CScriptableState {

  public event function OnStateEnter( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 

}
import class W3FlammableDamageEntityStateBurnt extends CScriptableState {

  public event function OnStateEnter( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 

}
import class W3BridgeStateOnIdle extends W3DestroyableTerrainStateOnIdle {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 
  public function OnSwimInit();  // flags: 65664 
  public function tickTimerSwim( time : Float,  id : Int32);  // flags: 66560 

}
import class W3BridgeStateOnPreDestroy extends W3DestroyableTerrainStateOnPreDestroy {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 
  public function OnPreSplitInit();  // flags: 65664 
  public function tickTimerPreSplit( time : Float,  id : Int32);  // flags: 66560 

}
import class W3BridgeStateOnDestroy extends W3DestroyableTerrainStateOnDestroy {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 
  public function OnSplitInit();  // flags: 65664 

}
import class W3FloeEntityStateOnIdle extends W3DestroyableTerrainStateOnIdle {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 
  public function OnSwimInit();  // flags: 65664 
  public function tickTimerSwim( time : Float,  id : Int32);  // flags: 66560 

}
import class W3FloeEntityStateOnPreDestroy extends W3DestroyableTerrainStateOnPreDestroy {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 
  public function OnPreSplitInit();  // flags: 65664 
  public function tickTimerPreSplit( time : Float,  id : Int32);  // flags: 66560 

}
import class W3FloeEntityStateOnDestroy extends W3DestroyableTerrainStateOnDestroy {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 
  public function OnSplitInit();  // flags: 65664 

}
import class W3IgniObstacleEntityStateCompleteWall extends CScriptableState {

  public event function OnStateEnter( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 

}
import class W3IgniObstacleEntityStateFirstLevelDegradation extends CScriptableState {

  public event function OnStateEnter( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 

}
import class W3IgniObstacleEntityStateSecondLevelDegradation extends CScriptableState {

  public event function OnStateEnter( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 

}
import class CLightEntitySimpleWithEffectImmunity extends CLightEntitySimple {

  private function TurnLightOn();  // flags: 16384 
  private function TurnLightOffAfter( td : Float,  id : Int32);  // flags: 17408 
  private function TurnLightOff();  // flags: 16384 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  private function ApplyEffects( target : CActor);  // flags: 16384 
  private function RemoveEffects( target : CActor);  // flags: 16384 

}
import class W3NewDoor extends W3LockableEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function GetOpeningAngle() : Float;  // flags: 65536 
  public event function OnPlayerOpenedDoors() : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function IsOpen() : Bool;  // flags: 65536 
  public function Unlock();  // flags: 65536 
  protected function OnLock();  // flags: 32768 
  public event function OnOpened() : Bool;  // flags: 65568 
  public event function OnCombatStarted() : Bool;  // flags: 65568 
  public event function OnCombatEnded() : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnStateChange( newState : Bool) : Bool;  // flags: 65568 
  public event function OnActionNameChanged() : Bool;  // flags: 65568 
  public function Enable( e : Bool,  optional  skipInteractionUpdate : Bool,  optional  questForcedEnable : Bool);  // flags: 65536 
  public event function OnManageNewDoor( operations : array<ENewDoorOperation>,  force : Bool) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnDoorActivation() : Bool;  // flags: 65568 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public final function UpdateIconOffset( delta : Float,  id : Int32);  // flags: 66576 

}
import class CScriptBatchQueryAccessor extends IScriptable {

  import public latent final function RayCast( start : Vector,  end : Vector,  out  result : array<SRaycastHitResult>,  optional  collisionGroupsNames : array<CName>,  optional  queryFlags : Int32) : Bool;  // flags: 65625 
  import public final function RayCastSync( start : Vector,  end : Vector,  out  result : array<SRaycastHitResult>,  optional  collisionGroupsNames : array<CName>) : Bool;  // flags: 65561 
  import public final function RayCastAsync( start : Vector,  end : Vector,  optional  collisionGroupsNames : array<CName>,  optional  queryFlags : Int32) : SScriptRaycastId;  // flags: 65561 
  import public latent final function RayCastDir( start : Vector,  direction : Vector,  distance : Float,  out  result : array<SRaycastHitResult>,  optional  collisionGroupsNames : array<CName>,  optional  queryFlags : Int32) : Bool;  // flags: 65625 
  import public final function RayCastDirSync( start : Vector,  direction : Vector,  distance : Float,  out  result : array<SRaycastHitResult>,  optional  collisionGroupsNames : array<CName>) : Bool;  // flags: 65561 
  import public final function RayCastDirAsync( start : Vector,  direction : Vector,  distance : Float,  optional  collisionGroupsNames : array<CName>,  optional  queryFlags : Int32) : SScriptRaycastId;  // flags: 65561 
  import public final function GetRayCastState( queryId : SScriptRaycastId,  out  result : array<SRaycastHitResult>) : EBatchQueryState;  // flags: 65561 
  import public latent final function Sweep( start : Vector,  end : Vector,  radius : Float,  out  result : array<SSweepHitResult>,  optional  collisionGroupsNames : array<CName>,  optional  queryFlags : Int32) : Bool;  // flags: 65625 
  import public final function SweepAsync( start : Vector,  end : Vector,  radius : Float,  optional  collisionGroupsNames : array<CName>,  optional  queryFlags : Int32) : SScriptSweepId;  // flags: 65561 
  import public latent final function SweepDir( start : Vector,  direction : Vector,  radius : Float,  distance : Float,  out  result : array<SSweepHitResult>,  optional  collisionGroupsNames : array<CName>,  optional  queryFlags : Int32) : Bool;  // flags: 65625 
  import public final function SweepDirAsync( start : Vector,  direction : Vector,  radius : Float,  distance : Float,  optional  collisionGroupsNames : array<CName>,  optional  queryFlags : Int32) : SScriptSweepId;  // flags: 65561 
  import public final function GetSweepState( queryId : SScriptSweepId,  out  result : array<SSweepHitResult>) : EBatchQueryState;  // flags: 65561 

}
import class RangedWeaponStateState_WeaponWait extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnRangedWeaponPress() : Bool;  // flags: 65568 
  public event function OnRangedWeaponRelease() : Bool;  // flags: 65568 
  private function PerformDraw( pressed : Bool);  // flags: 16384 
  public function DelayedProcessFullBodyAnimWeight();  // flags: 65664 
  public function DrawEvent();  // flags: 65664 

}
import class RangedWeaponStateState_WeaponDraw extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function Equip();  // flags: 65664 
  public cleanup function CancelledEquiping();  // flags: 73728 

}
import class RangedWeaponStateState_WeaponReload extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  private function RotateOwnerToCamera();  // flags: 16384 
  private function UpdateCustomRotationHeadingTimer( timeDelta : Float,  id : Int32);  // flags: 17408 
  private function Lock();  // flags: 16384 
  private function Unlock();  // flags: 16384 

}
import class RangedWeaponStateState_WeaponAim extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnRangedWeaponPress() : Bool;  // flags: 65568 
  public event function OnRangedWeaponRelease() : Bool;  // flags: 65568 
  public function CheckGotoAimThrow();  // flags: 65664 
  public event function OnWeaponShootStart() : Bool;  // flags: 65568 
  public function UpdateCustomRotationHeadingTimer( timeDelta : Float,  id : Int32);  // flags: 66560 
  private function Lock();  // flags: 16384 
  private function Unlock();  // flags: 16384 

}
import class RangedWeaponStateState_WeaponShoot extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnProcessThrowEvent( animEventName : CName) : Bool;  // flags: 65568 
  public event function OnRangedWeaponPress() : Bool;  // flags: 65568 
  public event function OnRangedWeaponRelease() : Bool;  // flags: 65568 

}
import class RangedWeaponStateState_WeaponHolster extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function Unequip();  // flags: 65664 
  public event function OnRangedWeaponPress() : Bool;  // flags: 65568 
  public cleanup function CancelledEquiping();  // flags: 73728 

}
import class W3DynamicBlood extends W3MonsterClue {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 

}
import class W3EredinIceSpike extends W3DurationObstacle {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Appear();  // flags: 65536 
  public function Explode( deltaTime : Float,  optional  id : Int32);  // flags: 66560 

}
import class W3AardEntityStateAardConeCast extends W3SignEntityStateNormalCast {

  public event function OnThrowing() : Bool;  // flags: 65568 

}
import class W3AardEntityStateAardCircleCast extends W3SignEntityStateNormalCast {

  public event function OnThrowing() : Bool;  // flags: 65568 

}
import class W3MeteorProjectile extends W3FireballProjectile {

  protected function VictimCollision( victim : CGameplayEntity);  // flags: 32768 
  protected function DeactivateProjectile( optional  victim : CGameplayEntity);  // flags: 32768 
  protected function Explode();  // flags: 32768 
  protected function ProjectileHitGround();  // flags: 32768 
  public event function OnProjectileShot( targetCurrentPosition : Vector,  optional  target : CNode) : Bool;  // flags: 65568 

}
import class W3AxiiEntityStateAxiiCast extends W3SignEntityStateNormalCast {

  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 

}
import class W3AxiiEntityStateAxiiChanneled extends W3SignEntityStateChanneling {

  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnProcessSignEvent( eventName : CName) : Bool;  // flags: 65568 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 
  public function ChannelAxii();  // flags: 65664 

}
import class W3IgniEntityStateIgniCast extends W3SignEntityStateNormalCast {

  public event function OnThrowing() : Bool;  // flags: 65568 
  private function ProcessThrow();  // flags: 16384 
  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 

}
import class W3IgniEntityStateIgniChanneled extends W3SignEntityStateChanneling {

  public function GetReusableProjectile( spawnPos : Vector,  spawnRot : EulerAngles,  dt : Float) : W3IgniProjectile;  // flags: 65536 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 
  public function ChannelIgni();  // flags: 65664 
  public function CleanUp();  // flags: 65536 
  private function ProcessThrow( dt : Float);  // flags: 16384 

}
import class W3QuenEntityStateExpired extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3QuenEntityStateShieldActive extends W3SignEntityStateActive {

  private final function GetLastingFxName() : CName;  // flags: 16400 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 
  public event function OnTargetHit( out  damageData : W3DamageAction) : Bool;  // flags: 65568 

}
import class W3QuenEntityStateQuenShield extends W3SignEntityStateNormalCast {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 

}
import class W3QuenEntityStateQuenChanneled extends W3SignEntityStateChanneling {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 
  public function ChannelQuen();  // flags: 65664 
  private function ProcessQuenCollisionForRiders();  // flags: 16384 
  public function ShowHitFX( damageData : W3DamageAction,  rot : EulerAngles);  // flags: 65536 
  public event function OnTargetHit( out  damageData : W3DamageAction) : Bool;  // flags: 65568 

}
import class W3SignEntityStateFinished extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 

}
import class W3YrdenEntityStateYrdenCast extends W3SignEntityStateNormalCast {

  public event function OnThrowing() : Bool;  // flags: 65568 

}
import class W3YrdenEntityStateYrdenChanneled extends W3SignEntityStateChanneling {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 
  public function ChannelYrden();  // flags: 65664 

}
import class W3YrdenEntityStateYrdenSlowdown extends W3SignEntityStateActive {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  private function CleanUp();  // flags: 16384 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnSignAborted( force : Bool) : Bool;  // flags: 65568 
  public function ActivateSlowdown();  // flags: 65664 
  private function CreateTrap();  // flags: 16384 
  private function Trace( comp : CComponent,  out  outZDiff : Float) : Bool;  // flags: 16384 
  public function YrdenSlowdown_Loop();  // flags: 65664 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3YrdenEntityStateDischarged extends W3SignEntityStateActive {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function YrdenExpire();  // flags: 65664 

}
import class ThrowingCamera extends ICustomCameraScriptedPivotPositionController {

  protected function ControllerUpdate( out  currentPosition : Vector,  out  currentVelocity : Vector,  timeDelta : Float);  // flags: 32768 

}
import class CThrowableStateAiming extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function AimThrowable();  // flags: 65664 
  public event function OnStopAiming( flag : Bool) : Bool;  // flags: 65568 
  public event function OnProcessThrowEvent( animEventName : CName) : Bool;  // flags: 65568 

}
import class W3Dimeritium extends W3Petard {

  protected function ProcessMechanicalEffect( targets : array<CGameplayEntity>,  isImpact : Bool,  optional  dt : Float);  // flags: 32768 
  protected function LoopFunction( dt : Float);  // flags: 32768 
  public function DisableAffectedFx( dt : Float,  id : Int32);  // flags: 66560 
  protected function ProcessTargetOutOfArea( entity : CGameplayEntity);  // flags: 32768 

}
import class W3DragonsDream extends W3Petard {

  protected function ProcessMechanicalEffect( targets : array<CGameplayEntity>,  isImpact : Bool,  optional  dt : Float);  // flags: 32768 
  protected function OnTimeEndedFunction( dt : Float);  // flags: 32768 
  protected function DestroyWhenNoFXPlayedFunction( dt : Float) : Bool;  // flags: 32768 
  private function GetExplodingTargetDamages() : array<SRawDamage>;  // flags: 16384 

}
import class W3Samum extends W3Petard {

  protected function LoadDataFromItemXMLStats();  // flags: 32768 

}
import class W3PressureSwitch extends W3PhysicalSwitch {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public function OnCheckInventoryEntities( delta : Float,  id : Int32);  // flags: 66560 
  public function TurnOnIfPossible( entity : CEntity);  // flags: 65536 
  public function TurnOffIfPossible( entity : CEntity);  // flags: 65536 
  public function OnDelayedTurnOn( delta : Float,  id : Int32);  // flags: 66560 
  public function OnDelayedTurnOff( delta : Float,  id : Int32);  // flags: 66560 

}
import class W3VirtualSwitch_Combination extends W3VirtualSwitch {

  public function Notify( activeSwitch : W3Switch);  // flags: 65536 

}
import class W3VirtualSwitch_Sequence extends W3VirtualSwitch {

  public function Notify( activeSwitch : W3Switch);  // flags: 65536 
  protected function Fail( failed : W3Switch);  // flags: 32768 
  protected function ResetSwitches();  // flags: 32768 

}
import class W3SE_AddBuff extends W3SwitchEvent {

  public function PerformArgNode( parnt : CEntity,  node : CNode);  // flags: 65536 

}
import class W3SE_CustomScript extends W3SwitchEvent {

  private function Perform( parnt : CEntity);  // flags: 16384 

}
import class W3SE_EnableTreasureHuntMappin extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_Encounter extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_Fact extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_ManageClue extends W3SwitchEvent {

  public function PerformArgNode( parnt : CEntity,  node : CNode);  // flags: 65536 

}
import class W3SE_ManageContainer extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_ManageDoor extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_ManageFocusArea extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_ManageGate extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_ManageNewDoor extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_ManageOilBarrel extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_ManagePchysicalDamageMechanism extends W3SwitchEvent {

  public function PerformArgNode( parnt : CEntity,  node : CNode);  // flags: 65536 

}
import class W3SE_ManageSwitch extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_ManageToxicCloud extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_ManageTrap extends W3SwitchEvent {

  public function PerformArgNode( parnt : CEntity,  node : CNode);  // flags: 65536 

}
import class W3SE_PerformableAction extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 
  public function PerformArgNode( parnt : CEntity,  node : CNode);  // flags: 65536 
  public function PerformArgFloat( parnt : CEntity,  value : Float);  // flags: 65536 

}
import class W3SE_PlayAnimationOnEntity extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 
  private function DamageIfDamager( animatingEntity : CGameplayEntity);  // flags: 16384 

}
import class W3SE_PlayEffectOnActivator extends W3SwitchEvent {

  public function PerformArgNode( parnt : CEntity,  node : CNode);  // flags: 65536 

}
import class W3SE_PlayEffectOnEntity extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_PlayEffectOnSwitch extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_SetAppearanceOnEntity extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3SE_SpawnEntity extends W3SwitchEvent {

  public function Perform( _Parent : CEntity);  // flags: 65536 
  private function DestroySpawnedEntity( _deltaTime : Float,  optional  id : Int32);  // flags: 17408 

}
import class W3SE_UseRiddleNode extends W3SwitchEvent {

  public function Perform( parnt : CEntity);  // flags: 65536 

}
import class W3MicroQuestActivatorStateProcessing extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function ChooseMicroQuest();  // flags: 65536 

}
import class W3MicroQuestActivatorStateActivated extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function ClearFacts();  // flags: 65664 
  public function InactiveInMicroQuestActivator( deltaTime : Float,  id : Int32);  // flags: 66560 

}
import class W3MicroQuestActivatorStateInactive extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class BTTaskChangeSummonedEntityMovement extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  private function ChangeValues();  // flags: 16384 

}
import class CHeartMinibossStateIdle extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function SleepIdle();  // flags: 65664 
  public function StartCombat();  // flags: 65664 

}
import class CHeartMinibossStateFullyCovered extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CHeartMinibossStateFourRoots extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CHeartMinibossStateTwoRoots extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CHeartMinibossStateNoRoots extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CHeartMinibossStateHeartHitOnce extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CHeartMinibossStateDead extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3SummonedFlies extends CGameplayEntity {

  public function SetTarget( _Target : CNode);  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Init( _Summoner : CActor,  _Target : CEntity);  // flags: 65536 
  public function OnSummonerEnterCombat();  // flags: 65536 
  public function OnSummonerLeaveCombat();  // flags: 65536 
  private function LookForTarget( _Dt : Float,  id : Int32);  // flags: 17408 
  private function PursueTarget( _Dt : Float,  id : Int32);  // flags: 17408 
  private final function StopPursue();  // flags: 16400 
  public function Die( optional  _Dt : Float,  optional  id : Int32);  // flags: 65536 
  public function StartFlee();  // flags: 65536 
  private function Flee( _Dt : Float,  id : Int32);  // flags: 17408 
  private function StopFlee( _Dt : Float,  id : Int32);  // flags: 17408 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnWeaponHit( act : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnYrdenHit( caster : CGameplayEntity) : Bool;  // flags: 65568 

}
import class W3WitchesCageStateTurnedOff extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3WitchesCageStateTurnedOn extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3ClueConditionDistance extends W3ClueCondition {

  public function CheckCondition( waypoint : CNode) : Bool;  // flags: 65536 

}
import class W3ClueConditionFact extends W3ClueCondition {

  public function CheckCondition( waypoint : CNode) : Bool;  // flags: 65536 

}
import class W3LessunClue extends CFlyingCrittersLairEntityScript {

  public function GetGroupPos() : Vector;  // flags: 65536 
  public function SetCurrentSoundClue( isCurrent : Bool);  // flags: 65536 
  public function FirstActivation( scriptInput : CFlyingSwarmScriptInput,  deltaTime : Float);  // flags: 65536 
  public function OnDeactivated( scriptInput : CFlyingSwarmScriptInput,  deltaTime : Float);  // flags: 65536 
  public function OnActivated( scriptInput : CFlyingSwarmScriptInput,  deltaTime : Float);  // flags: 65536 
  public function SetCurrentState( clueState : EBoidClueState);  // flags: 65536 
  public function OnTick( scriptInput : CFlyingSwarmScriptInput,  active : Bool,  deltaTime : Float);  // flags: 65536 
  public function CalculateSoundAimParameter();  // flags: 65536 
  public function MoveClueAway();  // flags: 65536 
  public function TimerDestroyClue( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function ResetClue( timeDelta : Float,  id : Int32);  // flags: 66560 

}
import class W3MonsterClueAnimated extends W3MonsterClue {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function ResetPos();  // flags: 65536 
  public event function OnAnimEvent_Custom( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnUpdateFocus( distance : Float,  accuracy : Float) : Bool;  // flags: 65568 

}
import class W3LeshyRootProjectile extends CProjectileTrajectory {

  public function SetOwner( actor : CActor);  // flags: 65536 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public function DelayDamage( time : Float);  // flags: 65536 
  public function DelayDamageTimer( delta : Float,  id : Int32);  // flags: 66560 
  public event function OnRangeReached() : Bool;  // flags: 65568 
  public function Expired() : Bool;  // flags: 65536 
  public function TimeDestroy( deltaTime : Float,  id : Int32);  // flags: 66560 

}
import class W3SonarEnttity extends CEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function HighlightObjects( range : Float,  optional  time : Float);  // flags: 65536 
  public function DestroySonarFX( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function ScaleSonarFX( deltaTime : Float,  id : Int32);  // flags: 66560 

}
import class W3SpawnMarker extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  private function SpawnEntity( optional  _DeltaTime : Float,  id : Int32);  // flags: 17408 

}
import class W3POIDispenserStateActive extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function ActivationInit();  // flags: 65664 

}
import class W3POIDispenserStateInactive extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function DeactivationInit();  // flags: 65664 

}
import class W3Water extends CEntity {

  public event function OnWaterTriggerEnter( activator : CComponent) : Bool;  // flags: 65568 
  public event function OnWaterTriggerLeave( activator : CComponent) : Bool;  // flags: 65568 

}
import class CScriptedAction extends IPerformableAction {

  public function Perform( parnt : CEntity);  // flags: 65536 
  public function PerformArgNode( parnt : CEntity,  node : CNode);  // flags: 65536 
  public function PerformArgFloat( parnt : CEntity,  value : Float);  // flags: 65536 

}
import class TutorialListData extends TextPopupData {

  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 
  protected function GetTutorialList( out  tutorialList : CScriptedFlashArray,  parentFlashValueStorage : CScriptedFlashValueStorage);  // flags: 32768 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 
  protected function DefineDefaultButtons();  // flags: 32768 
  protected function GetContentRef() : String;  // flags: 32768 

}
import class TutorialBlockerData extends TextPopupData {

  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 
  public function forceClose();  // flags: 65536 
  protected function ClosePopup();  // flags: 32768 
  protected function DefineDefaultButtons();  // flags: 32768 
  protected function GetContentRef() : String;  // flags: 32768 

}
import class CR4HudModuleBoatHealth extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function SetEnabled( value : Bool);  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  private function UpdateVolumes();  // flags: 16384 
  private function ClearVolumes();  // flags: 16384 

}
import class CR4HudModuleBuffs extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  private function buffListHasChanged( currentEffects : array<CBaseGameplayEffect>,  previousEffects : array<CBaseGameplayEffect>) : Bool;  // flags: 16384 
  public function UpdateBuffs();  // flags: 65536 
  protected function UpdateScale( scale : Float,  flashModule : CScriptedFlashSprite) : Bool;  // flags: 32768 
  protected function UpdatePosition( anchorX : Float,  anchorY : Float);  // flags: 32768 
  public event function OnBuffsDisplay( value : Bool) : Bool;  // flags: 65568 

}
import class CR4HudModuleDebugFastMenu extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateFastMenuEntries();  // flags: 65536 
  public function IsDebugPagesAvailable() : Bool;  // flags: 65536 
  public event function OnFastMenu( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnShowFastMenu( opened : Bool) : Bool;  // flags: 65568 
  public event function OnItemChosen( choosenPanelId : CName) : Bool;  // flags: 65568 

}
import class CR4HudModuleHorsePanicBar extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  private function UpdatePanic();  // flags: 16384 
  private function GetCurrentPanic() : Float;  // flags: 16384 
  protected function UpdatePosition( anchorX : Float,  anchorY : Float);  // flags: 32768 

}
import class CR4HudModuleHorseStaminaBar extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  private function UpdateStamina();  // flags: 16384 
  private function GetCurrentStamina() : Float;  // flags: 16384 
  protected function UpdatePosition( anchorX : Float,  anchorY : Float);  // flags: 32768 

}
import class CR4HudModuleLootPopup extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  protected function UpdateScale( scale : Float,  flashModule : CScriptedFlashSprite) : Bool;  // flags: 32768 
  public function PopulateData();  // flags: 65536 
  public function CompareItemsStats( itemStats : array<SAttributeTooltip>,  compareItemStats : array<SAttributeTooltip>,  out  compResult : CScriptedFlashArray);  // flags: 65536 
  public function GetItemRarityDescription( item : SItemUniqueId,  tooltipInv : CInventoryComponent) : String;  // flags: 65536 
  public function Open( con : W3Container);  // flags: 65536 
  public event function OnCloseLootWindow() : Bool;  // flags: 65568 
  public event function OnPopupTakeAllItems() : Bool;  // flags: 65568 
  public event function OnPopupTakeItem( Id : Int32) : Bool;  // flags: 65568 
  protected function SignalLootingReactionEvent();  // flags: 32768 
  protected function SignalStealingReactionEvent();  // flags: 32768 
  protected function SignalContainerClosedEvent();  // flags: 32768 
  public function TakeAllAction();  // flags: 65536 
  public function ignoreActions( _Ignore : Bool);  // flags: 65536 
  public function ShowElement( bShow : Bool,  optional  bImmediately : Bool);  // flags: 65536 
  public function TestLineOfSight( node : CNode) : Bool;  // flags: 65536 
  public function IsNPCLookingAtPlayer( node : CNode) : Bool;  // flags: 65536 
  public function ProcessReaction( npc : CNewNPC);  // flags: 65536 

}
import class CR4HudModuleMedallion extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  private function UpdateActivation();  // flags: 16384 
  private function UpdateFocusPoints();  // flags: 16384 
  private function UpdateVitality();  // flags: 16384 
  private function UpdateMedalionShakeThreshold();  // flags: 16384 

}
import class CR4HudModulePickedItemsInfo extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function ShowElement( bShow : Bool,  optional  bImmediately : Bool);  // flags: 65536 
  public event function OnRemovePickedItemsInfoFirstItem() : Bool;  // flags: 65568 

}
import class CR4HudModuleStatBars extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  private function GetCurrentLevel();  // flags: 16384 
  private function UpdateStats();  // flags: 16384 
  private function UpdateVitality();  // flags: 16384 
  private function UpdateStamina();  // flags: 16384 
  private function updateStaminaIndicator();  // flags: 16384 
  private function UpdateToxicity();  // flags: 16384 
  private function UpdateExperience();  // flags: 16384 
  private function UpdateLevelUp();  // flags: 16384 
  public function OnHeavyAttackAnimationFinished();  // flags: 65536 
  public function OnHeavyAttackGlowFinished();  // flags: 65536 

}
import class CR4HudModuleTest extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 

}
import class CR4AutosaveWarningMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnRefresh() : Bool;  // flags: 65568 
  private function SetAutosaveMessageText();  // flags: 16384 
  public event function OnClosingMenu() : Bool;  // flags: 65568 

}
import class CR4MainCreditsMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnVideoStopped() : Bool;  // flags: 65568 
  protected function BuildCreditsSections();  // flags: 32768 
  public function DisplayNextSection();  // flags: 65536 
  public function GetLocalizedPositionAndDepartment( inString : String) : String;  // flags: 65536 
  public function FixColorString( str : String) : String;  // flags: 65536 
  public event function OnSectionHidden() : Bool;  // flags: 65568 
  public event function OnStopVideo() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 

}
import class CR4MainDbgStartQuestMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateMenuOptions();  // flags: 65536 
  public event function OnItemChosen( optionName : CName) : Bool;  // flags: 65568 
  public event function OnStartQuest( optionName : String) : Bool;  // flags: 65568 
  public event function OnBack() : Bool;  // flags: 65568 

}
import class CR4MainGammaMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnOptionValueChanged( groupId : Int32,  optionName : CName,  optionValue : String) : Bool;  // flags: 65568 
  protected function sendGammaValueInformation();  // flags: 32768 
  protected function FillSubMenuOptionsList( groupName : CName,  optionName : CName,  groupRootObject : CScriptedFlashObject);  // flags: 32768 

}
import class CR4RecapMoviesMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  private function SetupMoviesData();  // flags: 16384 
  public function GetCurrentBackgroundMovie() : String;  // flags: 65536 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnSkipMovie() : Bool;  // flags: 65568 
  public event function OnSwipe( swipe : Int32) : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function CloseMenuRequest();  // flags: 65536 
  protected function GatherBindersArray( out  resultArray : CScriptedFlashArray,  bindersList : array<SKeyBinding>,  optional  isContextBinding : Bool);  // flags: 32768 
  protected function UpdateInputFeedback();  // flags: 32768 
  public function SetButtons();  // flags: 65536 
  protected function AddInputBinding( label : String,  padNavCode : String,  optional  keyboardKeyCode : Int32);  // flags: 32768 
  public function PlayOpenSoundEvent();  // flags: 65536 
  public event function OnVideoSubtitles( subtitles : String) : Bool;  // flags: 65568 
  public event function OnVideoStarted() : Bool;  // flags: 65568 
  public event function OnVideoStopped() : Bool;  // flags: 65568 

}
import class CR4StartupMoviesMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  private function SetupMoviesData();  // flags: 16384 
  public function GetCurrentBackgroundMovie() : String;  // flags: 65536 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnSkipMovie() : Bool;  // flags: 65568 
  public event function OnSwipe( swipe : Int32) : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function CloseMenuRequest();  // flags: 65536 
  public event function OnVideoSubtitles( subtitles : String) : Bool;  // flags: 65568 
  protected function GatherBindersArray( out  resultArray : CScriptedFlashArray,  bindersList : array<SKeyBinding>,  optional  isContextBinding : Bool);  // flags: 32768 
  protected function UpdateInputFeedback();  // flags: 32768 
  public function SetButtons();  // flags: 65536 
  protected function AddInputBinding( label : String,  padNavCode : String,  optional  keyboardKeyCode : Int32);  // flags: 32768 
  public function PlayOpenSoundEvent();  // flags: 65536 
  public event function OnVideoStarted() : Bool;  // flags: 65568 
  public event function OnVideoStopped() : Bool;  // flags: 65568 

}
import class CR4CharacterPerksMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdatePerks();  // flags: 65536 
  public function UpdateBookPerks();  // flags: 65536 
  protected function GetSkillGFxObject( curSkill : SSkill,  out  dataObject : CScriptedFlashObject);  // flags: 32768 
  public function UpdatePlayerStatisticsData();  // flags: 65536 
  public function UpdateStatsTooltip( statName : String);  // flags: 65536 
  public event function OnGetSkillTooltipData( skillType : ESkill,  compareItemType : Int32) : Bool;  // flags: 65568 
  private function GetWeaponDamageStats( id : SItemUniqueId,  attackPower : SAbilityAttributeValue) : String;  // flags: 16384 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnUpdateCharacterButtons( skillName : String) : Bool;  // flags: 65568 
  public event function OnCharacterTabSelected( id : Int32) : Bool;  // flags: 65568 
  public event function OnModuleSelected( moduleID : Int32,  optional  moduleBindingName : String) : Bool;  // flags: 65568 
  public event function OnPlaySound( soundKey : String) : Bool;  // flags: 65568 

}
import class CR4CharacterSkillsMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateSkills();  // flags: 65536 
  private function CheckIfAvailable( skill : SSkill) : Bool;  // flags: 16384 
  private function GetCurrentSkillPoints() : Int32;  // flags: 16384 
  public function UpdatePlayerStatisticsData();  // flags: 65536 
  public function UpdateStatsTooltip( statName : String);  // flags: 65536 
  public function UpdateSkillTooltip( skillName : CName);  // flags: 65536 
  private function GetWeaponDamageStats( id : SItemUniqueId,  attackPower : SAbilityAttributeValue) : String;  // flags: 16384 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnUpdateCharacterButtons( skillName : String) : Bool;  // flags: 65568 
  public event function OnBuySkill( skillName : CName) : Bool;  // flags: 65568 
  public event function OnUpdateSkillTooltip( skillName : CName) : Bool;  // flags: 65568 
  public event function OnCharacterTabSelected( id : Int32) : Bool;  // flags: 65568 
  public event function OnPlaySound( soundKey : String) : Bool;  // flags: 65568 

}
import class CStoryScenePlayer extends CEntity {
  import var storyScene : CStoryScene; // 4000
  import var injectedScenes : array<CStoryScene>; // 4000
  import var isPaused : Uint16; // 4003
  import var isGameplay : Bool; // 4003

  import public function GetSceneWorldPos() : Vector;  // flags: 65545 
  import public function RestartScene();  // flags: 65545 
  import public function RestartSection();  // flags: 65545 
  import public final function DbFactAdded( factName : String);  // flags: 65561 
  import public final function DbFactRemoved( factName : String);  // flags: 65561 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function SetFinalboardQuest( isFinalboard : Bool);  // flags: 65536 
  public function ShouldRestoreItemsForPlayer( output : CStorySceneOutput) : Bool;  // flags: 65536 
  public event function OnBlockingSceneStarted( scene : CStoryScene) : Bool;  // flags: 65568 
  public event function OnBlockingSceneEnded( output : CStorySceneOutput) : Bool;  // flags: 65568 
  public event function OnCustceneStarted() : Bool;  // flags: 65568 
  public event function OnCutsceneEnded() : Bool;  // flags: 65568 
  public event function OnMovieStarted() : Bool;  // flags: 65568 
  public event function OnMovieEnded() : Bool;  // flags: 65568 

}
import class CCommonGame extends CGame {
  import var player : CPlayer; // 4000
  import var dlcManager : *CDLCManager; // 4000

  import public final function ScheduleWorldChangeToMapPin( worldPath : String,  mapPinName : CName);  // flags: 65561 
  import public final function ScheduleWorldChangeToPosition( worldPath : String,  position : Vector,  rotation : EulerAngles);  // flags: 65561 
  import public final function EnableSubtitles( enable : Bool);  // flags: 65561 
  import public final function AreSubtitlesEnabled() : Bool;  // flags: 65561 
  import public final function GetReactionsMgr() : CReactionsManager;  // flags: 65561 
  import public final function GetIngredientCategoryElements( catName : CName,  out  names : array<CName>,  out  priorities : array<Int32>);  // flags: 65561 
  import public final function IsIngredientCategorySpecified( catName : CName) : Bool;  // flags: 65561 
  import public final function GetIngredientCathegories() : array<CName>;  // flags: 65561 
  import public final function GetSetItems( setName : CName) : array<CName>;  // flags: 65561 
  import public final function GetItemSetAbilities( itemName : CName) : array<CName>;  // flags: 65561 
  import public final function GetDefinitionsManager() : CDefinitionsManagerAccessor;  // flags: 65561 
  import public final function QueryExplorationSync( entity : CEntity,  optional  queryContext : SExplorationQueryContext) : SExplorationQueryToken;  // flags: 65561 
  import public final function QueryExplorationFromObjectSync( entity : CEntity,  object : CEntity,  optional  queryContext : SExplorationQueryContext) : SExplorationQueryToken;  // flags: 65561 
  import public final function GetGlobalAttitude( srcGroup : CName,  dstGroup : CName) : EAIAttitude;  // flags: 65561 
  import public final function SetGlobalAttitude( srcGroup : CName,  dstGroup : CName,  attitude : EAIAttitude) : Bool;  // flags: 65561 
  import public final function GetReward( rewardName : CName,  out  rewrd : SReward) : Bool;  // flags: 65561 
  import public final function LoadLastGameInit( optional  suppressVideo : Bool);  // flags: 65561 
  import public final function LoadGameInit( info : SSavegameInfo);  // flags: 65561 
  import public final function GetLoadGameProgress() : ELoadGameResult;  // flags: 65561 
  import public final function ListSavedGames( out  fileNames : array<SSavegameInfo>) : Bool;  // flags: 65561 
  import public final function ImportSave( savegameInfo : SSavegameInfo) : Bool;  // flags: 65561 
  import public final function GetDisplayNameForSavedGame( savegame : SSavegameInfo) : String;  // flags: 65561 
  import public final function ListW2SavedGames( out  savedGames : array<SSavegameInfo>) : Bool;  // flags: 65561 
  import public final function SaveGame( type : ESaveGameType,  slot : Int32);  // flags: 65561 
  import public final function DeleteSavedGame( savegame : SSavegameInfo);  // flags: 65561 
  import public final function GetNumSaveSlots( type : ESaveGameType) : Int32;  // flags: 65561 
  import public final function GetSaveInSlot( type : ESaveGameType,  slot : Int32,  out  info : SSavegameInfo) : Bool;  // flags: 65561 
  import public final function GetContentRequiredByLastSave( out  content : array<CName>);  // flags: 65561 
  import public final function RequestScreenshotData( save : SSavegameInfo);  // flags: 65561 
  import public final function IsScreenshotDataReady() : Bool;  // flags: 65561 
  import public final function FreeScreenshotData();  // flags: 65561 
  function IsDisplayNameAvailable();  // flags: 1 
  import public final function ShouldShowSaveCompatibilityWarning() : Bool;  // flags: 65561 
  import public final function CenterMouse();  // flags: 65561 
  import public final function MoveMouseTo( xpos : Float,  ypos : Float);  // flags: 65561 
  import public final function RequestNewGame( gameResourceFilename : String) : Bool;  // flags: 65561 
  import public final function RequestEndGame();  // flags: 65561 
  import public final function RequestExit();  // flags: 65561 
  import public final function GetGameResourceList() : array<String>;  // flags: 65561 
  import public final function GetGameRelease() : String;  // flags: 65561 
  import public final function GetCurrentLocale() : String;  // flags: 65561 
  function GetPlayer();  // flags: 1 
  import public final function GetNPCByTag( tag : CName) : CNewNPC;  // flags: 65561 
  import public final function GetNPCsByTag( tag : CName,  out  npcs : array<CNewNPC>);  // flags: 65561 
  import public final function GetAllNPCs( out  npcs : array<CNewNPC>);  // flags: 65561 
  import public final function GetActorByTag( tag : CName) : CActor;  // flags: 65561 
  import public final function GetActorsByTag( tag : CName,  out  actors : array<CActor>);  // flags: 65561 
  import public final function GetAPManager() : CActionPointManager;  // flags: 65561 
  import public final function GetStorySceneSystem() : CStorySceneSystem;  // flags: 65561 
  import public final function AddStateChangeRequest( entityTag : CName,  modifier : IEntityStateChangeRequest);  // flags: 65561 
  import public final function CreateNoSaveLock( reason : String,  out  lock : Int32,  optional  unique : Bool,  optional  allowCheckpoints : Bool);  // flags: 65561 
  import public final function ReleaseNoSaveLock( lock : Int32);  // flags: 65561 
  import public final function ReleaseNoSaveLockByName( lockName : String);  // flags: 65561 
  import public final function AreSavesLocked() : Bool;  // flags: 65561 
  import public final function GetGameLanguageId( out  audioLang : Int32,  out  subtitleLang : Int32);  // flags: 65561 
  import public final function GetGameLanguageName( out  audioLang : String,  out  subtitleLang : String);  // flags: 65561 
  import public final function GetGameLanguageIndex( out  audioLang : Int32,  out  subtitleLang : Int32);  // flags: 65561 
  import public final function GetAllAvailableLanguages( out  textLanguages : array<String>,  out  speechLanguages : array<String>);  // flags: 65561 
  import public final function SwitchGameLanguageByIndex( audioLang : Int32,  subtitleLang : Int32);  // flags: 65561 
  import public final function ReloadLanguage();  // flags: 65561 
  import public final function IsGameTimePaused() : Bool;  // flags: 65561 
  import public final function IsInvertCameraX() : Bool;  // flags: 65561 
  import public final function IsInvertCameraY() : Bool;  // flags: 65561 
  import public final function SetInvertCameraX( invert : Bool);  // flags: 65561 
  import public final function SetInvertCameraY( invert : Bool);  // flags: 65561 
  import public final function SetInvertCameraXOnMouse( invert : Bool);  // flags: 65561 
  import public final function SetInvertCameraYOnMouse( invert : Bool);  // flags: 65561 
  import public final function IsCameraAutoRotX() : Bool;  // flags: 65561 
  import public final function IsCameraAutoRotY() : Bool;  // flags: 65561 
  import public final function SetCameraAutoRotX( flag : Bool);  // flags: 65561 
  import public final function SetCameraAutoRotY( flag : Bool);  // flags: 65561 
  import public final function ConfigSave();  // flags: 65561 
  import public final function AreSavesInitialized() : Bool;  // flags: 65561 
  import public final function ChangePlayer( playerTemplate : String,  optional  appearance : CName);  // flags: 65561 
  import public final function GetBehTreeReactionManager() : CBehTreeReactionManager;  // flags: 65561 
  import public final function ForceUIAnalog( value : Bool);  // flags: 65561 
  import public final function RequestMenu( menuName : CName,  optional  initData : IScriptable);  // flags: 65561 
  import public final function CloseMenu( menuName : CName);  // flags: 65561 
  import public final function RequestPopup( popupName : CName,  optional  initData : IScriptable);  // flags: 65561 
  import public final function ClosePopup( popupName : CName);  // flags: 65561 
  import public final function GetHud() : CHud;  // flags: 65561 
  import public final function GetInGameConfigWrapper() : CInGameConfigWrapper;  // flags: 65561 
  import public final function GetCommunitySystem() : CCommunitySystem;  // flags: 65561 
  import public final function GetAttackRangeForEntity( sourceEntity : CEntity,  optional  attackName : CName) : CAIAttackRange;  // flags: 65561 
  import public final function GiveReward( rewardName : CName,  targetEntity : CEntity);  // flags: 65561 
  import public final function ConvertToStrayActor( actor : CActor) : Bool;  // flags: 65561 
  import public final function CreateEntityAsync( createEntityHelper : CCreateEntityHelper,  entityTemplate : CEntityTemplate,  pos : Vector,  optional  rot : EulerAngles,  optional  useAppearancesFromIncludes : Bool,  optional  forceBehaviorPose : Bool,  optional  doNotAdjustPlacement : Bool,  optional  persistanceMode : EPersistanceMode,  optional  tagList : array<CName>) : Int32;  // flags: 65561 
  import public final function TestNoCreaturesOnLocation( pos : Vector,  radius : Float,  optional  ignoreActor : CActor) : Bool;  // flags: 65561 
  import public final function TestNoCreaturesOnLine( pos0 : Vector,  pos1 : Vector,  lineWidth : Float,  optional  ignoreActor0 : CActor,  optional  ignoreActor1 : CActor,  optional  ignoreGhostCharacters : Bool) : Bool;  // flags: 65561 
  import public final function RequestAutoSave( reason : String,  force : Bool);  // flags: 65561 
  import public final function CalculateTimePlayed() : GameTime;  // flags: 65561 
  import public final function GetUIHorizontalPlusFrameScale() : Float;  // flags: 65561 
  import public final function GetDLCManager() : CDLCManager;  // flags: 65561 
  import public final function AreConfigResetInThisSession() : Bool;  // flags: 65561 
  import public final function HasShownConfigChangedMessage() : Bool;  // flags: 65561 
  import public final function SetHasShownConfigChangedMessage( value : Bool);  // flags: 65561 
  import public final function GetApplicationVersion() : String;  // flags: 65561 
  import public final function IsSoftwareCursor() : Bool;  // flags: 65561 
  import public final function ShowHardwareCursor();  // flags: 65561 
  import public final function HideHardwareCursor();  // flags: 65561 
  public event function OnBeforeWorldChange( worldName : String) : Bool;  // flags: 66080 

}
import class CGameplayEntity extends CPeristentEntity {
  import var propertyAnimationSet : *CPropertyAnimationSet; // 4005
  import var displayName : LocalizedString; // 4001
  import var stats : *CCharacterStats; // 4008
  import var isInteractionActivator : Bool; // 4001
  import var aimVector : Vector; // 6001
  import var gameplayFlags : Uint32; // 4000
  import var focusModeVisibility : EFocusModeVisibility; // 4001

  import public final function GetInventory() : CInventoryComponent;  // flags: 65561 
  import public final function GetDisplayName( optional  fallBack : Bool) : String;  // flags: 65561 
  import protected final function GetCharacterStats() : CCharacterStats;  // flags: 32793 
  import public final function PlayPropertyAnimation( animationName : CName,  optional  count : Int32,  optional  lengthScale : Float,  optional  mode : EPropertyCurveMode);  // flags: 65561 
  import public final function StopPropertyAnimation( animationName : CName,  optional  restoreInitialValues : Bool);  // flags: 65561 
  import public final function RewindPropertyAnimation( animationName : CName,  time : Float);  // flags: 65561 
  import public final function GetGameplayEntityParam( className : CName) : CGameplayEntityParam;  // flags: 65561 
  import public final function GetPropertyAnimationInstanceTime( propertyName : CName,  animationName : CName) : Float;  // flags: 65561 
  import public final function GetPropertyAnimationLength( propertyName : CName,  animationName : CName) : Float;  // flags: 65561 
  import public final function GetPropertyAnimationTransformAt( propertyName : CName,  animationName : CName,  time : Float) : Matrix;  // flags: 65561 
  import public final function EnableVisualDebug( flag : EShowFlags,  enable : Bool);  // flags: 65561 
  import public function GetStorageBounds( out  box : Box);  // flags: 65545 
  import public final function GetGameplayInfoCache( type : EGameplayInfoCacheType) : Bool;  // flags: 65561 
  import public final function GetFocusModeVisibility() : EFocusModeVisibility;  // flags: 65561 
  import public final function SetFocusModeVisibility( focusModeVisibility : EFocusModeVisibility,  optional  persistent : Bool);  // flags: 65561 
  import public final function AddAnimEventCallback( eventName : CName,  functionName : CName);  // flags: 65561 
  import public final function RemoveAnimEventCallback( eventName : CName);  // flags: 65561 
  import public final function AddAnimEventChildCallback( child : CNode,  eventName : CName,  functionName : CName);  // flags: 65561 
  import public final function RemoveAnimEventChildCallback( child : CNode,  eventName : CName);  // flags: 65561 
  import public final function GetSfxTag() : CName;  // flags: 65561 
  public final function GetAllAttributes() : array<CName>;  // flags: 65552 
  public event function OnSpawnedEditor( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnGameplayPropertyChanged( propertyName : CName) : Bool;  // flags: 65568 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnDestroyed() : Bool;  // flags: 65568 
  public event function OnPlayerActionEnd() : Bool;  // flags: 65568 
  public event function OnPlayerActionStartFinished() : Bool;  // flags: 65568 
  public event function OnSyncAnimEnd() : Bool;  // flags: 65568 
  public event function OnPreAttackEvent( animEventName : CName,  animEventType : EAnimationEventType,  data : CPreAttackEventData,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function IsAlive() : Bool;  // flags: 65536 
  public function HasAbility( abilityName : CName) : Bool;  // flags: 65536 
  public function AddAbility( abilityName : CName,  optional  allowMultiple : Bool) : Bool;  // flags: 65536 
  public function RemoveAbility( abilityName : CName);  // flags: 65536 
  public function AddAbilityMultiple( abilityName : CName,  count : Int32);  // flags: 65536 
  public function RemoveAbilityMultiple( abilityName : CName,  count : Int32);  // flags: 65536 
  public function RemoveAbilityAll( abilityName : CName);  // flags: 65536 
  public function AddTag( tag : CName);  // flags: 65536 
  public function MedallionEffectOff( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function EnemyHighlightOff( dt : Float,  id : Int32);  // flags: 66560 
  public function SonarEffectOff( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function FocusEffectOff();  // flags: 65536 
  public function SetHighlighted( b : Bool);  // flags: 65536 
  public function IsHighlighted() : Bool;  // flags: 65536 
  public function ShouldBlockGameplayActionsOnInteraction() : Bool;  // flags: 65536 
  public event function OnItemGiven( data : SItemChangedData) : Bool;  // flags: 65568 
  public event function OnItemTaken( itemId : SItemUniqueId,  quantity : Int32) : Bool;  // flags: 65568 
  public function SenseMagic();  // flags: 65536 
  public function AddSignHitFacts( sign : W3SignProjectile,  signType : String);  // flags: 65536 
  public event function OnWeaponHit( act : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  public event function OnAxiiHit( sign : W3AxiiProjectile) : Bool;  // flags: 65568 
  public event function OnFrostHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnYrdenHit( caster : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnRootHit() : Bool;  // flags: 65568 
  public event function OnDamageFromJump( activator : CComponent,  jumpDistance : Float,  jumpHeightDiff : Float) : Bool;  // flags: 65568 
  public event function OnDamageFromFalling( activator : CComponent,  fallingDistance : Float,  fallingHeightDiff : Float) : Bool;  // flags: 65568 
  protected function WhenFallen( fallingHeightDiff : Float);  // flags: 32768 
  public function IsVehicle() : Bool;  // flags: 65536 
  public function ApplyFallingDamage( heightDiff : Float,  optional  reducing : Bool) : Float;  // flags: 65536 
  public function GetFocusModeSoundEffectName() : CName;  // flags: 65536 
  public function PlayFocusSoundVisualEffect( effectName : CName);  // flags: 65536 
  public function SetFocusModeSoundEffectType( type : EFocusModeSoundEffectType);  // flags: 65536 
  public event function OnFocusModeSound( enabled : Bool) : Bool;  // flags: 65568 
  public function GetFocusActionName() : CName;  // flags: 65536 
  public function CanShowFocusInteractionIcon() : Bool;  // flags: 65536 
  public function GetInteractionData( out  actionName : CName,  out  text : String) : Bool;  // flags: 65536 

}
import class CProjectileTrajectory extends CGameplayEntity {
  import var projectileName : CName; // 6001
  import var animatedOffset : Vector; // 4001
  import var animatedTimeMultiplier : Float; // 4001
  import var bounceOfVelocityPreserve : Float; // 6001
  import var overlapAccuracy : Float; // 4001
  import var doWaterLevelTest : Bool; // 6001
  import var waterTestAccuracy : Float; // 4001
  import var caster : CEntity; // 6000
  import var realCaster : CEntity; // 4000
  import var radius : Float; // 6001

  import public final function Init( caster : CEntity);  // flags: 65561 
  import public function ShootProjectileAtPosition( angle : Float,  velocity : Float,  target : Vector,  optional  range : Float,  optional  collisionGroups : array<CName>);  // flags: 65545 
  import public function ShootProjectileAtNode( angle : Float,  velocity : Float,  target : CNode,  optional  range : Float,  optional  collisionGroups : array<CName>);  // flags: 65545 
  import public function ShootProjectileAtBone( angle : Float,  velocity : Float,  target : CEntity,  targetBone : CName,  optional  range : Float,  optional  collisionGroups : array<CName>);  // flags: 65545 
  import public final function StopProjectile();  // flags: 65561 
  import public function ShootCakeProjectileAtPosition( cakeAngle : Float,  cakeHeight : Float,  shootAngle : Float,  velocity : Float,  target : Vector,  range : Float,  optional  collisionGroups : array<CName>);  // flags: 65545 
  import public final function BounceOff( collisionNormal : Vector,  colliisonPosition : Vector);  // flags: 65561 
  import public final function IsBehindWall( testComponent : CComponent,  optional  collisionGroupsNames : array<CName>) : Bool;  // flags: 65561 
  import public final function SphereOverlapTest( radius : Float,  optional  collisionGroups : array<CName>);  // flags: 65561 
  import public final function IsStopped() : Bool;  // flags: 65561 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public function ProcessProjectileRepulsion( pos : Vector,  normal : Vector) : Bool;  // flags: 65536 
  public function SetVictim( entity : CGameplayEntity);  // flags: 65536 
  public event function OnRangeReached() : Bool;  // flags: 66080 
  public final function SetIsInYrdenAlternateRange( yrden : W3YrdenEntity);  // flags: 65552 
  public event function OnProjectileShot( targetCurrentPosition : Vector,  optional  target : CNode) : Bool;  // flags: 65568 

}
import class CNewNPCStateBase extends CScriptableState {

  function MarkGoalFinished();  // flags: 1 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CPlayerStateBase extends CScriptableState {

  import public final function CreateNoSaveLock();  // flags: 65561 
  public function CanAccesFastTravel( target : W3FastTravelEntity) : Bool;  // flags: 65536 

}
import class CPlayerStateMovable extends CPlayerStateBase {
  import var agent : CMovingAgentComponent; // 4000

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function ProcessMovement( timeDelta : Float,  id : Int32);  // flags: 66560 
  private function ResetMovementFlags();  // flags: 16384 
  private function MonitorInput();  // flags: 16384 

}
import class CScriptedComponent extends CComponent {

  function I_ListenToEvent();  // flags: 1 
  function UseUpdateTransform();  // flags: 1 

}
import class CInteractionsManager extends IGameSystem {

  public function CanProcessGuiInteractions( activator : CEntity) : Bool;  // flags: 65536 
  public function CanProcessInteractionInput( action : SInputAction) : Bool;  // flags: 65536 
  public function GetSelectionWeights( out  selectionWeights : STargetSelectionWeights);  // flags: 65536 
  public function GetSelectionData( out  selectionData : STargetSelectionData);  // flags: 65536 
  public function GetBlockedActions( out  blockedActions : array<String>);  // flags: 65536 
  public event function OnGuiInteractionChanged( newInteraction : CInteractionComponent) : Bool;  // flags: 65568 
  public function GetActiveInteraction() : CInteractionComponent;  // flags: 65536 

}
import class CR4DeckBuilderMenu extends CR4GwintBaseMenu {

  public function EnableJournalTutorialEnries();  // flags: 65536 
  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public function OnQuitGameConfirmed();  // flags: 65536 
  protected function SendDeckInformation();  // flags: 32768 
  protected function SendCollectionInformation();  // flags: 32768 
  protected function SendLeaderCollectionInformation();  // flags: 32768 
  public event function OnTabChanged( tabIndex : Int32) : Bool;  // flags: 65568 
  public event function OnCardAddedToDeck( factionID : Int32,  cardId : Int32) : Bool;  // flags: 65568 
  public event function OnCardRemovedFromDeck( factionID : Int32,  cardId : Int32) : Bool;  // flags: 65568 
  public event function OnSelectedDeckChanged( factionID : Int32) : Bool;  // flags: 65568 
  public event function OnLeaderChanged( factionID : Int32,  leaderID : Int32) : Bool;  // flags: 65568 
  public event function OnLackOfUnitsError( numCards : Int32) : Bool;  // flags: 65568 
  public event function OnTooManySpecialCards() : Bool;  // flags: 65568 
  protected function sendTutorialStrings();  // flags: 32768 

}
import class CCreateEntityHelper extends IScriptable {

  import public function IsCreating() : Bool;  // flags: 65545 
  import public function Reset();  // flags: 65545 
  import public function GetCreatedEntity() : CEntity;  // flags: 65545 
  import public function SetPostAttachedCallback( caller : IScriptable,  funcName : CName);  // flags: 65545 

}
import class CGameFastForwardSystem extends IGameSystem {

  import public function BeginFastForward( optional  dontSpawnHostilesClose : Bool,  optional  coverWithBlackscreen : Bool);  // flags: 65545 
  import public function EndFastForward();  // flags: 65545 
  import public function AllowFastForwardSelfCompletion();  // flags: 65545 
  import public function RequestFastForwardShutdown( optional  coverWithBlackscreen : Bool);  // flags: 65545 

}
import class CDefinitionsManagerAccessor extends CObject {

  function GetIngredientCategoryElements();  // flags: 1 
  function GetItemAbilities();  // flags: 1 
  import public final function GetItemAbilitiesWithWeights( itemName : CName,  playerItem : Bool,  out  abilities : array<CName>,  out  weights : array<Float>,  out  minAbilities : Int32,  out  maxAbilities : Int32);  // flags: 65561 
  function GetItemAttributesFromAbilities();  // flags: 1 
  import public final function GetItemCategory( itemName : CName) : CName;  // flags: 65561 
  import public final function ItemHasTag( itemName : CName,  tag : CName) : Bool;  // flags: 65561 
  import public final function GetItemsWithTag( tag : CName) : array<CName>;  // flags: 65561 
  import public final function GetItemEquipTemplate( itemName : CName) : String;  // flags: 65561 
  import public final function GetUsableItemType( itemName : CName) : EUsableItemType;  // flags: 65561 
  import public final function TestWitchcraft();  // flags: 65561 
  import public final function ValidateLootDefinitions( listAllItemDefs : Bool);  // flags: 65561 
  import public final function ValidateRecyclingParts( listAllItemDefs : Bool);  // flags: 65561 
  import public final function ValidateCraftingDefinitions( listAllItemDefs : Bool);  // flags: 65561 
  function GetItemRecyclingParts();  // flags: 1 
  function ApplyItemAbilityAttributeModifier();  // flags: 1 
  function ApplyAbilityAttributeModifier();  // flags: 1 
  import public final function GetCustomDefinition( definition : CName) : SCustomNode;  // flags: 65561 
  import public final function GetSubNodeByAttributeValueAsCName( out  node : SCustomNode,  rootNodeName : CName,  attributeName : CName,  attributeValue : CName) : Bool;  // flags: 65561 
  import public final function GetItemHoldSlot( itemName : CName,  playerItem : Bool) : CName;  // flags: 65561 
  import public final function GetItemPrice( itemName : CName) : Int32;  // flags: 65561 
  import public final function GetItemUpgradeListName( itemName : CName,  playerItem : Bool) : CName;  // flags: 65561 
  import public final function GetItemLocalisationKeyName( itemName : CName) : String;  // flags: 65561 
  import public final function GetItemLocalisationKeyDesc( itemName : CName) : String;  // flags: 65561 
  import public final function GetItemIconPath( itemName : CName) : String;  // flags: 65561 
  import public final function GetAttributeValueAsInt( out  node : SCustomNodeAttribute,  out  val : Int32) : Bool;  // flags: 65561 
  import public final function GetAttributeValueAsFloat( out  node : SCustomNodeAttribute,  out  val : Float) : Bool;  // flags: 65561 
  import public final function GetAttributeValueAsBool( out  node : SCustomNodeAttribute,  out  val : Bool) : Bool;  // flags: 65561 
  import public final function GetAttributeValueAsString( out  node : SCustomNodeAttribute) : String;  // flags: 65561 
  import public final function GetAttributeValueAsCName( out  node : SCustomNodeAttribute) : CName;  // flags: 65561 
  import public final function GetAttributeName( out  node : SCustomNodeAttribute) : CName;  // flags: 65561 
  import public final function GetAbilityTags( ability : CName,  out  tags : array<CName>);  // flags: 65561 
  import public final function GetAbilityAttributes( ability : CName,  out  attrib : array<CName>);  // flags: 65561 
  import public final function GetAbilityAttributeValue( abilityName : CName,  attributeName : CName,  out  valMin : SAbilityAttributeValue,  out  valMax : SAbilityAttributeValue);  // flags: 65561 
  import public final function GetAbilitiesAttributeValue( abilitiesNames : array<CName>,  attributeName : CName,  out  valMin : SAbilityAttributeValue,  out  valMax : SAbilityAttributeValue,  optional  tags : array<CName>);  // flags: 65561 
  import public final function IsAbilityDefined( abilityName : CName) : Bool;  // flags: 65561 
  import public final function GetContainedAbilities( abilityName : CName,  out  abilities : array<CName>);  // flags: 65561 
  import public final function GetUniqueContainedAbilities( abilities : array<CName>,  out  outAbilities : array<CName>);  // flags: 65561 
  import public final function AbilityHasTag( ability : CName,  tag : CName) : Bool;  // flags: 65561 
  import public final function GetCustomDefinitionSubNode( out  node : SCustomNode,  subnode : CName) : SCustomNode;  // flags: 65561 
  import public final function FindAttributeIndex( out  node : SCustomNode,  attName : CName) : Int32;  // flags: 65561 
  import public final function GetCustomNodeAttributeValueString( out  node : SCustomNode,  attName : CName,  out  val : String) : Bool;  // flags: 65561 
  import public final function GetCustomNodeAttributeValueName( out  node : SCustomNode,  attName : CName,  out  val : CName) : Bool;  // flags: 65561 
  import public final function GetCustomNodeAttributeValueInt( out  node : SCustomNode,  attName : CName,  out  val : Int32) : Bool;  // flags: 65561 
  import public final function GetCustomNodeAttributeValueBool( out  node : SCustomNode,  attName : CName,  out  val : Bool) : Bool;  // flags: 65561 
  import public final function GetCustomNodeAttributeValueFloat( out  node : SCustomNode,  attName : CName,  out  val : Float) : Bool;  // flags: 65561 
  public function GetItemAttributeValueNoRandom( itemName : CName,  playerItem : Bool,  attributeName : CName,  out  min : SAbilityAttributeValue,  out  max : SAbilityAttributeValue);  // flags: 65536 
  public function IsItemBolt( item : CName) : Bool;  // flags: 65536 
  public function IsItemSingletonItem( itemName : CName) : Bool;  // flags: 65536 
  public function IsItemBomb( item : CName) : Bool;  // flags: 65536 
  public function IsItemPotion( item : CName) : Bool;  // flags: 65536 
  public function IsItemIngredient( item : CName) : Bool;  // flags: 65536 
  public function IsItemOil( item : CName) : Bool;  // flags: 65536 
  public function IsItemWeapon( item : CName) : Bool;  // flags: 65536 
  public function IsItemAnyArmor( item : CName) : Bool;  // flags: 65536 
  public function IsItemAlchemyItem( item : CName) : Bool;  // flags: 65536 
  public function GetFilterTypeByItem( itemName : CName) : EInventoryFilterType;  // flags: 65536 
  public final function ItemHasAttribute( itemName : CName,  playerItem : Bool,  attributeName : CName) : Bool;  // flags: 65552 
  public final function IsRecipeForMutagenPotion( recipeName : CName) : Bool;  // flags: 65552 
  public final function AbilityHasAttribute( ability : CName,  attribute : CName) : Bool;  // flags: 65552 
  public final function GetAbilitiesAttributes( abilities : array<CName>) : array<CName>;  // flags: 65552 
  public function GetAbilityDamages( abilityName : CName,  out  damages : array<SRawDamage>) : Int32;  // flags: 65536 
  public final function GetItemLevelFromName( itemName : CName) : Int32;  // flags: 65552 

}
import class CDLCManager extends CObject {
  import var definitions : array<CDLCDefinition>; // 4000
  import var mountedContent : array<IGameplayDLCMounter>; // 4000

  import public final function GetDLCs( names : array<CName>);  // flags: 65561 
  import public final function EnableDLC( id : CName,  isEnabled : Bool);  // flags: 65561 
  import public final function IsDLCEnabled( id : CName) : Bool;  // flags: 65561 
  import public final function IsDLCAvailable( id : CName) : Bool;  // flags: 65561 
  import public final function GetDLCName( id : CName) : String;  // flags: 65561 
  import public final function GetDLCDescription( id : CName) : String;  // flags: 65561 
  import public final function SimulateDLCsAvailable( shouldSimulate : Bool);  // flags: 65561 
  public function IsNewGamePlusAvailable() : Bool;  // flags: 65536 

}
import class CSwarmLairEntity extends IBoidLairEntity {
  import var defeatedStateFact : String; // 4001
  import var defeatedStateFactValue : Int32; // 4001
  import var lairDisabledAtStartup : Bool; // 4001

  import public function Disable( disable : Bool);  // flags: 65545 

}
import class CBoidPointOfInterestComponent extends CComponent {
  import var params.m_type : CName; // 4001
  import var params.m_scale : Float; // 4001
  import var params.m_gravityRangeMin : Float; // 4001
  import var params.m_gravityRangeMax : Float; // 4001
  import var params.m_effectorRadius : Float; // 4001
  import var acceptor : EZoneAcceptor; // 4001
  import var params.m_shapeType : CName; // 4001
  import var params.m_useReachCallBack : Bool; // 4001
  import var params.m_closestOnly : Bool; // 4001
  import var params.m_coneMinOpeningAngle : Float; // 4001
  import var params.m_coneMaxOpeningAngle : Float; // 4001
  import var params.m_coneEffectorOpeningAngle : Float; // 4001
  import var crawlingSwarmDebug : Bool; // 4001

  import public function Disable( disable : Bool);  // flags: 65545 

}
import class CBoidPointOfInterestComponentScript extends CBoidPointOfInterestComponent {

  public function OnUsed( count : Int32,  deltaTime : Float);  // flags: 65536 

}
import class CR4EndScreenMenu extends CR4StartScreenMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnKeyPress() : Bool;  // flags: 65568 

}
import class CInteractionComponent extends CInteractionAreaComponent {
  import var actionName : String; // 4001
  import var checkCameraVisibility : Bool; // 4001
  import var reportToScript : Bool; // 4001
  import var isEnabledInCombat : Bool; // 6001
  import var shouldIgnoreLocks : Bool; // 6001

  import public final function GetActionName() : String;  // flags: 65561 
  import public final function SetActionName( actionName : String);  // flags: 65561 
  import public final function GetInteractionFriendlyName() : String;  // flags: 65561 
  import public final function GetInteractionKey() : Int32;  // flags: 65561 
  import public final function GetInputActionName() : CName;  // flags: 65561 
  public function IsEnabledOnHorse() : Bool;  // flags: 65536 
  public function IsEnabledInCombat() : Bool;  // flags: 65536 
  public function ShouldIgnoreLocks() : Bool;  // flags: 65536 
  public function EnableInCombat( enable : Bool);  // flags: 65536 
  public final function SetIconOffset( offset : Vector);  // flags: 65552 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public final function UpdateIconOffset();  // flags: 65552 

}
import class CInteractionAreaComponent extends CComponent {
  import var rangeMin : Float; // 4001
  import var rangeMax : Float; // 4001
  import var rangeAngle : Uint32; // 4001
  import var height : Float; // 4001
  import var isPlayerOnly : Bool; // 4001
  import var isEnabled : Bool; // 4001
  import var manualTestingOnly : Bool; // 4001
  import var checkLineOfSight : Bool; // 4001
  import var alwaysVisibleRange : Float; // 4001
  import var lineOfSightOffset : Vector; // 4001
  import var performScriptedTest : Bool; // 6001

  import public final function GetRangeMin() : Float;  // flags: 65561 
  import public final function GetRangeMax() : Float;  // flags: 65561 
  import public final function SetRanges( rangeMin : Float,  rangeMax : Float,  height : Float);  // flags: 65561 
  import public final function SetRangeAngle( rangeAngle : Int32);  // flags: 65561 
  import public final function SetCheckLineOfSight( flag : Bool);  // flags: 65561 

}
import class CR4GwintMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnTraceMe( text : String) : Bool;  // flags: 65568 
  public event function OnPlaySound( text : String) : Bool;  // flags: 65568 
  public event function OnBattleResults( playerLivesLeft : Int32,  enemyLivesLeft : Int32) : Bool;  // flags: 65568 
  public event function OnGetPlayerDeck( index : Int32) : Bool;  // flags: 65568 
  public event function OnSetPlayerDeck( factionIndex : Int32,  cardIndex : Int32) : Bool;  // flags: 65568 
  public event function OnNewKingChosen( factionIndex : Int32,  kingIndex : Int32) : Bool;  // flags: 65568 
  public event function OnCustomPowersReques( index : Int32) : Bool;  // flags: 65568 
  public function GetPlayerDeck( out  container : CScriptedFlashArray,  faction : Int32);  // flags: 65536 
  public function SetBattlefieldAngles();  // flags: 65536 
  public function GameplaySettings();  // flags: 65536 
  public function SetCardAttributeValue();  // flags: 65536 
  public function GetAICardCollection( out  container : CScriptedFlashArray);  // flags: 65536 
  public function GetPlayerCardCollection( out  container : CScriptedFlashArray);  // flags: 65536 
  public function GetCardDefinitionTest( out  container : CScriptedFlashArray);  // flags: 65536 
  public function GetKingChoices( out  container : CScriptedFlashArray);  // flags: 65536 
  public function GetKingDefinition( out  container : CScriptedFlashArray);  // flags: 65536 
  public function AddIndex( out  container : CScriptedFlashArray,  index : Int32);  // flags: 65536 
  public function BuildCardObject( out  container : CScriptedFlashArray,  cardDef : SCardDefinition);  // flags: 65536 
  public function AddPower( out  container : CScriptedFlashArray,  index : Int32,  playerOwner : Bool);  // flags: 65536 
  private function ClearDeckDef( out  deckDef : SDeckDefinition);  // flags: 16384 
  private function ClearCardDef( out  cardDef : SCardDefinition);  // flags: 16384 

}
import class CR4InformationPopupMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function SetPopupText( value : String);  // flags: 65536 
  public function SetFirstButton( buttonIcon : String,  buttonLabel : String);  // flags: 65536 
  public function SetSecondButton( buttonIcon : String,  buttonLabel : String);  // flags: 65536 
  public event function OnFirstButtonPress() : Bool;  // flags: 65568 
  public event function OnSecondButtonPress() : Bool;  // flags: 65568 

}
import class IBehTreeTask extends IScriptable {
  import var isActive : Bool; // 6000

  import public final function GetActor() : CActor;  // flags: 65561 
  import public final function GetNPC() : CNewNPC;  // flags: 65561 
  import public final function GetLocalTime() : Float;  // flags: 65561 
  import public final function SetNamedTarget( targetName : CName,  node : CNode);  // flags: 65561 
  import public final function GetNamedTarget( targetName : CName) : CNode;  // flags: 65561 
  import public final function GetActionTarget() : CNode;  // flags: 65561 
  import public final function SetActionTarget( node : CNode);  // flags: 65561 
  import public final function GetCombatTarget() : CActor;  // flags: 65561 
  import public final function SetCombatTarget( target : CActor);  // flags: 65561 
  import public final function RunMain();  // flags: 65561 
  import public final function Complete( success : Bool);  // flags: 65561 
  import public final function SetEventRetvalCName( val : CName) : Bool;  // flags: 65561 
  import public final function SetEventRetvalFloat( val : Float) : Bool;  // flags: 65561 
  import public final function SetEventRetvalInt( val : Int32) : Bool;  // flags: 65561 
  import public final function GetEventParamCName( defaultVal : CName) : CName;  // flags: 65561 
  import public final function GetEventParamBaseDamage() : CBaseDamage;  // flags: 65561 
  import public final function GetEventParamFloat( defaultVal : Float) : Float;  // flags: 65561 
  import public final function GetEventParamInt( defaultVal : Int32) : Int32;  // flags: 65561 
  import public final function GetEventParamObject() : IScriptable;  // flags: 65561 
  import public final function UnregisterFromAnimEvent( eventId : CName);  // flags: 65561 
  import public final function UnregisterFromGameplayEvent( eventId : CName);  // flags: 65561 
  import public final function SetIsInCombat( inCombat : Bool);  // flags: 65561 
  import public final function SetCustomTarget( target : Vector,  heading : Float) : Bool;  // flags: 65561 
  import public final function GetCustomTarget( out  target : Vector,  out  heading : Float) : Bool;  // flags: 65561 
  public function InitializeCombatStorage() : CAIStorageHandler;  // flags: 65536 

}
import class IBehTreeObjectDefinition extends IScriptable {
  import var instanceClass : CName; // 6000

  import protected final function SetValFloat( v : CBehTreeValFloat,  n : Float);  // flags: 32793 
  import protected final function SetValInt( v : CBehTreeValInt,  n : Int32);  // flags: 32793 
  import protected final function SetValString( v : CBehTreeValString,  n : String);  // flags: 32793 
  import protected final function SetValCName( v : CBehTreeValCName,  n : CName);  // flags: 32793 
  import protected final function SetValBool( v : CBehTreeValBool,  n : Bool);  // flags: 32793 
  import protected final function GetValFloat( v : CBehTreeValFloat) : Float;  // flags: 32793 
  import protected final function GetValInt( v : CBehTreeValInt) : Int32;  // flags: 32793 
  import protected final function GetValEnum( v : IBehTreeValueEnum) : Int32;  // flags: 32793 
  import protected final function GetValString( v : CBehTreeValString) : String;  // flags: 32793 
  import protected final function GetValCName( v : CBehTreeValCName) : CName;  // flags: 32793 
  import protected final function GetValBool( v : CBehTreeValBool) : Bool;  // flags: 32793 
  import protected final function GetObjectByVar( varName : CName) : IScriptable;  // flags: 32793 
  import protected final function GetAIParametersByClassName( className : CName) : IAIParameters;  // flags: 32793 

}
import class IBehTreeTaskDefinition extends IBehTreeObjectDefinition {
  import var listenToGameplayEvents : array<CName>; // 6000
  import var listenToAnimEvents : array<CName>; // 6000

  import protected final function ListenToAnimEvent( eventName : CName);  // flags: 32793 
  import protected final function ListenToGameplayEvent( eventName : CName);  // flags: 32793 
  public function Initialize();  // flags: 65536 
  public function Refactor();  // flags: 65536 
  public function InitializeEvents();  // flags: 65536 

}
import class IBehTreeOnSpawnEffector extends IBehTreeObjectDefinition {

  import public final function GetActor() : CActor;  // flags: 65561 
  import public final function GetObjectFromAIStorage( varName : CName) : IScriptable;  // flags: 65561 
  public function Run();  // flags: 65536 

}
import class CR4JournalBaseMenu extends CR4Menu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnQuestRead( _QuestID : Int32) : Bool;  // flags: 65568 
  public event function OnActivateQuest( _QuestID : Int32) : Bool;  // flags: 65568 
  public event function OnQuestSelected( _QuestID : Int32) : Bool;  // flags: 65568 
  public event function OnJournalTabSelected( ID : Int32) : Bool;  // flags: 65568 
  public event function OnUpdateTooltipCompareData( item : SItemUniqueId,  compareItemType : Int32,  tooltipName : String) : Bool;  // flags: 65568 
  private function PopulateData();  // flags: 16384 
  public function UpdateRewards();  // flags: 65536 
  public function UpdateTooltipCompareData( item : SItemUniqueId,  compareItem : SItemUniqueId,  tooltipInv : CInventoryComponent,  tooltipName : String);  // flags: 65536 
  public function GetAreaName( questEntry : CJournalQuest) : String;  // flags: 65536 
  public function GetDescription( currentQuest : CJournalQuest) : String;  // flags: 65536 
  public function UpdateDescription( currentQuestID : Int32);  // flags: 65536 

}
import class CR4JournalMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnJournalTabSelected( index : Int32) : Bool;  // flags: 65568 
  public event function OnTrackQuest( _QuestID : Int32) : Bool;  // flags: 65568 

}
import class CR4JournalMonsterHuntingMenu extends CR4JournalQuestMenu {

  public function GetQuests();  // flags: 65536 
  public event function OnGuiSceneEntitySpawned( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnGuiSceneEntityDestroyed() : Bool;  // flags: 65568 
  public function UpdateImage( entryName : CName);  // flags: 65536 

}
import class CR4JournalTreasureHuntingMenu extends CR4JournalQuestMenu {

  public function GetQuests();  // flags: 65536 

}
import class CR4LoadingMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnPlaySoundEvent( soundName : String) : Bool;  // flags: 65568 

}
import class IAIParameters extends IScriptable {

  import public function LoadSteeringGraph( fileName : String) : CMoveSteeringBehavior;  // flags: 65545 
  import public function OnManualRuntimeCreation();  // flags: 65545 
  public function OnCreated();  // flags: 65536 
  public function Init();  // flags: 65536 

}
import class ICustomValAIParameters extends CAIRedefinitionParameters {

  public function SetCNameValue( value : CName);  // flags: 65536 

}
import class IAITree extends IAIParameters {
  import var aiTreeName : String; // 6008
  import var tree : CBehTree; // 4000

  import public final function OnCreated();  // flags: 65561 
  public function Init();  // flags: 65536 

}
import class CR4MeditationMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  private function setMenuMode();  // flags: 16384 
  public function MeditatingEnd();  // flags: 65536 
  private function initMeditationState();  // flags: 16384 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 

}
import class CAIStorageHandler extends IScriptable {

  import public final function Initialize( itemName : CName,  classId : CName,  owner : IScriptable) : Bool;  // flags: 65561 
  import public final function InitializeExternal( itemName : CName,  classId : CName,  actor : CActor) : Bool;  // flags: 65561 
  import public final function Get() : IScriptable;  // flags: 65561 

}
import class CEncounter extends CGameplayEntity {
  import var enabled : Bool; // e001
  import var ignoreAreaTrigger : Bool; // 4001
  import var fullRespawnScheduled : Bool; // c000
  import var spawnTree : *ISpawnTreeBranch; // 4001
  import var creatureDefinition : array<*CEncounterCreatureDefinition>; // 4000
  import var encounterParameters : CEncounterParameters; // 4005
  import var spawnArea : EntityHandle; // 4001
  import var fullRespawnDelay : GameTime; // 4001
  import var isFullRespawnTimeInGameTime : Bool; // 4001
  import var fullRespawnTime : GameTime; // c000
  import var wasRaining : Bool; // c000
  import var conditionRetestTimeout : Float; // 4001
  import var defaultImmediateDespawnConfiguration : SSpawnTreeDespawnConfiguration; // 4001
  import var spawnTreeType : ESpawnTreeType; // 4001

  import public final function EnableMember( memberName : CName,  enable : Bool);  // flags: 65561 
  import public final function GetPlayerDistFromArea() : Float;  // flags: 65561 
  import public final function GetEncounterArea() : CTriggerAreaComponent;  // flags: 65561 
  import public final function IsPlayerInEncounterArea() : Bool;  // flags: 65561 
  import public final function IsEnabled() : Bool;  // flags: 65561 
  import public final function EnterArea();  // flags: 65561 
  import public final function LeaveArea();  // flags: 65561 
  import public final function EnableEncounter( enable : Bool);  // flags: 65561 
  import public final function ForceDespawnDetached();  // flags: 65561 
  import public final function SetSpawnPhase( phaseName : CName) : Bool;  // flags: 65561 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function UpdateDelayedTasks();  // flags: 65536 
  public function OnFullRespawn();  // flags: 65536 
  public function GetEncounterDataManager() : CEncounterDataManager;  // flags: 65536 
  public function ForceDespawnDetachedWithDelay( realTimeDelay : Float);  // flags: 65536 
  public function ForceDespawnWithDelayTimer( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function InitializeEncounterDataManager();  // flags: 65536 
  public function ProcessTasks();  // flags: 65536 
  public function RunOwnerTask( task : SOwnerEncounterTaskParams);  // flags: 65536 
  public function RunExternalTask( task : SExternalEncounterTaskParams);  // flags: 65536 
  public function RunOwnerTaskTimer( timeDelta : GameTime,  id : Int32);  // flags: 66560 
  public function RunExternalTaskTimer( timeDelta : GameTime,  id : Int32);  // flags: 66560 
  public function CheckMeditationTimer( timeDelta : Float,  id : Int32);  // flags: 66560 

}
import class ISpawnScriptCondition extends ISpawnCondition {

  public function TestCondition( encounter : CEncounter) : Bool;  // flags: 65536 

}
import class CR4NoticeBoardMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateDescription();  // flags: 65536 
  public function SetBoardNoteTitle( value : String);  // flags: 65536 
  public function SetBoardNoteDescription( value : String);  // flags: 65536 
  public event function OnTakeQuest( tag : String) : Bool;  // flags: 65568 
  public event function OnErrandSelected( tag : String) : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CSpawnTreeBaseEntryGenerator extends ISpawnTreeLeafNode {
  import var childNodes : array<ISpawnTreeBaseNode>; // 4000

  import public function RemoveChildren();  // flags: 65545 
  import public function AddNodeToTree( newNode : ISpawnTreeBaseNode,  parentNode : ISpawnTreeBaseNode);  // flags: 65545 
  import public function AddInitializerToNode( newNode : ISpawnTreeInitializer,  parentNode : ISpawnTreeBaseNode);  // flags: 65545 
  import public function SetName( out  pair : SEncounterActionPointSelectorPair,  catName : CName);  // flags: 65545 
  public function GetContextMenuSpecialOptions( out  names : array<String>);  // flags: 65536 
  public function RunSpecialOption( option : Int32);  // flags: 65536 
  public function AplyCreatureEntryParams( cEntry : CCreatureEntry,  cfg : SCreatureEntryEntryGeneratorNodeParam);  // flags: 65536 
  public function AplyCreatureSpawnerParams( cEntry : CCreatureEntry,  cfg : SCreatureEntrySpawnerParams);  // flags: 65536 
  public function GenerateEntries();  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class CWanderAndWorkEntryGenerator extends CSpawnTreeBaseEntryGenerator {
  import var entries : array<SWanderAndWorkEntryGeneratorParams>; // 6001

  public function GetFriendlyName() : String;  // flags: 65536 
  public function GenerateEntries();  // flags: 65536 
  public function ApplyIdleInitializerCfg( init : CSpawnTreeInitializerIdleAI,  idleTree : CAIIdleTree);  // flags: 65536 
  public function ApplyWaWInitializerCfg( init : CSpawnTreeInitializerSmartWanderAndWorkAI,  cfg : SWanderAndWorkEntryGeneratorParams);  // flags: 65536 
  public function FindCategories( creature : CName) : SWanderWorkCetegoriesForCreatureDefinitionEntryGeneratorParam;  // flags: 65536 

}
import class CWorkEntryGenerator extends CSpawnTreeBaseEntryGenerator {
  import var entries : array<SWorkEntryGeneratorParam>; // 6001

  public function GetFriendlyName() : String;  // flags: 65536 
  public function GenerateEntries();  // flags: 65536 
  public function ApplyWanderInitializerCfg( initializer : CSpawnTreeInitializerSmartWorkAI,  cfg : SWorkSmartAIEntryGeneratorNodeParam,  creature : CName);  // flags: 65536 
  public function FindCategories( creature : CName) : SWorkCetegoriesForCreatureDefinitionEntryGeneratorParam;  // flags: 65536 

}
import class CR4PosterMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function PlayOpenSoundEvent();  // flags: 65536 
  public function CanPostAudioSystemEvents() : Bool;  // flags: 65536 

}
import class CR4PreparationMainMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  private function UpdatePlayerOrens();  // flags: 16384 
  private function UpdatePlayerLevel();  // flags: 16384 
  private function GetCurrentLevel() : Int32;  // flags: 16384 
  private function GetCurrentExperience() : String;  // flags: 16384 
  public function UpdateNavigationTitles();  // flags: 65536 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnPreparationTabSelected( tabID : Int32) : Bool;  // flags: 65568 

}
import class CCreaturePartyEntry extends CBaseCreatureEntry {
  import var subDefinitions : array<*CSpawnTreeEntrySubDefinition>; // 4000
  import var partySpawnOrganizer : CPartySpawnOrganizer; // 6005
  import var blockChats : Bool; // 4001
  import var synchronizeWork : Bool; // 4001

  import public function AddPartyMember( inEditor : Bool) : CSpawnTreeEntrySubDefinition;  // flags: 65545 
  public function GetContextMenuSpecialOptions( out  names : array<String>);  // flags: 65536 
  public function RunSpecialOption( option : Int32);  // flags: 65536 

}
import class ISpawnTreeSpawnMonitorInitializer extends ISpawnTreeSpawnMonitorBaseInitializer {

  import public final function GetNumCreaturesSpawned() : Int32;  // flags: 65561 
  import public final function GetNumCreaturesToSpawn() : Int32;  // flags: 65561 
  import public final function GetNumCreaturesDead() : Int32;  // flags: 65561 
  public function MonitorCreatureSpawned( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function MonitorCreatureLost( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function MonitorCreatureKilled( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class ISpawnTreeInitializerAI extends ISpawnTreeInitializer {
  import var dynamicTreeParameterName : CName; // 6000

  public function Init();  // flags: 65536 

}
import class CR4QuestListMenu extends CR4Menu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnQuestRead( _QuestID : Int32) : Bool;  // flags: 65568 
  public event function OnActivateQuest( _QuestID : Int32) : Bool;  // flags: 65568 
  public event function OnQuestSelected( _QuestID : Int32) : Bool;  // flags: 65568 
  public event function OnJournalTabSelected( ID : Int32) : Bool;  // flags: 65568 
  public event function OnObjectiveSelected( ID : Int32) : Bool;  // flags: 65568 
  public event function OnUpdateTooltipCompareData( item : SItemUniqueId,  compareItemType : Int32,  tooltipName : String) : Bool;  // flags: 65568 
  private function PopulateData();  // flags: 16384 
  public function UpdateObjectives( questID : Int32);  // flags: 65536 
  public function UpdateRewards();  // flags: 65536 
  public function UpdateTooltipCompareData( item : SItemUniqueId,  compareItem : SItemUniqueId,  tooltipInv : CInventoryComponent,  tooltipName : String);  // flags: 65536 
  public function GetAreaName( questEntry : CJournalQuest) : String;  // flags: 65536 
  public function GetDescription( currentQuest : CJournalQuest) : String;  // flags: 65536 
  public function UpdateDescription( currentQuestID : Int32);  // flags: 65536 

}
import class ISpawnTreeScriptedInitializer extends ISpawnTreeInitializer {

  public function Init( actor : CActor) : Bool;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 

}
import class CR4TestMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCameraUpdate( lookAtX : Float,  lookAtY : Float,  lookAtZ : Float,  cameraYaw : Float,  cameraPitch : Float,  cameraDistance : Float) : Bool;  // flags: 65568 
  public event function OnSunUpdate( sunYaw : Float,  sunPitch : Float) : Bool;  // flags: 65568 
  public event function OnNextEntityTemplate() : Bool;  // flags: 65568 
  public event function OnNextAppearance() : Bool;  // flags: 65568 
  public event function OnNextEnvironmentDefinition() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenuTemp() : Bool;  // flags: 65568 
  protected function UpdateEntityTemplate();  // flags: 32768 
  protected function UpdateApperance();  // flags: 32768 
  protected function UpdateItems();  // flags: 32768 
  protected function UpdateEnvironmentAndSunRotation();  // flags: 32768 

}
import class CR4UIRescaleMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnConfirmRescale( frameScaleX : Float,  frameScaleY : Float) : Bool;  // flags: 65568 
  public event function OnUpdateRescale( frameScaleX : Float,  frameScaleY : Float) : Bool;  // flags: 65568 
  public function UpdateRescale( frameScaleX : Float,  frameScaleY : Float,  scale : Float,  opacity : Float);  // flags: 65536 

}
import class CR4GlossaryCharacterMenu extends CR4ListBaseMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateImage( tag : CName);  // flags: 65536 
  private function PopulateData();  // flags: 16384 
  public function GetDescription( currentCharacter : CJournalCharacter) : String;  // flags: 65536 
  public function UpdateDescription( entryName : CName);  // flags: 65536 
  public function UpdateItems( tag : CName);  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 
  public function GetCharacterImportanceLocKey( character : CJournalCharacter) : CName;  // flags: 65536 

}
import class CSpawnTreeInitializerIdleAI extends ISpawnTreeInitializerAI {

  public function Init();  // flags: 65536 

}
import class ISpawnTreeInitializerIdleSmartAI extends CSpawnTreeInitializerIdleAI {
  import var subInitializer : ISpawnTreeInitializer; // 6000

  public function GetObjectForPropertiesEdition() : IScriptable;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 
  public function GetSubInitializerClassName() : CName;  // flags: 65536 
  public function GetContextMenuSpecialOptions( out  names : array<String>);  // flags: 65536 
  public function RunSpecialOption( option : Int32);  // flags: 65536 

}
import class CSpawnTreeInitializerStartingBehavior extends CSpawnTreeInitializerBaseStartingBehavior {

  public function Init();  // flags: 65536 

}
import class ISpawnTreeInitializerCommunityAI extends ISpawnTreeInitializerAI {

  public function Init();  // flags: 65536 

}
import class CSpawnTreeInitializerAddTag extends ISpawnTreeInitializer {
  import var tag : TagList; // 4001
  import var onlySetOnSpawnAppearance : Bool; // 6001

  import public final function AddTag( tag : CName);  // flags: 65561 

}
import class CR4GlossaryMenu extends CR4ListBaseMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateImage( tag : CName);  // flags: 65536 
  private function PopulateData();  // flags: 16384 
  public function GetDescription( currentEntry : CJournalGlossary) : String;  // flags: 65536 
  public function UpdateDescription( entryName : CName);  // flags: 65536 
  public function UpdateItems( tag : CName);  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CR4GlossaryPlacesMenu extends CR4ListBaseMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateImage( tag : CName);  // flags: 65536 
  private function PopulateData();  // flags: 16384 
  public function GetDescription( currentEntry : CJournalPlace) : String;  // flags: 65536 
  public function UpdateDescription( entryName : CName);  // flags: 65536 
  public function UpdateItems( tag : CName);  // flags: 65536 

}
import class CMovingPhysicalAgentComponent extends CMovingAgentComponent {

  import public final function IsPhysicalMovementEnabled() : Bool;  // flags: 65561 
  import public final function SetAnimatedMovement( enable : Bool);  // flags: 65561 
  import public final function IsAnimatedMovement() : Bool;  // flags: 65561 
  import public final function GetPhysicalState() : ECharacterPhysicsState;  // flags: 65561 
  import public final function SetGravity( flag : Bool);  // flags: 65561 
  import public final function SetBehaviorCallbackNeed( flag : Bool);  // flags: 65561 
  import public final function SetSwimming( flag : Bool);  // flags: 65561 
  import public final function SetWaterLevel( value : Float);  // flags: 65561 
  import public final function GetWaterLevel() : Float;  // flags: 65561 
  import public final function GetSubmergeDepth() : Float;  // flags: 65561 
  import public final function SetDiving( diving : Bool);  // flags: 65561 
  import public final function IsDiving() : Bool;  // flags: 65561 
  import public final function SetEmergeSpeed( value : Float);  // flags: 65561 
  import public final function GetEmergeSpeed() : Float;  // flags: 65561 
  function SetSubmergeSpeed();  // flags: 1 
  function GetSubmergeSpeed();  // flags: 1 
  import public final function SetRagdollPushingMul( value : Float);  // flags: 65561 
  import public final function GetRagdollPushingMul() : Float;  // flags: 65561 
  import public final function ApplyVelocity( vel : Vector);  // flags: 65561 
  import public final function RegisterEventListener( listener : IScriptable);  // flags: 65561 
  import public final function UnregisterEventListener( listener : IScriptable);  // flags: 65561 
  import public final function SetPushable( pushable : Bool);  // flags: 65561 
  import public final function IsOnGround() : Bool;  // flags: 65561 
  import public final function IsCollidesWithCeiling() : Bool;  // flags: 65561 
  import public final function IsCollidesOnSide() : Bool;  // flags: 65561 
  import public final function IsFalling() : Bool;  // flags: 65561 
  import public final function IsSliding() : Bool;  // flags: 65561 
  import public final function GetSlideDir() : Vector;  // flags: 65561 
  import public final function GetSlideCoef() : Float;  // flags: 65561 
  import public final function SetSlidingSpeed( speed : Float);  // flags: 65561 
  import public final function SetSlidingLimits( min : Float,  max : Float);  // flags: 65561 
  import public final function SetSliding( enable : Bool);  // flags: 65561 
  import public final function EnableAdditionalVerticalSlidingIteration( enable : Bool);  // flags: 65561 
  import public final function IsAdditionalVerticalSlidingIterationEnabled() : Bool;  // flags: 65561 
  import public final function SetTerrainLimits( min : Float,  max : Float);  // flags: 65561 
  import public final function SetTerrainInfluence( mul : Float);  // flags: 65561 
  import public final function GetCapsuleHeight() : Float;  // flags: 65561 
  import public final function GetCapsuleRadius() : Float;  // flags: 65561 
  import public final function GetSlopePitch() : Float;  // flags: 65561 
  import public final function GetTerrainNormal( damped : Bool) : Vector;  // flags: 65561 
  import public final function GetTerrainNormalWide( out  normalAverage : Vector,  out  normalGlobal : Vector,  directionToCheck : Vector,  separationH : Float,  separationF : Float,  separationB : Float);  // flags: 65561 
  import public final function SetVirtualControllersPitch( pitch : Float);  // flags: 65561 
  import public final function GetCollisionDataCount() : Int32;  // flags: 65561 
  import public final function GetCollisionData( index : Int32) : SCollisionData;  // flags: 65561 
  import public final function GetCollisionCharacterDataCount() : Int32;  // flags: 65561 
  import public final function GetCollisionCharacterData( index : Int32) : SCollisionData;  // flags: 65561 
  import public final function GetGroundGridCollisionOn( side : ECollisionSides) : Bool;  // flags: 65561 
  import public final function EnableCollisionPrediction( enable : Bool);  // flags: 65561 
  import public final function EnableVirtualControllerCollisionResponse( virtualControllerName : CName,  enable : Bool);  // flags: 65561 
  import public final function GetMaterialName() : CName;  // flags: 65561 

}
import class CMovementAdjustor extends CObject {

  import public final function IsRequestActive( ticket : SMovementAdjustmentRequestTicket) : Bool;  // flags: 65561 
  import public final function HasAnyActiveRequest() : Bool;  // flags: 65561 
  import public final function HasAnyActiveRotationRequests() : Bool;  // flags: 65561 
  import public final function HasAnyActiveTranslationRequests() : Bool;  // flags: 65561 
  import public final function Cancel( ticket : SMovementAdjustmentRequestTicket);  // flags: 65561 
  import public final function CancelByName( requestName : CName);  // flags: 65561 
  import public final function CancelAll();  // flags: 65561 
  import public final function CreateNewRequest( optional  requestName : CName) : SMovementAdjustmentRequestTicket;  // flags: 65561 
  import public final function GetRequest( requestName : CName) : SMovementAdjustmentRequestTicket;  // flags: 65561 
  import public final function BlendIn( ticket : SMovementAdjustmentRequestTicket,  blendInTime : Float);  // flags: 65561 
  import public final function DontEnd( ticket : SMovementAdjustmentRequestTicket);  // flags: 65561 
  import public final function KeepActiveFor( ticket : SMovementAdjustmentRequestTicket,  duration : Float);  // flags: 65561 
  import public final function AdjustmentDuration( ticket : SMovementAdjustmentRequestTicket,  duration : Float);  // flags: 65561 
  import public final function Continuous( ticket : SMovementAdjustmentRequestTicket);  // flags: 65561 
  import public final function BaseOnNode( ticket : SMovementAdjustmentRequestTicket,  onNode : CNode);  // flags: 65561 
  import public final function BindToEvent( ticket : SMovementAdjustmentRequestTicket,  eventName : CName,  optional  adjustDurationOnNextEvent : Bool);  // flags: 65561 
  import public final function BindToEventAnimInfo( ticket : SMovementAdjustmentRequestTicket,  animInfo : SAnimationEventAnimInfo,  optional  bindOnly : Bool);  // flags: 65561 
  import public final function ScaleAnimation( ticket : SMovementAdjustmentRequestTicket,  optional  scaleAnimation : Bool,  optional  scaleLocation : Bool,  optional  scaleRotation : Bool);  // flags: 65561 
  import public final function ScaleAnimationLocationVertically( ticket : SMovementAdjustmentRequestTicket,  optional  scaleAnimationLocationVertically : Bool);  // flags: 65561 
  import public final function DontUseSourceAnimation( ticket : SMovementAdjustmentRequestTicket,  optional  dontUseSourceAnimation : Bool);  // flags: 65561 
  import public final function UpdateSourceAnimation( ticket : SMovementAdjustmentRequestTicket,  animInfo : SAnimationEventAnimInfo);  // flags: 65561 
  import public final function CancelIfSourceAnimationUpdateIsNotUpdated( ticket : SMovementAdjustmentRequestTicket,  optional  cancelIfSourceAnimationUpdateIsNotUpdated : Bool);  // flags: 65561 
  import public final function SyncPointInAnimation( ticket : SMovementAdjustmentRequestTicket,  optional  syncPointTime : Float);  // flags: 65561 
  import public final function UseBoneForAdjustment( ticket : SMovementAdjustmentRequestTicket,  optional  boneName : CName,  optional  useContinuously : Bool,  optional  useBoneForLocationAdjustmentWeight : Float,  optional  useBoneForRotationAdjustmentWeight : Float,  optional  useBoneToMatchTargetHeadingWeight : Float);  // flags: 65561 
  import public final function MatchEntitySlot( ticket : SMovementAdjustmentRequestTicket,  entity : CEntity,  slotName : CName);  // flags: 65561 
  import public final function KeepLocationAdjustmentActive( ticket : SMovementAdjustmentRequestTicket);  // flags: 65561 
  import public final function ReplaceTranslation( ticket : SMovementAdjustmentRequestTicket,  optional  replaceTranslation : Bool);  // flags: 65561 
  import public final function ShouldStartAt( ticket : SMovementAdjustmentRequestTicket,  atLocation : Vector);  // flags: 65561 
  import public final function SlideTo( ticket : SMovementAdjustmentRequestTicket,  targetLocation : Vector);  // flags: 65561 
  import public final function SlideBy( ticket : SMovementAdjustmentRequestTicket,  byVector : Vector);  // flags: 65561 
  import public final function SlideTowards( ticket : SMovementAdjustmentRequestTicket,  node : CNode,  optional  minDistance : Float,  optional  maxDistance : Float);  // flags: 65561 
  import public final function SlideToEntity( ticket : SMovementAdjustmentRequestTicket,  entity : CEntity,  optional  boneName : CName,  optional  minDistance : Float,  optional  maxDistance : Float);  // flags: 65561 
  import public final function MaxLocationAdjustmentSpeed( ticket : SMovementAdjustmentRequestTicket,  maxSpeed : Float,  optional  maxSpeedZ : Float);  // flags: 65561 
  import public final function MaxLocationAdjustmentDistance( ticket : SMovementAdjustmentRequestTicket,  optional  throughSpeed : Bool,  optional  locationAdjustmentMaxDistanceXY : Float,  optional  locationAdjustmentMaxDistanceZ : Float);  // flags: 65561 
  import public final function AdjustLocationVertically( ticket : SMovementAdjustmentRequestTicket,  optional  adjustLocationVertically : Bool);  // flags: 65561 
  import public final function KeepRotationAdjustmentActive( ticket : SMovementAdjustmentRequestTicket);  // flags: 65561 
  import public final function ReplaceRotation( ticket : SMovementAdjustmentRequestTicket,  optional  replaceRotation : Bool);  // flags: 65561 
  import public final function ShouldStartFacing( ticket : SMovementAdjustmentRequestTicket,  targetHeading : Float);  // flags: 65561 
  import public final function RotateTo( ticket : SMovementAdjustmentRequestTicket,  targetHeading : Float);  // flags: 65561 
  import public final function RotateBy( ticket : SMovementAdjustmentRequestTicket,  byHeading : Float);  // flags: 65561 
  import public final function RotateTowards( ticket : SMovementAdjustmentRequestTicket,  node : CNode,  optional  offsetHeading : Float);  // flags: 65561 
  import public final function MatchMoveRotation( ticket : SMovementAdjustmentRequestTicket);  // flags: 65561 
  import public final function MaxRotationAdjustmentSpeed( ticket : SMovementAdjustmentRequestTicket,  rotationAdjustmentMaxSpeed : Float);  // flags: 65561 
  import public final function SteeringMayOverrideMaxRotationAdjustmentSpeed( ticket : SMovementAdjustmentRequestTicket,  optional  steeringMayOverrideMaxRotationAdjustmentSpeed : Bool);  // flags: 65561 
  import public final function LockMovementInDirection( ticket : SMovementAdjustmentRequestTicket,  heading : Float);  // flags: 65561 
  import public final function RotateExistingDeltaLocation( ticket : SMovementAdjustmentRequestTicket,  optional  rotateExistingDeltaLocation : Bool);  // flags: 65561 
  import public final function NotifyScript( ticket : SMovementAdjustmentRequestTicket,  notifyObject : IScriptable,  eventName : CName,  notify : EMovementAdjustmentNotify);  // flags: 65561 
  import public final function DontNotifyScript( ticket : SMovementAdjustmentRequestTicket,  notifyObject : IScriptable,  eventName : CName,  notify : EMovementAdjustmentNotify);  // flags: 65561 
  import public final function AddOneFrameTranslationVelocity( translationVelocity : Vector);  // flags: 65561 
  import public final function AddOneFrameRotationVelocity( rotationVelocity : EulerAngles);  // flags: 65561 

}
import class CR4Test2Popup extends CR4Popup {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingPopup() : Bool;  // flags: 65568 
  public event function OnClosePopup() : Bool;  // flags: 65568 

}
import class CR4TestPopup extends CR4Popup {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingPopup() : Bool;  // flags: 65568 
  public event function OnClosePopup() : Bool;  // flags: 65568 

}
import class CReactionsManager extends CObject {

  import public final function BroadcastStaticInterestPoint( interestPoint : CInterestPoint,  position : Vector,  optional  timeout : Float);  // flags: 65561 
  import public final function BroadcastDynamicInterestPoint( interestPoint : CInterestPoint,  node : CNode,  optional  timeout : Float);  // flags: 65561 
  import public final function SendStaticInterestPoint( target : CNewNPC,  interestPoint : CInterestPoint,  position : Vector,  optional  timeout : Float);  // flags: 65561 
  import public final function SendDynamicInterestPoint( target : CNewNPC,  interestPoint : CInterestPoint,  node : CNode,  optional  timeout : Float);  // flags: 65561 

}
import class CInterestPointInstance extends CObject {
  import var parentNode : CNode; // 4008
  import var position : Vector; // 4008

  import public final function GetParentPoint() : CInterestPoint;  // flags: 65561 
  import public final function GetWorldPosition() : Vector;  // flags: 65561 
  import public final function GetNode() : CNode;  // flags: 65561 
  import public final function GetGeneratedFieldName() : CName;  // flags: 65561 
  import public final function GetFieldStrength( position : Vector) : Float;  // flags: 65561 
  import public final function SetFieldStrengthMultiplier( param : Float);  // flags: 65561 
  import public final function GetFieldStrengthMultiplier() : Float;  // flags: 65561 
  import public final function SetTestParameter( param : Float);  // flags: 65561 
  import public final function GetTestParameter() : Float;  // flags: 65561 

}
import class CScriptedInterestPoint extends CInterestPoint {

  public function SetupInstance( instance : CInterestPointInstance,  source : IScriptable);  // flags: 65536 

}
import class CReactionScriptedCondition extends IReactionCondition {

  public function Perform( source : CNode,  target : CNode,  interestPoint : CInterestPointInstance) : Bool;  // flags: 65536 

}
import class CReactionScript extends IReactionAction {

  public function Perform( npc : CNewNPC,  interestPoint : CInterestPointInstance,  reactionIndex : Int32);  // flags: 65536 

}
import class CBehTreeReactionManager extends CObject {
  import var reactionScens : array<CReactionScene>; // 4000
  import var reactionEvents : array<*CBehTreeReactionEventData>; // 4000

  function AddReactionEvent();  // flags: 1 
  import public final function RemoveReactionEvent( invoker : CEntity,  eventName : CName) : Bool;  // flags: 65561 
  import public final function CreateReactionEvent( invoker : CEntity,  eventName : CName,  lifetime : Float,  distanceRange : Float,  broadcastInterval : Float,  recipientCount : Int32,  optional  skipInvoker : Bool,  optional  setActionTargetOnBroadcast : Bool) : Bool;  // flags: 65561 
  import public final function CreateReactionEventCustomCenter( invoker : CEntity,  eventName : CName,  lifetime : Float,  distanceRange : Float,  broadcastInterval : Float,  recipientCount : Int32,  skipInvoker : Bool,  setActionTargetOnBroadcast : Bool,  customCenter : Vector) : Bool;  // flags: 65561 
  import public final function InitReactionScene( invoker : CEntity,  eventName : CName,  lifetime : Float,  distanceRange : Float,  broadcastInterval : Float,  recipientCount : Int32) : Bool;  // flags: 65561 
  import public final function AddReactionSceneGroup( voiceset : String,  group : CName);  // flags: 65561 
  public function RegisterReactionSceneGroups();  // flags: 65536 
  public function SuppressReactions( toggle : Bool,  areaTag : CName);  // flags: 65536 
  public function CreateReactionEventIfPossible( invoker : CEntity,  eventName : CName,  lifetime : Float,  distanceRange : Float,  broadcastInterval : Float,  recipientCount : Int32,  skipInvoker : Bool,  optional  setActionTargetOnBroadcast : Bool,  optional  customCenter : Vector);  // flags: 65536 
  private function IsInSuppressed( invoker : CEntity) : Bool;  // flags: 16384 

}
import class W3CommonContainerInventoryComponent extends W3GuiBaseInventoryComponent {

  public function GiveAllItems( receiver : W3GuiBaseInventoryComponent);  // flags: 65536 
  public function GetItemActionType( item : SItemUniqueId,  optional  bGetDefault : Bool) : EInventoryActionType;  // flags: 65536 
  public function HideAllItems();  // flags: 65536 
  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 

}
import class W3GuiTakeOnlyContainerInventoryComponent extends W3CommonContainerInventoryComponent {

  public function ReceiveItem( item : SItemUniqueId,  giver : W3GuiBaseInventoryComponent,  optional  quantity : Int32,  optional  newItemID : SItemUniqueId) : Bool;  // flags: 65536 

}
import class CRandomFXEntity extends CEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function EndFX();  // flags: 65536 
  public function DestroyFX();  // flags: 65536 
  public function TimerDestroy( td : Float,  id : Int32);  // flags: 66560 
  public function TimerSoundEvent( td : Float,  id : Int32);  // flags: 66560 
  public function PlayEffectInterval( t : Float,  id : Int32);  // flags: 66560 

}
import class CMoveSCPlayerIsRunning extends CMoveSCScriptedCondition {

  public function GetConditionName( out  caption : String);  // flags: 65536 
  public function Evaluate( agent : CMovingAgentComponent,  goal : SMoveLocomotionGoal) : Bool;  // flags: 65536 

}
import class CTeleporter extends CEntity {
  import var destinationNodesTags : TagList; // 4001
  import var teleportedActorsTags : TagList; // 4001

  function UseTeleporter();  // flags: 1 

}
import class CMoveSCPlayerIsStrafing extends CMoveSCScriptedCondition {

  public function GetConditionName( out  caption : String);  // flags: 65536 
  public function Evaluate( agent : CMovingAgentComponent,  goal : SMoveLocomotionGoal) : Bool;  // flags: 65536 

}
import class CMoveTRGScript extends CObject {
  import var agent : CMovingAgentComponent; // 6008
  import var timeDelta : Float; // 6008

  import public function SetHeadingGoal( out  goal : SMoveLocomotionGoal,  heading : Vector);  // flags: 65545 
  import public function SetOrientationGoal( out  goal : SMoveLocomotionGoal,  orientation : Float,  optional  alwaysSet : Bool);  // flags: 65545 
  import public function SetSpeedGoal( out  goal : SMoveLocomotionGoal,  speed : Float);  // flags: 65545 
  import public function SetMaxWaitTime( out  goal : SMoveLocomotionGoal,  time : Float);  // flags: 65545 
  import public function MatchDirectionWithOrientation( out  goal : SMoveLocomotionGoal,  enable : Bool);  // flags: 65545 
  import public function SetFulfilled( out  goal : SMoveLocomotionGoal,  isFulfilled : Bool);  // flags: 65545 
  import public final function Seek( pos : Vector) : Vector;  // flags: 65561 
  import public final function Flee( pos : Vector) : Vector;  // flags: 65561 
  import public final function Pursue( agent : CMovingAgentComponent) : Vector;  // flags: 65561 
  import public final function FaceTarget( pos : Vector) : Vector;  // flags: 65561 
  public function UpdateChannels( out  goal : SMoveLocomotionGoal);  // flags: 66048 

}
import class CMoveSCIsSmallCreature extends CMoveSCScriptedCondition {

  public function GetConditionName( out  caption : String);  // flags: 65536 
  public function Evaluate( agent : CMovingAgentComponent,  goal : SMoveLocomotionGoal) : Bool;  // flags: 65536 

}
import class W3NPCBackgroundNew extends CEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 

}
import class W3NPCBackgroundPairStateDoWork extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function DoWork();  // flags: 65664 

}
import class W3NPCBackgroundWoman extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 

}
import class W3FlyingWhale extends CActor {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 

}
import class PlayerAimingStateWaiting extends CScriptableState {

  public event function OnStartAiming( t : CThrowable) : Bool;  // flags: 65568 

}
import class PlayerAimingStateAiming extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function ShowCrosshair( value : Bool);  // flags: 65536 
  public function Aim();  // flags: 65664 
  public event function OnStopAiming() : Bool;  // flags: 65568 
  public event function OnRemoveAimingSloMo() : Bool;  // flags: 65568 
  public function UpdateThrowPositionBolt();  // flags: 65536 
  public function ShouldExcludeFromFriendlySweep( ent : CEntity) : Bool;  // flags: 65536 
  public function UpdateThrowPosition();  // flags: 65536 
  private function CalculateAimPosition( rayCastStartPos : Vector,  rayCastEndPos : Vector,  out  aimPos : Vector,  out  aimPosNormal : Vector,  out  aimEnt : CEntity);  // flags: 16384 
  public function SetRadiusEntityScale();  // flags: 65536 
  public function SloMo();  // flags: 65536 
  public function RemoveSloMo();  // flags: 65536 
  public cleanup function AimCleanup();  // flags: 73728 
  public event function OnAddAimingSloMo() : Bool;  // flags: 65568 

}
import class CStoryScene extends CResource {
  import var controlParts : array<*CStorySceneControlPart>; // 4000
  import var sections : array<*CStorySceneSection>; // 4000
  import var elementIDCounter : Uint32; // 4000
  import var sectionIDCounter : Uint32; // 4000
  import var sceneId : Uint32; // 4001
  import var sceneTemplates : array<*CStorySceneActor>; // 4005
  import var sceneProps : array<*CStorySceneProp>; // 4005
  import var sceneEffects : array<*CStorySceneEffect>; // 4005
  import var sceneLights : array<*CStorySceneLight>; // 4005
  import var mayActorsStartWorking : Bool; // 4001
  import var surpassWaterRendering : Bool; // 4001
  import var dialogsetInstances : array<*CStorySceneDialogsetInstance>; // 4005
  import var cameraDefinitions : array<StorySceneCameraDefinition>; // 4005
  import var banksDependency : array<CName>; // 4001

  function GetCustomBehavior();  // flags: 1 
  function GetCustomAnimset();  // flags: 1 
  import public final function GetRequiredPositionTags() : array<CName>;  // flags: 65561 

}
import class CStorySceneSpawner extends CGameplayEntity {
  import var storyScene : CStoryScene; // 6001
  import var inputName : String; // 6001

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 

}
import class CStorySceneSystem extends IGameSystem {
  import var activeScenes : array<CStoryScenePlayer>; // 4000
  import var actorMap : *CStorySceneActorMap; // 4000

  import public final function SendSignal( signal : EStorySceneSignalType,  value : Int32);  // flags: 65561 
  function GetChoices();  // flags: 1 
  function GetHighlightedChoice();  // flags: 1 
  import public final function PlayScene( scene : CStoryScene,  input : String);  // flags: 65561 
  function IsCurrentlyPlayingAnyScene();  // flags: 1 
  import public final function IsSkippingLineAllowed() : Bool;  // flags: 65561 

}
import class WeaponHolsterStateSelectingWeapon extends CScriptableState {

  public event function OnEquipMeleeWeapon( weapontype : EPlayerWeapon,  ignoreActionLock : Bool,  optional  sheatheIfAlreadyEquipped : Bool,  optional  forceHolster : Bool) : Bool;  // flags: 65568 
  public event function OnEquippedMeleeWeapon( weapontype : EPlayerWeapon) : Bool;  // flags: 65568 
  public event function OnHolsterLeftHandItem() : Bool;  // flags: 65568 
  public function EquipMeleeWeapon( weapontype : EPlayerWeapon,  optional  sheatheIfAlreadyEquipped : Bool);  // flags: 65664 
  public function HolsterLeftHandItem();  // flags: 65664 
  public event function OnWeaponDrawReady() : Bool;  // flags: 65568 
  public event function OnWeaponHolsterReady() : Bool;  // flags: 65568 
  private latent function HideUsableItemL();  // flags: 16448 
  private function SignalDrawSwordAction();  // flags: 16384 
  private function SignalHolsterSwordAction();  // flags: 16384 
  private function Lock();  // flags: 16384 
  private function Unlock();  // flags: 16384 
  public function HideUsableItemLTimer( dt : Float,  id : Int32);  // flags: 66560 

}
import class W3ReplacerCiri extends W3Replacer {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function IsInitialized() : Bool;  // flags: 65536 
  private final function NewGamePlusInitialize();  // flags: 16400 
  public function ProcessCombatActionBuffer() : Bool;  // flags: 65536 
  public function AddPhantom( phantom : W3CiriPhantom);  // flags: 65536 
  public function DestroyPhantoms();  // flags: 65536 
  public function GetCriticalHitChance( isHeavyAttack : Bool,  target : CActor,  victimMonsterCategory : EMonsterCategory) : Float;  // flags: 65536 
  public function GetSelectedItemId() : SItemUniqueId;  // flags: 65536 
  private function GoToCombat( weaponType : EPlayerWeapon,  optional  initialAction : EInitialAction);  // flags: 16384 
  private function RemoveNotNeededWeaponsFromInventory();  // flags: 16384 
  public function DisplayCannotAttackMessage( actor : CActor) : Bool;  // flags: 65536 
  public event function OnPerformSpecialAttack( enableAttack : Bool) : Bool;  // flags: 65568 
  public event function OnPerformSpecialAttackHeavy( enableAttack : Bool) : Bool;  // flags: 65568 
  public event function OnPerformCounter() : Bool;  // flags: 65568 
  public event function OnPerformDodge() : Bool;  // flags: 65568 
  public event function OnPerformDash() : Bool;  // flags: 65568 
  public event function OnPerformDashAttack() : Bool;  // flags: 65568 
  public event function OnAnimEvent_ActionBlend( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_fx_trail( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_rage( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_SlideToTarget( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnSpecialActionHeavyEnd() : Bool;  // flags: 65568 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  public event function OnCombatStart() : Bool;  // flags: 65568 
  public event function OnCombatFinished() : Bool;  // flags: 65568 
  public event function OnAbilityAdded( abilityName : CName) : Bool;  // flags: 65568 
  public event function OnAbilityRemoved( abilityName : CName) : Bool;  // flags: 65568 
  public function ToggleRageEffect( toggle : Bool);  // flags: 65536 
  private function EnableRageEffect( enable : Bool);  // flags: 16384 
  public function PlayRageEffectOnWeapon( effectName : CName,  optional  disable : Bool) : Bool;  // flags: 65536 
  protected function ShouldDrainStaminaWhileSprinting() : Bool;  // flags: 32768 
  protected function ShouldUseStaminaWhileSprinting() : Bool;  // flags: 32768 
  public function GainResource();  // flags: 65536 
  public function DrainResourceForSpecialAttack();  // flags: 65536 
  public function DrainResourceForDodge();  // flags: 65536 
  public function DrainResourceForDash();  // flags: 65536 
  public function HasStaminaForDash( optional  dontPlaySound : Bool) : Bool;  // flags: 65536 
  public function HasStaminaForSpecialAction( optional  dontPlaySound : Bool) : Bool;  // flags: 65536 
  public function HasStaminaToParry( attActionName : CName) : Bool;  // flags: 65536 
  public function SmartSetVisible( toggle : Bool);  // flags: 65536 
  public function MakeInvulnerable( toggle : Bool);  // flags: 65536 
  public function EnableSpecialAttackHeavyCollsion( enable : Bool);  // flags: 65536 
  public function IsInCombatAction_SpecialAttack() : Bool;  // flags: 65536 
  public final function GetMostConvenientMeleeWeapon( targetToDrawAgainst : CActor,  optional  ignoreActionLock : Bool) : EPlayerWeapon;  // flags: 65552 
  protected function PerformCounterCheck( parryInfo : SParryInfo) : Bool;  // flags: 32768 
  public event function OnSpecialAttackHeavyCollision( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  private function SlowMoStart( dt : Float,  id : Int32);  // flags: 17408 
  private function SlowMoEnd( dt : Float,  id : Int32);  // flags: 17408 
  public function OnSlideToNewPositionStart( duration : Float,  newPos : Vector,  optional  newHeading : Vector);  // flags: 65536 
  private function SlideToNewPositionEnd( dt : Float,  id : Int32);  // flags: 17408 
  protected function UpdateCameraForSpecialAttack( out  moveData : SCameraMovementData,  timeDelta : Float) : Bool;  // flags: 32768 
  protected function SpecialHeavyAttackCamera( out  moveData : SCameraMovementData,  timeDelta : Float);  // flags: 32768 
  public function SetAttackData( data : CPreAttackEventData);  // flags: 65536 
  public function ReduceDamage( out  damageData : W3DamageAction);  // flags: 65536 
  public final function GetOilAppliedOnSword( steel : Bool) : CName;  // flags: 65552 
  public final function GetEquippedSword( steel : Bool) : SItemUniqueId;  // flags: 65552 
  public final function HasSword() : Bool;  // flags: 65552 
  public final function IsEquippedSwordUpgradedWithOil( steel : Bool,  optional  oilName : CName) : Bool;  // flags: 65552 
  public function CanApplyOilOnItem( oilId : SItemUniqueId,  usedOnItem : SItemUniqueId) : Bool;  // flags: 65536 
  public final function ApplyOil( oilId : SItemUniqueId,  usedOnItem : SItemUniqueId);  // flags: 65552 

}
import class CQuestScriptedCondition extends IQuestCondition {

  public function Activate();  // flags: 66048 
  public function Deactivate();  // flags: 66048 
  public function Evaluate() : Bool;  // flags: 66048 

}
import class IActorLatentAction extends IAIParameters {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class CQCActorScriptedCondition extends IActorConditionType {

  public function Evaluate( actor : CActor) : Bool;  // flags: 66048 

}
import class CMoveTRGPlayerManualMovement extends CMoveTRGScript {

  public function DampOrientation( value : Float,  inputValue : Float) : Float;  // flags: 65536 
  public function DampOrientationDiff( value : Float,  inputValue : Float,  optional  dampValue : Float) : Float;  // flags: 65536 
  public function DampOrientationSpring( value : Float,  inputValue : Float) : Float;  // flags: 65536 
  private function GetMaxHeadingDiff( currHeading : Float) : Float;  // flags: 16384 
  private final function SetTorsoOrientationGoal( angleWS : Float);  // flags: 16400 
  private function SetHandAim();  // flags: 16384 

}
import class CItemEntity extends CEntity {
  import var timeToDespawn : Float; // 4001
  import var reportToScript : Bool; // 4001

  import public final function GetMeshComponent() : CComponent;  // flags: 65561 
  import public final function GetParentEntity() : CEntity;  // flags: 65561 
  import public final function GetItemCategory() : CName;  // flags: 65561 
  import public final function GetItemTags( out  tags : array<CName>);  // flags: 65561 
  public event function OnGrab() : Bool;  // flags: 65568 
  public event function OnPut() : Bool;  // flags: 65568 
  public event function OnAttachmentUpdate( parentEntity : CEntity,  itemName : CName) : Bool;  // flags: 65568 
  public function SetupDrawHolsterSounds();  // flags: 65536 
  public event function OnItemCollision( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 

}
import class CInventoryComponent extends CComponent {
  import var containerTemplate : CEntityTemplate; // 4001
  import var rebalanceEveryNSeconds : Uint32; // 4001

  import public final function GetItemModifierFloat( itemId : SItemUniqueId,  modName : CName,  optional  defValue : Float) : Float;  // flags: 65561 
  import public final function SetItemModifierFloat( itemId : SItemUniqueId,  modName : CName,  val : Float);  // flags: 65561 
  import public final function GetItemModifierInt( itemId : SItemUniqueId,  modName : CName,  optional  defValue : Int32) : Int32;  // flags: 65561 
  import public final function SetItemModifierInt( itemId : SItemUniqueId,  modName : CName,  val : Int32);  // flags: 65561 
  import public final function GetItemFromSlot( slotName : CName) : SItemUniqueId;  // flags: 65561 
  import public final function GetItemsNames() : array<CName>;  // flags: 65561 
  import public final function GetItemCount( optional  useAssociatedInventory : Bool) : Int32;  // flags: 65561 
  import public final function GetItemName( itemId : SItemUniqueId) : CName;  // flags: 65561 
  import public final function GetItemCategory( itemId : SItemUniqueId) : CName;  // flags: 65561 
  import public final function GetItemClass( itemId : SItemUniqueId) : EInventoryItemClass;  // flags: 65561 
  import public final function ItemHasTag( itemId : SItemUniqueId,  tag : CName) : Bool;  // flags: 65561 
  import public final function GetItemTags( itemId : SItemUniqueId,  out  tags : array<CName>) : Bool;  // flags: 65561 
  import public final function AddItemTag( itemId : SItemUniqueId,  tag : CName) : Bool;  // flags: 65561 
  import public final function RemoveItemTag( itemId : SItemUniqueId,  tag : CName) : Bool;  // flags: 65561 
  import public final function GetItemByItemEntity( itemEntity : CItemEntity) : SItemUniqueId;  // flags: 65561 
  import public final function GetItemQuantity( itemId : SItemUniqueId) : Int32;  // flags: 65561 
  import public final function GetItemQuantityByName( itemName : CName,  optional  useAssociatedInventory : Bool) : Int32;  // flags: 65561 
  import public final function GetItemQuantityByCategory( itemCategory : CName,  optional  useAssociatedInventory : Bool) : Int32;  // flags: 65561 
  import public final function GetItemQuantityByTag( itemTag : CName,  optional  useAssociatedInventory : Bool) : Int32;  // flags: 65561 
  import public final function GetAllItemsQuantity( optional  useAssociatedInventory : Bool) : Int32;  // flags: 65561 
  import public final function GetItemEntityUnsafe( itemId : SItemUniqueId) : CItemEntity;  // flags: 65561 
  import public final function GetItemBaseAttributes( itemId : SItemUniqueId,  out  attributes : array<CName>);  // flags: 65561 
  import public final function GetItemAttributes( itemId : SItemUniqueId,  out  attributes : array<CName>);  // flags: 65561 
  import public final function GetItemAttributeValue( itemId : SItemUniqueId,  attributeName : CName,  optional  abilityTags : array<CName>,  optional  withoutTags : Bool) : SAbilityAttributeValue;  // flags: 65561 
  import public final function GetItemAbilityAttributeValue( itemId : SItemUniqueId,  attributeName : CName,  abilityName : CName) : SAbilityAttributeValue;  // flags: 65561 
  import public final function GetItemAbilities( itemId : SItemUniqueId,  out  abilities : array<CName>);  // flags: 65561 
  import public final function GetItemContainedAbilities( itemId : SItemUniqueId,  out  abilities : array<CName>);  // flags: 65561 
  import private final function GiveItem( otherInventory : CInventoryComponent,  itemId : SItemUniqueId,  optional  quantity : Int32) : array<SItemUniqueId>;  // flags: 16409 
  import public final function HasItem( item : CName) : Bool;  // flags: 65561 
  import private final function AddMultiItem( item : CName,  optional  quantity : Int32,  optional  informGui : Bool,  optional  markAsNew : Bool,  optional  lootable : Bool) : array<SItemUniqueId>;  // flags: 16409 
  import private final function AddSingleItem( item : CName,  optional  informGui : Bool,  optional  markAsNew : Bool,  optional  lootable : Bool) : SItemUniqueId;  // flags: 16409 
  import public final function RemoveItem( itemId : SItemUniqueId,  optional  quantity : Int32) : Bool;  // flags: 65561 
  import public final function MountItem( itemId : SItemUniqueId,  optional  toHand : Bool,  optional  force : Bool) : Bool;  // flags: 65561 
  import public final function UnmountItem( itemId : SItemUniqueId,  optional  destroyEntity : Bool) : Bool;  // flags: 65561 
  import public final function ThrowAwayItem( itemId : SItemUniqueId,  optional  quantity : Int32) : Bool;  // flags: 65561 
  import public final function ThrowAwayAllItems() : CEntity;  // flags: 65561 
  import public final function ThrowAwayItemsFiltered( excludedTags : array<CName>) : CEntity;  // flags: 65561 
  import public final function ThrowAwayLootableItems( optional  skipNoDropNoShow : Bool) : CEntity;  // flags: 65561 
  import public final function PrintInfo();  // flags: 65561 
  import public final function DespawnItem( itemId : SItemUniqueId);  // flags: 65561 
  import public final function GetAllItems( out  items : array<SItemUniqueId>);  // flags: 65561 
  import public final function GetItemsByTag( tag : CName) : array<SItemUniqueId>;  // flags: 65561 
  import public final function GetItemsByCategory( category : CName) : array<SItemUniqueId>;  // flags: 65561 
  import public final function IsIdValid( itemId : SItemUniqueId) : Bool;  // flags: 65561 
  import public final function GetItemEnhancementSlotsCount( itemId : SItemUniqueId) : Int32;  // flags: 65561 
  import public final function GetItemEnhancementItems( itemId : SItemUniqueId,  out  names : array<CName>);  // flags: 65561 
  import public final function GetItemEnhancementCount( itemId : SItemUniqueId) : Int32;  // flags: 65561 
  import public final function HasEnhancementItemTag( enhancedItemId : SItemUniqueId,  slotIndex : Int32,  tag : CName) : Bool;  // flags: 65561 
  import private function EnhanceItem( enhancedItemId : SItemUniqueId,  extensionItemId : SItemUniqueId) : Bool;  // flags: 16393 
  import private function RemoveItemEnhancementByIndex( enhancedItemId : SItemUniqueId,  slotIndex : Int32) : Bool;  // flags: 16393 
  import private function RemoveItemEnhancementByName( enhancedItemId : SItemUniqueId,  extensionItemName : CName) : Bool;  // flags: 16393 
  import public final function GetCraftedItemName( itemId : SItemUniqueId) : CName;  // flags: 65561 
  import public final function IsItemMounted( itemId : SItemUniqueId) : Bool;  // flags: 65561 
  import public final function IsItemHeld( itemId : SItemUniqueId) : Bool;  // flags: 65561 
  import public final function GetDeploymentItemEntity( itemId : SItemUniqueId,  optional  position : Vector,  optional  rotation : EulerAngles,  optional  allocateIdTag : Bool) : CEntity;  // flags: 65561 
  import public final function PlayItemEffect( itemId : SItemUniqueId,  effectName : CName);  // flags: 65561 
  import public final function StopItemEffect( itemId : SItemUniqueId,  effectName : CName);  // flags: 65561 
  import public final function DropItem( itemId : SItemUniqueId,  optional  removeFromInv : Bool);  // flags: 65561 
  import public final function GetItemHoldSlot( itemId : SItemUniqueId) : CName;  // flags: 65561 
  import public final function EnableLoot( enable : Bool);  // flags: 65561 
  import public final function UpdateLoot();  // flags: 65561 
  import public final function AddItemsFromLootDefinition( lootDefinitionName : CName);  // flags: 65561 
  import public final function IsLootRenewable() : Bool;  // flags: 65561 
  import public final function IsReadyToRenew() : Bool;  // flags: 65561 
  import public final function RemoveAllItems();  // flags: 65561 
  import public final function GetInventoryItemUIData( item : SItemUniqueId) : SInventoryItemUIData;  // flags: 65561 
  import public final function SetInventoryItemUIData( item : SItemUniqueId,  data : SInventoryItemUIData);  // flags: 65561 
  import public final function GetSchematicIngredients( itemName : SItemUniqueId,  out  quantity : array<Int32>,  out  names : array<CName>);  // flags: 65561 
  import public final function GetSchematicRequiredCraftsmanType( craftName : SItemUniqueId) : CName;  // flags: 65561 
  import public final function GetSchematicRequiredCraftsmanLevel( craftName : SItemUniqueId) : CName;  // flags: 65561 
  import public final function GetItemRecyclingParts( itemId : SItemUniqueId) : array<SItemParts>;  // flags: 65561 
  import public final function GetItemGridSize( itemId : SItemUniqueId) : Int32;  // flags: 65561 
  import public final function HasItemDurability( itemId : SItemUniqueId) : Bool;  // flags: 65561 
  import public final function GetItemDurability( itemId : SItemUniqueId) : Float;  // flags: 65561 
  import private final function SetItemDurability( itemId : SItemUniqueId,  durability : Float);  // flags: 16409 
  import public final function GetItemInitialDurability( itemId : SItemUniqueId) : Float;  // flags: 65561 
  import public final function GetItemMaxDurability( itemId : SItemUniqueId) : Float;  // flags: 65561 
  import public final function ActivateQuestBonus();  // flags: 65561 
  import public final function GetItem( itemId : SItemUniqueId) : SInventoryItem;  // flags: 65561 
  import public final function GetFundsModifier() : Float;  // flags: 65561 
  import public final function GetItemPriceDisassemble( invItem : SInventoryItem) : Int32;  // flags: 65561 
  import public final function GetItemPriceRemoveUpgrade( invItem : SInventoryItem) : Int32;  // flags: 65561 
  import public final function GetItemPriceRepair( invItem : SInventoryItem,  out  costRepairPoint : Int32,  out  costRepairTotal : Int32);  // flags: 65561 
  import public final function GetItemPriceModified( itemId : SItemUniqueId,  optional  playerSellingItem : Bool) : Int32;  // flags: 65561 
  import public final function GetInventoryItemPriceModified( invItem : SInventoryItem,  optional  playerSellingItem : Bool) : Int32;  // flags: 65561 
  import public final function GetItemPrice( itemId : SItemUniqueId) : Int32;  // flags: 65561 
  import public final function GetItemWeight( id : SItemUniqueId) : Float;  // flags: 65561 
  import public final function TotalItemStats( invItem : SInventoryItem) : Float;  // flags: 65561 
  import public final function GetItemSetName( itemId : SItemUniqueId) : CName;  // flags: 65561 
  import public final function SortInventoryUIData();  // flags: 65561 
  import public final function AddItemCraftedAbility( itemId : SItemUniqueId,  abilityName : CName,  optional  allowDuplicate : Bool);  // flags: 65561 
  import public final function RemoveItemCraftedAbility( itemId : SItemUniqueId,  abilityName : CName);  // flags: 65561 
  import public final function AddItemBaseAbility( item : SItemUniqueId,  abilityName : CName);  // flags: 65561 
  import public final function RemoveItemBaseAbility( item : SItemUniqueId,  abilityName : CName);  // flags: 65561 
  import public final function PreviewItemAttributeAfterUpgrade( baseItemId : SItemUniqueId,  upgradeItemId : SItemUniqueId,  attributeName : CName,  optional  baseInventory : CInventoryComponent,  optional  upgradeInventory : CInventoryComponent) : SAbilityAttributeValue;  // flags: 65561 
  import public final function GetItemLocalizedNameByUniqueID( itemUniqueId : SItemUniqueId) : String;  // flags: 65561 
  import public final function GetItemLocalizedDescriptionByUniqueID( itemUniqueId : SItemUniqueId) : String;  // flags: 65561 
  import public final function GetItemLocalizedNameByName( itemName : CName) : String;  // flags: 65561 
  import public final function GetItemLocalizedDescriptionByName( itemName : CName) : String;  // flags: 65561 
  import public final function GetItemIconPathByUniqueID( itemUniqueId : SItemUniqueId) : String;  // flags: 65561 
  import public final function GetItemIconPathByName( itemName : CName) : String;  // flags: 65561 
  import public final function GetNumOfStackedItems( itemUniqueId : SItemUniqueId) : Int32;  // flags: 65561 
  import public final function NotifyScriptedListeners( notify : Bool);  // flags: 65561 
  import public final function InitInvFromTemplate( resource : CEntityTemplate);  // flags: 65561 
  import private final function BalanceItemsWithPlayerLevel( playerLevel : Int32);  // flags: 16409 
  import public final function NotifyItemLooted( item : SItemUniqueId);  // flags: 65561 
  import public final function ResetContainerData();  // flags: 65561 
  public function GetFundsType() : EInventoryFundsType;  // flags: 65536 
  public function GetDaysToIncreaseFunds() : Int32;  // flags: 65536 
  public function GetFundsMax() : Float;  // flags: 65536 
  public function SetupFunds();  // flags: 65536 
  public function IncreaseFunds();  // flags: 65536 
  public function GetMoney() : Int32;  // flags: 65536 
  public function AddMoney( amount : Int32);  // flags: 65536 
  public function RemoveMoney( amount : Int32);  // flags: 65536 
  public final function GetItemArmorTotal( item : SItemUniqueId) : SAbilityAttributeValue;  // flags: 65552 
  public final function GetItemLevel( item : SItemUniqueId) : Int32;  // flags: 65552 
  public function GetItemLevelColor( lvl_item : Int32) : String;  // flags: 65536 
  public final function AutoBalanaceItemsWithPlayerLevel();  // flags: 65552 
  public function GetItemsByName( itemName : CName) : array<SItemUniqueId>;  // flags: 65536 
  public final function GetSingletonItems() : array<SItemUniqueId>;  // flags: 65552 
  public function IsEmpty( optional  bSkipNoDropNoShow : Bool) : Bool;  // flags: 65536 
  public function GetAllHeldAndMountedItemsCategories( out  heldItems : array<CName>,  optional  out  mountedItems : array<CName>);  // flags: 65536 
  public function GetAllHeldItemsNames( out  heldItems : array<CName>);  // flags: 65536 
  public function HasMountedItemByTag( tag : CName) : Bool;  // flags: 65536 
  public function HasHeldOrMountedItemByTag( tag : CName) : Bool;  // flags: 65536 
  public function GetItemsIds( itemName : CName) : array<SItemUniqueId>;  // flags: 65536 
  public function ItemHasAbility( item : SItemUniqueId,  abilityName : CName) : Bool;  // flags: 65536 
  public function GetItemAbilitiesWithAttribute( id : SItemUniqueId,  attributeName : CName,  attributeVal : Float) : array<CName>;  // flags: 65536 
  public function GetItemAbilitiesWithTag( itemId : SItemUniqueId,  tag : CName,  out  abilities : array<CName>);  // flags: 65536 
  public final function GiveMoneyTo( otherInventory : CInventoryComponent,  optional  quantity : Int32,  optional  informGUI : Bool);  // flags: 65552 
  public final function GiveItemTo( otherInventory : CInventoryComponent,  itemId : SItemUniqueId,  optional  quantity : Int32,  optional  refreshNewFlag : Bool,  optional  forceTransferNoDrops : Bool,  optional  informGUI : Bool) : SItemUniqueId;  // flags: 65552 
  public final function GiveAllItemsTo( otherInventory : CInventoryComponent,  optional  forceTransferNoDrops : Bool,  optional  informGUI : Bool);  // flags: 65552 
  public final function GiveItemsTo( otherInventory : CInventoryComponent,  items : array<SItemUniqueId>,  optional  forceTransferNoDrops : Bool,  optional  informGUI : Bool) : array<SItemUniqueId>;  // flags: 65552 
  public final function HasItemById( id : SItemUniqueId) : Bool;  // flags: 65552 
  public function HasItemByTag( tag : CName) : Bool;  // flags: 65536 
  public function HasInfiniteBolts() : Bool;  // flags: 65536 
  public function HasGroundBolts() : Bool;  // flags: 65536 
  public function HasUnderwaterBolts() : Bool;  // flags: 65536 
  public final function AddAnItem( item : CName,  optional  quantity : Int32,  optional  dontInformGui : Bool,  optional  dontMarkAsNew : Bool,  optional  showAsRewardInUIHax : Bool) : array<SItemUniqueId>;  // flags: 65552 
  private final function InternalRemoveItems( ids : array<SItemUniqueId>,  quantity : Int32);  // flags: 16400 
  public function RemoveItemByName( itemName : CName,  optional  quantity : Int32) : Bool;  // flags: 65536 
  public function RemoveItemByCategory( itemCategory : CName,  optional  quantity : Int32) : Bool;  // flags: 65536 
  public function RemoveItemByTag( itemTag : CName,  optional  quantity : Int32) : Bool;  // flags: 65536 
  public final function HasQuestItem() : Bool;  // flags: 65552 
  public function SetItemDurabilityScript( itemId : SItemUniqueId,  durability : Float);  // flags: 65536 
  public function ReduceItemDurability( itemId : SItemUniqueId,  optional  forced : Bool) : Bool;  // flags: 65536 
  public function GetItemDurabilityRatio( itemId : SItemUniqueId) : Float;  // flags: 65536 
  public function GetItemResistStatWithDurabilityModifiers( itemId : SItemUniqueId,  stat : ECharacterDefenseStats,  out  points : SAbilityAttributeValue,  out  percents : SAbilityAttributeValue);  // flags: 65536 
  public function GetItemResistanceTypes( id : SItemUniqueId) : array<ECharacterDefenseStats>;  // flags: 65536 
  public function Created();  // flags: 65536 
  public function ClearGwintCards();  // flags: 65536 
  public function ClearTHmaps();  // flags: 65536 
  public final function ClearKnownRecipes();  // flags: 65552 
  public function LoadBooksDefinitions();  // flags: 65536 
  public function UpdateInitialReadState( item : SItemUniqueId);  // flags: 65536 
  public function IsBookRead( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function IsBookReadByName( bookName : CName) : Bool;  // flags: 65536 
  public function ReadBook( item : SItemUniqueId);  // flags: 65536 
  public function GetBookText( item : SItemUniqueId) : String;  // flags: 65536 
  public function ReadSchematicsAndRecipes( item : SItemUniqueId);  // flags: 65536 
  public function ReadBookByName( bookName : CName,  unread : Bool);  // flags: 65536 
  public function ReadBookByNameId( bookName : CName,  itemId : SItemUniqueId,  unread : Bool);  // flags: 65536 
  private function AddBestiaryFromBook( bookName : CName) : Bool;  // flags: 16384 
  public function GetWeaponDTNames( id : SItemUniqueId,  out  dmgNames : array<CName>) : Int32;  // flags: 65536 
  public function GetWeapons() : array<SItemUniqueId>;  // flags: 65536 
  public function GetHeldWeapons() : array<SItemUniqueId>;  // flags: 65536 
  public function GetHeldWeaponsWithCategory( category : CName,  out  items : array<SItemUniqueId>);  // flags: 65536 
  public function GetPotionItemBuffData( id : SItemUniqueId,  out  type : EEffectType,  out  customAbilityName : CName) : Bool;  // flags: 65536 
  public function RecycleItem( id : SItemUniqueId,  level : ECraftsmanLevel) : array<SItemUniqueId>;  // flags: 65536 
  public function GetItemBuffs( id : SItemUniqueId,  out  buffs : array<SEffectInfo>) : Int32;  // flags: 65536 
  public function DropItemInBag( item : SItemUniqueId,  quantity : Int32);  // flags: 65536 
  public final function AddRepairObjectItemBonuses( buffArmor : Bool,  buffSwords : Bool,  ammoArmor : Int32,  ammoWeapon : Int32) : Bool;  // flags: 65552 
  public final function ReduceItemRepairObjectBonusCharge( item : SItemUniqueId);  // flags: 65552 
  public final function GetRepairObjectBonusValueForArmor( armor : SItemUniqueId) : SAbilityAttributeValue;  // flags: 65552 
  public function CanItemHaveOil( id : SItemUniqueId) : Bool;  // flags: 65536 
  public function ItemHasOilApplied( id : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetSwordOil( sword : SItemUniqueId) : CName;  // flags: 65536 
  public function GetItemRelativeTooltipType( id : SItemUniqueId,  invOther : CInventoryComponent,  idOther : SItemUniqueId) : ECompareType;  // flags: 65536 
  private function FormatFloatForTooltip( fValue : Float) : String;  // flags: 16384 
  public function SetPriceMultiplier( mult : Float);  // flags: 65536 
  public function GetMerchantPriceModifier( shopNPC : CNewNPC,  item : SItemUniqueId) : Float;  // flags: 65536 
  public function SetRepairPriceMultiplier( mult : Float);  // flags: 65536 
  public function GetRepairPriceModifier( repairNPC : CNewNPC) : Float;  // flags: 65536 
  public function GetRepairPrice( item : SItemUniqueId) : Float;  // flags: 65536 
  public function GetTooltipData( itemId : SItemUniqueId,  out  localizedName : String,  out  localizedDescription : String,  out  price : Int32,  out  localizedCategory : String,  out  itemStats : array<SAttributeTooltip>,  out  localizedFluff : String);  // flags: 65536 
  public function GetItemBaseStats( itemId : SItemUniqueId,  out  itemStats : array<SAttributeTooltip>);  // flags: 65536 
  public function GetItemStats( itemId : SItemUniqueId,  out  itemStats : array<SAttributeTooltip>);  // flags: 65536 
  private function GetItemTooltipAttributes( itemId : SItemUniqueId,  attributes : array<CName>,  out  itemStats : array<SAttributeTooltip>);  // flags: 16384 
  public function GetItemStatsFromName( itemName : CName,  out  itemStats : array<SAttributeTooltip>);  // flags: 65536 
  public function IsThereItemOnSlot( slot : EEquipmentSlots) : Bool;  // flags: 65536 
  public function GetItemEquippedOnSlot( slot : EEquipmentSlots,  out  item : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetOilNameOnSword( steel : Bool) : CName;  // flags: 65536 
  public function GetItemPrimaryStat( itemId : SItemUniqueId,  out  attributeLabel : String,  out  attributeVal : Float);  // flags: 65536 
  public function GetItemStatByName( itemName : CName,  statName : CName,  out  resultValue : Float);  // flags: 65536 
  public function GetItemPrimaryStatFromName( itemName : CName,  out  attributeLabel : String,  out  attributeVal : Float,  out  primAttrName : CName);  // flags: 65536 
  public function IsPrimaryStatById( itemId : SItemUniqueId,  attributeName : CName,  out  attributeLabel : String) : Bool;  // flags: 65536 
  private function GetItemPrimaryStatImplById( itemId : SItemUniqueId,  out  attributeLabel : String,  out  attributeVal : Float,  out  attributeName : CName);  // flags: 16384 
  public function IsPrimaryStat( categoryName : CName,  attributeName : CName,  out  attributeLabel : String) : Bool;  // flags: 65536 
  private function GetItemPrimaryStatImpl( categoryName : CName,  out  attributeLabel : String,  out  attributeVal : Float,  out  attributeName : CName);  // flags: 16384 
  public function CanBeCompared( itemId : SItemUniqueId) : Bool;  // flags: 65536 
  public final function SingletonItemRefillAmmo( id : SItemUniqueId);  // flags: 65552 
  public function SingletonItemSetAmmo( id : SItemUniqueId,  quantity : Int32);  // flags: 65536 
  public function SingletonItemAddAmmo( id : SItemUniqueId,  quantity : Int32);  // flags: 65536 
  public function SingletonItemsRefillAmmo();  // flags: 65536 
  public function SingletonItemsRefillAmmoNoAlco();  // flags: 65536 
  private final function HasNotFilledSingletonItem() : Bool;  // flags: 16400 
  public function SingletonItemRemoveAmmo( itemID : SItemUniqueId,  optional  quantity : Int32);  // flags: 65536 
  public function SingletonItemGetAmmo( itemID : SItemUniqueId) : Int32;  // flags: 65536 
  public function SingletonItemGetMaxAmmo( itemID : SItemUniqueId) : Int32;  // flags: 65536 
  public final function IsItemSteelSwordUsableByPlayer( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemSilverSwordUsableByPlayer( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemFists( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemWeapon( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemCrossbow( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemChestArmor( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemBody( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemBoots( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemGloves( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemPants( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemTrophy( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemMask( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemBomb( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemBolt( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemUpgrade( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemTool( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemPotion( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemOil( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemAnyArmor( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemUpgradeable( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemIngredient( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemDismantleKit( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemHorseBag( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemAlchemyItem( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemSingletonItem( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemQuest( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemFood( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemSecondaryWeapon( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemMutagenPotion( item : SItemUniqueId) : Bool;  // flags: 65552 
  public final function IsItemSetItem( item : SItemUniqueId) : Bool;  // flags: 65552 
  public function GetArmorType( item : SItemUniqueId) : EArmorType;  // flags: 65536 
  public final function GetAlchemyCraftableItems() : array<SItemUniqueId>;  // flags: 65552 
  public function IsItemEncumbranceItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetItemEncumbrance( item : SItemUniqueId) : Float;  // flags: 65536 
  public function GetFilterTypeByItem( item : SItemUniqueId) : EInventoryFilterType;  // flags: 65536 
  public function IsItemQuickslotItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetCrossbowAmmo( id : SItemUniqueId) : Int32;  // flags: 65536 
  public function GetSlotForItemId( item : SItemUniqueId) : EEquipmentSlots;  // flags: 65536 
  public function GetAllWeapons() : array<SItemUniqueId>;  // flags: 65536 
  public function GetSpecifiedPlayerItemsQuest( steelSword : Bool,  silverSword : Bool,  armor : Bool,  boots : Bool,  gloves : Bool,  pants : Bool,  trophy : Bool,  mask : Bool,  bombs : Bool,  crossbow : Bool,  secondaryWeapon : Bool,  equippedOnly : Bool) : array<SItemUniqueId>;  // flags: 65536 
  public event function OnItemRemoved( itemId : SItemUniqueId,  quantity : Int32) : Bool;  // flags: 65568 
  public function GenerateItemLevel( item : SItemUniqueId);  // flags: 65536 
  public event function OnItemAdded( data : SItemChangedData) : Bool;  // flags: 65568 
  public function AddRandomEnhancementToItem( item : SItemUniqueId);  // flags: 65536 
  public function GetItemQuality( itemId : SItemUniqueId) : Int32;  // flags: 65536 
  public function GetItemQualityFromName( itemName : CName,  out  min : Int32,  out  max : Int32);  // flags: 65536 
  public function GetRecentlyAddedItems() : array<SItemUniqueId>;  // flags: 65536 
  public function GetRecentlyAddedItemsListSize() : Int32;  // flags: 65536 
  public function RemoveItemFromRecentlyAddedList( itemId : SItemUniqueId) : Bool;  // flags: 65536 
  public function AddListener( listener : IInventoryScriptedListener);  // flags: 65536 
  public function RemoveListener( listener : IInventoryScriptedListener);  // flags: 65536 
  public event function OnInventoryScriptedEvent( eventType : EInventoryEventType,  itemId : SItemUniqueId,  quantity : Int32,  fromAssociatedInventory : Bool) : Bool;  // flags: 65568 
  public function GetSkillMutagenColor( item : SItemUniqueId) : ESkillColor;  // flags: 65536 
  public function NotifyEnhancedItem( enhancedItemId : SItemUniqueId);  // flags: 65536 
  public function EnhanceItemScript( enhancedItemId : SItemUniqueId,  extensionItemId : SItemUniqueId) : Bool;  // flags: 65536 
  public function RemoveItemEnhancementByIndexScript( enhancedItemId : SItemUniqueId,  slotIndex : Int32) : Bool;  // flags: 65536 
  public function RemoveItemEnhancementByNameScript( enhancedItemId : SItemUniqueId,  extensionItemName : CName) : Bool;  // flags: 65536 
  public function RemoveAllItemEnhancements( enhancedItemId : SItemUniqueId);  // flags: 65536 
  public function GetHeldAndMountedItems( out  items : array<CName>);  // flags: 65536 

}
import class CHeadManagerComponent extends CSelfUpdatingComponent {
  import var timePeriod : GameTime; // 4001
  import var initHeadIndex : Int32; // 4001
  import var lastChangeGameTime : GameTime; // 4000
  import var hasTattoo : Bool; // 4000
  import var curIndex : Uint32; // 4000
  import var heads : array<CName>; // 4001
  import var headsWithTattoo : array<CName>; // 4001
  import var curHeadId : SItemUniqueId; // 4000
  import var blockGrowing : Bool; // 4001

  import public final function SetTattoo( hasTattoo : Bool);  // flags: 65561 
  import public final function Shave();  // flags: 65561 
  import public final function SetBeardStage( maxStage : Bool,  optional  stage : Int32);  // flags: 65561 
  import public final function SetCustomHead( head : CName);  // flags: 65561 
  import public final function RemoveCustomHead();  // flags: 65561 
  import public final function BlockGrowing( block : Bool);  // flags: 65561 
  import public final function MimicTest( animName : CName);  // flags: 65561 
  import public final function GetCurHeadName() : CName;  // flags: 65561 

}
import class CCommunitySystem extends IGameSystem {
  import var apMan : CActionPointManager; // 4000
  import var communitySpawnInitializer : ISpawnTreeInitializerAI; // 6000

  public function Init();  // flags: 65536 

}
import class CBehTreeFocusModeAnimationTask extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBehTreeFocusModeAnimationTaskDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CBehTreeTaskFocusModeHandler extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBehTreeTaskFocusModeHandlerDef extends IBehTreeTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CActionPointComponent extends CWayPointComponent {
  import var isEnabled : Bool; // 4001
  import var jobTreeRes : CJobTree; // 4001
  import var actionBreakable : Bool; // 4001
  import var breakableByCutscene : Bool; // 4001
  import var preferredNextAPs : TagList; // 4001
  import var activateOnStart : Bool; // 4001
  import var placementImportance : EWorkPlacementImportance; // 4001
  import var ignoreCollosions : Bool; // 4001
  import var disableSoftReactions : Bool; // 4001
  import var fireSourceDependent : Bool; // 4001
  import var customWorkTree : *CAIPerformCustomWorkTree; // 4005
  import var eventWorkStarted : array<*IPerformableAction>; // 4005
  import var eventWorkEnded : array<*IPerformableAction>; // 4005

  function GetID();  // flags: 1 

}
import class CActionPointManager extends CObject {

  import public final function HasPreferredNextAPs( currApID : SActionPointId) : Bool;  // flags: 65561 
  import public final function GetSeqNextActionPoint( currApID : SActionPointId) : SActionPointId;  // flags: 65561 
  import public final function GetJobTree( apID : SActionPointId) : CJobTree;  // flags: 65561 
  import public final function ResetItems( apID : SActionPointId);  // flags: 65561 
  import public final function GetGoToPosition( apID : SActionPointId,  out  placePos : Vector,  out  placeRot : Float) : Bool;  // flags: 65561 
  import public final function GetActionExecutionPosition( apID : SActionPointId,  out  placePos : Vector,  out  placeRot : Float) : Bool;  // flags: 65561 
  import public final function GetFriendlyAPName( apID : SActionPointId) : String;  // flags: 65561 
  import public final function IsBreakable( apID : SActionPointId) : Bool;  // flags: 65561 
  import public final function GetPlacementImportance( apID : SActionPointId) : EWorkPlacementImportance;  // flags: 65561 
  import public final function IsFireSourceDependent( apID : SActionPointId) : Bool;  // flags: 65561 

}
import class CSelfUpdatingComponent extends CScriptedComponent {
  import var tickGroup : ETickGroup; // 4005
  import var tickedByDefault : Bool; // 4005

  import public final function StartTicking();  // flags: 65561 
  import public final function StopTicking();  // flags: 65561 
  import public final function GetIsTicking() : Bool;  // flags: 65561 

}
import class FocusModeCameraShotHelper extends CObject {

  public final function Init( _e : CNewNPC,  _p : CPlayer);  // flags: 65552 
  public final function Deinit();  // flags: 65552 
  public final function FindInitAndSSShotParams( currHeading : Float);  // flags: 65552 
  public final function FindInitShotParams( currHeading : Float);  // flags: 65552 
  public final function FindInitShotParamsVec( currHeading : Float,  ePos : Vector,  pPos : Vector);  // flags: 65552 
  public final function FindSSShotParams( initPivot : Vector);  // flags: 65552 
  public final function RefreshSSShotParams( blendingProgress : Float);  // flags: 65552 
  private final function InternalFindSSShotParams( blending : Float,  mainCh : CActor,  secChar : CActor,  camSide : Bool,  initPivot : Vector,  initYaw : Float,  initPitch : Float,  initDistance : Float,  useCurrDistance : Bool);  // flags: 16400 
  private final function InternalFindSSShotParamsVec( dupa : Int32,  blending : Float,  mainCh : Vector,  secChar : Vector,  camSide : Bool,  initPivot : Vector,  initYaw : Float,  initPitch : Float,  initDistance : Float,  useCurrDistance : Bool);  // flags: 16400 
  public final function CalcPivotPosition() : Vector;  // flags: 65552 
  private final function InternalCalcPivotPosition( mainCh : CActor,  secChar : CActor) : Vector;  // flags: 16400 
  private final function InternalCalcPivotPositionVec( mainPos : Vector,  secPos : Vector) : Vector;  // flags: 16400 
  public final function FindLastSSShot( currHeading : Float,  destPoint : Vector);  // flags: 65552 
  public final function StartBlendingSSShot( currHeading : Float,  duration : Float);  // flags: 65552 
  public final function UpdateBlendingSSShot();  // flags: 65552 

}
import class CJournalResource extends CResource {
  import var entry : *CJournalBase; // 4005

  import public final function GetEntry() : CJournalBase;  // flags: 65561 

}
import class CJournalManager extends IGameSystem {

  import public final function ActivateEntry( journalEntry : CJournalBase,  optional  status : EJournalStatus,  optional  showInfoOnScreen : Bool,  optional  activateParents : Bool);  // flags: 65561 
  import public final function GetEntryStatus( journalEntry : CJournalBase) : EJournalStatus;  // flags: 65561 
  import public final function IsEntryUnread( journalEntry : CJournalBase) : Bool;  // flags: 65561 
  import public final function SetEntryUnread( journalEntry : CJournalBase,  isUnread : Bool);  // flags: 65561 
  import public final function GetEntryByTag( tag : CName) : CJournalBase;  // flags: 65561 
  import public final function GetEntryByString( str : String) : CJournalBase;  // flags: 65561 
  import public final function GetEntryByGuid( guid : CGUID) : CJournalBase;  // flags: 65561 
  import public final function GetNumberOfActivatedOfType( type : CName) : Int32;  // flags: 65561 
  import public final function GetActivatedOfType( type : CName,  out  entries : array<CJournalBase>);  // flags: 65561 
  import public final function GetNumberOfActivatedChildren( parentEntry : CJournalBase) : Int32;  // flags: 65561 
  import public final function GetActivatedChildren( parentEntry : CJournalBase,  out  entries : array<CJournalBase>);  // flags: 65561 
  import public final function GetNumberOfAllChildren( parentEntry : CJournalBase) : Int32;  // flags: 65561 
  import public final function GetAllChildren( parentEntry : CJournalBase,  out  entries : array<CJournalBase>);  // flags: 65561 

}
import class CJournalBase extends CObject {
  import var guid : CGUID; // 6003
  import var baseName : String; // 6001
  import var order : Uint32; // 4000
  import var uniqueScriptIdentifier : CName; // 4001

  import public final function GetUniqueScriptTag() : CName;  // flags: 65561 
  import public final function GetOrder() : Int32;  // flags: 65561 
  function IsActive();  // flags: 1 

}
import class CAnimationManualSlotSyncInstance extends CObject {

  import public final function RegisterMaster( definition : SAnimationSequenceDefinition) : Int32;  // flags: 65561 
  import public final function RegisterSlave( definition : SAnimationSequenceDefinition) : Int32;  // flags: 65561 
  import public final function StopSequence( index : Int32);  // flags: 65561 
  import public final function IsSequenceFinished( index : Int32) : Bool;  // flags: 65561 
  import public final function HasEnded() : Bool;  // flags: 65561 
  import public final function Update( deltaTime : Float);  // flags: 65561 
  import public final function BreakIfPossible( entity : CEntity) : Bool;  // flags: 65561 

}
import class W3HorseCombatManagerStateHorseNull extends W3VehicleCombatManagerStateNull {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateMountingInProgress extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nexStateName : CName) : Bool;  // flags: 65568 
  public event function OnMountFinished() : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateHorseAction extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnHorseActionStop() : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateChangeSwordState extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nexStateName : CName) : Bool;  // flags: 65568 
  public event function OnMeleeWeaponReady() : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateBeingHit extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateInAir extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLanded() : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateCastSign extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function StartCastingSign();  // flags: 65664 
  public function FinishCasting();  // flags: 65664 
  public function CastingSignFailed();  // flags: 65664 
  public event function OnLeaveState( nexStateName : CName) : Bool;  // flags: 65568 
  public function ApplyEffectOnHorse( duration : Float);  // flags: 65536 
  public event function OnProcessAnimEvent( animEventName : CName) : Bool;  // flags: 65568 
  public event function OnRaiseSignEvent() : Bool;  // flags: 65568 
  public event function OnHitStart() : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateThrowBomb extends W3VehicleCombatManagerStateThrowProjectile {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnHitStart() : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateShootCrossbow extends W3VehicleCombatManagerStateRangedAttack {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnItemAction( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnItemActionHold( action : SInputAction) : Bool;  // flags: 65568 
  public function ItemActionHold();  // flags: 65536 
  public event function OnItemActionAbort( action : SInputAction) : Bool;  // flags: 65568 
  public function AbortItemAction() : Bool;  // flags: 65536 
  public function StopWaitForShootingComplete();  // flags: 65664 
  public function WaitForShootingComplete();  // flags: 65664 
  public event function OnProcessAnimEvent( animEventName : CName) : Bool;  // flags: 65568 

}
import class CVehicleComponent extends CComponent {
  import var user : CActor; // 6000

  import public latent final function PlaySlotAnimation( slot : CName,  animation : CName,  optional  blendIn : Float,  optional  blendOut : Float) : Bool;  // flags: 65625 
  import public final function PlaySlotAnimationAsync( slot : CName,  animation : CName,  optional  blendIn : Float,  optional  blendOut : Float) : Bool;  // flags: 65561 
  import public final function GetSlotTransform( slotName : CName,  out  translation : Vector,  out  rotQuat : Vector);  // flags: 65561 
  import public final function GetDeepDistance( vel : Vector) : Float;  // flags: 65561 
  import public final function SetCommandToMountDelayed( ctmd : Bool);  // flags: 65561 
  import public final function IsCommandToMountDelayed() : Bool;  // flags: 65561 
  import public final function OnDriverMount();  // flags: 65561 
  public event function OnMountStarted( entity : CEntity,  vehicleSlot : EVehicleSlot) : Bool;  // flags: 65568 
  public event function OnMountFinished( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnDismountStarted( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnDismountFinished( entity : CEntity,  vehicleSlot : EVehicleSlot) : Bool;  // flags: 65568 
  public event function OnCombatAction( action : EVehicleCombatAction) : Bool;  // flags: 65568 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  public event function OnTakeDamage( action : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnInit() : Bool;  // flags: 65568 
  public event function OnDeinit() : Bool;  // flags: 65568 
  public event function OnAnimationStarted( entity : CEntity,  data : CName) : Bool;  // flags: 65568 
  public function CanUseBoardingExploration() : Bool;  // flags: 65536 
  public function GetUserCombatManager() : W3VehicleCombatManager;  // flags: 65536 
  public function Mount( actorToMount : CActor,  optional  mountType : EVehicleMountType,  vehicleSlot : EVehicleSlot);  // flags: 65536 
  public function IssueCommandToApprochToSlot( entity : CEntity);  // flags: 65536 
  public event function OnDelayedCommandToMount( dt : Float) : Bool;  // flags: 65568 
  public function IssueCommandToMount( actorToMount : CActor,  mountType : EMountType,  vehicleSlot : EVehicleSlot);  // flags: 65536 
  public function IssueCommandToUseVehicle();  // flags: 65536 
  public function IssueCommandToDismount( dismountType : EDismountType);  // flags: 65536 
  public function TeleportAndMount( entity : CEntity);  // flags: 65536 
  public function CanAccesFastTravel( target : W3FastTravelEntity) : Bool;  // flags: 65536 
  public function InternalGetSpeed() : Float;  // flags: 66048 
  public function StopTheVehicle();  // flags: 66048 
  public function UpdateLogic();  // flags: 66048 
  public function SetIsPlayingSyncAnimation( val : Bool);  // flags: 65536 
  public function GetIsPlayingSyncAnimation() : Bool;  // flags: 65536 
  public function SetCombatManager( combatManager : W3VehicleCombatManager);  // flags: 65536 
  public function IsMounted() : Bool;  // flags: 65536 
  public function CanBeUsedBy( entity : CEntity) : Bool;  // flags: 65536 
  public function ToggleVehicleCamera( val : Bool);  // flags: 65536 
  public function GetVehicleType() : EVehicleType;  // flags: 65536 
  public function AttachEntity( entity : CEntity,  optional  slot : CName) : Bool;  // flags: 65536 
  public latent function PlaySyncAnimWithUser( user : CActor,  eventName : CName,  deactivationEvent : CName);  // flags: 65600 
  public final function GetSlotPositionAndHeading( slotNumber : Int32,  out  position : Vector,  out  heading : Float);  // flags: 65552 
  protected final function SetVariable( varName : CName,  varValue : Float);  // flags: 32784 public final function SetConsts( out  consts : SR4PlayerTargetingConsts);  // flags: 85D4F0
  import public final function BeginFindTarget( out  inValues : SR4PlayerTargetingIn);  // flags: 65561  
  public function IsMountingPossible() : Bool;  // flags: 65536 
  public function GetUser() : CActor;  // flags: 65536 

}
import class CAdvancedVehicleComponent extends CVehicleComponent {
  import var passengerSeats : array<*CSeatComponent>; // 4005
  import var inputContext : CName; // 4001

  function I_IsPlayerControlled();  // flags: 1 
  function I_SetIdle();  // flags: 1 

}
import class CSeatComponent extends CComponent {
  import var isPilot : Bool; // 4001
  import var slotName : CName; // 4001

  function I_IsPilot();  // flags: 1 
  function I_OnMounted();  // flags: 1 
  function I_OnDisMounted();  // flags: 1 

}
import class CPilotComponent extends CComponent {

  function I_IsPlayer();  // flags: 1 
  function I_IsDriving();  // flags: 1 

}
import class CBoatBodyComponent extends CRigidMeshComponent {
  import var cutsceneBoneIndex : Int16; // 4001

  import public function TriggerCutsceneStart();  // flags: 65545 
  import public function TriggerCutsceneEnd();  // flags: 65545 
  public event function OnComponentAttached() : Bool;  // flags: 65568 
  public event function OnCutsceneStarted() : Bool;  // flags: 65568 
  public event function OnCutsceneEnded() : Bool;  // flags: 65568 

}
import class CBoatComponent extends CVehicleComponent {
  import var sailDir : Float; // e000
  import var mountAnimationFinished : Bool; // e000
  import var collisionNames : array<CName>; // 4001

  import public final function GetBuoyancyPointStatus_Front() : Vector;  // flags: 65561 
  import public final function GetBuoyancyPointStatus_Back() : Vector;  // flags: 65561 
  import public final function GetBuoyancyPointStatus_Right() : Vector;  // flags: 65561 
  import public final function GetBuoyancyPointStatus_Left() : Vector;  // flags: 65561 
  import public function GetLinearVelocityXY() : Float;  // flags: 65545 
  import public function GetBoatBodyMass() : Float;  // flags: 65545 
  import public function StopAndDismountBoat();  // flags: 65545 
  import public function UseOutOfFrustumTeleportation( enable : Bool);  // flags: 65545 
  import public function TriggerCutsceneStart();  // flags: 65545 
  import public function TriggerCutsceneEnd();  // flags: 65545 
  import public final function TriggerDrowning( globalHitPosition : Vector);  // flags: 65561 
  import public final function IsDrowning() : Bool;  // flags: 65561 
  import public final function MountStarted();  // flags: 65561 
  import public final function DismountFinished();  // flags: 65561 
  import public final function GetCurrentGear() : Int32;  // flags: 65561 
  import public final function GetCurrentSpeed() : Vector;  // flags: 65561 
  import public final function GameCameraTick( out  fovDistPitch : Vector,  out  offsetZ : Float,  out  sailOffset : Float,  dt : Float,  passenger : Bool) : Bool;  // flags: 65561 
  import public final function GetMaxSpeed() : Float;  // flags: 65561 
  public event function OnComponentAttached() : Bool;  // flags: 65568 
  public event function OnTriggerBoatDismountAnim() : Bool;  // flags: 65568 
  public event function OnDismountImediete() : Bool;  // flags: 65568 
  public event function OnInit() : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function OnInteractionPassenger();  // flags: 65536 
  public function IsMountPossible() : Bool;  // flags: 65536 
  public event function OnDrowningDismount() : Bool;  // flags: 65568 
  public event function OnDrowningFinished() : Bool;  // flags: 65568 
  public event function OnMountStarted( entity : CEntity,  vehicleSlot : EVehicleSlot) : Bool;  // flags: 65568 
  public event function OnMountFinished( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnDismountStarted( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnDismountFinished( entity : CEntity,  vehicleSlot : EVehicleSlot) : Bool;  // flags: 65568 
  public function GetPassenger() : CActor;  // flags: 65536 
  public event function OnTick( dt : Float) : Bool;  // flags: 65568 
  public final function SetRudderDir( rider : CActor,  value : Float);  // flags: 65552 
  private function IsDiving( curVel : Float,  cachedWaterPosZ : Float,  underWater : Float) : Bool;  // flags: 16384 
  private function InitializeSlots() : Bool;  // flags: 16384 
  private function InitializeComponents( e : CEntity) : Bool;  // flags: 16384 
  public function UpdateHigherMast( mastHeight : Float) : Bool;  // flags: 65536 
  private function UpdateMast( mastAngle : Float,  mastHeight : Float,  rotationSpeed : Float) : Bool;  // flags: 16384 
  public final function GetBoatEntity() : W3Boat;  // flags: 65552 
  private function UpdateSoundParams( value : Float);  // flags: 16384 
  private function UpdatePassengerSailAnimByGear( currentGear : Int32);  // flags: 16384 
  private function IsInWater( vec : Vector) : Bool;  // flags: 16384 
  public event function OnBoatDismountRequest() : Bool;  // flags: 65568 
  private function SwitchEffectsByGear( currentGear : Int32);  // flags: 16384 
  private function UpdateMastPositionAndRotation( gear : Int32,  angle : Float,  isMoving : Bool);  // flags: 16384 
  private function CalcMastRotation( val : Float,  isMoving : Bool,  gear : Int32) : Float;  // flags: 16384 
  public function GetSailDir() : Float;  // flags: 65536 
  public function GetSailTilt() : Float;  // flags: 65536 
  public event function OnCutsceneStarted() : Bool;  // flags: 65568 
  public event function OnCutsceneEnded() : Bool;  // flags: 65568 
  public function IsMountingPossible() : Bool;  // flags: 65536 

}
import class CBoatDestructionComponent extends CComponent {
  import var autoGeneratedVolumesX : Uint32; // 4001
  import var autoGeneratedVolumesY : Uint32; // 4001
  import var autoGeneratorVolumesResizer : Float; // 4001
  import var destructionVolumes : array<SBoatDestructionVolume>; // 6001

  public event function OnComponentAttached() : Bool;  // flags: 65568 
  public event function OnLoadGameDropDestructableParts( areaIndex : Int32) : Bool;  // flags: 65568 
  public function GetClosestFreeGrabSlotInfo( _ActorPosition : Vector,  _ActorHeading : Float,  out  _ClosestSlotName : CName,  out  _Position : Vector,  out  _Heading : Float) : Bool;  // flags: 65536 
  public function LockGrabSlot( _SlotName : CName);  // flags: 65536 
  public function AttachSiren( _SirenToAttach : CActor);  // flags: 65536 
  public function DetachSiren( _SirenTodetach : CActor);  // flags: 65536 
  public function FreeGrabSlot( _SlotName : CName);  // flags: 65536 
  public event function OnBoatDestructionVolumeHit( globalHitPos : Vector,  healthTaken : Float,  areaVolumeIndex : Int32) : Bool;  // flags: 65568 
  public function DealDamage( dmg : Float,  index : Int32,  optional  globalHitPos : Vector);  // flags: 65536 
  private function ReduceHealth( dmg : Float,  index : Int32,  globalHitPos : Vector);  // flags: 16384 
  public function IsDestroyed() : Bool;  // flags: 65536 
  public function DealDmgToNearestVolume( dmgPrcnt : Float,  hitPos : Vector) : Bool;  // flags: 65536 
  private function GetNearestVolumeIndex( pos : Vector) : Int32;  // flags: 16384 
  public function PartNameToCurveName( partName : String) : CName;  // flags: 65536 
  public function PlayEffectBasedOnDropCompName( partName : String);  // flags: 65536 
  private function ProcessBoatHitAnimation( volumeHit : Int32);  // flags: 16384 

}
import class W3SpawnEntityProjectile extends W3TraceGroundProjectile {

  private function Loop();  // flags: 16384 

}
import class CScriptedExplorationTraverser extends IScriptable {

  import public function Update( deltaTime : Float);  // flags: 65545 
  function ConnectListener();  // flags: 1 
  function DisconnectListener();  // flags: 1 
  import public function GetExplorationType( out  expType : EExplorationType) : Bool;  // flags: 65545 

}
import class CJournalContainer extends CJournalContainerEntry {
  import var children : array<*CJournalContainerEntry>; // 4000

  import public final function GetChild( index : Int32) : CJournalBase;  // flags: 65561 
  import public final function GetNumChildren() : Int32;  // flags: 65561 

}
import class CNodesBinaryStorage extends CObject {

  function InitializeFromTag();  // flags: 1 
  function InitializeWithNodes();  // flags: 1 
  function GetClosestToNode();  // flags: 1 
  function GetClosestToPosition();  // flags: 1 

}
import class CSpawnPointComponent extends CWayPointComponent {
  import var radius : Float; // 4001

  function GetSpawnPoint();  // flags: 1 

}
import class W3BaitProjectile extends W3BoltProjectile {

  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 

}
import class CAIAttackRange extends CObject {
  import var name : CName; // 4001
  import var rangeMax : Float; // 6001
  import var height : Float; // 6001
  import var angleOffset : Float; // 6001
  import var position : Vector; // 6001
  import var checkLineOfSight : Bool; // 6001
  import var lineOfSightHeight : Float; // 6001
  import var useHeadOrientation : Bool; // 6001

  import public final function Test( sourceEntity : CGameplayEntity,  targetEntity : CGameplayEntity) : Bool;  // flags: 65561 
  import public final function GatherEntities( sourceEntity : CGameplayEntity,  out  entities : array<CGameplayEntity>);  // flags: 65561 

}
import class CFactAdderOnCollisionWithTag extends CGameplayEntity {

  public event function OnCollision( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 

}
import class CCharacterStats extends CObject {
  import var abilities : array<CName>; // 4001

  import public final function AddAbility( abilityName : CName,  optional  allowMultiple : Bool) : Bool;  // flags: 65561 
  import public final function RemoveAbility( abilityName : CName) : Bool;  // flags: 65561 
  import public final function HasAbility( abilityName : CName,  optional  includeInventoryAbl : Bool) : Bool;  // flags: 65561 
  import public final function HasAbilityWithTag( tag : CName,  optional  includeInventoryAbl : Bool) : Bool;  // flags: 65561 
  import public final function GetAllAttributesNames( out  attributes : array<CName>);  // flags: 65561 
  import public final function IsAbilityAvailableToBuy( abilityName : CName) : Bool;  // flags: 65561 
  import public final function GetAbilities( out  abilities : array<CName>,  optional  includeInventoryAbl : Bool);  // flags: 65561 
  import public final function GetAttributeValue( attributeName : CName,  abilityTags : array<CName>,  optional  withoutTags : Bool) : SAbilityAttributeValue;  // flags: 65561 
  import public final function GetAbilityAttributeValue( attributeName : CName,  abilityName : CName) : SAbilityAttributeValue;  // flags: 65561 
  import public final function GetAllContainedAbilities( out  abilities : array<CName>);  // flags: 65561 
  public function AddAbilityMultiple( abilityName : CName,  count : Int32);  // flags: 65536 
  public function RemoveAbilityMultiple( abilityName : CName,  count : Int32);  // flags: 65536 
  public function GetAbilitiesWithTag( tag : CName) : array<CName>;  // flags: 65536 

}
import class W3QuestCond_chosenLanguage extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class CNavigationReachabilityQueryInterface extends IScriptable {

  import public final function GetLastOutput( optional  queryValidTime : Float) : EAsyncTestResult;  // flags: 65561 
  import public final function GetOutputClosestDistance() : Float;  // flags: 65561 
  import public final function GetOutputClosestEntity() : CEntity;  // flags: 65561 
  import public final function TestActorsList( testType : ENavigationReachabilityTestType,  originActor : CActor,  list : array<CActor>,  optional  safeSpotTolerance : Float,  optional  pathfindDinstanceLimit : Float) : EAsyncTestResult;  // flags: 65561 

}
import class W3QuestCond_DialogOrCutsceneFinished extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_PlayerIsOnBoat extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class CScriptedEntityStateChangeRequest extends IEntityStateChangeRequest {

  public function Execute( entity : CGameplayEntity);  // flags: 66048 

}
import class W3QuestCond_PlayerHasQuenActive extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_PlayerInRunAnimation extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class CPlaySoundOnActorRequest extends IEntityStateChangeRequest {
  import var boneName : CName; // c001
  import var soundName : StringAnsi; // c001
  import var fadeTime : Float; // c001

  import public function Initialize( boneName : CName,  soundName : String,  optional  fadeTime : Float);  // flags: 65545 

}
import class W3QuestCond_PlayerLevel extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_PlayerSkillPoints extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_CheckBrazierPuzzleState extends CQuestScriptedCondition {

  public function Activate();  // flags: 65536 
  public function Evaluate() : Bool;  // flags: 65536 

}
import class CWaterDebug extends CObject {

  function Init();  // flags: 1 
  function Reset();  // flags: 1 

}
import class CVisualDebug_MovementTrajectory extends CObject {

  function Reset();  // flags: 1 
  function Init();  // flags: 1 

}
import class W3LockableEntity extends CGameplayEntity {
  import var isEnabledOnSpawn : Bool; // 6001
  import var lockedByKey : Bool; // e001

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function UpdateComponents( newActiveComponentName : String);  // flags: 65536 
  public event function OnStateChange( newState : Bool) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function IsLocked() : Bool;  // flags: 65536 
  public function ToggleLock();  // flags: 65536 
  public function Unlock();  // flags: 65536 
  private function PlayUnlockAudio();  // flags: 16384 
  public function Lock( keyName : CName,  optional  removeKey : Bool,  optional  smoooth : Bool);  // flags: 65536 
  protected function OnLock();  // flags: 32768 
  protected function CheckLock();  // flags: 32768 
  public function Enable( e : Bool,  optional  skipInteractionUpdate : Bool,  optional  questForcedEnable : Bool);  // flags: 65536 
  public function ShowInteractionComponent();  // flags: 65536 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionDeactivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function RefreshFactStatus( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public event function OnLockForced() : Bool;  // flags: 65568 
  public function GetKeyName() : CName;  // flags: 65536 
  public function IsEnabled() : Bool;  // flags: 65536 
  public function SetInteractionBlocked( b : Bool);  // flags: 65536 

}
import class W3QuestCond_DialogChoiceCondition extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_PlayerHead extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_IsGeraltShaved extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_ItemSelected extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class CDoorComponent extends CInteractionComponent {
  import var initialState : EDoorState; // 4001
  import var isTrapdoor : Bool; // 4001
  import var doorsEnebled : Bool; // c000
  import var openName : String; // 4001
  import var closeName : String; // 4001

  import public function Open( force : Bool,  unlock : Bool);  // flags: 65545 
  import public function Close( force : Bool);  // flags: 65545 
  import public function IsOpen() : Bool;  // flags: 65545 
  import public function IsLocked() : Bool;  // flags: 65545 
  import public function AddForceImpulse( origin : Vector,  force : Float);  // flags: 65545 
  import public function InstantClose();  // flags: 65545 
  import public function InstantOpen( unlock : Bool);  // flags: 65545 
  import public function AddDoorUser( actor : CActor);  // flags: 65545 
  import public function EnebleDoors( enable : Bool);  // flags: 65545 
  import public function IsInteractive() : Bool;  // flags: 65545 
  import public function IsTrapdoor() : Bool;  // flags: 65545 
  import public function InvertMatrixForDoor( m : Matrix) : Matrix;  // flags: 65545 
  import public function Unsuppress();  // flags: 65545 

}
import class W3QuestCond_PlayerSkillLevel extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3Container extends W3LockableEntity {
  import var shouldBeFullySaved : Bool; // c000

  import public function SetIsQuestContainer( isQuest : Bool);  // flags: 65545 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public event function OnSpawnedEditor( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags) : Bool;  // flags: 65568 
  public function UpdateFactItems();  // flags: 65536 
  public function InjectItemsOnLevels();  // flags: 65536 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionDeactivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public final function IsEnabledInCombat() : Bool;  // flags: 65552 
  public function InformClueStash();  // flags: 65536 
  public event function OnItemGiven( data : SItemChangedData) : Bool;  // flags: 65568 
  public function ReadSchematicsAndRecipes();  // flags: 65536 
  public event function OnItemTaken( itemId : SItemUniqueId,  quantity : Int32) : Bool;  // flags: 65568 
  public event function OnUpdateContainer() : Bool;  // flags: 65568 
  protected final function UpdateContainer();  // flags: 32784 
  public function RebalanceItems();  // flags: 65536 
  protected final function HighlightEntity();  // flags: 32784 
  protected final function UnhighlightEntity();  // flags: 32784 
  public final function HasQuestItem() : Bool;  // flags: 65552 
  public function CheckForDimeritium();  // flags: 65536 
  public final function OnTryToGiveItem( itemId : SItemUniqueId) : Bool;  // flags: 65552 
  public function TakeAllItems();  // flags: 65536 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function ProcessLoot();  // flags: 65536 
  public event function OnStateChange( newState : Bool) : Bool;  // flags: 65568 
  public final function ShowLoot();  // flags: 65552 
  public function IsEmpty() : Bool;  // flags: 65536 
  public function Enable( e : Bool,  optional  skipInteractionUpdate : Bool,  optional  questForcedEnable : Bool);  // flags: 65536 
  public function OnContainerClosed();  // flags: 65536 
  protected final function CheckForBonusMoney( oldMoney : Int32);  // flags: 32784 
  public final function PlayQuestItemFx();  // flags: 65552 
  public final function StopQuestItemFx();  // flags: 65552 
  public function GetSkipInventoryPanel() : Bool;  // flags: 65536 
  public function CanShowFocusInteractionIcon() : Bool;  // flags: 65536 
  public function RegisterClueStash( clueStash : W3ClueStash);  // flags: 65536 

}
import class W3QuestCond_PlayerState extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 
  public function CheckCondition() : Bool;  // flags: 65536 
  public function GetWalkState() : EQuestConditionPlayerState;  // flags: 65536 
  public function GetSwimState() : EQuestConditionPlayerState;  // flags: 65536 

}
import class W3QuestCond_TutorialMessagesEnabled extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_TutorialIsInitialized extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_TutorialWasSeen extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_WasNoticeboardVisited extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_World extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_ReplacerCondition extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class CBloodTrailEffect extends CGameplayEntityParam {
  import var effect : CName; // 4001

  import public final function GetEffectName() : CName;  // flags: 65561 

}
import class W3QuestCond_UIAnyMenuOpened extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_UsedFocus extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 
  private function IsInUse() : Bool;  // flags: 16384 

}
import class W3QuestCond_UsedMedallion extends CQuestScriptedCondition {

  public function Evaluate() : Bool;  // flags: 65536 

}
import class W3QuestCond_BaseStat extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_HasModifier extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_HasWeaponDrawn extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_Health extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_IsFalling extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_IsInState extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_IsInVehicle extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_IsInWater extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_IsOnGround extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_ActorSpeed extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_HorsePanic extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class W3QuestCond_NpcStance extends CQCActorScriptedCondition {

  public function Evaluate( act : CActor) : Bool;  // flags: 65536 

}
import class CHud extends CGuiObject {

  import public final function CreateHudModule( moduleName : String,  optional  userData : Int32);  // flags: 65561 
  import public final function DiscardHudModule( moduleName : String,  optional  userData : Int32);  // flags: 65561 
  import public final function GetHudFlash() : CScriptedFlashSprite;  // flags: 65561 
  import public final function GetHudFlashValueStorage() : CScriptedFlashValueStorage;  // flags: 65561 
  import public final function GetHudModule( moduleName : String) : CHudModule;  // flags: 65561 

}
import class CHudModule extends CGuiObject {

  import public final function GetModuleFlash() : CScriptedFlashSprite;  // flags: 65561 
  import public final function GetModuleFlashValueStorage() : CScriptedFlashValueStorage;  // flags: 65561 

}
import class CMenu extends CGuiObject {

  import public final function GetMenuFlash() : CScriptedFlashSprite;  // flags: 65561 
  import public final function GetMenuFlashValueStorage() : CScriptedFlashValueStorage;  // flags: 65561 
  import public final function GetMenuInitData() : IScriptable;  // flags: 65561 
  import public final function GetMenuName() : CName;  // flags: 65561 
  import public final function RequestSubMenu( menuName : CName,  optional  initData : IScriptable);  // flags: 65561 
  import public final function CloseMenu();  // flags: 65561 

}
import class CPopup extends CGuiObject {

  import public final function GetPopupFlash() : CScriptedFlashSprite;  // flags: 65561 
  import public final function GetPopupFlashValueStorage() : CScriptedFlashValueStorage;  // flags: 65561 
  import public final function GetPopupInitData() : IScriptable;  // flags: 65561 
  import public final function GetPopupName() : CName;  // flags: 65561 
  import public final function ClosePopup();  // flags: 65561 

}
import class W3TutorialManagerUIHandlerStateForcedAlchemy extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateBestiary extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public event function OnMenuClosing( menuName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateBetting extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateCharacterDevelopmentFastMenu extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateCrafting extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateDismantling extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateFastTravel extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateHaggling extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateHighLevelQuests extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateIngameMenuBestiary extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnMenuOpening( menuName : CName) : Bool;  // flags: 65568 
  public event function OnMenuClosing( menuName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateInventory extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  private final function BlockPanels( block : Bool);  // flags: 16400 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateJournalQuest extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnMenuClosing( menuName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateMap extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateMeditationWait extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class CScriptedFlashObject extends IScriptedFlash {

  import public final function CreateFlashObject( optional  flashClassName : String) : CScriptedFlashObject;  // flags: 65561 
  import public final function CreateFlashArray() : CScriptedFlashArray;  // flags: 65561 
  import public final function GetMemberFlashObject( memberName : String) : CScriptedFlashObject;  // flags: 65561 
  import public final function GetMemberFlashArray( memberName : String) : CScriptedFlashArray;  // flags: 65561 
  import public final function GetMemberFlashFunction( memberName : String) : CScriptedFlashFunction;  // flags: 65561 
  import public final function GetMemberFlashString( memberName : String) : String;  // flags: 65561 
  import public final function GetMemberFlashBool( memberName : String) : Bool;  // flags: 65561 
  import public final function GetMemberFlashInt( memberName : String) : Int32;  // flags: 65561 
  import public final function GetMemberFlashUInt( memberName : String) : Int32;  // flags: 65561 
  import public final function GetMemberFlashNumber( memberName : String) : Float;  // flags: 65561 
  import public final function SetMemberFlashObject( memberName : String,  value : CScriptedFlashObject);  // flags: 65561 
  import public final function SetMemberFlashArray( memberName : String,  value : CScriptedFlashArray);  // flags: 65561 
  import public final function SetMemberFlashFunction( memberName : String,  value : CScriptedFlashFunction);  // flags: 65561 
  import public final function SetMemberFlashString( memberName : String,  value : String);  // flags: 65561 
  import public final function SetMemberFlashBool( memberName : String,  value : Bool);  // flags: 65561 
  import public final function SetMemberFlashInt( memberName : String,  value : Int32);  // flags: 65561 
  import public final function SetMemberFlashUInt( memberName : String,  value : Int32);  // flags: 65561 
  import public final function SetMemberFlashNumber( memberName : String,  value : Float);  // flags: 65561 

}
import class W3TutorialManagerUIHandlerStateOpenInventory extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class CScriptedFlashSprite extends CScriptedFlashObject {

  import public final function GetChildFlashSprite( memberName : String) : CScriptedFlashSprite;  // flags: 65561 
  import public final function GetChildFlashTextField( memberName : String) : CScriptedFlashTextField;  // flags: 65561 
  import public final function GotoAndPlayFrameNumber( frame : Int32);  // flags: 65561 
  import public final function GotoAndPlayFrameLabel( frame : String);  // flags: 65561 
  import public final function GotoAndStopFrameNumber( frame : Int32);  // flags: 65561 
  import public final function GotoAndStopFrameLabel( frame : String);  // flags: 65561 
  import public final function GetAlpha() : Float;  // flags: 65561 
  import public final function GetRotation() : Float;  // flags: 65561 
  import public final function GetVisible() : Bool;  // flags: 65561 
  import public final function GetX() : Float;  // flags: 65561 
  import public final function GetY() : Float;  // flags: 65561 
  import public final function GetZ() : Float;  // flags: 65561 
  import public final function GetXRotation() : Float;  // flags: 65561 
  import public final function GetYRotation() : Float;  // flags: 65561 
  import public final function GetXScale() : Float;  // flags: 65561 
  import public final function GetYScale() : Float;  // flags: 65561 
  import public final function GetZScale() : Float;  // flags: 65561 
  import public final function SetAlpha( alpha : Float);  // flags: 65561 
  import public final function SetRotation( degrees : Float);  // flags: 65561 
  import public final function SetVisible( visible : Bool);  // flags: 65561 
  import public final function SetPosition( x : Float,  y : Float);  // flags: 65561 
  import public final function SetScale( xscale : Float);  // flags: 65561 
  import public final function SetX( x : Float);  // flags: 65561 
  import public final function SetY( y : Float);  // flags: 65561 
  import public final function SetZ( z : Float);  // flags: 65561 
  import public final function SetXRotation( degrees : Float);  // flags: 65561 
  import public final function SetYRotation( degrees : Float);  // flags: 65561 
  import public final function SetXScale( xscale : Float);  // flags: 65561 
  import public final function SetYScale( yscale : Float);  // flags: 65561 
  import public final function SetZScale( zscale : Float);  // flags: 65561 

}
import class W3TutorialManagerUIHandlerStateOpenWorldMap extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class CScriptedFlashArray extends IScriptedFlash {

  import public final function ClearElements();  // flags: 65561 
  import public final function GetLength() : Int32;  // flags: 65561 
  import public final function SetLength( length : Int32);  // flags: 65561 
  import public final function GetElementFlashBool( index : Int32) : Bool;  // flags: 65561 
  import public final function GetElementFlashInt( index : Int32) : Int32;  // flags: 65561 
  import public final function GetElementFlashUInt( index : Int32) : Int32;  // flags: 65561 
  import public final function GetElementFlashNumber( index : Int32) : Float;  // flags: 65561 
  import public final function GetElementFlashString( index : Int32) : String;  // flags: 65561 
  import public final function GetElementFlashObject( index : Int32) : CScriptedFlashObject;  // flags: 65561 
  import public final function PopBack();  // flags: 65561 
  import public final function SetElementFlashObject( index : Int32,  value : CScriptedFlashObject);  // flags: 65561 
  import public final function SetElementFlashString( index : Int32,  value : String);  // flags: 65561 
  import public final function SetElementFlashBool( index : Int32,  value : Bool);  // flags: 65561 
  import public final function SetElementFlashInt( index : Int32,  value : Int32);  // flags: 65561 
  import public final function SetElementFlashUInt( index : Int32,  value : Int32);  // flags: 65561 
  import public final function SetElementFlashNumber( index : Int32,  value : Float);  // flags: 65561 
  import public final function PushBackFlashObject( value : CScriptedFlashObject);  // flags: 65561 
  import public final function PushBackFlashString( value : String);  // flags: 65561 
  import public final function PushBackFlashBool( value : Bool);  // flags: 65561 
  import public final function PushBackFlashInt( value : Int32);  // flags: 65561 
  import public final function PushBackFlashUInt( value : Int32);  // flags: 65561 
  import public final function PushBackFlashNumber( value : Float);  // flags: 65561 
  import public final function RemoveElement( index : Int32);  // flags: 65561 
  import public final function RemoveElements( index : Int32,  optional  count : Int32);  // flags: 65561 

}
import class W3TutorialManagerUIHandlerStateUpgradesRemoval extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 

}
import class CScriptedFlashTextField extends IScriptedFlash {

  import public final function GetText() : String;  // flags: 65561 
  import public final function GetTextHtml() : String;  // flags: 65561 
  import public final function SetText( text : String);  // flags: 65561 
  import public final function SetTextHtml( htmlText : String);  // flags: 65561 

}
import class CScriptedFlashFunction extends IScriptedFlash {

  import public final function InvokeSelf();  // flags: 65561 
  import public final function InvokeSelfOneArg( arg0 : SFlashArg);  // flags: 65561 
  import public final function InvokeSelfTwoArgs( arg0 : SFlashArg,  arg1 : SFlashArg);  // flags: 65561 
  import public final function InvokeSelfThreeArgs( arg0 : SFlashArg,  arg1 : SFlashArg,  arg2 : SFlashArg);  // flags: 65561 
  import public final function InvokeSelfFourArgs( arg0 : SFlashArg,  arg1 : SFlashArg,  arg2 : SFlashArg,  arg3 : SFlashArg);  // flags: 65561 
  import public final function InvokeSelfFiveArgs( arg0 : SFlashArg,  arg1 : SFlashArg,  arg2 : SFlashArg,  arg3 : SFlashArg,  arg4 : SFlashArg);  // flags: 65561 
  import public final function InvokeSelfSixArgs( arg0 : SFlashArg,  arg1 : SFlashArg,  arg2 : SFlashArg,  arg3 : SFlashArg,  arg4 : SFlashArg,  arg5 : SFlashArg);  // flags: 65561 
  import public final function InvokeSelfSevenArgs( arg0 : SFlashArg,  arg1 : SFlashArg,  arg2 : SFlashArg,  arg3 : SFlashArg,  arg4 : SFlashArg,  arg5 : SFlashArg,  arg6 : SFlashArg);  // flags: 65561 
  import public final function InvokeSelfEightArgs( arg0 : SFlashArg,  arg1 : SFlashArg,  arg2 : SFlashArg,  arg3 : SFlashArg,  arg4 : SFlashArg,  arg5 : SFlashArg,  arg6 : SFlashArg,  arg7 : SFlashArg);  // flags: 65561 

}
import class CScriptedFlashValueStorage extends IScriptedFlash {

  import public final function SetFlashObject( key : String,  value : CScriptedFlashObject,  optional  index : Int32);  // flags: 65561 
  import public final function SetFlashArray( key : String,  value : CScriptedFlashArray);  // flags: 65561 
  import public final function SetFlashString( key : String,  value : String,  optional  index : Int32);  // flags: 65561 
  import public final function SetFlashBool( key : String,  value : Bool,  optional  index : Int32);  // flags: 65561 
  import public final function SetFlashInt( key : String,  value : Int32,  optional  index : Int32);  // flags: 65561 
  import public final function SetFlashUInt( key : String,  value : Int32,  optional  index : Int32);  // flags: 65561 
  import public final function SetFlashNumber( key : String,  value : Float,  optional  index : Int32);  // flags: 65561 
  import public final function CreateTempFlashArray() : CScriptedFlashArray;  // flags: 65561 
  import public final function CreateTempFlashObject( optional  flashClassName : String) : CScriptedFlashObject;  // flags: 65561 

}
import class CScriptedRenderFrame extends CObject {

  import public function DrawText( text : String,  position : Vector,  color : Color);  // flags: 65545 
  import public function DrawSphere( position : Vector,  radius : Float,  color : Color);  // flags: 65545 
  import public function DrawLine( start : Vector,  end : Vector,  color : Color);  // flags: 65545 

}
import class W3MerchantNPC extends CNewNPC {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function ActivateQuestBonus();  // flags: 65536 
  public function HasEmbeddedScenes() : Bool;  // flags: 65536 
  public function GetEmbeddedSceneBlocked( conditions : array<MerchantNPCEmbeddedScenesConditions>) : Bool;  // flags: 65536 
  public function StartEmbeddedScene() : Bool;  // flags: 65536 
  public function HasValidEmbeddedScene() : Bool;  // flags: 65536 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function IsCraftingDisabled() : Bool;  // flags: 65536 
  public function SetCraftingEnabled( enable : Bool);  // flags: 65536 

}
import class W3ReplacerCommoner extends W3Replacer {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 

}
import class W3ReplacerChanger extends W3GameplayTrigger {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class CPayStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function CanUseAction() : Bool;  // flags: 65536 
  public function PerformAction();  // flags: 65536 
  public function GetActionText() : String;  // flags: 65536 
  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CAxiiStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function CanUseAction() : Bool;  // flags: 65536 
  public function PerformAction();  // flags: 65536 
  public function GetActionText() : String;  // flags: 65536 
  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CArmWrestlingStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CDiceStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CDrinkingStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CDaggerThrowingStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CShopStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CBlacksmithStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CArmorerStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CRunesmithStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CTeacherStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CExitStorySceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CFastTravelStorySceneChoiceAction extends CStorySceneChoiceLineActionScriptedContentGuard {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CHairCutSceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function CanUseAction() : Bool;  // flags: 65536 
  public function PerformAction();  // flags: 65536 
  public function GetActionText() : String;  // flags: 65536 
  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CShavingSceneChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function CanUseAction() : Bool;  // flags: 65536 
  public function PerformAction();  // flags: 65536 
  public function GetActionText() : String;  // flags: 65536 
  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CGameCardsChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 
  public function PerformAction();  // flags: 65536 

}
import class CMonsterContractChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class CBetChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 
  public function CanUseAction() : Bool;  // flags: 65536 
  public function GetActionText() : String;  // flags: 65536 

}
import class CGetBackChoiceAction extends CStorySceneChoiceLineActionScripted {

  public function GetActionIcon() : EDialogActionIcon;  // flags: 65536 

}
import class W3BackgroundAnimatedEntityTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3ChangeCombatStageTrigger extends CGameplayEntity {

  public function GiantCombatStage( npcTag : CName,  stage : ENPCFightStage);  // flags: 65536 
  public function GiantChangeAp( npcTag : CName,  appearanceName : CName);  // flags: 65536 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3ShepherdGreetingTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3DestructionTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3FoodDispenserStateActive extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function ActivationInit();  // flags: 65664 

}
import class W3FoodDispenserStateInactive extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function DeactivationInit();  // flags: 65664 

}
import class Damper extends CObject {

  public final function SetDamp( factor : Float);  // flags: 65552 
  public final function Init( curr : Float,  dest : Float);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function SetValue( value : Float);  // flags: 65552 
  public final function GetValue() : Float;  // flags: 65552 
  public final function Update( dt : Float);  // flags: 65552 
  public final function UpdateAndGet( dt : Float,  value : Float) : Float;  // flags: 65552 

}
import class AngleConstDamper extends ConstDamper {

  public function Update( dt : Float);  // flags: 65536 

}
import class AngleDeltaDamper extends DeltaDamper {

  public function Update( dt : Float);  // flags: 65536 

}
import class DeltaDamper extends CObject {

  public final function SetDamp( factor : Float);  // flags: 65552 
  public final function Init( curr : Float,  dest : Float);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function SetValue( value : Float);  // flags: 65552 
  public final function GetValue() : Float;  // flags: 65552 
  public function Update( dt : Float);  // flags: 65536 
  public final function UpdateAndGet( dt : Float,  value : Float) : Float;  // flags: 65552 

}
import class AngleSpringDamper extends SpringDamper {

  protected function CalcDiff( c : Float,  d : Float) : Float;  // flags: 32768 

}
import class ConstVectorDamper extends CObject {

  public final function SetDamp( _deltaValue : Float);  // flags: 65552 
  public final function Init( curr : Vector,  dest : Vector);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function SetValue( value : Vector);  // flags: 65552 
  public final function GetValue() : Vector;  // flags: 65552 
  public function Update( dt : Float);  // flags: 65536 
  public final function UpdateAndGet( dt : Float,  value : Vector) : Vector;  // flags: 65552 

}
import class DeltaAngularDamper extends CObject {

  public final function SetDamp( factor : Float);  // flags: 65552 
  public final function Init( curr : Float,  dest : Float);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function SetValue( value : Float);  // flags: 65552 
  public final function GetValue() : Float;  // flags: 65552 
  public function Update( dt : Float);  // flags: 65536 
  public final function UpdateAndGet( dt : Float,  value : Float) : Float;  // flags: 65552 

}
import class SailDamper extends CObject {

  public final function SetDamp( factor : Float);  // flags: 65552 
  public final function Init( curr : Float,  dest : Float);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function SetEdgeValue( value : Float);  // flags: 65552 
  public final function SetValue( value : Float);  // flags: 65552 
  public final function GetValue() : Float;  // flags: 65552 
  public final function Update( dt : Float,  realDest : Float);  // flags: 65552 
  public final function UpdateAndGet( dt : Float,  value : Float,  realValue : Float) : Float;  // flags: 65552 

}
import class CBoatPassengerInteractionComponent extends CInteractionComponent {

  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 

}
import class W3PlayerWitcher extends CR4Player {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function IsInitialized() : Bool;  // flags: 65536 
  private final function NewGamePlusInitialize();  // flags: 16400 
  public function BroadcastRain( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function InitializeParryType();  // flags: 65536 
  public event function OnDeath( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  public function HandleMovement( deltaTime : Float);  // flags: 65536 
  public function ToggleSpecialAttackHeavyAllowed( toggle : Bool);  // flags: 65536 
  public function GetReputationManager() : W3Reputation;  // flags: 65536 
  public function OnRadialMenuItemChoose( selectedItem : String);  // flags: 65536 
  public function ToggleNextItem();  // flags: 65536 
  public function SetEquippedSign( signType : ESignType);  // flags: 65536 
  public function GetEquippedSign() : ESignType;  // flags: 65536 
  public function GetCurrentlyCastSign() : ESignType;  // flags: 65536 
  public function SetCurrentlyCastSign( type : ESignType,  entity : W3SignEntity);  // flags: 65536 
  public function GetCurrentSignEntity() : W3SignEntity;  // flags: 65536 
  public function GetSignEntity( type : ESignType) : W3SignEntity;  // flags: 65536 
  public function IsCurrentSignChanneled() : Bool;  // flags: 65536 
  public function IsCastingSign() : Bool;  // flags: 65536 
  protected function IsInCombatActionCameraRotationEnabled() : Bool;  // flags: 32768 
  public function SetHoldBeforeOpenRadialMenuTime( time : Float);  // flags: 65536 
  public function RepairItem( rapairKitId : SItemUniqueId,  usedOnItem : SItemUniqueId);  // flags: 65536 
  public function HasRepairAbleGearEquiped() : Bool;  // flags: 65536 
  public function HasRepairAbleWaponEquiped() : Bool;  // flags: 65536 
  public function IsItemRepairAble( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetOilAppliedOnSword( steel : Bool) : CName;  // flags: 65536 
  public function IsEquippedSwordUpgradedWithOil( steel : Bool,  optional  oilName : CName) : Bool;  // flags: 65536 
  public function ApplyOil( oilId : SItemUniqueId,  usedOnItem : SItemUniqueId);  // flags: 65536 
  public function ReduceDamage( out  damageData : W3DamageAction);  // flags: 65536 
  public function UndyingSkillCooldown( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnTakeDamage( action : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnStartFistfightMinigame() : Bool;  // flags: 65568 
  public event function OnEndFistfightMinigame() : Bool;  // flags: 65568 
  public function GetCriticalHitChance( isHeavyAttack : Bool,  target : CActor,  victimMonsterCategory : EMonsterCategory) : Float;  // flags: 65536 
  public function GetCriticalHitDamageBonus( weaponId : SItemUniqueId,  victimMonsterCategory : EMonsterCategory,  isStrikeAtBack : Bool) : SAbilityAttributeValue;  // flags: 65536 
  public function ProcessLockTarget( optional  newLockTarget : CActor,  optional  checkLeftStickHeading : Bool) : Bool;  // flags: 65536 
  public function Mutagen14Timer( dt : Float,  id : Int32);  // flags: 66560 
  public final function FailFundamentalsFirstAchievementCondition();  // flags: 65552 
  public final function SetUsedQuenInCombat();  // flags: 65552 
  public final function UsedQuenInCombat() : Bool;  // flags: 65552 
  public event function OnCombatStart() : Bool;  // flags: 65568 
  public event function OnCombatFinished() : Bool;  // flags: 65568 
  public function DelayedAdrenalineDrain( dt : Float,  id : Int32);  // flags: 66560 
  protected function Attack( hitTarget : CGameplayEntity,  animData : CPreAttackEventData,  weaponId : SItemUniqueId,  parried : Bool,  countered : Bool,  parriedBy : array<CActor>,  attackAnimationName : CName,  hitTime : Float,  weaponEntity : CItemEntity);  // flags: 32768 
  public final function SpecialAttackLightSustainCost( dt : Float,  id : Int32);  // flags: 66576 
  public final function GetWhirlFocusCostPerSec() : Float;  // flags: 65552 
  public final function SpecialAttackHeavySustainCost( dt : Float,  id : Int32);  // flags: 66576 
  public function OnSpecialAttackHeavyActionProcess();  // flags: 65536 
  public function IsSpecialLightAttackInputHeld( time : Float,  id : Int32);  // flags: 66560 
  public function IsSpecialHeavyAttackInputHeld( time : Float,  id : Int32);  // flags: 66560 
  public function EvadePressed( bufferAction : EBufferActionType);  // flags: 65536 
  public function ProcessCombatActionBuffer() : Bool;  // flags: 65536 
  public event function OnPerformSpecialAttack( isLightAttack : Bool,  enableAttack : Bool) : Bool;  // flags: 65568 
  public event function OnPlayerTickTimer( deltaTime : Float) : Bool;  // flags: 65568 
  protected function PrepareAttackAction( hitTarget : CGameplayEntity,  animData : CPreAttackEventData,  weaponId : SItemUniqueId,  parried : Bool,  countered : Bool,  parriedBy : array<CActor>,  attackAnimationName : CName,  hitTime : Float,  weaponEntity : CItemEntity,  out  attackAction : W3Action_Attack) : Bool;  // flags: 32768 
  protected function TestParryAndCounter( data : CPreAttackEventData,  weaponId : SItemUniqueId,  out  parried : Bool,  out  countered : Bool) : array<CActor>;  // flags: 32768 
  private function FastAttackCounterDecay( delta : Float,  id : Int32);  // flags: 17408 
  private function HeavyAttackCounterDecay( delta : Float,  id : Int32);  // flags: 17408 
  public function GetCraftingSchematicsNames() : array<CName>;  // flags: 65536 
  public function AddCraftingSchematic( nam : CName,  optional  isSilent : Bool,  optional  skipTutorialUpdate : Bool) : Bool;  // flags: 65536 
  public function AddCraftingHudNotification( nam : CName,  isSilent : Bool);  // flags: 65536 
  public function AddAlchemyHudNotification( nam : CName,  isSilent : Bool);  // flags: 65536 
  public function GetAlchemyRecipes() : array<CName>;  // flags: 65536 
  public function CanLearnAlchemyRecipe( recipeName : CName) : Bool;  // flags: 65536 
  private final function RemoveAlchemyRecipe( recipeName : CName);  // flags: 16400 
  public function AddAlchemyRecipe( nam : CName,  optional  isSilent : Bool,  optional  skipTutorialUpdate : Bool) : Bool;  // flags: 65536 
  public function GetDisplayHeavyAttackIndicator() : Bool;  // flags: 65536 
  public function SetDisplayHeavyAttackIndicator( val : Bool);  // flags: 65536 
  public function GetDisplayHeavyAttackFirstLevelTimer() : Bool;  // flags: 65536 
  public function SetDisplayHeavyAttackFirstLevelTimer( val : Bool);  // flags: 65536 
  public function SelectQuickslotItem( slot : EEquipmentSlots);  // flags: 65536 
  public function GetMedallion() : W3MedallionController;  // flags: 65536 
  public final function HighlightObjects( range : Float,  optional  highlightTime : Float);  // flags: 65552 
  public final function HighlightEnemies( range : Float,  optional  highlightTime : Float);  // flags: 65552 
  public function SpawnMedallionEntity();  // flags: 65536 
  public final function InterruptCombatFocusMode();  // flags: 65552 
  public final function AddBombThrowDelay( bombId : SItemUniqueId);  // flags: 65552 
  public final function GetBombDelay( slot : EEquipmentSlots) : Float;  // flags: 65552 
  public function BombDelay1( dt : Float,  id : Int32);  // flags: 66560 
  public function BombDelay2( dt : Float,  id : Int32);  // flags: 66560 
  public function ResetCharacterDev();  // flags: 65536 
  public function ConsumeItem( itemId : SItemUniqueId) : Bool;  // flags: 65536 
  public final function GetAlcoholForAlchemicalItemsRefill() : SItemUniqueId;  // flags: 65552 
  public final function ClearPreviouslyUsedBolt();  // flags: 65552 
  public final function AddAndEquipInfiniteBolt( optional  forceBodkin : Bool,  optional  forceHarpoon : Bool);  // flags: 65552 
  public event function OnItemGiven( data : SItemChangedData) : Bool;  // flags: 65568 
  public final function CheckForFullyArmedAchievement();  // flags: 65552 
  public final function HasAllItemsFromSet( setItemTag : CName) : Bool;  // flags: 65552 
  public function GetTotalArmor() : SAbilityAttributeValue;  // flags: 65536 
  public function ReduceArmorDurability() : EEquipmentSlots;  // flags: 65536 
  public function DismantleItem( dismantledItem : SItemUniqueId,  toolItem : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetItemEquippedOnSlot( slot : EEquipmentSlots,  out  item : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetItemSlotByItemName( itemName : CName) : EEquipmentSlots;  // flags: 65536 
  public function GetItemSlot( item : SItemUniqueId) : EEquipmentSlots;  // flags: 65536 
  public function GetEquippedItems() : array<SItemUniqueId>;  // flags: 65536 
  public function IsItemEquipped( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function IsAnyItemEquippedOnSlot( slot : EEquipmentSlots) : Bool;  // flags: 65536 
  public function GetFreeQuickslot() : EEquipmentSlots;  // flags: 65536 
  public event function OnEquipItemRequested( item : SItemUniqueId,  ignoreMount : Bool) : Bool;  // flags: 65568 
  public event function OnUnequipItemRequested( item : SItemUniqueId) : Bool;  // flags: 65568 
  public function EquipItem( item : SItemUniqueId,  optional  slot : EEquipmentSlots,  optional  toHand : Bool) : Bool;  // flags: 65536 
  protected function ShouldMount( slot : EEquipmentSlots,  item : SItemUniqueId,  category : CName) : Bool;  // flags: 32768 
  protected function ShouldMountItemWithName( itemName : CName) : Bool;  // flags: 32768 
  public function GetMountableItems( out  items : array<CName>);  // flags: 65536 
  public final function SwapEquippedItems( slot1 : EEquipmentSlots,  slot2 : EEquipmentSlots);  // flags: 65552 
  public function EquipItemInGivenSlot( item : SItemUniqueId,  slot : EEquipmentSlots,  ignoreMounting : Bool,  optional  toHand : Bool) : Bool;  // flags: 65536 
  private function CheckHairItem();  // flags: 16384 
  public function DelayedOnItemMount( dt : Float,  id : Int32);  // flags: 66560 
  public function GetHeldItems() : array<SItemUniqueId>;  // flags: 65536 
  public function UnequipItemFromSlot( slot : EEquipmentSlots,  optional  reequipped : Bool) : Bool;  // flags: 65536 
  public function UnequipItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function DropItem( item : SItemUniqueId,  quantity : Int32) : Bool;  // flags: 65536 
  public function IsItemEquippedByName( itemName : CName) : Bool;  // flags: 65536 
  public function IsItemEquippedByCategoryName( categoryName : CName) : Bool;  // flags: 65536 
  public function GetMaxRunEncumbrance( out  usesHorseBonus : Bool) : Float;  // flags: 65536 
  public function GetEncumbrance() : Float;  // flags: 65536 
  public function UpdateEncumbrance();  // flags: 65536 
  public final function GetSkillGroupIDFromIndex( idx : Int32) : Int32;  // flags: 65552 
  public final function GetSkillGroupColor( groupID : Int32) : ESkillColor;  // flags: 65552 
  public final function GetSkillGroupsCount() : Int32;  // flags: 65552 
  public function CycleSelectSign( bIsCyclingLeft : Bool) : ESignType;  // flags: 65536 
  public function ToggleNextSign();  // flags: 65536 
  public function TogglePreviousSign();  // flags: 65536 
  public function ProcessSignEvent( eventName : CName) : Bool;  // flags: 65536 
  public event function OnProcessCastingOrientation( isContinueCasting : Bool) : Bool;  // flags: 65568 
  public event function OnRaiseSignEvent() : Bool;  // flags: 65568 
  public function CastSignFriendly() : Bool;  // flags: 65536 
  public function CastSign() : Bool;  // flags: 65536 
  private function HAX_SignToThrowItemRestore();  // flags: 16384 
  public event function OnCFMCameraZoomFail() : Bool;  // flags: 65568 
  public final function GetDrunkMutagens() : array<CBaseGameplayEffect>;  // flags: 65552 
  public final function GetPotionBuffs() : array<CBaseGameplayEffect>;  // flags: 65552 
  public final function RecalcPotionsDurations();  // flags: 65552 
  public function StartFrenzy();  // flags: 65536 
  public function SkillFrenzyFinish( dt : Float,  optional  id : Int32);  // flags: 66560 
  public function GetToxicityDamageThreshold() : Float;  // flags: 65536 
  public final function AddToxicityOffset( val : Float);  // flags: 65552 
  public final function RemoveToxicityOffset( val : Float);  // flags: 65552 
  public final function CalculatePotionDuration( item : SItemUniqueId,  isMutagenPotion : Bool,  optional  itemName : CName) : Float;  // flags: 65552 
  public function ToxicityLowEnoughToDrinkPotion( slotid : EEquipmentSlots,  optional  itemId : SItemUniqueId) : Bool;  // flags: 65536 
  public function DrinkPreparedPotion( slotid : EEquipmentSlots,  optional  itemId : SItemUniqueId);  // flags: 65536 
  private function BonusPotionGetDurationFromXML( type : EEffectType) : Float;  // flags: 16384 
  public function ClearSkillBonusPotionEffect();  // flags: 65536 
  public function GetSkillBonusPotionEffect() : CBaseGameplayEffect;  // flags: 65536 
  public final function AddRepairObjectBuff( armor : Bool,  weapon : Bool) : Bool;  // flags: 65552 
  public function StartCSAnim( buff : CBaseGameplayEffect) : Bool;  // flags: 65536 
  public function GetPotionBuffLevel( effectType : EEffectType) : Int32;  // flags: 65536 
  public event function OnLevelGained( currentLevel : Int32,  show : Bool) : Bool;  // flags: 65568 
  public function GetSignStats( skill : ESkill,  out  damageType : CName,  out  damageVal : Float,  out  spellPower : SAbilityAttributeValue);  // flags: 65536 
  public function SetIgnorePainMaxVitality( val : Float);  // flags: 65536 
  public event function OnAnimEvent_ActionBlend( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Sign( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Throwable( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function IsInCombatAction_SpecialAttack() : Bool;  // flags: 65536 
  protected function WhenCombatActionIsFinished();  // flags: 32768 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  public event function OnCombatActionFriendlyEnd() : Bool;  // flags: 65568 
  public function OpenRadialMenu( time : Float,  id : Int32);  // flags: 66560 
  public function OnAddRadialMenuOpenTimer();  // flags: 65536 
  public function SetShowRadialMenuOpenFlag( bSet : Bool);  // flags: 65536 
  public function OnRemoveRadialMenuOpenTimer();  // flags: 65536 
  public function ResetRadialMenuOpenTimer();  // flags: 65536 
  public function ResendCompanionDisplayName( dt : Float,  id : Int32);  // flags: 66560 
  public function ResendCompanionDisplayNameSecond( dt : Float,  id : Int32);  // flags: 66560 
  public function RemoveCompanionDisplayNameTimer();  // flags: 65536 
  public function RemoveCompanionDisplayNameTimerSecond();  // flags: 65536 
  public function GetCompanionNPCTag() : CName;  // flags: 65536 
  public function SetCompanionNPCTag( value : CName);  // flags: 65536 
  public function GetCompanionNPCTag2() : CName;  // flags: 65536 
  public function SetCompanionNPCTag2( value : CName);  // flags: 65536 
  public function GetCompanionNPCIconPath() : String;  // flags: 65536 
  public function SetCompanionNPCIconPath( value : String);  // flags: 65536 
  public function GetCompanionNPCIconPath2() : String;  // flags: 65536 
  public function SetCompanionNPCIconPath2( value : String);  // flags: 65536 
  public function ReactToBeingHit( damageAction : W3DamageAction,  optional  buffNotApplied : Bool) : Bool;  // flags: 65536 
  protected function ShouldPauseHealthRegenOnHit() : Bool;  // flags: 32768 
  public function SetMappinToHighlight( mappinName : CName,  mappinState : Bool);  // flags: 65536 
  public function ClearMappinToHighlight();  // flags: 65536 
  public function CastSignAbort();  // flags: 65536 
  public event function OnBlockingSceneStarted( scene : CStoryScene) : Bool;  // flags: 65568 
  public function GetHorseManager() : W3HorseManager;  // flags: 65536 
  public function HorseEquipItem( horsesItemId : SItemUniqueId) : Bool;  // flags: 65536 
  public function HorseUnequipItem( slot : EEquipmentSlots) : Bool;  // flags: 65536 
  public final function HorseRemoveItemByName( itemName : CName,  quantity : Int32);  // flags: 65552 
  public final function HorseRemoveItemByCategory( itemCategory : CName,  quantity : Int32);  // flags: 65552 
  public final function HorseRemoveItemByTag( itemTag : CName,  quantity : Int32);  // flags: 65552 
  public event function OnPlayerHorseSpawned( horse : CActor) : Bool;  // flags: 65568 
  public function GetAssociatedInventory() : CInventoryComponent;  // flags: 65536 
  public final function TutorialMutagensUnequipPlayerSkills() : array<STutorialSavedSkill>;  // flags: 65552 
  public final function TutorialMutagensEquipOneGoodSkill();  // flags: 65552 
  public final function TutorialMutagensEquipOneGoodOneBadSkill();  // flags: 65552 
  public final function TutorialMutagensEquipThreeGoodSkills();  // flags: 65552 
  public final function TutorialMutagensCleanupTempSkills( savedEquippedSkills : array<STutorialSavedSkill>);  // flags: 65552 
  public function GetOffenseStatsList() : SPlayerOffenseStats;  // flags: 65536 
  public function GetTotalWeaponDamage( weaponId : SItemUniqueId,  damageTypeName : CName,  crossbowId : SItemUniqueId) : Float;  // flags: 65536 
  public final function GetSkillPathType( skill : ESkill) : ESkillPath;  // flags: 65552 
  public function GetSkillLevel( s : ESkill) : Int32;  // flags: 65536 
  public function GetAxiiLevel() : Int32;  // flags: 65536 
  public function IsInFrenzy() : Bool;  // flags: 65536 
  public function HasRecentlyCountered() : Bool;  // flags: 65536 
  public function SetRecentlyCountered( counter : Bool);  // flags: 65536 
  public function CheckBlockedSkills( dt : Float,  id : Int32);  // flags: 66560 
  public function RemoveTemporarySkills();  // flags: 65536 
  public function RemoveTemporarySkill( skill : SSimpleSkill) : Bool;  // flags: 65536 
  private function AddTemporarySkills();  // flags: 16384 
  public function HasAlternateQuen() : Bool;  // flags: 65536 
  public function AddPoints( type : ESpendablePointType,  amount : Int32,  show : Bool);  // flags: 65536 
  public function GetLevel() : Int32;  // flags: 65536 
  public function GetTotalExpForNextLevel() : Int32;  // flags: 65536 
  public function GetPointsTotal( type : ESpendablePointType) : Int32;  // flags: 65536 
  public function IsAutoLeveling() : Bool;  // flags: 65536 
  public function SetAutoLeveling( b : Bool);  // flags: 65536 
  public function GetMissingExpForNextLevel() : Int32;  // flags: 65536 
  public function HACK_QuenSaveStatus( dt : Float,  id : Int32);  // flags: 66560 
  public final function OnBasicQuenFinishing();  // flags: 65552 
  public final function IsAnyQuenActive() : Bool;  // flags: 65552 
  public final function IsQuenActive( alternateMode : Bool) : Bool;  // flags: 65552 
  public function FinishQuen();  // flags: 65536 
  public function GetTotalSignSpellPower( signSkill : ESkill) : SAbilityAttributeValue;  // flags: 65536 
  public final function GetGwentCardIndex( cardName : CName) : Int32;  // flags: 65552 
  public final function AddGwentCard( cardName : CName,  amount : Int32) : Bool;  // flags: 65552 
  public final function RemoveGwentCard( cardName : CName,  amount : Int32) : Bool;  // flags: 65552 
  public function CheckGwentTournamentDeck();  // flags: 65536 
  public function SimulateBuffTimePassing( simulatedTime : Float);  // flags: 65536 
  public function CanMeditate() : Bool;  // flags: 65536 
  public final function CanMeditateWait( optional  skipMeditationStateCheck : Bool) : Bool;  // flags: 65552 
  public final function CanMeditateHere() : Bool;  // flags: 65552 
  public function Meditate();  // flags: 65536 
  public final function MeditationRestoring( simulatedTime : Float);  // flags: 65552 
  public function MeditationClockStart( m : CR4MeditationClockMenu);  // flags: 65536 
  public function MeditationClockStop();  // flags: 65536 
  public function UpdateClockTime( dt : Float,  id : Int32);  // flags: 66560 
  public function SetWaitTargetHour( t : Int32);  // flags: 65536 
  public function GetWaitTargetHour() : Int32;  // flags: 65536 
  public function MeditationForceAbort( forceCloseUI : Bool);  // flags: 65536 
  public function CheatResurrect();  // flags: 65536 
  public function Debug_EquipTestingSkills( equip : Bool);  // flags: 65536 
  public function Debug_ClearCharacterDevelopment();  // flags: 65536 
  public final function Debug_HAX_UnlockSkillSlot( slotIndex : Int32) : Bool;  // flags: 65552 
  public function GetLevelupAbility( id : Int32) : CName;  // flags: 65536 
  public function CanSprint( speed : Float) : Bool;  // flags: 65536 
  public function RestoreHorseManager() : Bool;  // flags: 65536 
  public final function BlockSignSelection( signType : ESignType,  block : Bool);  // flags: 65552 
  public final function IsSignBlocked( signType : ESignType) : Bool;  // flags: 65552 

}
import class W3HorseManager extends CPeristentEntity {

  public function OnCreated();  // flags: 65536 
  public function GetInventoryComponent() : CInventoryComponent;  // flags: 65536 
  public function ApplyHorseUpdateOnSpawn() : Bool;  // flags: 65536 
  public function IsItemEquipped( id : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetItemInSlot( slot : EEquipmentSlots) : SItemUniqueId;  // flags: 65536 
  public function GetHorseAttributeValue( attributeName : CName,  excludeItems : Bool) : SAbilityAttributeValue;  // flags: 65536 
  public function EquipItem( id : SItemUniqueId) : SItemUniqueId;  // flags: 65536 
  public function AddAbility( abilityName : CName);  // flags: 65536 
  public function UnequipItem( slot : EEquipmentSlots) : SItemUniqueId;  // flags: 65536 
  public function Debug_TraceInventory( inventory : CInventoryComponent,  optional  categoryName : CName);  // flags: 65536 
  public function Debug_TraceInventories( optional  heading : String);  // flags: 65536 
  public function MoveItemToHorse( id : SItemUniqueId,  optional  quantity : Int32) : SItemUniqueId;  // flags: 65536 
  public function MoveItemFromHorse( id : SItemUniqueId,  optional  quantity : Int32) : SItemUniqueId;  // flags: 65536 
  public function GetHorseSlotForItem( id : SItemUniqueId) : EEquipmentSlots;  // flags: 65536 
  public final function HorseRemoveItemByName( itemName : CName,  quantity : Int32);  // flags: 65552 
  public final function HorseRemoveItemByCategory( itemCategory : CName,  quantity : Int32);  // flags: 65552 
  public final function HorseRemoveItemByTag( itemTag : CName,  quantity : Int32);  // flags: 65552 
  public function GetAssociatedInventory() : CInventoryComponent;  // flags: 65536 

}
import class W3RefillableContainer extends W3Container {

  protected function IsEmpty() : Bool;  // flags: 32768 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  protected function TakeAllItems();  // flags: 32768 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function Refill( td : Float,  id : Int32);  // flags: 66560 
  private function CheckForBonusHerbs( oldItems : array<SItemUniqueId>,  oldItemsQuantities : array<Int32>,  bonusChance : Float);  // flags: 16384 
  private function GetHerbsData( items : array<SItemUniqueId>,  itemsQuantities : array<Int32>,  out  herbNames : array<CName>,  out  herbQuantities : array<Int32>);  // flags: 16384 
  protected function PreRefillContainer();  // flags: 32768 

}
import class W3DurationObstacle extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Disappear( optional  delta : Float,  optional  id : Int32);  // flags: 66560 
  private function SpecificDisappear();  // flags: 16384 

}
import class CExplorationStateManager extends CSelfUpdatingComponent {

  public event function OnComponentAttached() : Bool;  // flags: 65568 
  public function Initialize( _OwnerEntityE : CGameplayEntity,  _OwnerEntityMAC : CMovingPhysicalAgentComponent);  // flags: 65536 
  private function GrabStateComponents();  // flags: 16384 
  private function FindAndReportProblemsWithStates();  // flags: 16384 
  private function FindState( stateName : CName) : Int32;  // flags: 16384 
  public function Restart();  // flags: 65536 
  public event function OnComponentTick( _Dt : Float) : Bool;  // flags: 65568 
  public function Update( _Dt : Float);  // flags: 65536 
  private function UpdateDebugInfo();  // flags: 16384 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags) : Bool;  // flags: 65568 
  public function SetDebugPoint( point : Vector);  // flags: 65536 
  private function DebugDisplayActionLocks();  // flags: 16384 
  private function GetAuxNameForInt( i : Int32) : CName;  // flags: 16384 
  private function UpdateSuperStateChange();  // flags: 16384 
  private function SuperStateChanged( stateExiting : CName,  stateEntering : CName);  // flags: 16384 
  public function IsThisACombatSuperState( stateName : CName) : Bool;  // flags: 65536 
  private function PreUpdate( _Dt : Float);  // flags: 16384 
  private function UpdateExternalData( _Dt : Float);  // flags: 16384 
  public function ReactOnHitCeiling();  // flags: 65536 
  public function ReactToChanceToFallAndSlide() : Bool;  // flags: 65536 
  private function StateChangeUpdate();  // flags: 16384 
  private function UpdateStateChangesFromBehavior() : Bool;  // flags: 16384 
  private function UpdateStateChangesConfirmation() : Bool;  // flags: 16384 
  private function BehaviorConfirmationFailedChange() : Bool;  // flags: 16384 
  private function UpdateStateChangesQueued() : Bool;  // flags: 16384 
  private function UpdateStateChangesInProperState() : Bool;  // flags: 16384 
  private function UpdateStates( _Dt : Float);  // flags: 16384 
  private function PostUpdate( _Dt : Float);  // flags: 16384 
  private function StateTryToChangeOrFallToDefault( newState : CName) : Bool;  // flags: 16384 
  private function StateTryToChangeTo( _NewStateN : CName) : Bool;  // flags: 16384 
  private function ChangeToStateWithTransition( _NewStateN : CName);  // flags: 16384 
  public function CanChangeToState( _ToN : CName) : Bool;  // flags: 65536 
  public function CanChangeBetwenStates( _FromN : CName,  _ToN : CName) : Bool;  // flags: 65536 
  public function StateWantsAndCanEnter( desiredState : CName) : Bool;  // flags: 65536 
  private function FindTransitionThatCanPlay( _FromN : CName,  _ToN : CName,  out  _TransitionI : Int32,  out  _TransitionNameN : CName) : Bool;  // flags: 16384 
  private function FindTransition( _FromN : CName,  _ToN : CName,  out  _TransitionI : Int32,  out  _TransitionNameN : CName) : Bool;  // flags: 16384 
  private function CanWePlayTransition( _FromN : CName,  _ToN : CName,  _TransitionNameN : CName) : Bool;  // flags: 16384 
  private function ChangeStateTo( _NewStateN : CName);  // flags: 16384 
  public function StateExited();  // flags: 65536 
  private function PostStateChange();  // flags: 16384 
  private function SetCamera();  // flags: 16384 
  private function TryToSetTheProperBehaviorState();  // flags: 16384 
  private function UpdateInactiveStates( _Dt : Float);  // flags: 16384 
  private function QueueState( newState : CName);  // flags: 16384 
  public function QueueStateExternal( newState : CName);  // flags: 65536 
  public event function OnRagdollStart() : Bool;  // flags: 65568 
  public event function OnNoLongerInRagdoll() : Bool;  // flags: 65568 
  public event function OnRagdollTouch( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnPrediction( pos : Vector,  normal : Vector,  disp : Vector,  penetration : Float,  actorHeight : Float,  diffZ : Float,  fromVirtualController : Bool) : Bool;  // flags: 65568 
  public function SendAnimEvent( eventName : CName,  optional  forced : Bool) : Bool;  // flags: 65536 
  public function SetBehaviorParamBool( paramName : CName,  value : Bool,  optional  onAllInstances : Bool);  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public event function OnBehaviorGraphNotification( notificationName : CName,  stateName : CName) : Bool;  // flags: 65568 
  public function OnTeleported();  // flags: 65536 
  public function ReactOnBeingHit() : Bool;  // flags: 65536 
  public function ReactOnCriticalState( enabled : Bool);  // flags: 65536 
  public function UpdateCameraIfNeeded( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65536 
  public event function OnGameCameraExplorationRotCtrlChange() : Bool;  // flags: 65568 
  public function RessetCameraOffset();  // flags: 65536 
  private function GetStateID( _StateNameN : CName) : Int32;  // flags: 16384 
  public function GetStateCur() : CName;  // flags: 65536 
  public function GetStateTypeCur() : EExplorationStateType;  // flags: 65536 
  public function GetStateType( stateName : CName) : EExplorationStateType;  // flags: 65536 
  public function GetStateTimeF() : Float;  // flags: 65536 
  public function GetDefaultStateName() : CName;  // flags: 65536 
  public function GetSuperStateName() : CName;  // flags: 65536 
  public function StateExistsB( stateName : CName) : Bool;  // flags: 65536 
  public function IsOnGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 
  public function CanReactToHardCriticalState() : Bool;  // flags: 65536 

}
import class CClimbProbe extends CObject {

  public function Initialize( heightMin : Float,  heightMax : Float,  platformHeihtMin : Float,  radius : Float,  colorDivide : Int32,  isTop : Bool);  // flags: 65536 
  public function PreUpdate( position : Vector,  direction : Vector,  requireInputDir : Bool,  distanceType : EClimbDistanceType,  logFails : Bool);  // flags: 65536 
  public function ComputeStartup();  // flags: 65536 
  public function ComputeStartupFromThisPoint( manualPoint : Vector);  // flags: 65536 
  private function ComputeCurCeilingStartup() : Bool;  // flags: 16384 
  public function ComputeClimbDetails() : Bool;  // flags: 65536 
  public function IsSetupValid() : Bool;  // flags: 65536 
  public function IsValid() : Bool;  // flags: 65536 
  public function GetClimbData( out  height : Float,  out  vault : EClimbRequirementVault,  out  vaultFalls : Bool,  out  platform : EClimbRequirementPlatform,  out  climbPoint : Vector,  out  wallNormal : Vector) : Bool;  // flags: 65536 
  public function GetGroundPoint() : Vector;  // flags: 65536 
  private function ComputeCeiling();  // flags: 16384 
  private function ComputeFakeCeiling( manualPoint : Vector);  // flags: 16384 
  private function SetCeilingData( point : Vector,  heightFree : Float);  // flags: 16384 
  private function ComputeGround();  // flags: 16384 
  private function IsGroundPointCloseToDirection( point : Vector) : Bool;  // flags: 16384 
  private function RecomputeDirectionWithGroundPoint();  // flags: 16384 
  private function ComputeClimbableGround();  // flags: 16384 
  private function ComputeClimbableGroundPhysics();  // flags: 16384 
  private function ComputeNormalOfWall();  // flags: 16384 
  private function ComputeNormalOfWallDetailed();  // flags: 16384 
  private function RefineGroundBasedOnWall();  // flags: 16384 
  private function ComputeSpaceToEnter();  // flags: 16384 
  private function ComputeHorizontalHeightDiff();  // flags: 16384 
  private function ComputeClimbAproximation();  // flags: 16384 
  private function ComputeVaultMode();  // flags: 16384 
  private function ComputePlatformMode();  // flags: 16384 
  private function ComputeVerticalSlope();  // flags: 16384 
  private function ComputeVerticalLowSlope();  // flags: 16384 
  private function ComputeVerticalFreeDistanceInFront();  // flags: 16384 
  private function DoWeHaveAValidCeiling() : Bool;  // flags: 16384 
  private function DoWeHaveHeightForBottomGround() : Bool;  // flags: 16384 
  private function DoWeHaveGroundStartUp() : Bool;  // flags: 16384 
  private function DoWeHaveGround() : Bool;  // flags: 16384 
  private function DoWeHaveAClimbableGround() : Bool;  // flags: 16384 
  private function DoWeHaveAWall() : Bool;  // flags: 16384 
  private function DoWeHaveSpaceBetweenGroundAndCeiling() : Bool;  // flags: 16384 
  private function DoWeHaveEnoughSpace() : Bool;  // flags: 16384 
  private function DoWeHaveProperHorizontalDiff() : Bool;  // flags: 16384 
  private function DoWeHaveProperSlope() : Bool;  // flags: 16384 
  private function DoWeHaveProperVerticalSlope() : Bool;  // flags: 16384 
  private function DoWeHaveProperVerticalSlopeLow() : Bool;  // flags: 16384 
  private function DoWeHaveEnoughVerticalFreeDistance() : Bool;  // flags: 16384 
  private function FailedClimbCheckBecause( failExplanation : String);  // flags: 16384 
  private function GetVerticalAngle( from : Vector,  to : Vector) : Float;  // flags: 16384 
  public function GetDebugText() : String;  // flags: 65536 
  private function PrepareDebugPositions();  // flags: 16384 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags,  active : Bool) : Bool;  // flags: 65568 

}
import class CInputAxisDoubleTap extends CObject {

  public function Initialize( _ActionN : CName,  _PressF : Float,  _UnpressF : Float,  _TimeF : Float);  // flags: 65536 
  private function ResetValues();  // flags: 16384 
  public function Update();  // flags: 65536 
  private function CheckPressB( _ValueF : Float) : Bool;  // flags: 16384 
  private function CheckUnPressB( _ValueF : Float) : Bool;  // flags: 16384 
  private function CheckActivation() : Bool;  // flags: 16384 
  public function IsActiveB() : Bool;  // flags: 65536 
  public function ConsumeIfActivated();  // flags: 65536 

}
import class NavigationCorrection extends CObject {

  public function Set( isCorrected : Bool,  oldDirection : Vector,  newDirection : Vector);  // flags: 65536 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags,  selected : Bool) : Bool;  // flags: 65568 

}
import class CDoorMarking extends CScriptedComponent {

  public event function OnComponentAttached() : Bool;  // flags: 65568 
  public function PreInit();  // flags: 65536 
  private function SetProperTags();  // flags: 16384 
  public function GetClosestPointAndNormal( out  outPoint : Vector,  out  outNormal : Vector);  // flags: 65536 
  private function CalculateData();  // flags: 16384 
  private function CalculatePoints();  // flags: 16384 
  public function SetCheckState( check : EDoorMarkingState);  // flags: 65536 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags) : Bool;  // flags: 65568 
  public function IsChangingCamera() : Bool;  // flags: 65536 

}
import class CExplorationInput extends CObject {

  public function Initialize( _ExplorationO : CExplorationStateManager);  // flags: 65536 
  public function Update( _Dt : Float);  // flags: 65536 
  private function UpdateAxesDoubletaps();  // flags: 16384 
  private function UpdateSimpleActions( _Dt : Float);  // flags: 16384 
  private function UpdateDirectionVectors();  // flags: 16384 
  private function SetZeroInput();  // flags: 16384 
  private function UpdateHeading();  // flags: 16384 
  public function PostUpdate( _Dt : Float);  // flags: 65536 
  public function GetDoubleTapUp() : Bool;  // flags: 65536 
  public function GetDoubleTapDownB() : Bool;  // flags: 65536 
  public function GetDoubleTapLeftB() : Bool;  // flags: 65536 
  public function GetDoubleTapRightB() : Bool;  // flags: 65536 
  public function GetDoubleTapRollB() : Bool;  // flags: 65536 
  public function GetModuleF() : Float;  // flags: 65536 
  public function GetMovementOnPadV() : Vector;  // flags: 65536 
  public function GetMovementOnPadNormalizedV() : Vector;  // flags: 65536 
  public function GetMovementOnCameraNormalizedV() : Vector;  // flags: 65536 
  public function GetMovementOnPlaneV() : Vector;  // flags: 65536 
  public function GetMovementOnPlaneNormalizedV() : Vector;  // flags: 65536 
  public function GetHeadingOnPadF() : Float;  // flags: 65536 
  public function GetHeadingOnPlaneF() : Float;  // flags: 65536 
  public function GetHeadingDiffFromPlayerF() : Float;  // flags: 65536 
  public function GetHeadingDiffFromYawF( yaw : Float) : Float;  // flags: 65536 
  public function ComputeHeadingDiffWithReflectionF( targetHeading : Float,  reflectAllow : Bool,  out  diffReal : Float,  out  diffPercent : Float,  out  shouldReflect : Bool,  optional  requireinputModule : Bool);  // flags: 65536 
  public function GetInputDirOnSlopeDot() : Float;  // flags: 65536 
  public function IsModuleConsiderable() : Bool;  // flags: 65536 
  public function IsModuleRunning() : Bool;  // flags: 65536 
  public function IsRollPressedInTime() : Bool;  // flags: 65536 
  public function IsRollJustPressed() : Bool;  // flags: 65536 
  public function IsGuardPressed() : Bool;  // flags: 65536 
  public function IsJumpPressedInTime() : Bool;  // flags: 65536 
  public function GetJumpLastJustPressedTime() : Float;  // flags: 65536 
  public function GetJumpTimeGap() : Float;  // flags: 65536 
  public function IsJumpJustPressed() : Bool;  // flags: 65536 
  public function IsJumpJustReleased() : Bool;  // flags: 65536 
  public function IsJumpPressed() : Bool;  // flags: 65536 
  public function IsExplorationJustPressed() : Bool;  // flags: 65536 
  public function IsInteractionJustPressed() : Bool;  // flags: 65536 
  public function IsExplorationPressed() : Bool;  // flags: 65536 
  public function GetExplorationLastJustPressedTime() : Float;  // flags: 65536 
  public function GetIsDebugKeyPressed() : Bool;  // flags: 65536 
  public function IsSprintJustPressed() : Bool;  // flags: 65536 
  public function IsSprintPressed() : Bool;  // flags: 65536 
  public function IsSprintPressedInTime( time : Float) : Bool;  // flags: 65536 
  public function IsSkateJumpJustPressed() : Bool;  // flags: 65536 
  public function GetSkateJumpLastPressedTime() : Float;  // flags: 65536 
  public function IsDashJustPressed() : Bool;  // flags: 65536 
  public function IsDashPressed() : Bool;  // flags: 65536 
  public function GetDashLastPressedTime() : Float;  // flags: 65536 
  public function IsDriftJustPressed() : Bool;  // flags: 65536 
  public function IsDriftPressed() : Bool;  // flags: 65536 
  public function GetDriftLastPressedTime() : Float;  // flags: 65536 
  public function IsSkateAttackPressed() : Bool;  // flags: 65536 
  public function IsSkateAttackJustPressed() : Bool;  // flags: 65536 
  public function IsSkateAttackPressedInTime( time : Float) : Bool;  // flags: 65536 

}
import class CExplorationSkatingGlobal extends CObject {

  public function Initialize( _Exploration : CExplorationStateManager);  // flags: 65536 
  public function Reset();  // flags: 65536 
  public function PostUpdate( _Dt : Float);  // flags: 65536 
  private function UpdateSpeedLevelReduction( _Dt : Float);  // flags: 16384 
  private function UpdateDebug( _Dt : Float);  // flags: 16384 
  public function SetActive( enable : Bool);  // flags: 65536 
  public function UpdateRandomAttack() : Bool;  // flags: 65536 
  public function UpdateDashAttack() : Bool;  // flags: 65536 
  public function UpdateJumpAttack() : Bool;  // flags: 65536 
  public function GetSpeedLevel() : Int32;  // flags: 65536 
  public function GetSpeedMax() : Float;  // flags: 65536 
  public function GetSpeedMaxCur() : Float;  // flags: 65536 
  public function GetSpeedLevelParamSpeedMax( level : Int32) : Float;  // flags: 65536 
  public function ApplyDefaultParams();  // flags: 65536 
  public function ApplyCurLevelParams();  // flags: 65536 
  public function ImpulseToNextSpeedLevel( baseImpulse : Float);  // flags: 65536 
  public function ImpulseNotExceedingMaxSpeedLevel( baseImpulse : Float);  // flags: 65536 
  public function IncreaseSpeedLevel( applyNow : Bool,  increaseLevelCapIfNeeded : Bool) : Bool;  // flags: 65536 
  public function DecreaseSpeedLevel( applyNow : Bool,  decreaseLevelCapIfNeeded : Bool) : Bool;  // flags: 65536 
  public function SetSpeedLevel( level : Int32,  applyNow : Bool) : Bool;  // flags: 65536 
  public function ShouldStop( braking : Bool) : Bool;  // flags: 65536 
  public function StartFlowTimeGap();  // flags: 65536 
  public function CancelFlowTimeGap();  // flags: 65536 
  public function CheckIfIsInFlowGapAndConsume() : Bool;  // flags: 65536 
  public function GetMaxFlowTimeGap() : Float;  // flags: 65536 
  private function LostFlowCombo();  // flags: 16384 
  private function ChainedFlowCombo();  // flags: 16384 
  private function GetCurFlowCombo() : Int32;  // flags: 16384 
  public function IsDashReady() : Bool;  // flags: 65536 
  public function UpdateDashCooldown( _Dt : Float);  // flags: 65536 
  public function ConsumeDashCooldown();  // flags: 65536 
  public function SetDashReady();  // flags: 65536 
  public function SetBehParams( accel : Float,  braking : Bool,  turn : Float);  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 

}
import class CCameraParametersSet extends CObject {

  public function SetToMainCamera( forcedBlend : Float);  // flags: 65536 
  public function StopOnMainCamera();  // flags: 65536 

}
import class CExplorationMover extends CObject {

  public function Initialize( _ExplorationO : CExplorationStateManager);  // flags: 65536 
  public function Reset();  // flags: 65536 
  public function OnTeleported();  // flags: 65536 
  public function ApplyMovement( _Dt : Float);  // flags: 65536 
  public function PreUpdate( _Dt : Float);  // flags: 65536 
  public function PostUpdate( _Dt : Float);  // flags: 65536 
  public function Translate( _TranslationV : Vector);  // flags: 65536 
  private function Rotate( _RotationEA : EulerAngles);  // flags: 16384 
  public function GetDisplacementLastFrame() : Vector;  // flags: 65536 
  public function IsRightFootForward() : Bool;  // flags: 65536 
  public function IsRightFootForwardTowardsDir( direction : Vector) : Bool;  // flags: 65536 
  public function UpdateMovementLinear( _VelocityV : Vector,  _Dt : Float);  // flags: 65536 
  public function SetPlaneMovementParams( _PlaneMovementParamsS : SPlaneMovementParameters);  // flags: 65536 
  public function SetVerticalMovementParams( _VerticalMovementParamsS : SVerticalMovementParams);  // flags: 65536 
  public function SetSlidingLimits( minDegrees : Float,  maxDegrees : Float);  // flags: 65536 
  public function GetSlidingLimitMinCur() : Float;  // flags: 65536 
  public function GetSlidingLimitMax() : Float;  // flags: 65536 
  public function ConvertAngleDegreeToSlidECoef( angleDegree : Float) : Float;  // flags: 65536 
  public function ConvertCoefToAngleDegree( coef : Float) : Float;  // flags: 65536 
  public function SetSlidingParams( _SlidingParamsS : SSlidingMovementParams);  // flags: 65536 
  public function SetSlidingMaterialParams( _AngleMinMaterialF : Float,  _MaterialFrictionMultiplierF : Float);  // flags: 65536 
  public function SetSkatingParams( slidingParams : SSkatingMovementParams);  // flags: 65536 
  public function SetSkatingLevelParams( levelParams : SSkatingLevelParams);  // flags: 65536 
  public function SetSkatingTurnSpeed( turnSpeed : Float);  // flags: 65536 
  public function SetSkatingAbsoluteMaxSpeed( maxSpeed : Float);  // flags: 65536 
  public function SetManualMovement( enable : Bool);  // flags: 65536 
  public function SetCustomIsAnim( enabled : Bool);  // flags: 65536 
  public function UpdateMovementOnPlaneWithInput( _Dt : Float);  // flags: 65536 
  public function UpdateMovementOnPlaneWithInertia( _Dt : Float);  // flags: 65536 
  public function UpdateMovementStraightAndTurnWithInput( _SpeedMaxF : Float,  _AccelF : Float,  _TurnCoefBaseF : Float,  _InputMaxTurnF : Float,  _Dt : Float);  // flags: 65536 
  public function UpdateSkatingMovement( _Dt : Float,  out  _AccelF : Float,  out  _ResultingTurnPercF : Float,  out  _IsBraking : Bool,  optional  _IsDriftingB : Bool,  optional  _IsDriftLeftB : Bool);  // flags: 65536 
  public function UpdateSlidingInertialMovementWithInput( _Dt : Float,  out  _TurnF : Float,  out  _AccelF : Float,  applyStoppingFriction : Bool,  slopeYaw : Float,  slopeOrientSpeed : Float);  // flags: 65536 
  public function UpdateSlidingInertialMovement( _Dt : Float);  // flags: 65536 
  public function UpdateMovementVertical( _Dt : Float) : Float;  // flags: 65536 
  public function UpdatePerfectMovementVertical( _Dt : Float) : Float;  // flags: 65536 
  private function GetTimeToReachThePeak() : Float;  // flags: 16384 
  private function GetTimeToReachMaxSpeed() : Float;  // flags: 16384 
  private function UpdateParabolicVerticalMovement( _AccelF : Float,  _Dt : Float) : Float;  // flags: 16384 
  private function UpdateLinearVerticalMovement( _Dt : Float) : Float;  // flags: 16384 
  public function UpdateOrientToInput( _Speed : Float,  _Dt : Float) : Bool;  // flags: 65536 
  public function UpdateOrientToInputLinear( _Speed : Float,  _Dt : Float,  optional  tolerance : Float) : Bool;  // flags: 65536 
  private function UpdateBanking( _Dt : Float);  // flags: 16384 
  private function ComputeSlideDirAndNormal();  // flags: 16384 
  private function ComputeSlideWideCoef();  // flags: 16384 
  public function GetSlideDirAndNormal( out  slideDir : Vector,  out  slideNormal : Vector);  // flags: 65536 
  public function GetSlideDir() : Vector;  // flags: 65536 
  public function SetSuperSlide( enabled : Bool);  // flags: 65536 
  public function GetSlideCoef( forceNoDamp : Bool,  optional  coefExtra : Float) : Float;  // flags: 65536 
  public function GetRawSlideCoef( forceNoDamp : Bool) : Float;  // flags: 65536 
  public function GetRealSlideAngle() : Float;  // flags: 65536 
  public function GetRealWideSlideAngle() : Float;  // flags: 65536 
  public function GetSlideWideCoefFromTerrain( average : Bool) : Float;  // flags: 65536 
  public function GetSlideCoefFromTerrain() : Float;  // flags: 65536 
  public function GetSlideSpeedMax() : Float;  // flags: 65536 
  public function SetSlideSpeedMode( fast : Bool);  // flags: 65536 
  private function ComputeRealSlideCoefFromNormal( normalZ : Float) : Float;  // flags: 16384 
  private function ComputeSlideCoefFromNormal( normalZ : Float) : Float;  // flags: 16384 
  public function StopAllMovement();  // flags: 65536 
  public function StopVerticalMovement();  // flags: 65536 
  public function AddVelocity( velocity : Vector);  // flags: 65536 
  public function AddSpeed( speed : Float);  // flags: 65536 
  public function SetVelocity( _NewVelocityV : Vector);  // flags: 65536 
  public function SetVerticalSpeed( _NewSpeedF : Float);  // flags: 65536 
  public function AddVerticalSpeed( _NewSpeedF : Float);  // flags: 65536 
  public function SetBankingToReset();  // flags: 65536 
  public function SetBankingTarget( _BankingF : Float,  _SpeedF : Float);  // flags: 65536 
  public function AddYaw( _DeltaYawF : Float);  // flags: 65536 
  public function RotateYawTowards( _TargetYawF : Float,  _DeltaYawF : Float,  _ToleranceF : Float,  _SoftB : Bool);  // flags: 65536 
  public function SetSpeedFromAnim( optional  _MaxSpeedF : Float);  // flags: 65536 
  public function SetSpeedFromAnimFrontal( optional  _MaxSpeedF : Float);  // flags: 65536 
  public function RemoveSpeedOnThisDirection( directionNormalized : Vector);  // flags: 65536 
  public function GetMovementHorizontalVelocityV() : Vector;  // flags: 65536 
  public function GetMovementVerticalSpeedF() : Float;  // flags: 65536 
  public function GetMovementVelocity() : Vector;  // flags: 65536 
  public function GetMovementVelocityNormalized() : Vector;  // flags: 65536 
  public function GetMovementSpeedF() : Float;  // flags: 65536 
  public function GetMovementSpeedHeadingF() : Float;  // flags: 65536 
  public function GetAccelerationnLastF() : Float;  // flags: 65536 
  public function GetYawTurnThisFrameF() : Float;  // flags: 65536 

}
import class CExplorationSharedData extends CObject {

  public function Initialize( manager : CExplorationStateManager);  // flags: 65536 
  public function Reset();  // flags: 65536 
  public function PreUpdate( _Dt : Float);  // flags: 65536 
  public function PostUpdate( _Dt : Float);  // flags: 65536 
  public function DrawDebugText( horizontalPos : Int32,  verticalPos : Int32,  heightStep : Int32,  width : Int32,  height : Int32,  textColor : Color) : Int32;  // flags: 65536 
  public function OnTeleported();  // flags: 65536 
  public function HasToFallFromLadder() : Bool;  // flags: 65536 
  public function GetFallFromCritical() : Bool;  // flags: 65536 
  public function SetFallFromCritical( fall : Bool);  // flags: 65536 
  private function LandCrouchUpdate( _Dt : Float);  // flags: 16384 
  public function LandCrouchStart( walking : Bool);  // flags: 65536 
  public function LandCrouchCancel();  // flags: 65536 
  public function LandCrouchSpeedUp();  // flags: 65536 
  public function SetExplorationToken( exploration : SExplorationQueryToken,  tag : String);  // flags: 65536 
  public function GetExplorationTokenDescription( exploration : SExplorationQueryToken) : String;  // flags: 65536 
  public function HasValidExploration() : Bool;  // flags: 65536 
  public function GetLastExploration() : SExplorationQueryToken;  // flags: 65536 
  public function HasValidLadderExploration() : Bool;  // flags: 65536 
  public function GetCurentExplorationType() : EExplorationType;  // flags: 65536 
  public function IsForceHeading( out  targetRotation : EulerAngles) : Bool;  // flags: 65536 
  public function UpdateTerrainSlopeBlend( _Dt : Float);  // flags: 65536 
  public function SetTerrainSlopeSpeed( speed : Float);  // flags: 65536 
  public function SetTerrainSlopeInstant( slope : Float);  // flags: 65536 
  public function ResetHeightFallen();  // flags: 65536 
  public function GetFallingHeight() : Float;  // flags: 65536 
  public function GetFallingMaxHeightReached() : Float;  // flags: 65536 
  public function UpdateFallHeight();  // flags: 65536 
  public function CalculateFallingHeights( out  fallDiff : Float,  out  jumpTotalDiff : Float);  // flags: 65536 
  public function SetFotForward( optional  reverse : Bool);  // flags: 65536 
  public function ForceFotForward( right : Bool);  // flags: 65536 
  public function EnableJumpToWaterArea( optional  needDirection : Bool,  optional  direction : Vector,  optional  requireSprint : Bool);  // flags: 65536 
  public function DisableJumpToWaterArea();  // flags: 65536 
  public function GetJumpToWaterArea() : Bool;  // flags: 65536 
  public function SetUseClimb( enable : Bool);  // flags: 65536 
  public function SetHackKnockBack( enable : Bool);  // flags: 65536 
  public function SwitchUseOnlyJumpClimbs();  // flags: 65536 
  public function SetAirCollisionSideEnabled( enabled : Bool);  // flags: 65536 
  public function SwitchPrototypeAnimations();  // flags: 65536 
  public function GoToRagdoll();  // flags: 65536 
  public function GoToKnockDown();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function EnableCameraOffsetCorrection( enable : Bool);  // flags: 65536 
  public function CameraOffsetEnabled() : Bool;  // flags: 65536 

}
import class CExplorationCollisionManager extends CObject {

  public function Initialize( explorationManager : CExplorationStateManager);  // flags: 65536 
  public function Update( _Dt : Float);  // flags: 65536 
  private function UpdateCollisionWithNPCs( canPlayerReactToCollisions : Bool,  canPlayerReactToPushes : Bool,  canNpcsReactToCollisions : Bool);  // flags: 16384 
  private function UpdateCollisionsWithStatics();  // flags: 16384 
  public function IsCollidingWithStatics() : Bool;  // flags: 65536 
  public function GetAngleBlockedByStatics( out  min : Float,  out  max : Float,  angleBlocked : Float) : Bool;  // flags: 65536 
  public function IsAngleBlockedByStatics( angle : Float,  angleNeeded : Float) : Bool;  // flags: 65536 
  private function UpdateCollisionTime( _Dt : Float);  // flags: 16384 
  private function CanPlayerCollide() : Bool;  // flags: 16384 
  private function CanPlayerBePushed() : Bool;  // flags: 16384 
  private function CanPlayerReactToThisNPC( npc : CNewNPC) : Bool;  // flags: 16384 
  private function CanNPCsCollide() : Bool;  // flags: 16384 
  private function CanThisNpcCollide( npc : CNewNPC) : Bool;  // flags: 16384 
  private function MakeNPCCollide( npc : CNewNPC);  // flags: 16384 
  private function UpdatePlayerCollidingSide( pointToConsider : Vector,  normalZ : Float);  // flags: 16384 
  private function UpdatePlayerCollidingHeight( npc : CNewNPC);  // flags: 16384 
  private function UpdatePlayerCollidingStrength( otherPosition : Vector,  otherSpeed : Vector);  // flags: 16384 
  public function GetPushData( out  strength : Float,  out  direction : Vector,  out  otherSpeed : Float,  out  otherVelocity : Vector);  // flags: 65536 
  private function SetPlayerCollisionBehaviorData();  // flags: 16384 
  private function UpdateCollidingSideEvent( _Dt : Float);  // flags: 16384 
  private function GetDesiredStance() : EPlayerCollisionStance;  // flags: 16384 
  public function IsThereWaterAndIsItDeepEnough( point : Vector,  height : Float,  radius : Float) : Bool;  // flags: 65536 
  public function CheckLandBelow( distance : Float,  optional  offset : Vector,  optional  useDefaultCollisionObstacles : Bool) : Bool;  // flags: 65536 
  public function CheckCollisionsForwardInHands( distance : Float) : Bool;  // flags: 65536 
  public function CheckCollisionsToNoStepOnInputDir( distForward : Float,  heightToStep : Float) : Bool;  // flags: 65536 
  public function CheckCollisionsInJumpTrajectory( height : Float,  distance : Float) : Bool;  // flags: 65536 
  public function EnableVerticalSliding( enable : Bool);  // flags: 65536 
  public function TeleportPlayerToHisGroundIfNeeded( tolerance : Float);  // flags: 65536 
  public function CheckSwipeInDir( directionNormalized : Vector,  distance : Float,  radius : Float,  optional  vecOffset : Vector,  optional  useDefaultCollisionObstacles : Bool) : Bool;  // flags: 65536 
  public function CheckLineOfSightHorizontal( point : Vector) : Bool;  // flags: 65536 
  public function HasGroundCollisions() : Bool;  // flags: 65536 
  public function GetHasToFallInDirection( out  direction : Float) : Bool;  // flags: 65536 
  public function IsInSolidGround() : Bool;  // flags: 65536 
  public function IsDirectionToFallFree( headingLocal : Float) : Bool;  // flags: 65536 
  public function GetLandGoesToFall() : Bool;  // flags: 65536 
  public function IsGoingDownSlopeInstant( _AutoRollSlopeCoefF : Float) : Bool;  // flags: 65536 
  public function IsGoingUpSlope( direction : Vector,  optional  upCoef : Float,  optional  frontCoef : Float) : Bool;  // flags: 65536 
  public function IsGoingUpSlopeInInputDir( optional  upCoef : Float,  optional  frontCoef : Float) : Bool;  // flags: 65536 
  public function GetJumpGoesToWater() : Bool;  // flags: 65536 
  private function GetJumpGoesToWaterFromBoat( inputVector : Vector) : Bool;  // flags: 16384 
  public function GetJumpGoesOutOfBoat() : Bool;  // flags: 65536 
  public function UpdateDebugInfo();  // flags: 65536 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags) : Bool;  // flags: 65568 

}
import class CExplorationMovementCorrector extends CObject {

  public function Initialize( explorationManager : CExplorationStateManager);  // flags: 65536 
  public function PreUpdate( _Dt : Float);  // flags: 65536 
  public function CorrectDirectionToAvoid( direction : Vector,  out  newDirection : Vector,  anyInput : Bool) : Bool;  // flags: 65536 
  public function ModifySpeedRequired( out  speed : Float) : Bool;  // flags: 65536 
  public function IsDoorRequestingCamera() : Bool;  // flags: 65536 
  private function UpdatePlayerData();  // flags: 16384 
  public function StartTurnAdjustment();  // flags: 65536 
  public function CancelTurnAdjustment();  // flags: 65536 
  private function UpdateTurnAdjustment( _Dt : Float);  // flags: 16384 
  private function UpdateCorrections( direction : Vector,  anyInput : Bool);  // flags: 16384 
  private function FindBestCorrection();  // flags: 16384 
  private function CorrectDirectionOnDoors( direction : Vector,  out  correction : NavigationCorrection);  // flags: 16384 
  private function CorrectDirectionOnCollision( direction : Vector,  out  correction : NavigationCorrection);  // flags: 16384 
  private function LogExplorationCorrection( text : String);  // flags: 16384 
  public function IsTurnAdjusted() : Bool;  // flags: 65536 
  private function CorrectDirectionOnPush( direction : Vector,  out  correction : NavigationCorrection);  // flags: 16384 
  private function CanBePushed() : Bool;  // flags: 16384 
  private function FindCurrentPushData( out  pushDirection : Vector,  out  slowing : Bool,  out  pushing : Bool,  out  pushBack : Bool);  // flags: 16384 
  private function CorrectDirectionOnPush2( direction : Vector,  out  correction : NavigationCorrection);  // flags: 16384 
  private function CorrectDirectionOnPhysycs( direction : Vector,  out  correction : NavigationCorrection);  // flags: 16384 
  private function CorrectDirectionOnNavmesh( direction : Vector,  out  correction : NavigationCorrection);  // flags: 16384 
  private function CorrectDirectionOnExploration( inputDir : Vector,  out  correction : NavigationCorrection);  // flags: 16384 
  private function GetClosestExploration( direction : Vector,  out  exploration : SExplorationQueryToken) : Bool;  // flags: 16384 
  private function GetDirectionToReachExploration( direction : Vector,  exploration : SExplorationQueryToken,  out  directionToInteract : Vector) : Bool;  // flags: 16384 
  private function IsCorrectionSideAcceptable( correctionDirection : Vector) : Bool;  // flags: 16384 
  public function GetIsCollisionCorrected() : Bool;  // flags: 65536 
  public function GetDebugText() : String;  // flags: 65536 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags) : Bool;  // flags: 65568 

}
import class CExplorationStateAbstract extends CScriptedComponent {

  public final function Initialize( _Exploration : CExplorationStateManager);  // flags: 65552 
  protected function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 32768 
  public function PostInitialize();  // flags: 65536 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  protected function AddStateToTheDefaultChangeList( stateName : CName,  optional  timeToStartChecking : Float);  // flags: 32768 
  protected function AddActionsToBlock();  // flags: 32768 
  protected function AddActionToBlock( action : EInputActionBlock);  // flags: 32768 
  protected function BlockActions();  // flags: 32768 
  private function UnlockallActions();  // flags: 16384 
  public final function Restart();  // flags: 65552 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  public final function StateEnter( prevStateName : CName);  // flags: 65552 
  protected function StateEnterSpecific( prevStateName : CName);  // flags: 32768 
  protected function AddAnimEventCallbacks();  // flags: 32768 
  public function StateEnterConfirmed();  // flags: 65536 
  public function StateEnterConfirmedSpecific();  // flags: 65536 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  public function SetReadyToChangeTo( _NewStateN : CName);  // flags: 65536 
  public function HasQueuedState() : Bool;  // flags: 65536 
  public function IsThisStatequeued( _StateN : CName) : Bool;  // flags: 65536 
  public function GetQueuedState() : CName;  // flags: 65536 
  public function StateUpdate( _Dt : Float);  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  public function StateUpdateInactive( _Dt : Float);  // flags: 65536 
  public final function StateExit( nextStateName : CName);  // flags: 65552 
  protected function StateExitSpecific( nextStateName : CName);  // flags: 32768 
  protected function RemoveAnimEventCallbacks();  // flags: 32768 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitCeiling() : Bool;  // flags: 65536 
  public function ReactToSlide() : Bool;  // flags: 65536 
  public function ReactToBeingHit() : Bool;  // flags: 65536 
  public function ReactToChanceToFallAndSlide() : Bool;  // flags: 65536 
  public function ReactToCriticalState( enabled : Bool) : Bool;  // flags: 65536 
  public function OnBehGraphNodeEntered();  // flags: 65536 
  public function OnBehGraphNodeExited();  // flags: 65536 
  public final function GetStateName() : CName;  // flags: 65552 
  public final function GetStateType() : EExplorationStateType;  // flags: 65552 
  public function NeedsBehaviorConfirmation() : Bool;  // flags: 65536 
  public final function IsRaisingBehaviorEvent() : Bool;  // flags: 65552 
  public final function IsRaisingBehaviorEventEachFrame() : Bool;  // flags: 65552 
  public function GetBehaviorEventName() : CName;  // flags: 65536 
  public function GetBehaviorIsEventForced( fromState : CName) : Bool;  // flags: 65536 
  public function IsHolsterFast() : Bool;  // flags: 65536 
  public function GetStateToExitToAfterFailing() : CName;  // flags: 65536 
  public function GetDebugText() : String;  // flags: 65536 
  public function GetDebugTextInactive() : String;  // flags: 65536 
  public function GetCameraSet( out  cameraSet : CCameraParametersSet) : Bool;  // flags: 65536 
  public function CameraChangesRotationController() : Bool;  // flags: 65536 
  public function GetIfCameraIsKept() : Bool;  // flags: 65536 
  public function UpdateCameraIfNeeded( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65536 
  public final function IsActiveState() : Bool;  // flags: 65552 
  public function CanInteract() : Bool;  // flags: 65536 
  protected function SetCanSave( canSave : Bool);  // flags: 32768 
  public function GetCanSave() : Bool;  // flags: 65536 
  public function CanReactToHardCriticalState() : Bool;  // flags: 65536 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags,  active : Bool) : Bool;  // flags: 65568 

}
import class CExplorationStateTransitionAbstract extends CExplorationStateAbstract {

  public function IsMachForThisStates( _FromN : CName,  _ToN : CName) : Bool;  // flags: 65536 

}
import class W3DamageOverTimeEffect extends CBaseGameplayEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  private function AddHealthRegenReductionBuff();  // flags: 16384 
  public function CumulateWith( effect : CBaseGameplayEffect);  // flags: 65536 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  protected function CalculateDamage( arrayIndex : Int32,  maxVit : Float,  maxEss : Float,  dt : Float) : Float;  // flags: 32768 
  protected function IsImmuneToAllDamage( dt : Float) : Bool;  // flags: 32768 
  protected function CalculateDuration( optional  setInitialDuration : Bool);  // flags: 32768 
  public final function HAXXX_GetQuenDamages() : array<SRawDamage>;  // flags: 65552 

}
import class CExplorationClimbOracle extends CObject {

  public function Initialize( explorationO : CExplorationStateManager,  heightMin : Float,  heightMax : Float,  platformHeihtMin : Float,  radius : Float);  // flags: 65536 
  public function ComputeAll( ptriorizeTop : Bool,  position : Vector,  directionNormalized : Vector,  distanceType : EClimbDistanceType,  requireInputDir : Bool,  logFails : Bool);  // flags: 65536 
  public function CanWeClimb() : Bool;  // flags: 65536 
  public function GetClimbData( out  height : Float,  out  vault : EClimbRequirementVault,  out  vaultFalls : Bool,  out  platform : EClimbRequirementPlatform,  out  climbPoint : Vector,  out  wallNormal : Vector);  // flags: 65536 
  private function ComputeConvenientClimb() : EClimbProbeUsed;  // flags: 16384 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags,  active : Bool) : Bool;  // flags: 65568 
  public function DebugLogSuccesfullClimb();  // flags: 65536 

}
import class W3LadderInteraction extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  private function PlayerHasLadderExplorationReady() : Bool;  // flags: 16384 

}
import class CGroupFXManager extends CGameplayEntity {

  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function StartDropping( deltaTime : Float,  id : Int32);  // flags: 66560 

}
import class InterpCurveF extends InterpCurve {

  public function AddPoint( inVal : Float,  outVal : Float) : Int32;  // flags: 65536 
  private function ComputeCurveTangent( prevTime : Float,  prevPoint : Float,  currTime : Float,  currPoint : Float,  nextTime : Float,  nextPoint : Float,  tension : Float,  out  outTangent : Float);  // flags: 16384 
  private function AutoCalcTangent( prevP : Float,  p : Float,  nextP : Float,  tension : Float,  out  outTan : Float);  // flags: 16384 
  private function AutoCalcClampTngent( prevP : Float,  p : Float,  nextP : Float,  tension : Float,  out  outTan : Float);  // flags: 16384 
  public function AutoSetTangents( optional  tension : Float);  // flags: 65536 
  public function Eval( inVal : Float,  defaultVal : Float,  optional  out  ptIdx : Int32) : Float;  // flags: 65536 

}
import class InterpCurveV extends InterpCurve {

  public function AddPoint( inVal : Float,  outVal : Vector) : Int32;  // flags: 65536 
  private function ComputeCurveTangent( prevTime : Float,  prevPoint : Vector,  currTime : Float,  currPoint : Vector,  nextTime : Float,  nextPoint : Vector,  tension : Float,  out  outTangent : Vector);  // flags: 16384 
  private function AutoCalcTangent( prevP : Vector,  p : Vector,  nextP : Vector,  tension : Float,  out  outTan : Vector);  // flags: 16384 
  private function AutoCalcClampTngent( prevP : Float,  p : Float,  nextP : Float,  tension : Float,  out  outTan : Float);  // flags: 16384 
  public function AutoSetTangents( optional  tension : Float);  // flags: 65536 
  public function Eval( inVal : Float,  defaultVal : Vector,  optional  out  ptIdx : Int32) : Vector;  // flags: 65536 

}
import class W3SnowballProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 

}
import class CR4LocomotionSwimToStop extends CR4LocomotionDirectControllerScript {

  public function Activate() : Bool;  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function UpdateLocomotion();  // flags: 65536 
  public function GetIsCloseEnough() : Bool;  // flags: 65536 

}
import class W3Campfire extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnDestroyed() : Bool;  // flags: 65568 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionDeactivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function ApplyDamage();  // flags: 65536 
  public function ApplyDamageTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function CheckForNPCs( dt : Float,  id : Int32);  // flags: 66560 
  public function IsOnFire() : Bool;  // flags: 65536 
  public function ToggleFire( toggle : Bool);  // flags: 65536 

}
import class W3FireSource extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionDeactivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function ApplyFireSourceDamage( dt : Float,  id : Int32);  // flags: 66560 

}
import class CollisionTrajectoryPart extends CPhantomComponent {

  public function Initialize( owner : CollisionTrajectory);  // flags: 65536 
  public function HasCollisions() : Bool;  // flags: 65536 
  public event function OnCollisionEnter( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnCollisionExit( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  private function IsValidCollider( component : CComponent) : Bool;  // flags: 16384 
  public function GetDebugText() : String;  // flags: 65536 
  public function IsGoingToWater() : Bool;  // flags: 65536 

}
import class CR4Component extends CScriptedComponent {

  public function IgniHit();  // flags: 65536 
  public function AardHit();  // flags: 65536 
  public event function OnIgniHit() : Bool;  // flags: 65568 
  public event function OnAardHit() : Bool;  // flags: 65568 

}
import class CollisionTrajectory extends CGameplayEntity {

  public function Initialize( exploration : CExplorationStateManager);  // flags: 65536 
  private function SortParts();  // flags: 16384 
  private function SortPart( part : ECollisionTrajectoryPart);  // flags: 16384 
  private function FindPart( part : ECollisionTrajectoryPart) : Int32;  // flags: 16384 
  private function SwapParts( i : Int32,  j : Int32);  // flags: 16384 
  public function PreUpdate();  // flags: 65536 
  private function ComputeCollisionStateIfNeeded();  // flags: 16384 
  public function GetCollisionState() : ECollisionTrajecoryStatus;  // flags: 65536 
  public function IsPotentialObstacleToUseExploration() : Bool;  // flags: 65536 
  public function IsPotentialObstacleToJump() : Bool;  // flags: 65536 
  public function GetRefinedObstacleToJumpPosition( out  position : Vector) : Bool;  // flags: 65536 
  private function ComputeGoingToWaterIfNeeded();  // flags: 16384 
  public function IsGoingToWater() : ECollisionTrajectoryToWaterState;  // flags: 65536 
  public function DrawDebugText( horizontalPos : Int32,  verticalPos : Int32,  heightStep : Int32,  width : Int32,  height : Int32,  textColor : Color) : Int32;  // flags: 65536 

}
import class CTestTrigger extends CGameplayEntity {

  public function entryTimer( time : Float,  id : Int32);  // flags: 66560 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3ProjectileShooterTest extends CActor {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Shoot( t : Float,  id : Int32);  // flags: 66560 

}
import class CAICarryingItems extends CAIWanderTree {

  public function Init();  // flags: 65536 

}
import class CSpawnTreeInitializerCarryItemWanderAI extends ISpawnTreeInitializerIdleSmartAI {

  public function GetObjectForPropertiesEdition() : IScriptable;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 
  public function Init();  // flags: 65536 

}
import class CAIRiderMoveAlongPathAction extends IRiderActionTree {

  public function Init();  // flags: 65536 

}
import class CAIRiderMoveAlongPathWithCompanionAction extends CAIRiderMoveAlongPathAction {

  public function Init();  // flags: 65536 

}
import class CAIRiderRaceAlongPathAction extends IRiderActionTree {

  public function Init();  // flags: 65536 

}
import class CAISailorMountBoatAction extends ISailorActionTree {

  public function Init();  // flags: 65536 

}
import class CAISailorMoveToAction extends ISailorActionTree {

  public function Init();  // flags: 65536 

}
import class W3UsableItem extends CItemEntity {

  public event function OnDestroyed() : Bool;  // flags: 65568 
  public event function OnUsed( usedBy : CEntity) : Bool;  // flags: 65568 
  public event function OnHidden( hiddenBy : CEntity) : Bool;  // flags: 65568 
  public function SetVisibility( isVisible : Bool);  // flags: 65536 

}
import class CAISailorMoveAlongPathAction extends ISailorActionTree {

  public function Init();  // flags: 65536 

}
import class CAISailorRaceAlongPathAction extends ISailorActionTree {

  public function Init();  // flags: 65536 

}
import class CAIMoveToActionAwareOfTail extends IAIBaseAction {

  public function Init();  // flags: 65536 

}
import class CAIRiderMoveToAction extends IRiderActionTree {

  public function Init();  // flags: 65536 

}
import class CAIWalkToTargetWaitAction extends IAIActionTree {

  public function Init();  // flags: 65536 

}
import class CAIAnimalBase extends CAIBaseTree {

  public function Init();  // flags: 65536 

}
import class CAIAnimalQuestDefaults extends CAIDefaults {

  public function Init();  // flags: 65536 

}
import class CAIHorseDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAIAnimalCombatHorse extends CAIAnimalCombat {

  public function Init();  // flags: 65536 

}
import class CHorseIdleDecoratorTree extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIHorseCharmed extends CAIAnimalCharmed {

  public function Init();  // flags: 65536 

}
import class CAIWildHorseDefaults extends CAIHorseDefaults {

  public function Init();  // flags: 65536 

}
import class CAIDeerDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAIDeerLeaderDefaults extends CAIDeerDefaults {

  public function Init();  // flags: 65536 

}
import class CAIHareDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAIDogDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAIGoatDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAIGoatQuestDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAIPigDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAISheepDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAIGooseDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAICowDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAICowCharmed extends CAIAnimalCharmed {

  public function Init();  // flags: 65536 

}
import class CAIChickenDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAIRoosterDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class CAICatDefaults extends CAIAnimalDefaults {

  public function Init();  // flags: 65536 

}
import class W3Mutagen20_Effect extends W3Mutagen_Effect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  public function GetResistBonus( resist : ECharacterDefenseStats,  out  points : SAbilityAttributeValue,  out  percents : SAbilityAttributeValue);  // flags: 65536 

}
import class CAIRunExplorationActionTree extends IAIBaseAction {

  public function Init();  // flags: 65536 

}
import class CAICommonerReactionTree extends CAINpcReactionsTree {

  public function Init();  // flags: 65536 

}
import class CAIChildReactionTree extends CAINpcReactionsTree {

  public function Init();  // flags: 65536 

}
import class CAINpcReactionGetScared extends CAINpcReaction {

  public function SetParams( _scaredTime : Float,  _checkLineOfSight : Bool,  optional  _tryToBeHostileFirst : Bool);  // flags: 65536 

}
import class CAIDrunkCommonerReactionTree extends CAINpcReactionsTree {

  public function Init();  // flags: 65536 

}
import class CAIGuardReactionsTree extends CAINpcReactionsTree {

  public function Init();  // flags: 65536 

}
import class CAINpcReactionTurnHostile extends CAINpcReaction {

  public function SetParams( gameplayEventName : CName);  // flags: 65536 

}
import class CAINpcReactionJoinFight extends CAINpcReaction {

  public function SetParams( _onlyHelpActorsFromTheSameAttidueGroup : Bool);  // flags: 65536 

}
import class CAINpcReactionGuardWarnGeneral extends CAINpcReaction {

  public function SetParams( _lootingReaction : Bool);  // flags: 65536 

}
import class CAICombatNPCReactionsTree extends CAINpcReactionsTree {

  public function Init();  // flags: 65536 

}
import class W3RegenEffect extends CBaseGameplayEffect {

  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  private function CheckMonsterTarget();  // flags: 16384 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public function CacheSettings();  // flags: 65536 
  public function GetRegenStat() : ECharacterRegenStats;  // flags: 65536 
  public function UpdateEffectValue();  // flags: 65536 

}
import class CAINpcReactionStopAndComment extends CAINpcReaction {

  public function SetParams( _activationChance : Int32,  _stopDuration : Float);  // flags: 65536 

}
import class CAIQuestNPCReactionsTree extends CAINpcReactionsTree {

  public function Init();  // flags: 65536 

}
import class CAIPhilippaReactionsTree extends CAINpcReactionsTree {

  public function Init();  // flags: 65536 

}
import class CAINpcReactionObserveFight extends CAINpcReaction {

  public function SetParams( _doNotCheckLineOfSight : Bool);  // flags: 65536 

}
import class CAINpcReactionRain extends CAINpcReaction {

  public function Init();  // flags: 65536 

}
import class CAINpcReactionSurprise extends CAINpcReaction {

  public function SetParams( _rotateToActionTargetsTarget : Bool);  // flags: 65536 

}
import class CAIActionPlayerPresence extends CAINpcActionSubtree {

  public function Init();  // flags: 65536 

}
import class CAIMonsterFlyIdleAction extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class W3TutorialManagerUIHandlerStateCharDevMutagens extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public final function SelectedMutagensTab();  // flags: 65552 
  public final function EquippedMutagen();  // flags: 65552 

}
import class CAIMonsterIdleFlyOnCurve extends CAIMonsterIdleAction {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDefault extends CAIMonsterIdle {

  public function Init();  // flags: 65536 

}
import class CAILessogIdle extends CAIMonsterIdle {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorArachas extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorBear extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorBies extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorTroll extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorDrowner extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorGhoul extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorGolem extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorGryphon extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorHarpy extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorSiren extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorGiant extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorNekker extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorWerewolf extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorWolfAlpha extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorWolf extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorWyvern extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorGravehag extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIMonsterBase extends CAIBaseTree {

  public function Init();  // flags: 65536 

}
import class CAIMonsterDefaults extends CAIBaseMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class W3TutorialManagerUIHandlerStateCharacterDevelopment extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public final function OnBoughtSkill( skill : ESkill);  // flags: 65552 
  public final function EquippedSkill();  // flags: 65552 

}
import class CAIMonsterSpawnDefault extends CAIMonsterSpawn {

  public function Init();  // flags: 65536 

}
import class CAIFlyingMonsterDefaults extends CAIBaseMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class W3TutorialManagerUIHandlerStateSpecialAttacks extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public final function OnBoughtSkill( skill : ESkill);  // flags: 65552 

}
import class CAIMonsterSpawnFlying extends CAIMonsterSpawn {

  public function Init();  // flags: 65536 

}
import class CAITrollDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAITrollCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAINekkerDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAINekkerCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIBiesDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIBiesCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIBiesDEBUG extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIBiesDEBUGLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAISirenDefaults extends CAIFlyingMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAISirenCombatLogic extends CAIFlyingMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIIceGiantDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIIceGiantCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIDjinnDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIDjinnCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIDrownerDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIDrownerCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIGhoulDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIGhoulCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class W3Effect_Toxicity extends CBaseGameplayEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public function PlayHeadEffect( effect : CName,  optional  stop : Bool);  // flags: 65536 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  protected function SetEffectValue();  // flags: 32768 
  public function RecalcEffectValue();  // flags: 65536 

}
import class CAIGryphonDefaults extends CAIFlyingMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIGryphonCombatLogic extends CAIFlyingMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class W3AlchemyManager extends CObject {

  public function Init( optional  alchemyRecipes : array<CName>);  // flags: 65536 
  public function GetRecipe( recipeName : CName,  out  ret : SAlchemyRecipe) : Bool;  // flags: 65536 
  private function LoadRecipesCustomXMLData( recipesNames : array<CName>);  // flags: 16384 
  public function CanCookRecipe( recipeName : CName) : EAlchemyExceptions;  // flags: 65536 
  public function CookItem( recipeName : CName);  // flags: 65536 
  private function RemoveLowerLevelItems( recipe : SAlchemyRecipe);  // flags: 16384 
  public function GetRecipes( forceAll : Bool) : array<SAlchemyRecipe>;  // flags: 65536 
  private final function ShouldRemoveRecipe( itemName : CName,  itemLevel : Int32,  alchemyItems : array<SItemUniqueId>) : Bool;  // flags: 16400 
  public function GetRequiredIngredients( recipeName : CName) : array<SItemParts>;  // flags: 65536 

}
import class CAIHarpyDefaults extends CAIFlyingMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIHarpyCombatLogic extends CAIFlyingMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class W3Effect_BattleTrance extends CBaseGameplayEffect {

  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public function OnPerk11Equipped();  // flags: 65536 
  public function OnPerk11Unequipped();  // flags: 65536 
  protected function SetEffectValue();  // flags: 32768 

}
import class CAIWraithDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWraithCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorWraith extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAINoonwraithDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAINoonwraithCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorNoonWraith extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIPestaDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIPestaCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIWolfDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWolfCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class W3Effect_IgnorePain extends W3ChangeMaxStatEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public final function OnSkillLevelChanged( delta : Int32);  // flags: 65552 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class CAIWolfAlphaDefaults extends CAIWolfDefaults {

  public function Init();  // flags: 65536 

}
import class CAIGuardDogDefaults extends CAIWolfDefaults {

  public function Init();  // flags: 65536 

}
import class CAILessogDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIMonsterSpawnLessog extends CAIMonsterSpawn {

  public function Init();  // flags: 65536 

}
import class CAILessogCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIHimDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIHimCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIEndriagaDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIArachasCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIArachasDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIArachasDEBUG extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIArachasDEBUGLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIGolemDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIGolemCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIGolemDEBUG extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIGolemDEBUGLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIWerewolfDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWerewolfCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIMonsterDefeated extends CAIMonsterDeath {

  public function Init();  // flags: 65536 

}
import class CAIKatakanDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIKatakanCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIMonsterIdleDecoratorKatakan extends CAIMonsterIdleDecorator {

  public function Init();  // flags: 65536 

}
import class CAIBearDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIBearCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIBearProtectiveDefaults extends CAIBearDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWyvernDefaults extends CAIFlyingMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWyvernCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIGravehagDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIGravehagCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIFoglingDopplegangerDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIFoglingDopplegangerCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIWitchDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWitchCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIWitch2Defaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWitch2CombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIFugasDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIFugasCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAIRatDefaults extends CAIMonsterDefaults {

  public function Init();  // flags: 65536 

}
import class CAIRatCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAICowardMonsterTaunt extends CAIMonsterTaunt {

  public function Init();  // flags: 65536 

}
import class CAIBaseMonsterCombatParams extends CAICombatParameters {

  public function Init();  // flags: 65536 

}
import class CAIMonsterDamageReactionTree extends CAIMonsterSimpleDamageReactionTree {

  public function Init();  // flags: 65536 

}
import class W3Mutagen28_Effect extends W3Mutagen_Effect {

  public function GetMonsterDamageBonus( mc : EMonsterCategory) : SAbilityAttributeValue;  // flags: 65536 
  public function GetProtection( mc : EMonsterCategory,  dmgType : CName,  isDoT : Bool,  out  bonusResist : Float,  out  bonusReduct : Float);  // flags: 65536 

}
import class CAIGolemCombatLogicParams extends CAIMonsterCombatLogicParams {

  public function Init();  // flags: 65536 

}
import class CAIGhulCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class W3Mutagen25_Effect extends W3Mutagen_Effect {

  public function GetAttackPowerBonus() : SAbilityAttributeValue;  // flags: 65536 
  public function CacheSettings();  // flags: 65536 

}
import class CAIWitchSoloCombatLogic extends CAIMonsterCombatLogic {

  public function Init();  // flags: 65536 

}
import class CAINpcDeath extends CAIDeathTree {

  public function Init();  // flags: 65536 

}
import class CAINpcFistsDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcFistsCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAIDefeated extends CAIDeathTree {

  public function Init();  // flags: 65536 

}
import class CAINpcFistsCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcFistsCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcFistsEasyDefaults extends CAINpcFistsDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcFistsEasyCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcFistsEasyCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcFistsEasyCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcFistsHardDefaults extends CAINpcFistsDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcFistsHardCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcFistsHardCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcFistsHardCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcGuardDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcGuardCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcGuardCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcTwoHandedAnyCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcOneHandedAnyCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcOneHandedDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcOneHandedCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcOneHandedCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcOneHandedSwordCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcOneHandedAxeDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcOneHandedAxeCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcOneHandedAxeCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcOneHandedAxeCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcOneHandedBluntDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcOneHandedBluntCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcOneHandedBluntCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class W3TutorialManagerUIHandlerStateAlchemy extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public final function SelectedRecipe( recipeName : CName,  canCook : Bool);  // flags: 65552 
  private final function IsRecipeOk( recipeName : CName,  canCook : Bool) : Bool;  // flags: 16400 
  public final function CookedItem( recipeName : CName);  // flags: 65552 
  private final function AddThunderBoltIngredients();  // flags: 16400 

}
import class CAINpcOneHandedBluntCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedHammerDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class W3TutorialManagerUIHandlerStateAlchemyMutagens extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public final function CookedItem( recipeName : CName);  // flags: 65552 

}
import class CAINpcTwoHandedHammerCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedHammerCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcTwoHandedHammerCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedAxeDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedAxeCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedAxeCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcTwoHandedAxeCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedHalberdDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedHalberdCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedHalberdCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcTwoHandedHalberdCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedSpearDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedSpearCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedSpearCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcTwoHandedSpearCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcPitchforkDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CBirdsManager extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnDetaching() : Bool;  // flags: 65568 
  public function SetBirdArea( area : CTriggerAreaComponent);  // flags: 65536 
  private function GetBirdAreaInRange( range : Float) : CTriggerAreaComponent;  // flags: 16384 
  public function OnBirdDestroyed( b : W3Bird);  // flags: 65536 
  public function FlyBirds();  // flags: 65536 
  public function SpawnBirds( optional  forced : Bool);  // flags: 65536 
  public function OnBirdEntityAttached( birdEntity : CEntity);  // flags: 65536 
  private function UpdateSpawnPointsList();  // flags: 16384 
  private function DespawnBirds();  // flags: 16384 
  public event function OnDestroyed() : Bool;  // flags: 65568 
  protected function ShouldBirdsSpawnCheckBeActive() : Bool;  // flags: 32768 
  protected function StartBirdsSpawnCheck();  // flags: 32768 
  protected function StartBirdsSpawnPreCheck();  // flags: 32768 
  public function BirdsSpawnCheck( td : Float,  id : Int32);  // flags: 66560 
  public function BirdsSpawnPreCheck( td : Float,  id : Int32);  // flags: 66560 

}
import class CAINpcPitchforkCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcPitchforkCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcPitchforkCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcShieldDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcShieldCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcShieldCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcShieldCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcBowDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcBowCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcBowCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcBowCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcBowmanMeleeCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcCrossbowDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcCrossbowCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CBirdsArea extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class CAINpcCrossbowCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcCrossbowCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedSwordDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedSwordCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcTwoHandedSwordCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcTwoHandedSwordCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAIHjalmarDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcStyleFistsHardParams extends CAINpcFistsCombatStyleBaseParams {

  public function Init();  // flags: 65536 

}
import class CAINpcWitcherDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcWitcherCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcWitcherCombatParams extends CAINpcCombatParams {

  protected function SetupCombatStyles();  // flags: 32768 

}
import class CAINpcWitcherCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcEredinDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcEredinCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcEredinCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcEredinCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcImlerithDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcImlerithCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcImlerithCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcImlerithCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcImlerithSecondStageCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CThrowable extends CProjectileTrajectory {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public final function GetOwner() : CActor;  // flags: 65552 
  public event function OnProcessThrowEvent( animEventName : CName) : Bool;  // flags: 65568 
  public function Initialize( ownr : CActor,  optional  id : SItemUniqueId);  // flags: 65536 
  public function StartAiming();  // flags: 65536 
  public function StopAiming( flag : Bool);  // flags: 65536 
  public event function OnStopAiming( flag : Bool) : Bool;  // flags: 65568 
  public function ThrowProjectile( targetPos : Vector);  // flags: 65536 
  public function WasThrown() : Bool;  // flags: 65536 
  protected function CanCollideWithVictim( actor : CActor) : Bool;  // flags: 32768 

}
import class CAINpcCaranthirDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcCaranthirCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcCaranthirCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcCaranthirCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcWitcherFollowerDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcWitcherFollowerCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcWitcherFollowerCombatParams extends CAINpcWitcherCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class W3CurveFishManager extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnDetaching() : Bool;  // flags: 65568 
  public function OnFishDestroyed( b : W3CurveFish);  // flags: 65536 
  private function SelectFishTemplate() : CEntityTemplate;  // flags: 16384 
  public function SpawnFish( optional  forced : Bool);  // flags: 65536 
  private function UpdateSpawnPointsList();  // flags: 16384 
  private function DespawnFish();  // flags: 16384 
  public event function OnDestroyed() : Bool;  // flags: 65568 
  public function FishSpawnCheck( td : Float,  id : Int32);  // flags: 66560 

}
import class CAIDwimeritiumBombSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CAINpcCiriDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcCiriCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcCiriCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcCiriCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcYenneferDefaults extends CAINpcSorceressDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcYenneferCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcTrissDefaults extends CAINpcSorceressDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcTrissCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcKeiraDefaults extends CAINpcSorceressDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcKeiraCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class W3WhaleArea extends CEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function RandomSpawnInterval() : Float;  // flags: 65536 
  public function CheckWhaleSpawn( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function SpawnWhale();  // flags: 65536 
  public function WhaleSpawnPosition( offset : Vector,  out  positionWS : Vector,  out  rotationWS : EulerAngles);  // flags: 65536 

}
import class CAINpcPhilippaDefaults extends CAINpcSorceressDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcPhilippaCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcYenneferCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcTrissCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcKeiraCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcPhilippaCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcSorceressCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcSorceressCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcYenneferCombatStyle extends CAINpcSorceressCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcTrissCombatStyle extends CAINpcSorceressCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcKeiraCombatStyle extends CAINpcSorceressCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcPhilippaCombatStyle extends CAINpcSorceressCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcPhilippaCustomCombatStyle extends CAINpcSorceressCombatStyle {

  public function Init();  // flags: 65536 

}
import class W3Whale extends CGameplayEntity {

  public function SetDestroyTime( time : Float);  // flags: 65536 
  public function SetSpawnPosAndRot( position : Vector,  rotation : EulerAngles);  // flags: 65536 
  public function SetAlwaysSpawned( always : Bool);  // flags: 65536 
  public event function OnAnimEvent_WhaleDespawn( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Destroy( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_PlayEffect( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function EachTick( dt : Float,  id : Int32);  // flags: 66560 

}
import class CAINpcDruidDefaults extends CAINpcSorcererDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcDruidCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcDruidCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcAvallachDefaults extends CAINpcSorcererDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcAvallachCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcAvallachCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcSorcererCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcSorcererCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcDruidCombatStyle extends CAINpcSorcererCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcAvallachCombatStyle extends CAINpcSorcererCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcIorwvethDefaults extends CAINpcMainDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcZoltanDefaults extends CAINpcMainDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcZoltanCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcZoltanCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcVesDefaults extends CAINpcMainDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcVesCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcVesCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAIShootBarrelsSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CAINpcRocheDefaults extends CAINpcMainDefaults {

  public function Init();  // flags: 65536 

}
import class CAINpcRocheCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAINpcRocheCombatParams extends CAINpcCombatParams {

  public function Init();  // flags: 65536 
  private function SetupCombatStyles();  // flags: 16384 

}
import class CAINpcSimpleTacticTree extends CAINpcMeleeTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcSurroundTacticTree extends CAINpcMeleeTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcSurroundTacticTreeParams extends CAINpcTacticTreeParams {

  public function Init();  // flags: 65536 

}
import class CAINpcSurroundTacticCloseTree extends CAINpcMeleeTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcSurroundTacticFarTree extends CAINpcMeleeTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcSurroundRangedTacticTree extends CAINpcRangedTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcHoldGroundTacticTree extends CAINpcMeleeTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcHoldGroundTacticTreeParams extends CAINpcTacticTreeParams {

  public function Init();  // flags: 65536 

}
import class CAINpcHoldGroundRangedTacticTree extends CAINpcRangedTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcHoldGroundRangedTacticTreeParams extends CAINpcTacticTreeParams {

  public function Init();  // flags: 65536 

}
import class CAINpcVesemirTutorialTacticTree extends CAINpcCustomTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcVesemirTutorialTacticTreeParams extends CAINpcTacticTreeParams {

  public function Init();  // flags: 65536 

}
import class CAINpcSorceressTacticTree extends CAINpcRangedTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcSorceressTacticTreeParams extends CAINpcTacticTreeParams {

  public function Init();  // flags: 65536 

}
import class CAINpcSorcererTacticTree extends CAINpcRangedTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcSorcererTacticTreeParams extends CAINpcTacticTreeParams {

  public function Init();  // flags: 65536 

}
import class CAINpcEredinTacticTree extends CAINpcCustomTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcEredinTESTTacticTree extends CAINpcCustomTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcImlerithTacticTree extends CAINpcCustomTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcImlerithSecondStageTacticTree extends CAINpcCustomTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcCaranthirTacticTree extends CAINpcCustomTacticTree {

  public function Init();  // flags: 65536 

}
import class CAINpcPhilippaTacticTree extends CAINpcCustomTacticTree {

  public function Init();  // flags: 65536 

}
import class CR4Game extends CCommonGame {
  import var horseCamera : CCustomCamera; // 4008
  import var telemetryScriptProxy : *CR4TelemetryScriptProxy; // 4008
  import var secondScreenScriptProxy : *CR4SecondScreenManagerScriptProxy; // 4008
  import var kinectSpeechRecognizerListenerScriptProxy : *CR4KinectSpeechRecognizerListenerScriptProxy; // 4008
  import var ticketsDefaultConfiguration : *CTicketsDefaultConfiguration; // 4008
  import var globalEventsScriptsDispatcher : *CR4GlobalEventsScriptsDispatcher; // 4008
  import var globalTicketSource : CGlabalTicketSourceProvider; // 4000
  import var carryableItemsRegistry : CCarryableItemsRegistry; // 4000
  import var params : W3GameParams; // 6000

  import public final function ActivateHorseCamera( activate : Bool,  blendTime : Float,  optional  instantMount : Bool);  // flags: 65561 
  import public final function GetFocusModeController() : CFocusModeController;  // flags: 65561 
  import public final function GetSurfacePostFX() : CGameplayFXSurfacePost;  // flags: 65561 
  import public final function GetCommonMapManager() : CCommonMapManager;  // flags: 65561 
  import public final function GetJournalManager() : CWitcherJournalManager;  // flags: 65561 
  import public final function GetLootManager() : CR4LootManager;  // flags: 65561 
  import public final function GetCityLightManager() : CCityLightManager;  // flags: 65561 
  import public final function GetInteractionsManager() : CInteractionsManager;  // flags: 65561 
  import public final function GetGuiManager() : CR4GuiManager;  // flags: 65561 
  import public final function GetGlobalEventsScriptsDispatcher() : CR4GlobalEventsScriptsDispatcher;  // flags: 65561 
  import public final function GetFastForwardSystem() : CGameFastForwardSystem;  // flags: 65561 
  import public final function StartSepiaEffect( fadeInTime : Float) : Bool;  // flags: 65561 
  import public final function StopSepiaEffect( fadeOutTime : Float) : Bool;  // flags: 65561 
  import public final function GetWindAtPoint( point : Vector) : Vector;  // flags: 65561 
  import public final function GetWindAtPointForVisuals( point : Vector) : Vector;  // flags: 65561 
  import public final function GetGameCamera() : CCustomCamera;  // flags: 65561 
  import public final function GetBuffImmunitiesForActor( actor : CActor) : CBuffImmunity;  // flags: 65561 
  import public final function GetMonsterParamsForActor( actor : CActor,  out  monsterCategory : EMonsterCategory,  out  soundMonsterName : CName,  out  isTeleporting : Bool,  out  canBeTargeted : Bool,  out  canBeHitByFists : Bool) : Bool;  // flags: 65561 
  import public final function GetMonsterParamForActor( actor : CActor,  out  val : CMonsterParam) : Bool;  // flags: 65561 
  import public final function SummonPlayerHorse( teleportToSafeSpot : Bool,  createEntityHelper : CR4CreateEntityHelper);  // flags: 65561 
  import public final function GetVolumePathManager() : CVolumePathManager;  // flags: 65561 
  import public final function ToggleMenus();  // flags: 65561 
  import public final function ToggleInput();  // flags: 65561 
  import public final function NotifyOpeningJournalEntry( jorunalEntry : CJournalBase);  // flags: 65561 
  import public final function GetSecondScreenManager() : CR4SecondScreenManagerScriptProxy;  // flags: 65561 
  import public final function GetKinectSpeechRecognizer() : CR4KinectSpeechRecognizerListenerScriptProxy;  // flags: 65561 
  import public final function GetResourceAliases( out  aliases : array<String>);  // flags: 65561 
  import public final function GetTutorialSystem() : CR4TutorialSystem;  // flags: 65561 
  import public final function DisplaySystemHelp();  // flags: 65561 
  function DisplayStore();  // flags: 1 
  import public final function DisplayUserProfileSystemDialog();  // flags: 65561 
  import public final function SetRichPresence( presence : CName);  // flags: 65561 
  import public final function SetActiveUserPromiscuous();  // flags: 65561 
  import public final function ChangeActiveUser();  // flags: 65561 
  import public final function GetActiveUserDisplayName() : String;  // flags: 65561 
  import public final function GetPlatform() : Int32;  // flags: 65561 
  import public final function IsContentAvailable( content : CName) : Bool;  // flags: 65561 
  import public final function ProgressToContentAvailable( content : CName) : Int32;  // flags: 65561 
  import public final function ShouldForceInstallVideo() : Bool;  // flags: 65561 
  import public final function OnUserDialogCallback( message : Int32,  action : Int32);  // flags: 65561 
  import public final function SaveUserSettings();  // flags: 65561 
  import public final function GetGwintManager() : CR4GwintManager;  // flags: 65561 
  import public final function IsDebugQuestMenuEnabled() : Bool;  // flags: 65561 
  import public final function EnableNewGamePlus( enable : Bool);  // flags: 65561 
  import public final function StartNewGamePlus( save : SSavegameInfo) : ENewGamePlusStatus;  // flags: 65561 
  public function SetIsRespawningInLastCheckpoint();  // flags: 65536 
  public event function OnGameSaveListUpdated() : Bool;  // flags: 65568 
  public event function OnGameLoadInitFinished() : Bool;  // flags: 65568 
  public event function OnGameLoadInitFinishedSuccess() : Bool;  // flags: 65568 
  public function IsFocusModeActive() : Bool;  // flags: 65536 
  public function EnableLog( enable : Bool);  // flags: 65536 
  public function CanLog() : Bool;  // flags: 65536 
  public function GetGlobalEventsManager() : CR4GlobalEventsScriptsDispatcher;  // flags: 65536 
  public final function UpdateRichPresence( presence : CName);  // flags: 65552 
  public final function ClearRichPresence( presence : CName);  // flags: 65552 
  public function GetSyncAnimManager() : W3SyncAnimationManager;  // flags: 65536 
  public function SetEnvironmentID( id : Int32);  // flags: 65536 
  private function SetTimescaleSources();  // flags: 16384 
  public function GetTimescaleSource( src : ETimescaleSource) : CName;  // flags: 65536 
  public function GetTimescalePriority( src : ETimescaleSource) : Int32;  // flags: 65536 
  private function UpdateSecondScreen();  // flags: 16384 
  public function isUserSignedIn() : Bool;  // flags: 65536 
  public event function OnUserSignedIn() : Bool;  // flags: 65568 
  public event function OnUserSignedOut() : Bool;  // flags: 65568 
  public event function OnSignInStarted() : Bool;  // flags: 65568 
  public event function OnSignInCancelled() : Bool;  // flags: 65568 
  public function OnConfigValueChanged( varName : CName,  value : String);  // flags: 65536 
  public function LoadQuestLevels( filePath : String);  // flags: 65536 
  public function UnloadQuestLevels( filePath : String);  // flags: 65536 
  public event function OnGameStarting( restored : Bool) : Bool;  // flags: 65568 
  private function InitGamerProfile();  // flags: 16384 
  public function GetGamerProfile() : W3GamerProfile;  // flags: 65536 
  public function OnTick();  // flags: 65536 
  public event function OnGameStarted( restored : Bool) : Bool;  // flags: 65568 
  public event function OnHandleWorldChange() : Bool;  // flags: 65568 
  public event function OnBeforeWorldChange( worldName : String) : Bool;  // flags: 65568 
  public event function OnAfterLoadingScreenGameStart() : Bool;  // flags: 65568 
  public event function OnSaveStarted( type : ESaveGameType) : Bool;  // flags: 65568 
  public event function OnSaveCompleted( type : ESaveGameType,  succeeded : Bool) : Bool;  // flags: 65568 
  public event function OnControllerReconnected() : Bool;  // flags: 65568 
  public event function OnControllerDisconnected() : Bool;  // flags: 65568 
  public event function OnGiveReward( target : CEntity,  rewardName : CName,  rewrd : SReward) : Bool;  // flags: 65568 
  public function IsEffectManagerInitialized() : Bool;  // flags: 65536 
  public function InitializeEffectManager();  // flags: 65536 
  public function GetLowestDifficultyUsed() : EDifficultyMode;  // flags: 65536 
  public function SetLowestDifficultyUsed( d : EDifficultyMode);  // flags: 65536 
  public event function OnGameEnded() : Bool;  // flags: 65568 
  public function SetRunReactionSceneDialog( val : Bool);  // flags: 65536 
  public function SetIsDialogOrCutscenePlaying( b : Bool);  // flags: 65536 
  public final function IsDialogOrCutscenePlaying() : Bool;  // flags: 65552 
  public final function GetRecentDialogOrCutsceneEndGameTime() : GameTime;  // flags: 65552 
  public function SetIsCutscenePlaying( b : Bool);  // flags: 65536 
  public function PopulateMenuQueueStartupOnce( out  menus : array<CName>);  // flags: 65536 
  public function PopulateMenuQueueStartupAlways( out  menus : array<CName>);  // flags: 65536 
  public function PopulateMenuQueueConfig( out  menus : array<CName>);  // flags: 65536 
  public function PopulateMenuQueueMainOnce( out  menus : array<CName>);  // flags: 65536 
  public function PopulateMenuQueueMainAlways( out  menus : array<CName>);  // flags: 65536 
  public function GetNewGameDefinitionFilename() : String;  // flags: 65536 
  public function GetCurrentZone() : EZoneName;  // flags: 65536 
  public function SetCurrentZone( tag : CName);  // flags: 65536 
  public function getColorBlindMode() : Bool;  // flags: 65536 
  public function setColorBlindMode( value : Bool);  // flags: 65536 
  public function GetMenuToOpen() : CName;  // flags: 65536 
  public function SetMenuToOpen( menu : CName);  // flags: 65536 
  public function RequestMenuWithBackground( menu : CName,  backgroundMenu : CName,  optional  initData : IScriptable);  // flags: 65536 
  public function OpenPopup( DataObject : W3PopupData);  // flags: 65536 
  public function SetUIVerticalFrameScale( value : Float);  // flags: 65536 
  public function GetUIVerticalFrameScale() : Float;  // flags: 65536 
  public function SetUIHorizontalFrameScale( value : Float);  // flags: 65536 
  public function GetUIHorizontalFrameScale() : Float;  // flags: 65536 
  public function SetUIScale( value : Float);  // flags: 65536 
  public function GetUIScale() : Float;  // flags: 65536 
  public function SetUIGamepadScaleGain( value : Float);  // flags: 65536 
  public function GetUIGamepadScaleGain() : Float;  // flags: 65536 
  public function SetDeathSaveLockId( i : Int32);  // flags: 65536 
  public function SetUIOpacity( value : Float);  // flags: 65536 
  public function GetUIOpacity() : Float;  // flags: 65536 
  public function setDialogDisplayDisabled( value : Bool);  // flags: 65536 
  public function LoadHudSettings();  // flags: 65536 
  public event function OnRefreshUIScaling() : Bool;  // flags: 65568 
  public event function OnSpawnPlayerHorse() : Bool;  // flags: 65568 
  private function OnPlayerHorseSummoned( horseEntity : CEntity);  // flags: 16384 
  public event function OnTutorialMessageForChoiceLines( flags : Int32) : Bool;  // flags: 65568 
  public event function OnTutorialMessageForChoiceLineChosen( flags : Int32) : Bool;  // flags: 65568 
  public function GameplayFactsAdd( factName : String,  optional  value : Int32,  optional  realtimeSecsValidFor : Int32);  // flags: 65536 
  public function GameplayFactsSet( factName : String,  value : Int32);  // flags: 65536 
  public function GameplayFactsRemove( factName : String);  // flags: 65536 
  public function GameplayFactRemoveFromTimer( timerID : Int32);  // flags: 65536 
  public function GameplayFactsQuerySum( factName : String) : Int32;  // flags: 65536 
  private function GetGameplayFactIndex( factName : String) : Int32;  // flags: 16384 
  private function GetGameplayFactsForRemovalIndex( timerID : Int32) : Int32;  // flags: 16384 
  public function GetR4ReactionManager() : CR4ReactionManager;  // flags: 65536 
  public function GetDifficultyMode() : EDifficultyMode;  // flags: 65536 
  public event function OnDifficultyChanged( newDifficulty : Int32) : Bool;  // flags: 65568 
  public function OnPlayerChanged();  // flags: 65536 
  public function GetSpawnDifficultyMode() : EDifficultyMode;  // flags: 65536 
  public function UpdateStatsForDifficultyLevel( difficulty : EDifficultyMode);  // flags: 65536 
  public function CanTrackQuest( questEntry : CJournalQuest) : Bool;  // flags: 65536 
  public function IsBlackscreenOrFading() : Bool;  // flags: 65536 
  public event function OnPreAttackEvent( entity : CGameplayEntity,  animEventName : CName,  animEventType : EAnimationEventType,  data : CPreAttackEventData,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function FirePostponedPreAttackEvents();  // flags: 65536 
  public final function AddDynamicallySpawnedBoatHandle( handle : EntityHandle);  // flags: 65552 
  public final function IsBoatMarkedForDestroy( boat : W3Boat) : Bool;  // flags: 65552 
  public final function VibrateControllerVeryLight( optional  duration : Float);  // flags: 65552 
  public final function VibrateControllerLight( optional  duration : Float);  // flags: 65552 
  public final function VibrateControllerHard( optional  duration : Float);  // flags: 65552 
  public final function VibrateControllerVeryHard( optional  duration : Float);  // flags: 65552 

}
import class CAIBasicAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class CR4TutorialSystem extends IGameSystem {
  import var needsTickEvent : Bool; // e000

  public function AreMessagesEnabled() : Bool;  // flags: 65536 
  public function IsRunning() : Bool;  // flags: 65536 
  public function IncreaseDodges();  // flags: 65536 
  public function IncreaseRolls();  // flags: 65536 
  public function IncreaseCounters();  // flags: 65536 
  public function IncreaseParries();  // flags: 65536 
  public event function OnGameStart( restored : Bool) : Bool;  // flags: 65568 
  public final function ClearSavedVars();  // flags: 65552 
  public final function ClearNonSavedVars();  // flags: 65552 
  public function TutorialStart( removeTestingSkillsAndItems : Bool);  // flags: 65536 
  public function TutorialFinish();  // flags: 65536 
  public function HasSeenTutorial( tutorialScriptTag : CName) : Bool;  // flags: 65536 
  public function DisplayTutorial( tut : STutorialMessage);  // flags: 65536 
  private function CanShowTutorial( canBeShownInDialogs : Bool,  canBeShownInMenus : Bool) : Bool;  // flags: 16384 
  public event function OnTick( dt : Float) : Bool;  // flags: 65568 
  public final function OnInputDeviceChanged();  // flags: 65552 
  private final function ProcessDodges();  // flags: 16400 
  private final function ProcessRolls();  // flags: 16400 
  private function DelayedQueuedTutorialShow();  // flags: 16384 
  public event function OnTutorialClosing( scriptName : CName,  closedByUIPanel : Bool,  optional  willBeCloned : Bool) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( scriptName : CName,  closedByUIPanel : Bool) : Bool;  // flags: 65568 
  private function SelectAndDisplayTutorial( tut : STutorialMessage);  // flags: 16384 
  private function DisplayTutorialHint( tut : STutorialMessage);  // flags: 16384 
  private function DisplayHUDTutorialHighlight( tutorialName : CName,  bShow : Bool);  // flags: 16384 
  public function HintFeedback( tutorialScriptTag : CName,  optional  negative : Bool);  // flags: 65536 
  public function DEBUG_TestTutorialHint( optional  x : Float,  optional  y : Float,  optional  w : Float,  optional  h : Float,  optional  d : Float);  // flags: 65536 
  public function DEBUG_TestTutFeedback( optional  isCorrect : Bool);  // flags: 65536 
  private function GetMessageText( scriptTag : String,  status : EJournalStatus) : CJournalTutorial;  // flags: 16384 
  public function HideTutorialHint( scriptTag : CName,  optional  forceCloseAny : Bool,  optional  dontRemoveFromQueue : Bool);  // flags: 65536 
  public function HandleTutorialMessageHidden( scriptTag : CName,  forcedClose : Bool);  // flags: 65536 
  public function OnTutorialHintClosing( scriptTag : CName,  forcedClose : Bool,  optional  closedByUser : Bool,  optional  willBeCloned : Bool);  // flags: 65536 
  public function OnTutorialHintClosed( scriptTag : CName,  forcedClose : Bool);  // flags: 65536 
  public function HAX_DEBUG_ForceTutorialMessageAsSeen( tutorialScriptTag : CName,  showInJournal : Bool);  // flags: 65536 
  public function MarkMessageAsSeen( tutorialScriptTag : CName);  // flags: 65536 
  public function UnmarkMessageAsSeen( tutorialScriptTag : CName);  // flags: 65536 
  public function SetInteraction( component : CInteractionComponent);  // flags: 65536 
  public function ShowTutorialHint( hintData : W3TutorialPopupData);  // flags: 65536 
  public function ActivateJournalEntry( entryName : CName);  // flags: 65536 
  public function GetCurrentlyShownTutorialScriptName() : CName;  // flags: 65536 
  public function IncreaseGeraltsLightAttacksCount( victimTags : array<CName>);  // flags: 65536 
  public function IncreaseGeraltsHeavyAttacksCount( victimTags : array<CName>);  // flags: 65536 
  public function OnCutsceneOrDialogChange( isNowOn : Bool);  // flags: 65536 
  public function OnGuardSwordWarning();  // flags: 65536 
  public function OnGuardGeneralWarning();  // flags: 65536 
  public function OnGuardLootingWarning();  // flags: 65536 
  public final function ReloadMessageOnInputChange( startedUsingPad : Bool,  optional  forceShowImmediately : Bool);  // flags: 65552 
  private function GetTutorialLocalizedText( locId : Int32) : String;  // flags: 16384 
  private function SetMenuRestrictions( enabledMenuList : array<CName>);  // flags: 16384 
  private function RemoveMenuRestrictions();  // flags: 16384 
  public function IsMenuRestrictionsEnable() : Bool;  // flags: 65536 
  public function GetAllowedMenuList() : array<CName>;  // flags: 65536 
  public final function Failsafe();  // flags: 65552 
  public final function SetHudMessage( tutorialMessageName : CName,  on : Bool);  // flags: 65552 
  private final function ProcessHUDMessage();  // flags: 16400 
  private function TutorialInvisibleHint( dt : Float,  id : Int32);  // flags: 17408 
  public final function ForcedAlchemyCleanup();  // flags: 65552 
  public final function OnOpeningMenuHandleNonMenuTutorial();  // flags: 65552 
  public final function DEBUG_LogQueuedTutorials();  // flags: 65552 

}
import class CR4Player extends CPlayer {
  import var uselessProp : EAsyncCheckResult; // 4000
  import var horseWithInventory : EntityHandle; // e000

  import public final function IsInInterior() : Bool;  // flags: 65561 
  import public final function IsInSettlement() : Bool;  // flags: 65561 
  import public final function EnterSettlement( isEntering : Bool);  // flags: 65561 
  import public final function GetEnemiesInRange( out  enemies : array<CActor>);  // flags: 65561 
  import public final function GetVisibleEnemies( out  enemies : array<CActor>);  // flags: 65561 
  import public final function IsEnemyVisible( enemy : CActor) : Bool;  // flags: 65561 
  import public final function SetupEnemiesCollection( range : Float,  heightTolerance : Float,  maxEnemies : Int32,  optional  tag : CName,  optional  flags : Int32);  // flags: 65561 
  import public final function ActionDirectControl( controller : CR4LocomotionDirectController) : Bool;  // flags: 65561 
  import public final function GetCombatDataComponent() : CCombatDataComponent;  // flags: 65561 
  import public final function SetPlayerTarget( target : CActor);  // flags: 65561 
  import public final function SetPlayerCombatTarget( target : CActor);  // flags: 65561 
  import public final function ObtainTicketFromCombatTarget( ticketName : CName,  ticketsCount : Int32);  // flags: 65561 
  import public final function FreeTicketAtCombatTarget();  // flags: 65561 
  import public final function SetScriptMoveTarget( target : CActor);  // flags: 65561 
  import public final function GetRiderData() : CAIStorageRiderData;  // flags: 65561 
  import public final function SetIsInCombat( inCombat : Bool);  // flags: 65561 
  import public final function SetBacklightFromHealth( healthPercentage : Float);  // flags: 65561 
  import private final function SetBacklightColor( color : Vector);  // flags: 16409 
  import public final function GetTemplatePathAndAppearance( out  templatePath : String,  out  appearance : CName);  // flags: 65561 
  import public final function HACK_BoatDismountPositionCorrection( slotPos : Vector);  // flags: 65561 
  import public final function SaveLastMountedHorse( mountedHorse : CActor);  // flags: 65561 
  import public final function HACK_ForceGetBonePosition( boneIndex : Int32) : Vector;  // flags: 65561 
  public function SetPlayedSpecialAttackMissingResourceSound( b : Bool);  // flags: 65536 
  public function EnablePCMode( flag : Bool);  // flags: 65536 
  public function IsPCModeEnabled() : Bool;  // flags: 65536 
  public function ShouldUsePCModeTargeting() : Bool;  // flags: 65536 
  public function SetDodgeFeedbackTarget( target : CActor);  // flags: 65536 
  public function GetDodgeFeedbackTarget() : CActor;  // flags: 65536 
  public function SetSubmergeDepth( depth : Float);  // flags: 65536 
  public function GetSubmergeDepth() : Float;  // flags: 65536 
  public function SetActivePoster( poster : W3Poster);  // flags: 65536 
  public function RemoveActivePoster();  // flags: 65536 
  public function GetActivePoster() : W3Poster;  // flags: 65536 
  public function SetHorseNav( val : Bool);  // flags: 65536 
  public function GetLevel() : Int32;  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function GetTimeSinceSpawned() : Float;  // flags: 65536 
  public function UnmountCrossbowTimer( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnDestroyed() : Bool;  // flags: 65568 
  public function ClearBlockedSlots();  // flags: 65536 
  public function RestoreBlockedSlots();  // flags: 65536 
  private function DisableRadialSlot( slotName : CName,  sourceName : CName) : Bool;  // flags: 16384 
  public function EnableRadialSlot( slotName : CName,  sourceName : CName) : Bool;  // flags: 65536 
  private function InitBlockedRadialSlotEntry( slotName : CName) : SRadialSlotDef;  // flags: 16384 
  public function EnableRadialSlotsWithSource( enable : Bool,  slotsToBlock : array<CName>,  sourceName : CName);  // flags: 65536 
  public function RepairItem( rapairKitId : SItemUniqueId,  usedOnItem : SItemUniqueId);  // flags: 66048 
  public function HasRepairAbleGearEquiped() : Bool;  // flags: 66048 
  public function HasRepairAbleWaponEquiped() : Bool;  // flags: 66048 
  public function IsItemRepairAble( item : SItemUniqueId) : Bool;  // flags: 66048 
  public function ApplyOil( oilId : SItemUniqueId,  usedOnItem : SItemUniqueId);  // flags: 66048 
  public function IsEquippedSwordUpgradedWithOil( steel : Bool,  optional  oilName : CName) : Bool;  // flags: 66048 
  public function GetOilAppliedOnSword( steel : Bool) : CName;  // flags: 66048 
  public function CanApplyOilOnItem( oilId : SItemUniqueId,  usedOnItem : SItemUniqueId) : Bool;  // flags: 65536 
  public final function DidFailFundamentalsFirstAchievementCondition() : Bool;  // flags: 65552 
  public final function SetFailedFundamentalsFirstAchievementCondition( b : Bool);  // flags: 65552 
  public function IsInCombatFist() : Bool;  // flags: 65536 
  public function IsInitialized() : Bool;  // flags: 66048 
  public function IsCiri() : Bool;  // flags: 65536 
  protected function WouldLikeToMove() : Bool;  // flags: 32768 
  public function HandleMovement( deltaTime : Float);  // flags: 65536 
  public function BattleCryIsReady() : Bool;  // flags: 65536 
  public function PlayBattleCry( _BattleCry : CName,  _Chance : Float,  optional  _IgnoreDelay : Bool,  optional  ignoreRepeatCheck : Bool);  // flags: 65536 
  public final function OnWeatherChanged();  // flags: 65552 
  public final function CommentOnWeather( _Delta : Float,  _Id : Int32);  // flags: 66576 
  public function CanUpdateMovement() : Bool;  // flags: 65536 
  public function SetDefaultLocomotionController();  // flags: 65536 
  public event function OnPlayerTickTimer( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnDeath( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  public function OnRevived();  // flags: 65536 
  public function CanStartTalk() : Bool;  // flags: 65536 
  public function AddCounterTimeStamp( time : EngineTime);  // flags: 65536 
  public function CheckCounterSpamming( attacker : CActor) : Bool;  // flags: 65536 
  protected function PerformCounterCheck( parryInfo : SParryInfo) : Bool;  // flags: 32768 
  public function UpdateCounterRotation( dt : Float,  id : Int32);  // flags: 66560 
  public function SetCounterRotation( dt : Float,  id : Int32);  // flags: 66560 
  private function SetParryTarget( t : CActor);  // flags: 16384 
  public function ApplyCounterRagdollTimer( time : Float,  id : Int32);  // flags: 66560 
  public function EnableMode( mode : EPlayerMode,  enable : Bool);  // flags: 65536 
  public function GetPlayerMode() : W3PlayerMode;  // flags: 65536 
  private function GetClosestIncomingAttacker() : CActor;  // flags: 16384 
  public function CombatCheck( time : Float,  id : Int32);  // flags: 66560 
  public function ReceivedDamageInCombat() : Bool;  // flags: 65536 
  public event function OnCombatStart() : Bool;  // flags: 65568 
  public event function OnCombatFinished() : Bool;  // flags: 65568 
  public event function OnReactToBeingHit( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  public function ReceivedCombatDamage();  // flags: 65536 
  public function UninterruptedHitsResetOnIdle( dt : Float,  id : Int32);  // flags: 66560 
  public function ResetUninterruptedHitsCount();  // flags: 65536 
  public function IncreaseUninterruptedHitsCount();  // flags: 65536 
  public function StartUninterruptedBlurr( dt : Float,  id : Int32);  // flags: 66560 
  private function PlayerActionBlockGameplayActions( sourceName : CName,  lock : Bool,  isFromPlace : Bool);  // flags: 16384 
  public function RegisterForPlayerAction( listener : CGameplayEntity,  isLockedByPlace : Bool);  // flags: 65536 
  public function UnregisterForPlayerAction( listener : CGameplayEntity,  isLockedByPlace : Bool);  // flags: 65536 
  public event function OnPlayerActionEnd() : Bool;  // flags: 65568 
  public event function OnPlayerActionStartFinished() : Bool;  // flags: 65568 
  public function PlayerStartAction( playerAction : EPlayerExplorationAction,  optional  animName : CName) : Bool;  // flags: 65536 
  public function PlayActionAnimWorkaround( dt : Float,  id : Int32);  // flags: 66560 
  public function PlayerStopAction( playerAction : EPlayerExplorationAction);  // flags: 65536 
  public function GetPlayerAction() : EPlayerExplorationAction;  // flags: 65536 
  public function MedallionPing();  // flags: 65536 
  public function CanPerformPlayerAction( optional  alsoOutsideExplorationState : Bool) : Bool;  // flags: 65536 
  public event function OnItemGiven( data : SItemChangedData) : Bool;  // flags: 65568 
  public function ChangeAlchemyItemsAbilities( upgrade : Bool);  // flags: 65536 
  public function UpgradeAlchemyItem( itemID : SItemUniqueId,  upgrade : Bool);  // flags: 65536 
  public function MovAdjRotateToTarget( ticket : SMovementAdjustmentRequestTicket);  // flags: 65536 
  public function UpdateLookAtTarget();  // flags: 65536 
  private function ProcessLookAtTargetPosition( ent : CGameplayEntity,  useTorsoBone : Bool) : Vector;  // flags: 16384 
  private function PredictLookAtTargetPosition( targetActor : CActor,  zOffSet : Float,  out  predictedPos : Vector) : Bool;  // flags: 16384 
  public function SetLookAtPosition( vec : Vector);  // flags: 65536 
  public function GetLookAtPosition() : Vector;  // flags: 65536 
  public event function OnBlockingSceneEnded( optional  output : CStorySceneOutput) : Bool;  // flags: 65568 
  public function GetCurrentMeleeWeaponName() : CName;  // flags: 65536 
  public function GetCurrentMeleeWeaponType() : EPlayerWeapon;  // flags: 65536 
  public function OnMeleeForceHolster( ignoreActionLock : Bool);  // flags: 65536 
  public event function OnForcedHolsterWeapon() : Bool;  // flags: 65568 
  public event function OnEquippedItem( category : CName,  slotName : CName) : Bool;  // flags: 65568 
  public function ProcessIsHoldingDeadlySword();  // flags: 65536 
  public function IsHoldingDeadlySword() : Bool;  // flags: 65536 
  public event function OnHolsteredItem( category : CName,  slotName : CName) : Bool;  // flags: 65568 
  public event function OnEquipMeleeWeapon( weaponType : EPlayerWeapon,  ignoreActionLock : Bool,  optional  sheatheIfAlreadyEquipped : Bool) : Bool;  // flags: 65568 
  public event function OnHolsterLeftHandItem() : Bool;  // flags: 65568 
  public function DelayedSheathSword( dt : Float,  id : Int32);  // flags: 66560 
  protected function ShouldAutoSheathSwordInstantly() : Bool;  // flags: 32768 
  public function PrepareToAttack( optional  target : CActor,  optional  action : EBufferActionType);  // flags: 65536 
  public function DisplayCannotAttackMessage( actor : CActor) : Bool;  // flags: 65536 
  public function GetMostConvenientMeleeWeapon( targetToDrawAgainst : CActor,  optional  ignoreActionLock : Bool) : EPlayerWeapon;  // flags: 65536 
  public event function OnTargetWeaponDrawn() : Bool;  // flags: 65568 
  public function GoToCombatIfNeeded( optional  enemy : CActor) : Bool;  // flags: 65536 
  public function GoToCombatIfWanted() : Bool;  // flags: 65536 
  public function GoToExplorationIfNeeded() : Bool;  // flags: 65536 
  public event function OnStateCanGoToCombat() : Bool;  // flags: 65568 
  public event function OnStateCanUpdateExplorationSubstates() : Bool;  // flags: 65568 
  private function ShouldGoToCombat( optional  enemy : CActor) : Bool;  // flags: 16384 
  private function ShouldGoToExploration() : Bool;  // flags: 16384 
  private function GoToCombat( weaponType : EPlayerWeapon,  optional  initialAction : EInitialAction);  // flags: 16384 
  public function GoToStateIfNew( newState : CName,  optional  keepStack : Bool,  optional  forceEvents : Bool);  // flags: 65536 
  public function GotoState( newState : CName,  optional  keepStack : Bool,  optional  forceEvents : Bool);  // flags: 65536 
  public function IsThisACombatSuperState( stateName : CName) : Bool;  // flags: 65536 
  public function GetWeaponHolster() : WeaponHolster;  // flags: 65536 
  public function AbortSign();  // flags: 65536 
  public event function OnAnimEvent_DisallowHitAnim( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_FadeOut( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_FadeIn( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_BloodTrailForced( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_SlowMo( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_PlayFinisherBlood( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_OnWeaponDrawReady( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_OnWeaponHolsterReady( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_ThrowHoldTest( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_AllowTempLookAt( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_SlideToTarget( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_ActionBlend( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_SubstateManager( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_AllowFall( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_AllowFall2( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_DettachGround( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_pad_vibration( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_pad_vibration_light( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_KillWithRagdoll( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_RemoveBurning( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnBehaviorGraphNotification( notificationName : CName,  stateName : CName) : Bool;  // flags: 65568 
  public event function OnEnumAnimEvent( animEventName : CName,  variant : SEnumVariant,  animEventType : EAnimationEventType,  animEventDuration : Float,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnTeleported() : Bool;  // flags: 65568 
  public event function OnStartFistfightMinigame() : Bool;  // flags: 65568 
  public event function OnEndFistfightMinigame() : Bool;  // flags: 65568 
  public function GetFistFightFinisher( out  masterAnimName : CName,  out  slaveAnimIndex : CName);  // flags: 65536 
  public function SetFistFightMinigameEnabled( flag : Bool);  // flags: 65536 
  public function SetFistFightParams( toDeath : Bool,  endsWithBS : Bool);  // flags: 65536 
  public function IsFistFightMinigameEnabled() : Bool;  // flags: 65536 
  public function IsFistFightMinigameToTheDeath() : Bool;  // flags: 65536 
  public function FistFightHealthChange( val : Bool);  // flags: 65536 
  public function ClampGeraltMaxHealth( val : Float);  // flags: 65536 
  public function EquipGeraltFistfightWeapon( val : Bool);  // flags: 65536 
  public function GetGwintAiDifficulty() : EGwintDifficultyMode;  // flags: 65536 
  public function SetGwintAiDifficulty( difficulty : EGwintDifficultyMode);  // flags: 65536 
  public function GetGwintAiAggression() : EGwintAggressionMode;  // flags: 65536 
  public function SetGwintAiAggression( aggression : EGwintAggressionMode);  // flags: 65536 
  public function GetGwintMinigameState() : EMinigameState;  // flags: 65536 
  public function SetGwintMinigameState( minigameState : EMinigameState);  // flags: 65536 
  public function OnGwintGameRequested( deckName : CName);  // flags: 65536 
  public function InitGwintCardNumbersArray( arr : array<Int32>);  // flags: 65536 
  public function GetCardNumbersArray() : array<Int32>;  // flags: 65536 
  public function AddCustomCamToStack( customCameraParams : SCustomCameraParams) : Int32;  // flags: 65536 
  public function DisableCustomCamInStack( customCameraStackIndex : Int32);  // flags: 65536 
  public event function OnInteriorStateChanged( inInterior : Bool) : Bool;  // flags: 65568 
  public event function OnModifyPlayerSpeed( flag : Bool) : Bool;  // flags: 65568 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public function RequestQuestCamera( camera : SQuestCameraRequest);  // flags: 65536 
  public function ResetQuestCameraRequest();  // flags: 65536 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public function UpdateCameraInterior( out  moveData : SCameraMovementData,  timeDelta : Float);  // flags: 65536 
  protected function UpdateCameraChanneledSign( out  moveData : SCameraMovementData,  timeDelta : Float) : Bool;  // flags: 32768 
  protected function UpdateCameraForSpecialAttack( out  moveData : SCameraMovementData,  timeDelta : Float) : Bool;  // flags: 32768 
  protected function UpdateCameraSprint( out  moveData : SCameraMovementData,  timeDelta : Float);  // flags: 32768 
  public function EnableSprintingCamera( flag : Bool);  // flags: 65536 
  protected function UpdateCameraCombatActionButNotInCombat( out  moveData : SCameraMovementData,  timeDelta : Float);  // flags: 32768 
  public event function OnGameCameraExplorationRotCtrlChange() : Bool;  // flags: 65568 
  public function SetCustomRotation( customRotationName : CName,  rotHeading : Float,  rotSpeed : Float,  activeTime : Float,  rotateExistingDeltaLocation : Bool);  // flags: 65536 
  public function UpdateCustomRotationHeading( customRotationName : CName,  rotHeading : Float);  // flags: 65536 
  public function SetCustomRotationTowards( customRotationName : CName,  target : CActor,  rotSpeed : Float,  optional  activeTime : Float);  // flags: 65536 
  public function CustomLockMovement( customMovementName : CName,  heading : Float);  // flags: 65536 
  public function BindMovementAdjustmentToEvent( customRotationName : CName,  eventName : CName);  // flags: 65536 
  public function UpdateCustomLockMovementHeading( customMovementName : CName,  heading : Float);  // flags: 65536 
  public function CustomLockDistance( customMovementName : CName,  maintainDistanceTo : CNode,  minDist : Float,  maxDist : Float);  // flags: 65536 
  public function UpdateCustomLockDistance( customMovementName : CName,  maintainDistanceTo : CNode,  minDist : Float,  maxDist : Float);  // flags: 65536 
  public function EnableManualCameraControl( enable : Bool,  sourceName : CName);  // flags: 65536 
  public function IsCameraControlDisabled( optional  disabledBySourceName : CName) : Bool;  // flags: 65536 
  public function DisableManualCameraControlStackHasSource( sourceName : CName) : Bool;  // flags: 65536 
  public function ClearDisableManualCameraControlStack();  // flags: 65536 
  public function SetOrientationTarget( target : EOrientationTarget);  // flags: 65536 
  public function GetOrientationTarget() : EOrientationTarget;  // flags: 65536 
  public function AddCustomOrientationTarget( orientationTarget : EOrientationTarget,  sourceName : CName);  // flags: 65536 
  public function RemoveCustomOrientationTarget( sourceName : CName);  // flags: 65536 
  protected function ClearCustomOrientationInfoStack();  // flags: 32768 
  protected function GetCustomOrientationTarget( out  infoStack : SCustomOrientationInfo) : Bool;  // flags: 32768 
  public function SetOrientationTargetCustomHeading( heading : Float,  sourceName : CName) : Bool;  // flags: 65536 
  public function GetOrientationTargetCustomHeading() : Float;  // flags: 65536 
  public function GetCombatActionOrientationTarget( combatActionType : ECombatActionType) : EOrientationTarget;  // flags: 65536 
  public function GetOrientationTargetHeading( orientationTarget : EOrientationTarget) : Float;  // flags: 65536 
  public event function OnDelayOrientationChange() : Bool;  // flags: 65568 
  public event function OnDelayOrientationChangeOff() : Bool;  // flags: 65568 
  public function DelayOrientationChangeTimer( time : Float,  id : Int32);  // flags: 66560 
  public function SetCombatActionHeading( heading : Float);  // flags: 65536 
  public function GetCombatActionHeading() : Float;  // flags: 65536 
  protected function EnableCloseCombatCharacterRadius( flag : Bool);  // flags: 32768 
  public function SnapToNavMesh( flag : Bool);  // flags: 65536 
  public function DelayedSnapToNavMesh( dt : Float,  id : Int32);  // flags: 66560 
  public function EnableSnapToNavMesh( source : CName,  enable : Bool);  // flags: 65536 
  public function CanSprint( speed : Float) : Bool;  // flags: 65536 
  public function SetTerrainPitch( pitch : Float);  // flags: 65536 
  public function IsTerrainTooSteepToRunUp() : Bool;  // flags: 65536 
  public function SetTempLookAtTarget( actor : CGameplayEntity);  // flags: 65536 
  public event function OnBeingWarnedStart( sender : CActor) : Bool;  // flags: 65568 
  public event function OnBeingWarnedStop( sender : CActor) : Bool;  // flags: 65568 
  public event function OnCanFindPath( sender : CActor) : Bool;  // flags: 65568 
  public event function OnCannotFindPath( sender : CActor) : Bool;  // flags: 65568 
  public event function OnBecomeAwareAndCanAttack( sender : CActor) : Bool;  // flags: 65568 
  public event function OnBecomeUnawareOrCannotAttack( sender : CActor) : Bool;  // flags: 65568 
  public event function OnApproachAttack( sender : CActor) : Bool;  // flags: 65568 
  public event function OnApproachAttackEnd( sender : CActor) : Bool;  // flags: 65568 
  public event function OnAttack( sender : CActor) : Bool;  // flags: 65568 
  public event function OnAttackEnd( sender : CActor) : Bool;  // flags: 65568 
  public event function OnHitCeiling() : Bool;  // flags: 65568 
  public function AddEnemyToHostileEnemiesList( actor : CActor,  add : Bool);  // flags: 65536 
  public function ShouldEnableCombatMusic() : Bool;  // flags: 65536 
  public function AddCanFindPathEnemyToList( actor : CActor,  add : Bool);  // flags: 65536 
  public function ClearCanFindPathEnemiesList( dt : Float,  id : Int32);  // flags: 65536 
  public function AddToFinishableEnemyList( actor : CActor,  add : Bool);  // flags: 65536 
  private function ClearFinishableEnemyList( dt : Float,  id : Int32);  // flags: 17408 
  private function RemoveEnemyFromHostileEnemiesListTimer( time : Float,  id : Int32);  // flags: 17408 
  private function ClearHostileEnemiesList();  // flags: 16384 
  public function GetMoveTargets() : array<CActor>;  // flags: 65536 
  public function GetNumberOfMoveTargets() : Int32;  // flags: 65536 
  public function FindMoveTarget();  // flags: 65536 
  private function ConfirmEmptyMoveTarget( timeDelta : Float);  // flags: 16384 
  private function ConfirmEmptyTargetTimer( time : Float,  id : Int32);  // flags: 17408 
  public function ShouldEnableCombat( out  unableToPathFind : Bool,  forceCombatMode : Bool) : Bool;  // flags: 65536 
  private function CanFindPathToTarget( out  unableToPathFind : Bool,  optional  forcedTarget : CNewNPC) : Bool;  // flags: 16384 
  private function IsReachableEnemyTooFar() : Bool;  // flags: 16384 
  private function IsEnemyTooHighToReach() : Bool;  // flags: 16384 
  public function LockToMoveTarget( lockTime : Float);  // flags: 65536 
  private function DisableLockToMoveTargetTimer( time : Float,  id : Int32);  // flags: 17408 
  public function SetMoveTargetChangeAllowed( flag : Bool);  // flags: 65536 
  public function IsMoveTargetChangeAllowed() : Bool;  // flags: 65536 
  public function SetMoveTarget( actor : CActor);  // flags: 65536 
  protected function SetIsThreatened( flag : Bool);  // flags: 32768 
  public function ForceCombatModeOverride() : Bool;  // flags: 65536 
  public function IsThreatened() : Bool;  // flags: 65536 
  public function EnableFindTarget( flag : Bool);  // flags: 65536 
  public function UpdateDisplayTarget( optional  forceUpdate : Bool,  optional  forceNullActor : Bool);  // flags: 65536 
  private function ConfirmDisplayTarget( targetToConfirm : CGameplayEntity);  // flags: 16384 
  private function ConfirmDisplayTargetTimer( time : Float,  optional  id : Int32);  // flags: 17408 
  protected function SetDisplayTarget( e : CGameplayEntity);  // flags: 32768 
  public function GetDisplayTarget() : CGameplayEntity;  // flags: 65536 
  public function IsDisplayTargetTargetable() : Bool;  // flags: 65536 
  public function EnableRadialSlots( enable : Bool,  slotNames : array<CName>);  // flags: 65536 
  public function IsEnemyInCone( source : CActor,  coneHeading : Vector,  coneDist : Float,  coneAngle : Float,  out  newLockTarget : CActor) : Bool;  // flags: 65536 
  public function GetScreenSpaceLockTarget( sourceEnt : CGameplayEntity,  coneAngle : Float,  coneDist : Float,  coneHeading : Float,  optional  inFrameCheck : Bool) : CActor;  // flags: 65536 
  public function IsEntityTargetable( out  info : STargetingInfo,  optional  usePrecalcs : Bool) : Bool;  // flags: 65536 
  public function CanBeTargetedIfSwimming( actor : CActor,  optional  usePrecalcs : Bool) : Bool;  // flags: 65536 
  private function FilterActors( out  targets : array<CActor>,  out  onlyThreatsReturned : Bool,  optional  usePrecalcs : Bool);  // flags: 16384 
  private function InternalFindTargetsInCone( out  targets : array<CActor>,  out  outHeadingVector : Vector,  optional  usePrecalcs : Bool);  // flags: 16384 
  public function InitTargeting();  // flags: 65536 
  public function PrepareTargetingIn( actionCheck : Bool,  bufferActionType : EBufferActionType,  actionInput : Bool);  // flags: 65536 
  public function ResetTargetingOut();  // flags: 65536 
  public function MakeFindTargetPrecalcs();  // flags: 65536 
  public function GetForceDisableUpdatePosition() : Bool;  // flags: 65536 
  public function SetUseNativeTargeting( use : Bool);  // flags: 65536 
  protected function FindTarget( optional  actionCheck : Bool,  optional  action : EBufferActionType,  optional  actionInput : Bool) : CActor;  // flags: 32768 
  protected function FindTarget_Scripted();  // flags: 32768 
  public function UpdateVisibleActors();  // flags: 65536 
  public function RemoveNonTargetable( out  targets : array<CActor>,  out  info : STargetingInfo,  selectionHeadingVector : Vector);  // flags: 65536 
  public function CombatModeDebug();  // flags: 65536 
  public function IsCombatMusicEnabled() : Bool;  // flags: 65536 
  public function IsSoundStateCombatMusic( gameState : ESoundGameState) : Bool;  // flags: 65536 
  private function ConfirmNewTarget( actorToConfirm : CActor);  // flags: 16384 
  protected function SelectTarget( targets : array<CActor>,  useVisibilityCheck : Bool,  sourcePosition : Vector,  headingVector : Vector,  selectionWeights : STargetSelectionWeights,  optional  usePrecalcs : Bool) : CActor;  // flags: 32768 
  public function Distance2DBetweenCapsuleAndPoint( actor : CActor,  entity : CEntity) : Float;  // flags: 65536 
  public function Distance2DBetweenCapsules( actor1 : CActor,  actor2 : CActor) : Float;  // flags: 65536 
  protected function ProcessSelectionWeights() : STargetSelectionWeights;  // flags: 32768 
  protected function CalcSelectionPriority( target : CEntity,  selectionWeights : STargetSelectionWeights,  sourcePosition : Vector,  headingVector : Vector) : Float;  // flags: 32768 
  protected function SetTarget( targetActor : CActor,  optional  forceSetTarget : Bool);  // flags: 32768 
  public function SetSlideTarget( actor : CGameplayEntity);  // flags: 65536 
  public event function OnForceSelectLockTarget() : Bool;  // flags: 65568 
  private function ForceSelectLockTarget();  // flags: 16384 
  public function SetFinisherVictim( actor : CActor);  // flags: 65536 
  public function GetFinisherVictim() : CActor;  // flags: 65536 
  protected function SetNonActorTarget( actor : CGameplayEntity);  // flags: 32768 
  public function DisableTargetHighlightTimer( time : Float,  id : Int32);  // flags: 66560 
  public function WasVisibleInScaledFrame( entity : CEntity,  frameSizeX : Float,  frameSizeY : Float) : Bool;  // flags: 65536 
  public function HardLockToTarget( flag : Bool);  // flags: 65536 
  public function LockToTarget( flag : Bool);  // flags: 65536 
  public function LockCameraToTarget( flag : Bool);  // flags: 65536 
  public function LockActorToTarget( flag : Bool,  optional  withoutIcon : Bool);  // flags: 65536 
  private function EnableHardLockIcon( flag : Bool);  // flags: 16384 
  private function CheckLockTargetIsAlive( time : Float,  id : Int32);  // flags: 17408 
  protected function PlayHitAnimation( damageAction : W3DamageAction,  animType : EHitReactionType);  // flags: 32768 
  public function ReduceDamage( out  damageData : W3DamageAction);  // flags: 65536 
  public function GetCriticalHitChance( isHeavyAttack : Bool,  target : CActor,  victimMonsterCategory : EMonsterCategory) : Float;  // flags: 65536 
  public function GetCriticalHitDamageBonus( weaponId : SItemUniqueId,  victimMonsterCategory : EMonsterCategory,  isStrikeAtBack : Bool) : SAbilityAttributeValue;  // flags: 65536 
  public function ReactToBeingHit( damageAction : W3DamageAction,  optional  buffNotApplied : Bool) : Bool;  // flags: 65536 
  protected function ShouldPauseHealthRegenOnHit() : Bool;  // flags: 32768 
  public function PlayHitEffect( damageAction : W3DamageAction);  // flags: 65536 
  public function HitReactionEffect( interval : Float);  // flags: 65536 
  public function HitReactionEffectCooldown( td : Float,  id : Int32);  // flags: 66560 
  public function PerformParryCheck( parryInfo : SParryInfo) : Bool;  // flags: 65536 
  protected function GetParryHeading( parryInfo : SParryInfo,  out  parryDir : EPlayerParryDirection) : Float;  // flags: 32768 
  public function ProcessLockTarget( optional  newLockTarget : CActor,  optional  checkLeftStickHeading : Bool) : Bool;  // flags: 65536 
  public function IsDoingSpecialAttack( heavy : Bool) : Bool;  // flags: 65536 
  public function SetIsCurrentlyDodging( enable : Bool,  optional  isRolling : Bool);  // flags: 65536 
  public function EnableHardLock( flag : Bool);  // flags: 65536 
  protected function TestParryAndCounter( data : CPreAttackEventData,  weaponId : SItemUniqueId,  out  parried : Bool,  out  countered : Bool) : array<CActor>;  // flags: 32768 
  public function SetSpecialAttackTimeRatio( f : Float);  // flags: 65536 
  public function GetSpecialAttackTimeRatio() : Float;  // flags: 65536 
  public function OnSpecialAttackHeavyActionProcess();  // flags: 65536 
  protected function DoAttack( animData : CPreAttackEventData,  weaponId : SItemUniqueId,  parried : Bool,  countered : Bool,  parriedBy : array<CActor>,  attackAnimationName : CName,  hitTime : Float);  // flags: 32768 
  public final function SetPlayerCombatStance( stance : EPlayerCombatStance,  optional  force : Bool);  // flags: 65552 
  private function CanChangeCombatStance( stance : EPlayerCombatStance,  optional  force : Bool) : Bool;  // flags: 16384 
  public event function OnHolsterWeaponStart() : Bool;  // flags: 65568 
  public event function OnHolsterWeaponEnd() : Bool;  // flags: 65568 
  public final function GetPlayerCombatStance() : EPlayerCombatStance;  // flags: 65552 
  public function DelayedDisableFindTarget( time : Float,  id : Int32);  // flags: 66560 
  public function StartDodgeTimer();  // flags: 65536 
  public function StopDodgeTimer();  // flags: 65536 
  public function IsDodgeTimerRunning() : Bool;  // flags: 65536 
  public function DodgeTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function EvadePressed( bufferAction : EBufferActionType);  // flags: 65536 
  public function PerformingCombatAction() : EBufferActionType;  // flags: 65536 
  public function PushCombatActionOnBuffer( action : EBufferActionType,  stage : EButtonStage,  optional  allSteps : Bool);  // flags: 65536 
  protected function ProcessCombatActionHeading( action : EBufferActionType) : Float;  // flags: 32768 
  public function ResetRawPlayerHeading();  // flags: 65536 
  public function ResetCachedRawPlayerHeading();  // flags: 65536 
  public function GetCombatActionTarget( action : EBufferActionType) : CGameplayEntity;  // flags: 65536 
  private function FindNonActorTarget( actionCheck : Bool,  optional  action : EBufferActionType) : CGameplayEntity;  // flags: 16384 
  public function SetupCombatAction( action : EBufferActionType,  stage : EButtonStage);  // flags: 65536 
  public function AllowAttack( target : CActor,  action : EBufferActionType) : Bool;  // flags: 65536 
  public function ProcessCombatActionBuffer() : Bool;  // flags: 65536 
  public function CleanCombatActionBuffer();  // flags: 65536 
  public function CancelHoldAttacks();  // flags: 65536 
  public function RaiseAttackFriendlyEvent( actor : CActor) : Bool;  // flags: 65536 
  public function SendAttackReactionEvent();  // flags: 65536 
  public function SetForceCanAttackWhenNotInCombat( forceMode : Int32);  // flags: 65536 
  public function CanAttackWhenNotInCombat( actionType : EBufferActionType,  altCast : Bool,  out  newTarget : CActor,  optional  target : CGameplayEntity) : Bool;  // flags: 65536 
  private function ShouldPerformFriendlyAction( actor : CActor,  inputHeading : Float,  attackAngle : Float,  clearanceMin : Float,  clearanceMax : Float) : Bool;  // flags: 16384 
  public function GetHudMessagesSize() : Int32;  // flags: 65536 
  public function GetHudPendingMessage() : String;  // flags: 65536 
  public function DisplayHudMessage( value : String);  // flags: 65536 
  private final function DisallowedActionDontShowHack( action : EInputActionBlock) : Bool;  // flags: 16400 
  public final function DisplayActionDisallowedHudMessage( action : EInputActionBlock,  optional  isCombatLock : Bool,  optional  isPlaceLock : Bool,  optional  isTimeLock : Bool,  optional  isDangerous : Bool);  // flags: 65552 
  public function RemoveHudMessageByString( msg : String,  optional  allQueuedInstances : Bool);  // flags: 65536 
  public function RemoveHudMessageByIndex( idx : Int32);  // flags: 65536 
  public function SetSettlementBlockCanter( valueAdd : Int32);  // flags: 65536 
  public function DisplayRaceStart( countDownSecondsNumber : Int32);  // flags: 65536 
  public function RaceCountdown( dt : Float,  id : Int32);  // flags: 66560 
  public function GetCountDownToStart() : Int32;  // flags: 65536 
  public function HAXE3GetContainer() : W3Container;  // flags: 65536 
  public function HAXE3SetContainer( container : W3Container);  // flags: 65536 
  public function HAXE3GetAutoLoot() : Bool;  // flags: 65536 
  public function HAXE3SetAutoLoot( value : Bool);  // flags: 65536 
  public function GetShowHud() : Bool;  // flags: 65536 
  public function SetShowHud( value : Bool);  // flags: 65536 
  public function DisplayItemRewardNotification( itemName : CName,  optional  quantity : Int32);  // flags: 65536 
  public function IsNewQuest( questGuid : CGUID) : Bool;  // flags: 65536 
  public function GetRewardMultiplier( rewardName : CName) : Float;  // flags: 65536 
  public function GetRewardMultiplierExists( rewardName : CName) : Bool;  // flags: 65536 
  public function SetRewardMultiplier( rewardName : CName,  value : Float);  // flags: 65536 
  public function RemoveRewardMultiplier( rewardName : CName);  // flags: 65536 
  public final function GetCurrentOilAmmo( id : SItemUniqueId) : Int32;  // flags: 65552 
  public final function GetMaxOilAmmo( id : SItemUniqueId) : Int32;  // flags: 65552 
  public final function ReduceOilAmmo( id : SItemUniqueId,  optional  ammo : Int32);  // flags: 65552 
  public function RemoveItemOil( id : SItemUniqueId);  // flags: 65536 
  public function SkillReduceBombAmmoBonus();  // flags: 65536 
  public function ConsumeItem( itemId : SItemUniqueId) : Bool;  // flags: 65536 
  public function MountVehicle( vehicleEntity : CEntity,  mountType : EVehicleMountType,  optional  vehicleSlot : EVehicleSlot);  // flags: 65536 
  public function DismountVehicle( vehicleEntity : CEntity,  dismountType : EDismountType);  // flags: 65536 
  public function HasStaminaToUseAction( action : EStaminaActionType,  optional  abilityName : CName,  optional  dt : Float,  optional  multiplier : Float) : Bool;  // flags: 65536 
  public function AbilityManager_FloorStaminaSegment( dt : Float,  id : Int32);  // flags: 66560 
  public function DrainToxicity( amount : Float);  // flags: 65536 
  public function DrainFocus( amount : Float);  // flags: 65536 
  public function GetOffenseStat() : Int32;  // flags: 65536 
  public function GetDefenseStat() : Int32;  // flags: 65536 
  public function GetSignsStat() : Float;  // flags: 65536 
  public event function OnOceanTriggerEnter() : Bool;  // flags: 65568 
  public event function OnOceanTriggerLeave() : Bool;  // flags: 65568 
  public function IsInWaterTrigger() : Bool;  // flags: 65536 
  public function GetSkillColor( skill : ESkill) : ESkillColor;  // flags: 65536 
  public function GetSkillSlotIndexFromSkill( skill : ESkill) : Int32;  // flags: 65536 
  public final function GetSkillSlotIndex( slotID : Int32,  checkIfUnlocked : Bool) : Int32;  // flags: 65552 
  public final function GetSkillSlotIDFromIndex( skillSlotIndex : Int32) : Int32;  // flags: 65552 
  public function GetSkillSlotID( skill : ESkill) : Int32;  // flags: 65536 
  public function GetSkillGroupBonus( groupID : Int32) : CName;  // flags: 65536 
  public function GetGroupBonusCount( commonColor : ESkillColor,  groupID : Int32) : Int32;  // flags: 65536 
  public function GetMutagenSlotIDFromGroupID( groupID : Int32) : Int32;  // flags: 65536 
  public function GetSkillLevel( skill : ESkill) : Int32;  // flags: 65536 
  public function AddSkill( skill : ESkill,  optional  isTemporary : Bool);  // flags: 65536 
  public function GetSkillAbilityName( skill : ESkill) : CName;  // flags: 65536 
  public function HasStaminaToUseSkill( skill : ESkill,  optional  perSec : Bool,  optional  signHack : Bool) : Bool;  // flags: 65536 
  protected function GetSkillStaminaUseCost( skill : ESkill,  optional  perSec : Bool) : Float;  // flags: 32768 
  public function GetSkillAttributeValue( skill : ESkill,  attributeName : CName,  addBaseCharAttribute : Bool,  addSkillModsAttribute : Bool) : SAbilityAttributeValue;  // flags: 65536 
  public function GetSkillLocalisationKeyName( skill : ESkill) : String;  // flags: 65536 
  public function GetSkillLocalisationKeyDescription( skill : ESkill) : String;  // flags: 65536 
  public function GetSkillIconPath( skill : ESkill) : String;  // flags: 65536 
  public function HasLearnedSkill( skill : ESkill) : Bool;  // flags: 65536 
  public function IsSkillEquipped( skill : ESkill) : Bool;  // flags: 65536 
  public function CanUseSkill( skill : ESkill) : Bool;  // flags: 65536 
  public function CanLearnSkill( skill : ESkill) : Bool;  // flags: 65536 
  public function HasSpentEnoughPoints( skill : ESkill) : Bool;  // flags: 65536 
  public function PathPointsForSkillsPath( skill : ESkill) : Int32;  // flags: 65536 
  public function GetPlayerSkills() : array<SSkill>;  // flags: 65536 
  public function GetPlayerSkill( s : ESkill) : SSkill;  // flags: 65536 
  public function GetSkillSubPathType( s : ESkill) : ESkillSubPath;  // flags: 65536 
  public function GetSkillSlotsCount() : Int32;  // flags: 65536 
  public function GetSkillSlots() : array<SSkillSlot>;  // flags: 65536 
  public function GetPlayerSkillMutagens() : array<SMutagenSlot>;  // flags: 65536 
  public function BlockSkill( skill : ESkill,  block : Bool,  optional  cooldown : Float) : Bool;  // flags: 65536 
  public function IsSkillBlocked( skill : ESkill) : Bool;  // flags: 65536 
  public function EquipSkill( skill : ESkill,  slotID : Int32) : Bool;  // flags: 65536 
  public function UnequipSkill( slotID : Int32) : Bool;  // flags: 65536 
  public function GetSkillOnSlot( slotID : Int32,  out  skill : ESkill) : Bool;  // flags: 65536 
  public function GetFreeSkillSlot() : Int32;  // flags: 65536 
  protected function Attack( hitTarget : CGameplayEntity,  animData : CPreAttackEventData,  weaponId : SItemUniqueId,  parried : Bool,  countered : Bool,  parriedBy : array<CActor>,  attackAnimationName : CName,  hitTime : Float,  weaponEntity : CItemEntity);  // flags: 32768 
  public function IsHeavyAttack( attackName : CName) : Bool;  // flags: 65536 
  public function IsLightAttack( attackName : CName) : Bool;  // flags: 65536 
  public final function ProcessWeaponCollision();  // flags: 65552 
  public function ReactToReflectedAttack( target : CGameplayEntity);  // flags: 65536 
  public function GetFallDist( out  fallDist : Float) : Bool;  // flags: 65536 
  public function ApplyFallingDamage( heightDiff : Float,  optional  reducing : Bool) : Float;  // flags: 65536 
  public function SetShowToLowStaminaIndication( value : Float);  // flags: 65536 
  public function GetShowToLowStaminaIndication() : Float;  // flags: 65536 
  public final function IndicateTooLowAdrenaline();  // flags: 65552 
  protected function GotoCombatStateWithAction( initialAction : EInitialAction,  optional  initialBuff : CBaseGameplayEffect);  // flags: 32768 
  public function IsThreat( actor : CActor,  optional  usePrecalcs : Bool) : Bool;  // flags: 65536 
  public function SetBIsCombatActionAllowed( flag : Bool);  // flags: 65536 
  public function GetBIsCombatActionAllowed() : Bool;  // flags: 65536 
  public function SetCombatAction( action : EBufferActionType);  // flags: 65536 
  public function GetCombatAction() : EBufferActionType;  // flags: 65536 
  protected function WhenCombatActionIsFinished();  // flags: 32768 
  public function IsInCombatAction_Attack() : Bool;  // flags: 65536 
  public function IsInSpecificCombatAction( specificCombatAction : EBufferActionType) : Bool;  // flags: 65536 
  public function IsInRunAnimation() : Bool;  // flags: 65536 
  public function SetCombatIdleStance( stance : Float);  // flags: 65536 
  public function GetCombatIdleStance() : Float;  // flags: 65536 
  public event function OnRotateInPlaceStart() : Bool;  // flags: 65568 
  public event function OnRotateInPlaceEnd() : Bool;  // flags: 65568 
  public event function OnFullyBlendedIdle() : Bool;  // flags: 65568 
  public event function OnRunLoopStart() : Bool;  // flags: 65568 
  public event function OnRunLoopEnd() : Bool;  // flags: 65568 
  public event function OnCombatActionStartBehgraph() : Bool;  // flags: 65568 
  public function HolsterUsableItem() : Bool;  // flags: 65536 
  public function IsInGuardedState() : Bool;  // flags: 65536 
  public event function OnGuardedStart() : Bool;  // flags: 65568 
  public event function OnGuardedEnd() : Bool;  // flags: 65568 
  public event function OnCombatActionStart() : Bool;  // flags: 65568 
  public event function OnParryOrCounterEnd() : Bool;  // flags: 65568 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  public event function OnCombatActionFriendlyStart() : Bool;  // flags: 65568 
  public event function OnCombatActionFriendlyEnd() : Bool;  // flags: 65568 
  public event function OnHitStart() : Bool;  // flags: 65568 
  public event function OnHitStartSwimming() : Bool;  // flags: 65568 
  public event function OnFinisherStart() : Bool;  // flags: 65568 
  public function IsPerformingFinisher() : Bool;  // flags: 65536 
  private function PlayFinisherCameraAnimation( cameraAnimName : CName);  // flags: 16384 
  public function IsLastEnemyKilled() : Bool;  // flags: 65536 
  public event function OnFinisherAnimEvent_SyncEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnFinisherEnd() : Bool;  // flags: 65568 
  private function FinisherEndEnableCamera( dt : Float,  id : Int32);  // flags: 17408 
  public function SpawnFinisherBlood();  // flags: 65536 
  public event function OnCombatActionEndComplete() : Bool;  // flags: 65568 
  public event function OnMovementFullyBlended() : Bool;  // flags: 65568 
  public event function OnCombatMovementStart() : Bool;  // flags: 65568 
  public function FreeTickets( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnGuardedReleased() : Bool;  // flags: 65568 
  public event function OnPerformAttack( playerAttackType : CName) : Bool;  // flags: 65568 
  public event function OnPerformEvade( playerEvadeType : EPlayerEvadeType) : Bool;  // flags: 65568 
  public event function OnInterruptAttack() : Bool;  // flags: 65568 
  public event function OnPerformGuard() : Bool;  // flags: 65568 
  public event function OnSpawnHorse() : Bool;  // flags: 65568 
  public event function OnDismountActionScriptCallback() : Bool;  // flags: 65568 
  public event function OnHorseSummonStart() : Bool;  // flags: 65568 
  public event function OnHorseSummonStop() : Bool;  // flags: 65568 
  public event function OnCombatActionStartVehicle( action : EVehicleCombatAction) : Bool;  // flags: 65568 
  public event function OnCombatActionEndVehicle() : Bool;  // flags: 65568 
  protected function CriticalBuffInformBehavior( buff : CBaseGameplayEffect);  // flags: 32768 
  private function CanAnimationReactToCriticalState( buff : CBaseGameplayEffect) : Bool;  // flags: 16384 
  public function CanReactToCriticalState() : Bool;  // flags: 65536 
  public event function OnCriticalStateAnimStart() : Bool;  // flags: 65568 
  public function StartCSAnim( buff : CBaseGameplayEffect) : Bool;  // flags: 65536 
  public function CriticalEffectAnimationInterrupted( reason : String) : Bool;  // flags: 65536 
  public function CriticalStateAnimStopped( forceRemoveBuff : Bool);  // flags: 65536 
  public function RequestCriticalAnimStart( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnRagdollUpdate( progress : Float) : Bool;  // flags: 65568 
  public event function OnRagdollOnGround() : Bool;  // flags: 65568 
  public event function OnRagdollInAir() : Bool;  // flags: 65568 
  public event function OnNoLongerInRagdoll() : Bool;  // flags: 65568 
  public function TryToEndRagdollOnGround( td : Float,  optional  id : Int32);  // flags: 66560 
  public function RequestCriticalAnimStop( optional  dontSetCriticalToStopped : Bool);  // flags: 65536 
  public function SimulateBuffTimePassing( simulatedTime : Float);  // flags: 65536 
  public function AddEffectDefault( effectType : EEffectType,  creat : CGameplayEntity,  srcName : String,  optional  isSignEffect : Bool) : EEffectInteract;  // flags: 65536 
  public function CheatResurrect();  // flags: 65536 
  public function SetIsInsideInteraction( b : Bool);  // flags: 65536 
  public function IsInsideInteraction() : Bool;  // flags: 65536 
  public function SetIsInsideHorseInteraction( b : Bool,  horse : CEntity);  // flags: 65536 
  public function IsInsideHorseInteraction() : Bool;  // flags: 65536 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  private function PlayerHasLadderExplorationReady() : Bool;  // flags: 16384 
  public function SetGuarded( flag : Bool);  // flags: 65536 
  public function IsGuarded() : Bool;  // flags: 65536 
  public function GetSelectedItemId() : SItemUniqueId;  // flags: 65536 
  public function ClearSelectedItemId();  // flags: 65536 
  public function IsHoldingItemInLHand() : Bool;  // flags: 65536 
  public function GetCurrentlyUsedItemL() : W3UsableItem;  // flags: 65536 
  public function SetPlayerActionToRestore( actionToRestoreType : EPlayerActionToRestore);  // flags: 65536 
  public function IsCurrentlyUsingItemL() : Bool;  // flags: 65536 
  public function BlockSlotsOnLItemUse();  // flags: 65536 
  public function UnblockSlotsOnLItemUse();  // flags: 65536 
  public function IsUsableItemLBlocked() : Bool;  // flags: 65536 
  public function HideUsableItem( optional  force : Bool);  // flags: 65536 
  public function ProcessUsableItemsTransition( actionToRestore : EPlayerActionToRestore);  // flags: 65536 
  public function GetUsableItemLtransitionAllowed() : Bool;  // flags: 65536 
  public function SetUsableItemLtransitionAllowed( isAllowed : Bool);  // flags: 65536 
  public event function OnItemUseLUnBlocked() : Bool;  // flags: 65568 
  public event function OnItemUseLBlocked() : Bool;  // flags: 65568 
  public event function OnUsingItemsReset() : Bool;  // flags: 65568 
  public event function OnUsingItemsComplete() : Bool;  // flags: 65568 
  public event function OnUseSelectedItem( optional  force : Bool) : Bool;  // flags: 65568 
  public function ProcessUseSelectedItem( itemEntity : W3UsableItem,  optional  shouldCallOnUsed : Bool);  // flags: 65536 
  public function GetUsableItemTypeById( itemId : SItemUniqueId) : EUsableItemType;  // flags: 65536 
  public function StartWaitForItemSpawnAndProccesTask();  // flags: 65536 
  public function KillWaitForItemSpawnAndProccesTask();  // flags: 65536 
  public function AllowUseSelectedItem();  // flags: 65536 
  public function WaitForItemSpawnAndProccesTask( timeDelta : Float,  id : Int32);  // flags: 66560 
  public event function OnBombProjectileReleased() : Bool;  // flags: 65568 
  public function SetIsThrowingItemWithAim( b : Bool);  // flags: 65536 
  public function SetIsThrowingItem( flag : Bool);  // flags: 65536 
  public function IsThrowingItem() : Bool;  // flags: 65536 
  public function IsThrowingItemWithAim() : Bool;  // flags: 65536 
  public function SetThrowHold( b : Bool);  // flags: 65536 
  public function IsThrowHold() : Bool;  // flags: 65536 
  public function SetIsAimingCrossbow( flag : Bool);  // flags: 65536 
  public function GetIsAimingCrossbow() : Bool;  // flags: 65536 
  public event function OnThrowAnimLeave() : Bool;  // flags: 65568 
  protected function BombThrowStart();  // flags: 32768 
  public event function OnThrowAnimStart() : Bool;  // flags: 65568 
  public function BombThrowAbort();  // flags: 65536 
  private function BombThrowCleanUp();  // flags: 16384 
  public function ProcessCanAttackWhenNotInCombatBomb();  // flags: 65536 
  public function SetIsShootingFriendly( flag : Bool);  // flags: 65536 
  public function GetIsShootingFriendly() : Bool;  // flags: 65536 
  protected function UsableItemStart();  // flags: 32768 
  protected function BombThrowRelease();  // flags: 32768 
  protected function UsableItemRelease();  // flags: 32768 
  public function ThrowingAbort();  // flags: 65536 
  public function CanSetupCombatAction_Throw() : Bool;  // flags: 65536 
  public function GetThrownEntity() : CThrowable;  // flags: 65536 
  public event function OnWeaponWait() : Bool;  // flags: 65568 
  public event function OnWeaponDrawStart() : Bool;  // flags: 65568 
  public event function OnWeaponReloadStart() : Bool;  // flags: 65568 
  public event function OnWeaponReloadEnd() : Bool;  // flags: 65568 
  public event function OnWeaponAimStart() : Bool;  // flags: 65568 
  public event function OnWeaponShootStart() : Bool;  // flags: 65568 
  public event function OnWeaponShootEnd() : Bool;  // flags: 65568 
  public event function OnWeaponAimEnd() : Bool;  // flags: 65568 
  public event function OnWeaponHolsterStart() : Bool;  // flags: 65568 
  public event function OnWeaponHolsterEnd() : Bool;  // flags: 65568 
  public event function OnWeaponToNormalTransStart() : Bool;  // flags: 65568 
  public event function OnWeaponToNormalTransEnd() : Bool;  // flags: 65568 
  public event function OnEnableAimingMode( enable : Bool) : Bool;  // flags: 65568 
  public event function OnRangedForceHolster( optional  forceUpperBodyAnim : Bool,  optional  instant : Bool,  optional  dropItem : Bool) : Bool;  // flags: 65568 
  public function IsCrossbowHeld() : Bool;  // flags: 65536 
  public event function OnBlockAllCombatTickets( release : Bool) : Bool;  // flags: 65568 
  public event function OnForceTicketUpdate() : Bool;  // flags: 65568 
  public function SetHitReactTransScale( f : Float);  // flags: 65536 
  public function GetHitReactTransScale() : Float;  // flags: 65536 
  public function GetHorseWithInventory() : CNewNPC;  // flags: 65536 
  public function GetHorseCurrentlyMounted() : CNewNPC;  // flags: 65536 
  public function _SetHorseCurrentlyMounted( horse : CNewNPC);  // flags: 65536 
  public function WasHorseRecentlySummoned() : Bool;  // flags: 65536 
  public function IsMountingHorseAllowed( optional  alwaysAllowedInExploration : Bool) : Bool;  // flags: 65536 
  public function FollowActor( actor : CActor);  // flags: 65536 
  public function SetCanFollowNpc( val : Bool,  actor : CActor);  // flags: 65536 
  public function CanFollowNpc() : Bool;  // flags: 65536 
  public function GetActorToFollow() : CActor;  // flags: 65536 
  public function SetIsSwimming( toggle : Bool);  // flags: 65536 
  public function RepairItemUsingConsumable( item : SItemUniqueId,  consumable : SItemUniqueId) : Bool;  // flags: 65536 
  private function CheckDayNightCycle();  // flags: 16384 
  public function DayNightCycle( dt : GameTime,  id : Int32);  // flags: 66560 
  public event function OnNightStarted() : Bool;  // flags: 65568 
  public event function OnDayStarted() : Bool;  // flags: 65568 
  public function ForceUnlockAllInputActions( alsoQuestLocks : Bool);  // flags: 65536 
  public function SetPrevRawLeftJoyRot();  // flags: 65536 
  public function GetPrevRawLeftJoyRot() : Float;  // flags: 65536 
  public function GetExplorationInputContext() : CName;  // flags: 65536 
  public function GetCombatInputContext() : CName;  // flags: 65536 
  public function SetIsOnBoat( b : Bool);  // flags: 65536 
  public function IsOnBoat() : Bool;  // flags: 65536 
  public function IsInShallowWater() : Bool;  // flags: 65536 
  public event function OnEnterShallowWater() : Bool;  // flags: 65568 
  public event function OnExitShallowWater() : Bool;  // flags: 65568 
  public function TestIsInSettlement() : Bool;  // flags: 65536 
  public function ProcessGlossaryImageOverride( defaultImage : String,  uniqueTag : CName) : String;  // flags: 65536 
  public function EnableGlossaryImageOverride( uniqueTag : CName,  imageFileName : String,  enable : Bool);  // flags: 65536 
  public function SetCurrentMonsterHuntInvestigationArea( area : W3MonsterHuntInvestigationArea);  // flags: 65536 
  public function RememberCustomHead( headName : CName);  // flags: 65536 
  public function GetRememberedCustomHead() : CName;  // flags: 65536 
  public function ClearRememberedCustomHead();  // flags: 65536 
  public function CreateTutorialInput();  // flags: 65536 
  public function CreateInput();  // flags: 65536 
  public function TutorialSilverCombat( dt : Float,  id : Int32);  // flags: 66560 
  public function GetBossTag() : CName;  // flags: 65536 
  public function SetBossTag( bossTag : CName);  // flags: 65536 
  public function DelayedFinisherInputTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function RemoveFinisherCameraAnimationCheck( dt : Float,  id : Int32);  // flags: 66560 
  public function GameplayFactRemove( dt : Float,  timerId : Int32);  // flags: 66560 
  public function GiveStartingItems( dt : Float,  timerId : Int32);  // flags: 66560 
  public function Debug_GiveTestingItems( dt : Float,  optional  id : Int32);  // flags: 66560 
  public function Debug_RemoveTestingItems( dt : Float,  id : Int32);  // flags: 66560 
  public function Debug_DelayedConsoleCommand( dt : Float,  id : Int32);  // flags: 66560 
  public function DBG_SkillSlots();  // flags: 65536 
  public final function SetPadBacklightColor( r : Int32,  g : Int32,  b : Int32);  // flags: 65552 
  public final function SetPadBacklightColorFromSign( signType : ESignType);  // flags: 65552 
  public function ResetPadBacklightColorTimer( dt : Float,  id : Int32);  // flags: 66560 
  public final function ResetPadBacklightColor( optional  skipHeldWeapon : Bool);  // flags: 65552 
  public event function OnOpenningDoor() : Bool;  // flags: 65568 
  public function RemoveQuestCameraShakeTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function RemoveQuestCameraShake( animName : CName);  // flags: 65536 
  public function IsPerformingPhaseChangeAnimation() : Bool;  // flags: 65536 
  public function SetIsPerformingPhaseChangeAnimation( val : Bool);  // flags: 65536 
  public function SetTestAdjustRequestedMovementDirection( val : Bool);  // flags: 65536 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags) : Bool;  // flags: 65568 
  public function PotDrinkTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function SetIsHorseRacing( val : Bool);  // flags: 65536 
  public function GetIsHorseRacing() : Bool;  // flags: 65536 
  public function SetHorseCombatSlowMo( val : Bool);  // flags: 65536 
  public function GetHorseCombatSlowMo() : Bool;  // flags: 65536 
  public function SetItemsPerLevelGiven( id : Int32);  // flags: 65536 
  private function AddItemPerLevelList();  // flags: 16384 
  public function DealDamageToBoat( dmg : Float,  index : Int32,  optional  globalHitPos : Vector);  // flags: 65536 
  public function OnStartTeleportingPlayerToPlayableArea();  // flags: 65536 
  public function BorderTeleportFadeOutTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function OnOpenMapToLetPlayerGoBackToPlayableArea();  // flags: 65536 
  public function OnTeleportPlayerToPlayableArea( afterClosingMap : Bool);  // flags: 65536 
  public function BorderTeleportFadeInTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function TestTimer( dt : Float,  id : Int32);  // flags: 66560 
  public final function Debug_ReleaseCriticalStateSaveLocks();  // flags: 65552 
  public function Debug_SpamSpeed( dt : Float,  id : Int32);  // flags: 66560 
  public function RemoveInstantKillSloMo( dt : Float,  id : Int32);  // flags: 66560 
  public final function Debug_ClearAllActionLocks( optional  action : EInputActionBlock,  optional  all : Bool);  // flags: 65552 
  public function OnFocusedCameraBlendBegin();  // flags: 65536 
  public function OnFocusedCameraBlendUpdate( progress : Float);  // flags: 65536 
  public function OnFocusedCameraBlendEnd();  // flags: 65536 

}
import class CAIAttachEntitiesSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CR4LocomotionDirectControllerScript extends CR4LocomotionDirectController {

  public function Activate() : Bool;  // flags: 65536 
  public function UpdateLocomotion();  // flags: 65536 
  public function Deactivate();  // flags: 65536 

}
import class CAIDisperseAttachedEntitiesSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CHorsePrediction extends CObject {

  import public final function CollectPredictionInfo( entity : CNode,  testDistance : Float,  direction : Float,  checkWater : Bool) : SPredictionInfo;  // flags: 65561 

}
import class CAIMagicGroundBlastSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CFocusModeController extends IGameSystem {

  import public final function SetActive( active : Bool);  // flags: 65561 
  import public final function IsActive() : Bool;  // flags: 65561 
  import public final function GetIntensity() : Float;  // flags: 65561 
  import public final function EnableVisuals( enable : Bool,  optional  desaturation : Float,  optional  highlightBoos : Float);  // flags: 65561 
  import public final function EnableExtendedVisuals( enable : Bool,  fadeTime : Float);  // flags: 65561 
  import public final function SetDimming( enable : Bool);  // flags: 65561 
  import public final function SetFadeParameters( NearFadeDistance : Float,  FadeDistanceRange : Float,  dimmingTIme : Float,  dimmingSpeed : Float);  // flags: 65561 
  import public final function SetSoundClueEventNames( entity : CGameplayEntity,  eventStart : CName,  eventStop : CName) : Bool;  // flags: 65561 
  import public final function ActivateScentClue( entity : CEntity,  effectName : CName,  duration : Float);  // flags: 65561 
  import public final function DeactivateScentClue( entity : CEntity);  // flags: 65561 
  public function Activate();  // flags: 65536 
  public function GetBlockVibrations() : Bool;  // flags: 65536 
  public function SetBlockVibrations( newState : Bool);  // flags: 65536 
  public function ActivateFastFocus( activate : Bool) : Bool;  // flags: 65536 
  private function ActivateInternal();  // flags: 16384 
  public function Deactivate();  // flags: 65536 
  public function CanUseFocusMode() : Bool;  // flags: 65536 
  public function Init();  // flags: 65536 
  public function DeInit();  // flags: 65536 
  public event function OnGameStarted() : Bool;  // flags: 65568 
  public event function OnGameEnded() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function SetDimmingForClue( clue : W3MonsterClue);  // flags: 65536 
  public event function OnFocusModeDimmingFinished( timeDelta : Float) : Bool;  // flags: 65568 
  public function UseControllerVibration( focusModeIntensity : Float) : Bool;  // flags: 65536 
  public function UpdateMedallion( focusModeIntensity : Float);  // flags: 65536 
  public function SetMedallionIntensity( entity : CEntity,  distance : Float,  intensity : Float);  // flags: 65536 
  public function SetFocusAreaIntensity( intensity : Float);  // flags: 65536 
  public function ReusableClueDetected( clue : W3MonsterClue);  // flags: 65536 
  public function WasReusableClueDetected( tag : CName) : Bool;  // flags: 65536 
  public function ResetClue( tag : CName,  removeFacts : Bool,  leaveVisible : Bool);  // flags: 65536 
  public function UpdateFocusInteractions( deltaTime : Float);  // flags: 65536 

}
import class CGameplayFXSurfacePost extends IGameSystem {

  function Init();  // flags: 1 
  import public final function IsActive() : Bool;  // flags: 65561 
  import public final function AddSurfacePostFXGroup( position : Vector,  fadeInTime : Float,  activeTime : Float,  fadeOutTime : Float,  range : Float,  type : Int32);  // flags: 65561 

}
import class CAIMagicPushSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CPlayerStateUseVehicle extends CPlayerStateBase {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnVehicleStateTick( dt : Float) : Bool;  // flags: 65568 

}
import class CPlayerStatePostUseVehicle extends CPlayerStateBase {

  import public final function HACK_DeactivatePhysicsRepresentation();  // flags: 65561 
  import public final function HACK_ActivatePhysicsRepresentation();  // flags: 65561 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnVehicleStateTick( dt : Float) : Bool;  // flags: 65568 

}
import class CAIShootAttachedEntitiesSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CAIShootProjectilesFromGroundSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CAICastRipApartSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CAICastFireballSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CAICastLightningSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CAICastArcaneMissileSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class CAICastArcaneExplosionSpecialAction extends CAISpecialAction {

  public function Init();  // flags: 65536 

}
import class W3ClueStash extends W3MonsterClue {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public function SetAppearance( appearance : CName);  // flags: 65536 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function RegisterClueStash( t : Float,  id : Int32);  // flags: 66560 
  public event function OnClueDetected() : Bool;  // flags: 65568 
  public function ShouldBlockGameplayActionsOnInteraction() : Bool;  // flags: 65536 
  public function UpdateInteraction( optional  comp : CComponent);  // flags: 65536 
  public function UpdateStash();  // flags: 65536 
  public function OnContainerEvent();  // flags: 65536 
  public function UpdateAppearance( td : Float,  id : Int32);  // flags: 66560 
  public function SetStashDisabled( isDisabled : Bool);  // flags: 65536 
  private function EnableInteractionBaseOnStashState( enable : Bool);  // flags: 16384 

}
import class CAISimpleAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class IQuestCombatManagerBaseBlock extends CQuestGraphBlock {
  import var npcTags : TagList; // 4001
  import var overrideGuardArea : Bool; // 4001
  import var guardAreaTag : CName; // 4001
  import var pursuitAreaTag : CName; // 4001
  import var pursuitRange : Float; // 4001

  public function GetBlockName() : String;  // flags: 65536 
  public function GetAITree() : IAITree;  // flags: 65536 

}
import class CAIFistAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class W3HorseComponent extends CVehicleComponent {
  import var riderSharedParams : CHorseRiderSharedParams; // 6000

  import public final function PairWithRider( inRiderSharedParams : CHorseRiderSharedParams) : Bool;  // flags: 65561 
  import public final function Unpair();  // flags: 65561 
  import public final function IsTamed() : Bool;  // flags: 65561 
  import public final function IsDismounted() : Bool;  // flags: 65561 
  import public final function IsFullyMounted() : Bool;  // flags: 65561 
  private function InitPanicDamper();  // flags: 16384 
  public function SetPanicMult( mult : Float);  // flags: 65536 
  public function IsPlayerHorse() : Bool;  // flags: 65536 
  public function SetMountableByPlayer( isMountable : Bool);  // flags: 65536 
  public event function OnInit() : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnMountStarted( entity : CEntity,  vehicleSlot : EVehicleSlot) : Bool;  // flags: 65568 
  public event function OnMountFinished( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnDismountStarted( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnHorseDismount() : Bool;  // flags: 65568 
  public event function OnSettlementEnter() : Bool;  // flags: 65568 
  public event function OnSettlementExit() : Bool;  // flags: 65568 
  public event function OnDismountFinished( entity : CEntity,  vehicleSlot : EVehicleSlot) : Bool;  // flags: 65568 
  public function GetCurrentPitch() : Float;  // flags: 65536 
  public event function OnFrontLeg( pos : Vector,  normal : Vector) : Bool;  // flags: 65568 
  public event function OnBackLeg( pos : Vector,  normal : Vector) : Bool;  // flags: 65568 
  public function ShouldTickInIdle() : Bool;  // flags: 65536 
  public event function OnTick( dt : Float) : Bool;  // flags: 65568 
  private function UpdateCollision();  // flags: 16384 
  private function MakeNPCCollide( npc : CNewNPC);  // flags: 16384 
  private function UpdatePanic( dt : Float);  // flags: 16384 
  private function ShouldUpdatePanic() : Bool;  // flags: 16384 
  private function ResetPanicUpdate();  // flags: 16384 
  public function ResetPanic();  // flags: 65536 
  public function GetPanicPercent() : Float;  // flags: 65536 
  public function IsPotentiallyWild() : Bool;  // flags: 65536 
  public event function OnPredictionCollision( pos : Vector,  normal : Vector,  disp : Vector,  penetration : Float,  actorHeight : Float,  diffZ : Float,  fromVirtualController : Bool) : Bool;  // flags: 65568 
  public event function OnHeadPredictionCollision( pos : Vector,  normal : Vector,  disp : Vector,  penetration : Float,  actorHeight : Float,  diffZ : Float,  fromVirtualController : Bool) : Bool;  // flags: 65568 
  public event function OnFrontPredictionCollision( pos : Vector,  normal : Vector,  disp : Vector,  penetration : Float,  actorHeight : Float,  diffZ : Float,  fromVirtualController : Bool) : Bool;  // flags: 65568 
  public event function OnBackPredictionCollision( pos : Vector,  normal : Vector,  disp : Vector,  penetration : Float,  actorHeight : Float,  diffZ : Float,  fromVirtualController : Bool) : Bool;  // flags: 65568 
  public event function OnCharacterCollision( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnCharacterSideCollision( entity : CEntity) : Bool;  // flags: 65568 
  public function ShouldDealDamageToActor( collidedActor : CActor,  sideCollision : Bool);  // flags: 65536 
  public function ReactToQuen();  // flags: 65536 
  private function DealDamageToCollidedActor( owner : CActor,  collidedActor : CActor,  sideCollision : Bool);  // flags: 16384 
  private function CanCollideWithThisActor( actor : CActor) : Bool;  // flags: 16384 
  public final function InternalSetRotation( value : Float);  // flags: 65552 
  public final function InternalGetRotation() : Float;  // flags: 65552 
  public final function InternalSetDirection( value : Float);  // flags: 65552 
  public final function InternalGetDirection() : Float;  // flags: 65552 
  public final function InternalSetSpeed( value : Float);  // flags: 65552 
  public final function InternalGetSpeed() : Float;  // flags: 65552 
  public final function InternalSetSpeedMultiplier( value : Float);  // flags: 65552 
  public final function GetHorseVelocitySpeed() : Float;  // flags: 65552 
  public final function InternalResetVariables();  // flags: 65552 
  public final function StopTheVehicle();  // flags: 65552 
  public event function OnStopTheVehicleInstant() : Bool;  // flags: 65568 
  public event function OnForceStop() : Bool;  // flags: 65568 
  public event function OnHorseStop() : Bool;  // flags: 65568 
  public function SetManualControl( val : Bool);  // flags: 65536 
  public function GetManualControl() : Bool;  // flags: 65536 
  public function SetIsInCustomSpot( val : Bool);  // flags: 65536 
  public function IsInCustomSpot() : Bool;  // flags: 65536 
  public function IncrementIgnoreTestsCounter();  // flags: 65536 
  public function DecrementIgnoreTestsCounter( optional  reset : Bool);  // flags: 65536 
  public function ShouldIgnoreTests() : Bool;  // flags: 65536 
  public function SetCanFollowNpc( val : Bool,  horseComp : W3HorseComponent);  // flags: 65536 
  public function CanFollowNpc() : Bool;  // flags: 65536 
  public function SetCanTakeDamageFromFalling( val : Bool);  // flags: 65536 
  public function CanTakeDamageFromFalling() : Bool;  // flags: 65536 
  public function GetHorseComponentToFollow() : W3HorseComponent;  // flags: 65536 
  public function ToggleLocalSpaceControlls( toggle : Bool);  // flags: 65536 
  public function IsControllableInLocalSpace() : Bool;  // flags: 65536 
  public function ToggleSimpleStaminaManagement( toggle : Bool);  // flags: 65536 
  public function ShouldUseSimpleStaminaManagement() : Bool;  // flags: 65536 
  public function GetCurrentUser() : CActor;  // flags: 65536 
  public function GetLastRider() : CActor;  // flags: 65536 
  public function ShakeOffRider( dismountType : EDismountType);  // flags: 65536 
  public function IsNotBeingUsed() : Bool;  // flags: 65536 
  public event function OnJumpHack() : Bool;  // flags: 65568 
  public function Tame( owner : CActor,  tame : Bool);  // flags: 65536 
  public event function OnHideHorse() : Bool;  // flags: 65568 
  public function HideHorse();  // flags: 65536 
  public event function OnKillHorse() : Bool;  // flags: 65568 
  public function KillHorse();  // flags: 65536 
  public event function OnHitGround() : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  public event function OnRiderWantsToMount() : Bool;  // flags: 65568 
  public event function OnAnimationStarted( entity : CEntity,  animation : CName) : Bool;  // flags: 65568 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  public event function OnCriticalEffectAdded( criticalEffect : ECriticalStateType) : Bool;  // flags: 65568 
  public event function OnOceanTriggerEnter() : Bool;  // flags: 65568 
  public event function OnOceanTriggerLeave() : Bool;  // flags: 65568 
  public event function OnIdleBegin() : Bool;  // flags: 65568 
  public event function OnIdleEnd() : Bool;  // flags: 65568 
  public event function OnHorseActionStart() : Bool;  // flags: 65568 
  public event function OnHorseActionStop() : Bool;  // flags: 65568 
  public event function OnHorseFastStopBegin() : Bool;  // flags: 65568 
  public event function OnHorseFastStopEnd() : Bool;  // flags: 65568 
  public event function OnAnimEvent_ActionBlend( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_JumpFailed( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnSmartDismount() : Bool;  // flags: 65568 
  protected function ToggleHorseAction( start : Bool);  // flags: 32768 
  public event function OnCheckHorseJump() : Bool;  // flags: 65568 
  public function IsInHorseAction() : Bool;  // flags: 65536 
  public event function OnEnableCanter() : Bool;  // flags: 65568 
  public event function OnCanGallop() : Bool;  // flags: 65568 
  public event function OnCanCanter() : Bool;  // flags: 65568 

}
import class CAIComboFistAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class W3Boat extends CGameplayEntity {
  import var teleportedFromOtherHUB : Bool; // c000

  import public final function SetTeleportedFromOtherHUB( val : Bool);  // flags: 65561 
  public event function OnStreamOut() : Bool;  // flags: 65568 
  public function DelayedDestroyBoat( td : Float,  id : Int32);  // flags: 66560 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionAttached( interaction : CInteractionComponent) : Bool;  // flags: 65568 
  public function DrowningDismount( dt : Float,  id : Int32);  // flags: 66560 
  public function HasDrowned() : Bool;  // flags: 65536 
  public function SetHasDrowned( val : Bool);  // flags: 65536 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public function GetBoatComponent() : CBoatComponent;  // flags: 65536 
  public function GetMountInteractionComponent( optional  forPassenger : Bool) : CInteractionComponent;  // flags: 65536 
  public function SetCanBeDestroyed( val : Bool);  // flags: 65536 
  public function GetCanBeDestroyed() : Bool;  // flags: 65536 

}
import class W3BoatSpawner extends CGameplayEntity {

  public event function OnSpawned( spawndata : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public event function OnStreamOut() : Bool;  // flags: 65568 
  public function DelayedSpawnBoat( td : Float,  id : Int32);  // flags: 66560 

}
import class CAISword2hAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class CAITwoHandedAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class CWitcherSword extends CItemEntity {
  import var swordType : EWitcherSwordType; // 4001

  import public function GetSwordType() : EWitcherSwordType;  // flags: 65545 
  function FlashRunes();  // flags: 1 
  function SetRuneIndexForSlot();  // flags: 1 
  public function Initialize( actor : CActor);  // flags: 65536 
  public event function OnGrab() : Bool;  // flags: 65568 
  public event function OnPut() : Bool;  // flags: 65568 
  public function ApplyOil( oilAbilities : array<CName>);  // flags: 65536 
  public function RemoveOil();  // flags: 65536 
  public function GetOilFxName() : CName;  // flags: 65536 
  public function GetRuneFxName() : CName;  // flags: 65536 
  public function UpdateEnhancements( newRuneCount : Int32);  // flags: 65536 

}
import class CAIPitchforkAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class CR4ReactionManager extends CBehTreeReactionManager {
  import var rainReactionsEnabled : Bool; // 6000
  import var rainEventParams : CBehTreeReactionEventData; // 4000

  public function SetRainReactionEnabled( enabled : Bool);  // flags: 65536 

}
import class CComboDefinition extends CObject {
  import var aspects : array<*CComboAspect>; // 4000

  import public final function CreateComboAspect( comboAspect : CName) : CComboAspect;  // flags: 65561 
  import public final function DeleteComboAspect( comboAspect : CName) : Bool;  // flags: 65561 
  import public final function FindComboAspect( comboAspect : CName) : CComboAspect;  // flags: 65561 

}
import class CComboString extends CObject {
  import var attacks : array<SComboAnimationData>; // 4000
  import var distAttacks : C2dArraySComboAnimationData; // 4000
  import var dirAttacks : C2dArrayarray<SComboAnimationData>; // 4000
  import var leftSide : Bool; // 4000

  import public final function AddAttack( animationName : CName,  optional  distance : EAttackDistance);  // flags: 65561 
  import public final function AddDirAttack( animationName : CName,  direction : EAttackDirection,  distance : EAttackDistance);  // flags: 65561 
  import public final function AddDirAttacks( animationNameFront : CName,  animationNameBack : CName,  animationNameLeft : CName,  animationNameRight : CName,  distance : EAttackDistance);  // flags: 65561 
  function RemoveAttack();  // flags: 1 
  function RemoveAllAttacks();  // flags: 1 
  function RemoveAllDirAttacks();  // flags: 1 

}
import class CComboAspect extends CObject {
  import var name : CName; // 4000
  import var strings : array<*CComboString>; // 4000

  import public final function CreateComboString( optional  leftSide : Bool) : CComboString;  // flags: 65561 
  import public final function AddLinks( animationName : CName,  connections : array<CName>);  // flags: 65561 
  import public final function AddLink( animationName : CName,  linkedAnimationName : CName);  // flags: 65561 
  import public final function AddHit( animationName : CName,  hitAnimationName : CName);  // flags: 65561 

}
import class CAIWitcherAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class CComboPlayer extends CObject {

  import public final function PlayAttack( comboAspect : CName) : Bool;  // flags: 65561 
  import public final function StopAttack();  // flags: 65561 
  import public final function PlayHit() : Bool;  // flags: 65561 
  import public final function Build( definition : CComboDefinition,  entity : CEntity) : Bool;  // flags: 65561 
  import public final function Init() : Bool;  // flags: 65561 
  import public final function Deinit();  // flags: 65561 
  import public final function Update( timeDelta : Float) : Bool;  // flags: 65561 
  import public final function Pause();  // flags: 65561 
  import public final function Unpause();  // flags: 65561 
  import public final function IsPaused() : Bool;  // flags: 65561 
  import public final function PauseSlider();  // flags: 65561 
  import public final function UnpauseSlider();  // flags: 65561 
  import public final function IsSliderPaused() : Bool;  // flags: 65561 
  import public final function SetDurationBlend( timeDelta : Float);  // flags: 65561 
  import public final function UpdateTarget( attackId : Int32,  pos : Vector,  rot : Float,  optional  deltaRotationPolicy : Bool,  optional  useRotationScaling : Bool);  // flags: 65561 

}
import class CAICiriAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class CR4HumanoidCombatComponent extends CComponent {

  import public final function UpdateSoundInfo();  // flags: 65561 
  import public final function GetSoundTypeIdentificationForBone( boneIndex : Int32) : CName;  // flags: 65561 
  import public final function GetBoneClosestToEdge( a : Vector,  b : Vector,  optional  preciseSearch : Bool) : Int32;  // flags: 65561 
  import public final function GetDefaultSoundInfoMapping() : SSoundInfoMapping;  // flags: 65561 

}
import class CCustomCamera extends CEntity {
  import var pivotPositionControllers : array<*ICustomCameraPivotPositionController>; // 4005
  import var pivotRotationControllers : array<*ICustomCameraPivotRotationController>; // 4005
  import var pivotDistanceControllers : array<*ICustomCameraPivotDistanceController>; // 4005
  import var activeCameraPositionController : *ICustomCameraPositionController; // 4005
  import var blendPivotPositionController : *CCustomCameraBlendPPC; // 4000
  import var allowAutoRotation : Bool; // 6001
  import var manualRotationHorTimeout : Float; // 4001
  import var manualRotationVerTimeout : Float; // 4001
  import var fov : Float; // 6001
  import var animSet : CSkeletalAnimationSet; // 4001
  import var presets : array<SCustomCameraPreset>; // 4001
  import var curveSet : array<*CCurve>; // 4001
  import var curveNames : array<CName>; // 4001

  import public final function Activate( optional  blendTime : Float);  // flags: 65561 
  import public final function GetActivePivotPositionController() : ICustomCameraPivotPositionController;  // flags: 65561 
  import public final function GetActivePivotRotationController() : ICustomCameraPivotRotationController;  // flags: 65561 
  import public final function GetActivePivotDistanceController() : ICustomCameraPivotDistanceController;  // flags: 65561 
  import public final function ChangePivotPositionController( _name : CName) : Bool;  // flags: 65561 
  import public final function ChangePivotRotationController( _name : CName) : Bool;  // flags: 65561 
  import public final function ChangePivotDistanceController( _name : CName) : Bool;  // flags: 65561 
  import public final function BlendToPivotPositionController( _name : CName,  blendTime : Float) : Bool;  // flags: 65561 
  import public final function GetActivePreset() : SCustomCameraPreset;  // flags: 65561 
  import public final function PlayAnimation( animation : SCameraAnimationDefinition);  // flags: 65561 
  import public final function StopAnimation( animation : CName);  // flags: 65561 
  import public final function FindCurve( curveName : CName) : CCurve;  // flags: 65561 
  import public final function SetManualRotationHorTimeout( timeOut : Float);  // flags: 65561 
  import public final function SetManualRotationVerTimeout( timeOut : Float);  // flags: 65561 
  import public final function GetManualRotationHorTimeout() : Float;  // flags: 65561 
  import public final function GetManualRotationVerTimeout() : Float;  // flags: 65561 
  import public final function IsManualControledHor() : Bool;  // flags: 65561 
  import public final function IsManualControledVer() : Bool;  // flags: 65561 
  import public final function ForceManualControlHorTimeout();  // flags: 65561 
  import public final function ForceManualControlVerTimeout();  // flags: 65561 
  import public final function EnableManualControl( enable : Bool);  // flags: 65561 
  import public final function ChangePreset( preset : CName);  // flags: 65561 
  import public final function NextPreset();  // flags: 65561 
  import public final function PrevPreset();  // flags: 65561 
  import public final function SetCollisionOffset( offset : Vector);  // flags: 65561 
  import public final function EnableScreenSpaceCorrection( enable : Bool);  // flags: 65561 
  import public final function SetAllowAutoRotation( allow : Bool);  // flags: 65561 
  public function ResetCollisionOffset();  // flags: 65536 
  public function SetFov( val : Float);  // flags: 65536 
  public function TimerTurnOnEffect( td : Float,  id : Int32);  // flags: 66560 
  public function ChangePivotController( controllerName : CName,  optional  blendTime : Float,  optional  forcePosition : Bool) : Bool;  // flags: 65536 
  public function ChangeMovementController( controllerName : CName) : Bool;  // flags: 65536 

}
import class CAINpcStyleOneHandedSwordParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class ICustomCameraPivotPositionController extends ICustomCameraBaseController {
  import var offsetZ : Float; // 6001
  import var pivotZSmoothTime : Float; // 4001

  import public final function SetDesiredPosition( position : Vector,  optional  mult : Float);  // flags: 65561 
  import public final function Update( out  currPosition : Vector,  out  currVelocity : Vector,  timeDelta : Float);  // flags: 65561 
  public function Reset();  // flags: 65536 

}
import class CAINpcStyleOneHandedAxeParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class ICustomCameraPivotRotationController extends ICustomCameraBaseController {
  import var minPitch : Float; // 6001
  import var maxPitch : Float; // 6001
  import var sensitivityPreset : EInputSensitivityPreset; // 4001

  import public final function SetDesiredHeading( heading : Float,  optional  mult : Float);  // flags: 65561 
  import public final function SetDesiredPitch( pitch : Float,  optional  mult : Float);  // flags: 65561 
  import public final function RotateHorizontal( right : Bool,  optional  mult : Float);  // flags: 65561 
  import public final function RotateVertical( up : Bool,  optional  mult : Float);  // flags: 65561 
  import public final function StopRotating();  // flags: 65561 
  import public final function Update( out  currRotation : EulerAngles,  out  currVelocity : EulerAngles,  timeDelta : Float);  // flags: 65561 

}
import class CAINpcStyleOneHandedBluntParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class ICustomCameraPivotDistanceController extends ICustomCameraBaseController {
  import var minDist : Float; // 6001
  import var maxDist : Float; // 6001

  import public final function SetDesiredDistance( distance : Float,  optional  mult : Float);  // flags: 65561 
  import public final function Update( out  currDistance : Float,  out  currVelocity : Float,  timeDelta : Float);  // flags: 65561 

}
import class CAINpcStyleOneHandedAnyParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcStyleTwoHandedAnyParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcFistsCombatStyleBaseParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class ICustomCameraScriptedPivotPositionController extends ICustomCameraPivotPositionController {

  protected function ControllerActivate( currentOffset : Float);  // flags: 33280 
  protected function ControllerDeactivate();  // flags: 33280 
  protected function ControllerUpdate( out  currentPosition : Vector,  out  currentVelocity : Vector,  timeDelta : Float);  // flags: 33280 
  protected function ControllerSetDesiredPosition( position : Vector,  mult : Float);  // flags: 33280 

}
import class ICustomCameraScriptedPivotRotationController extends ICustomCameraPivotRotationController {

  protected function ControllerActivate( currentRotation : EulerAngles);  // flags: 33280 
  protected function ControllerDeactivate();  // flags: 33280 
  protected function ControllerUpdate( out  currentRotation : EulerAngles,  out  currentVelocity : EulerAngles,  timeDelta : Float);  // flags: 33280 
  protected function ControllerSetDesiredYaw( yaw : Float,  mult : Float);  // flags: 33280 
  protected function ControllerSetDesiredPitch( pitch : Float,  mult : Float);  // flags: 33280 
  protected function ControllerRotateHorizontal( right : Bool,  mult : Float);  // flags: 33280 
  protected function ControllerRotateVertical( up : Bool,  mult : Float);  // flags: 33280 
  protected function ControllerStopRotating();  // flags: 33280 
  protected function ControllerGetRotationDelta() : EulerAngles;  // flags: 33280 
  protected function ControllerUpdateInput( out  movedHorizontal : Bool,  out  movedVertical : Bool);  // flags: 33280 

}
import class ICustomCameraScriptedPivotDistanceController extends ICustomCameraPivotDistanceController {

  protected function ControllerActivate( currentDistance : Float);  // flags: 33280 
  protected function ControllerDeactivate();  // flags: 33280 
  protected function ControllerUpdate( out  currentDistance : Float,  out  currentVelocity : Float,  timeDelta : Float);  // flags: 33280 
  protected function ControllerSetDesiredDistance( dist : Float,  mult : Float);  // flags: 33280 

}
import class CAINpcStyleFistsParams extends CAINpcFistsCombatStyleBaseParams {

  public function Init();  // flags: 65536 

}
import class ICustomCameraScriptedPositionController extends ICustomCameraPositionController {

  protected function ControllerUpdate( out  moveData : SCameraMovementData,  timeDelta : Float);  // flags: 32768 
  protected function ControllerSetPosition( position : Vector);  // flags: 33280 
  protected function ControllerSetRotation( rotation : EulerAngles);  // flags: 33280 
  protected function ControllerGetPosition() : Vector;  // flags: 33280 
  protected function ControllerGetRotation() : EulerAngles;  // flags: 33280 

}
import class ICustomCameraScriptedCurveSetPivotPositionController extends ICustomCameraScriptedPivotPositionController {
  import var curveSet : array<*CCurve>; // 4001
  import var curveNames : array<CName>; // 4001

  import protected final function FindCurve( curveName : CName) : CCurve;  // flags: 32793 

}
import class CAINpcStyleFistsEasyParams extends CAINpcFistsCombatStyleBaseParams {

  public function Init();  // flags: 65536 

}
import class ICustomCameraScriptedCurveSetPivotRotationController extends ICustomCameraScriptedPivotRotationController {
  import var curveSet : array<*CCurve>; // 4001
  import var curveNames : array<CName>; // 4001

  import protected final function FindCurve( curveName : CName) : CCurve;  // flags: 32793 

}
import class ICustomCameraScriptedCurveSetPivotDistanceController extends ICustomCameraScriptedPivotDistanceController {
  import var curveSet : array<*CCurve>; // 4001
  import var curveNames : array<CName>; // 4001

  import protected final function FindCurve( curveName : CName) : CCurve;  // flags: 32793 

}
import class CAINpcStyleShieldParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class ICustomCameraScriptedCurveSetPositionController extends ICustomCameraScriptedPositionController {
  import var curveSet : array<*CCurve>; // 4001
  import var curveNames : array<CName>; // 4001

  import protected final function FindCurve( curveName : CName) : CCurve;  // flags: 32793 

}
import class CAINpcStylePhilippaParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcStyleBowParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcStyleBowmanMeleeParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CR4GuiManager extends CGuiManager {

  import public final function IsAnyMenu() : Bool;  // flags: 65561 
  import public final function GetRootMenu() : CR4Menu;  // flags: 65561 
  import public final function GetPopup( popupName : CName) : CR4Popup;  // flags: 65561 
  import public final function GetPopupList( out  popupNames : array<CName>);  // flags: 65561 
  import public final function SendCustomUIEvent( eventName : CName);  // flags: 65561 
  import public final function PlayFlashbackVideoAsync( videoFile : String,  optional  looped : Bool);  // flags: 65561 
  import public final function CancelFlashbackVideo();  // flags: 65561 
  import public final function SetSceneEntityTemplate( template : CEntityTemplate,  optional  animationName : CName);  // flags: 65561 
  import public final function ApplyAppearanceToSceneEntity( appearanceName : CName);  // flags: 65561 
  import public final function UpdateSceneEntityItems( items : array<CName>);  // flags: 65561 
  import public final function SetSceneCamera( cameraPosition : Vector,  cameraRotation : EulerAngles);  // flags: 65561 
  import public final function SetupSceneCamera( lookAtPos : Vector,  cameraRotation : EulerAngles,  distance : Float,  fov : Float);  // flags: 65561 
  import public final function SetEntityTransform( position : Vector,  rotation : EulerAngles,  scale : Vector);  // flags: 65561 
  import public final function SetSceneEnvironmentAndSunPosition( envDef : CEnvironmentDefinition,  sunRotation : EulerAngles);  // flags: 65561 
  import public final function EnableScenePhysics( enable : Bool);  // flags: 65561 
  import public final function SetBackgroundTexture( texture : CResource);  // flags: 65561 
  public event function OnGameStart( newOrRestored : Bool) : Bool;  // flags: 65568 
  public event function OnGameEnd() : Bool;  // flags: 65568 
  public event function OnWorldStart( newOrRestored : Bool) : Bool;  // flags: 65568 
  public event function OnWorldEnd() : Bool;  // flags: 65568 
  public event function OnFailedCreateMenu() : Bool;  // flags: 65568 
  public function GetInGameConfigBufferedWrapper() : CInGameConfigBufferedWrapper;  // flags: 65536 
  protected function FinalizeConfigBuffer( keepValues : Bool);  // flags: 32768 
  public function GetLockedControlScheme() : ELockedControlScheme;  // flags: 65536 
  public function GetCommonMenu() : CR4CommonMenu;  // flags: 65536 
  public function GetSceneController() : CR4GuiSceneController;  // flags: 65536 
  public function GetHudEventController() : CR4HudEventController;  // flags: 65536 
  public function OnEnteredStartScreen();  // flags: 65536 
  public function OnEnteredConfigScreen();  // flags: 65536 
  public function OnEnteredMainMenu();  // flags: 65536 
  public function OnControllerDisconnected();  // flags: 65536 
  public function OnControllerReconnected();  // flags: 65536 
  public function ShowControllerDisconnectionMessage();  // flags: 65536 
  public function OnSignInStarted();  // flags: 65536 
  public function OnSignInCancelled();  // flags: 65536 
  public function OnSignIn();  // flags: 65536 
  public function OnSignOut();  // flags: 65536 
  public function ShowKinectMessage();  // flags: 65536 
  public function SetIsDuringFirstStartup( firstStartup : Bool);  // flags: 65536 
  public function UpdateSignoutMessagePending();  // flags: 65536 
  public function TryQuitGame();  // flags: 65536 
  public function OnUserSettingsCorrupted();  // flags: 65536 
  public function OnLoadingFailed( sres : ESessionRestoreResult,  missingContent : array<CName>);  // flags: 65536 
  public function OnCorruptedSaveDataOverwrite();  // flags: 65536 
  public function HideTutorial( value : Bool,  forced : Bool);  // flags: 65536 
  public function GetTutorialVisibility( out  hidden : Bool,  out  forceHidden : Bool);  // flags: 65536 
  public event function OnCanSkipChanged( newVal : Bool) : Bool;  // flags: 65568 
  public event function OnSwipe( swipe : Int32) : Bool;  // flags: 65568 
  public function SetLastOpenedCommonMenuName( menuName : CName);  // flags: 65536 
  public function GetLastOpenedCommonMenuName() : CName;  // flags: 65536 
  public function FindDisplayedObjectiveGUID( guid : CGUID) : Bool;  // flags: 65536 
  public function SaveDisplayedObjectiveGUID( guid : CGUID);  // flags: 65536 
  public function UpdateUISavedData( panelName : CName,  openedCategories : array<CName>,  selectedTag : CName,  selectedModule : Int32,  optional  gridItem : SItemUniqueId,  optional  slotID : Int32);  // flags: 65536 
  public function AddNewUISavedData( panelName : CName,  openedCategories : array<CName>,  selectedTag : CName,  selectedModule : Int32,  optional  gridItem : SItemUniqueId,  optional  slotID : Int32);  // flags: 65536 
  public function RemoveUISavedData( panelName : CName);  // flags: 65536 
  public function GetUISavedData( panelName : CName) : SUISavedData;  // flags: 65536 
  public function GetHideMessageRequestId() : Int32;  // flags: 65536 
  public function ShowUserDialog( messageId : Int32,  title : String,  message : String,  type : EUserDialogButtons);  // flags: 65536 
  public function ShowUserDialogAdv( messageId : Int32,  title : String,  message : String,  localizationNeeded : Bool,  type : EUserDialogButtons);  // flags: 65536 
  public function ShowProgressDialog( messageId : Int32,  title : String,  message : String,  localizationNeeded : Bool,  type : EUserDialogButtons,  progressValue : Float,  progressType : EUserMessageProgressType,  progressTag : CName);  // flags: 65536 
  public function UpdateUserDialogProgress( messageId : Int32,  progressValue : Float);  // flags: 65536 
  public function HideUserDialog( messageId : Int32);  // flags: 65536 
  public function UserDialogCallback( messageId : Int32,  actionId : EUserMessageAction);  // flags: 65536 
  public function OnMessageHiding( messageId : Int32);  // flags: 65536 
  public function ShowNotification( messageText : String,  optional  duration : Float);  // flags: 65536 
  public function RequestMouseCursor( showMouseCursor : Bool);  // flags: 65536 
  public function ForceHideMouseCursor( value : Bool);  // flags: 65536 
  public function ShowLoadingIndicator();  // flags: 65536 
  public function HideLoadingIndicator( optional  immediateHide : Bool);  // flags: 65536 
  public function ShowSavingIndicator();  // flags: 65536 
  public function HideSavingIndicator( optional  immediateHide : Bool);  // flags: 65536 
  public function UpdateDismountAvailable( blocked : Bool);  // flags: 65536 
  public function EnableHudHoldIndicator( gpadKeyCode : Int32,  kbKeyCode : Int32,  label : String,  holdDuration : Float,  optional  intName : CName);  // flags: 65536 
  public function EnableHudHoldIndicator_Impl( gpadKeyCode : Int32,  kbKeyCode : Int32,  label : String,  holdDuration : Float,  optional  intName : CName);  // flags: 65536 
  public function checkHoldIndicator();  // flags: 65536 
  public function DisableHudHoldIndicator();  // flags: 65536 
  private function DisableHudHoldIndicator_Impl();  // flags: 16384 
  public function RegisterNewItem( item : SItemUniqueId);  // flags: 65536 
  public function GetNewestItems() : array<SItemUniqueId>;  // flags: 65536 
  public function RegisterNewGlossaryEntry( newEntry : CJournalBase,  panelName : CName,  optional  tag : CName);  // flags: 65536 
  public function GetNewGlossaryEntries() : array<SGlossaryEntry>;  // flags: 65536 
  public function RegisterNewAlchemyEntry( tag : CName);  // flags: 65536 
  public function GetNewAlchemyEntries() : array<SGlossaryEntry>;  // flags: 65536 
  public function RegisterNewSkillEntry( newSkill : ESkill);  // flags: 65536 
  public function GetNewSkillsEntries() : array<ESkill>;  // flags: 65536 
  public function RegisterNewMappinEntry( newMappin : CName,  newMappinType : CName);  // flags: 65536 
  public function GetNewMappinEntries() : array<SMappinEntry>;  // flags: 65536 
  public function SetUsePortal( usePortal : Bool,  popupAnswered : Bool);  // flags: 65536 
  public function GetUsePortal() : Bool;  // flags: 65536 
  public function GetUsePortalAnswered() : Bool;  // flags: 65536 
  public function ResumePortalConfirmationPendingMessage();  // flags: 65536 
  public function DisplayPortalConfirmationPopup( pause : Bool,  allowInMenu : Bool);  // flags: 65536 
  public function IsModalPopupShown() : Bool;  // flags: 65536 
  public function DisplayLockedSavePopup();  // flags: 65536 
  public function DisplayNewDlcInstalled( message : String);  // flags: 65536 

}
import class CR4Hud extends CHud {

  function GetActorHeadIconScreenPosition();  // flags: 1 
  import public final function ShowOneliner( text : String,  entity : CEntity);  // flags: 65561 
  import public final function HideOneliner( entity : CEntity);  // flags: 65561 
  function ForceInteractionUpdate();  // flags: 1 

}
import class CAINpcStyleCrossbowParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CR4Menu extends CMenu {

  import public function GetSubMenu() : CMenu;  // flags: 65545 
  import public function MakeModal( make : Bool) : Bool;  // flags: 65545 
  import public function SetRenderGameWorldOverride( override : Bool);  // flags: 65545 

}
import class CAINpcStyleTwoHandedHammerParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CR4Popup extends CPopup {

  import public function MakeModal( make : Bool) : Bool;  // flags: 65545 

}
import class CInGameConfigWrapper extends IScriptable {

  import public final function GetGroupDisplayName( groupName : CName) : String;  // flags: 65561 
  import public final function GetGroupPresetsNum( groupName : CName) : Int32;  // flags: 65561 
  import public final function GetGroupPresetDisplayName( groupName : CName,  presetIdx : Int32) : String;  // flags: 65561 
  import public final function ApplyGroupPreset( groupName : CName,  presetIdx : Int32);  // flags: 65561 
  import public final function GetVarDisplayType( groupName : CName,  varName : CName) : String;  // flags: 65561 
  import public final function GetVarDisplayName( groupName : CName,  varName : CName) : String;  // flags: 65561 
  import public final function GetVarOptionsNum( groupName : CName,  varName : CName) : Int32;  // flags: 65561 
  import public final function GetVarOption( groupName : CName,  varName : CName,  optionIdx : Int32) : String;  // flags: 65561 
  import public final function GetVarValue( groupCName : CName,  varCName : CName) : String;  // flags: 65561 
  import public final function SetVarValue( groupName : CName,  varName : CName,  varValue : String);  // flags: 65561 
  import public final function GetVarNameByGroupName( groupName : CName,  varIdx : Int32) : CName;  // flags: 65561 
  import public final function GetVarsNumByGroupName( groupName : CName) : Int32;  // flags: 65561 
  import public final function GetGroupsNum() : Int32;  // flags: 65561 
  import public final function GetGroupName( groupIdx : Int32) : CName;  // flags: 65561 
  import public final function GetVarsNum( groupIdx : Int32) : Int32;  // flags: 65561 
  import public final function GetVarName( groupIdx : Int32,  varIdx : Int32) : CName;  // flags: 65561 
  import public final function IsVarVisible( groupName : CName,  varName : CName) : Bool;  // flags: 65561 
  import public final function DoVarHasTag( groupName : CName,  varName : CName,  tag : CName) : Bool;  // flags: 65561 
  import public final function IsTagActive( tag : CName) : Bool;  // flags: 65561 
  import public final function ActivateScriptTag( tag : CName);  // flags: 65561 
  import public final function DeactivateScriptTag( tag : CName);  // flags: 65561 
  import public final function DoGroupHasTag( groupName : CName,  tag : CName) : Bool;  // flags: 65561 
  import public final function IsGroupVisible( groupName : CName) : Bool;  // flags: 65561 
  import public final function ResetGroupToDefaults( groupName : CName);  // flags: 65561 

}
import class CAINpcStyleTwoHandedAxeParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CCommonMapManager extends IGameSystem {

  import public final function InitializeMinimapManager( minimapModule : CR4HudModule);  // flags: 65561 
  import public final function SetHintWaypointParameters( maxRemovalDistance : Float,  minPlacingDistance : Float,  refreshInterval : Float,  pathfindingTolerance : Float,  maxCount : Int32);  // flags: 65561 
  import public final function OnChangedMinimapRadius( radius : Float,  zoom : Float);  // flags: 65561 
  import public final function IsFastTravellingEnabled() : Bool;  // flags: 65561 
  import public final function EnableFastTravelling( enable : Bool);  // flags: 65561 
  import public final function IsEntityMapPinKnown( tag : CName) : Bool;  // flags: 65561 
  import public final function SetEntityMapPinKnown( tag : CName,  optional  set : Bool);  // flags: 65561 
  import public final function IsEntityMapPinDiscovered( tag : CName) : Bool;  // flags: 65561 
  import public final function SetEntityMapPinDiscovered( tag : CName,  optional  set : Bool);  // flags: 65561 
  import public final function IsEntityMapPinDisabled( tag : CName) : Bool;  // flags: 65561 
  import public final function SetEntityMapPinDisabled( tag : CName,  optional  set : Bool);  // flags: 65561 
  import public final function IsQuestType( type : CName) : Bool;  // flags: 65561 
  import public final function ShowKnownEntities( show : Bool);  // flags: 65561 
  import public final function CanShowKnownEntities() : Bool;  // flags: 65561 
  import public final function ShowFocusClues( optional  show : Bool);  // flags: 65561 
  import public final function ShowHintWaypoints( optional  show : Bool);  // flags: 65561 
  import public final function AddQuestLootContainer( container : CEntity);  // flags: 65561 
  import public final function DeleteQuestLootContainer( container : CEntity);  // flags: 65561 
  import public final function CacheMapPins();  // flags: 65561 
  import public final function GetMapPinInstances( worldPath : String) : array<SCommonMapPinInstance>;  // flags: 65561 
  import public final function TogglePathsInfo( optional  toggle : Bool);  // flags: 65561 
  import public final function ToggleQuestAgentsInfo( optional  toggle : Bool);  // flags: 65561 
  import public final function ToggleShopkeepersInfo( optional  toggle : Bool);  // flags: 65561 
  import public final function TogglePinsInfo( optional  flags : Int32);  // flags: 65561 
  import public final function ExportGlobalMapPins();  // flags: 65561 
  import public final function ExportEntityMapPins();  // flags: 65561 
  import public final function GetAreaMapPins() : array<SAreaMapPinInfo>;  // flags: 65561 
  import public final function GetEntityMapPins( worldPath : String) : array<SEntityMapPinInfo>;  // flags: 65561 
  import public final function UseMapPin( pinTag : CName,  onStart : Bool) : Bool;  // flags: 65561 
  import public final function UseInteriorsForQuestMapPins( use : Bool);  // flags: 65561 
  import public final function EnableShopkeeper( tag : CName,  enable : Bool);  // flags: 65561 
  import public final function EnableMapPath( tag : CName,  enable : Bool,  lineWidth : Float,  segmentLength : Float,  color : Color);  // flags: 65561 
  import public final function EnableDynamicMappin( tag : CName,  enable : Bool,  type : CName,  optional  useAgents : Bool);  // flags: 65561 
  import public final function InvalidateStaticMapPin( entityName : CName);  // flags: 65561 
  import public final function ToggleUserMapPin( area : EAreaName,  position : Vector) : Bool;  // flags: 65561 
  import public final function GetUserMapPin( out  area : Int32,  out  mapPinX : Float,  out  mapPinY : Float);  // flags: 65561 
  import public final function GetCurrentArea() : Int32;  // flags: 65561 
  import public final function NotifyPlayerEnteredBorder( interval : Float,  position : Vector,  rotation : EulerAngles) : Int32;  // flags: 65561 
  import public final function NotifyPlayerExitedBorder() : Int32;  // flags: 65561 
  import public final function IsWorldAvailable( area : Int32) : Bool;  // flags: 65561 
  import public final function GetWorldContentTag( area : Int32) : CName;  // flags: 65561 
  import public final function GetWorldPercentCompleted( area : Int32) : Int32;  // flags: 65561 
  import public final function SetPinFilterVisible( pinID : CName,  visible : Bool);  // flags: 65561 
  import public final function GetPinFilterVisible( pinID : CName) : Bool;  // flags: 65561 
  public event function OnMapPinChanged() : Bool;  // flags: 65568 
  public function SetEntityMapPinDiscoveredScript( isFastTravelPoint : Bool,  tag : CName,  optional  set : Bool);  // flags: 65536 
  public function GetMappinType( tag : CName) : CName;  // flags: 65536 
  public function GetMappins( onlyDiscovered : Bool,  onlyEnabled : Bool) : array<SAvailableFastTravelMapPin>;  // flags: 65536 
  public function UpdateHud( mappinTag : CName);  // flags: 65536 
  public function OnGameStarted();  // flags: 65536 
  public function GetCurrentJournalArea() : Int32;  // flags: 65536 
  public function GetCurrentJournalAreaByPosition( position : Vector) : Int32;  // flags: 65536 
  public function GetJournalAreaByPosition( area : Int32,  position : Vector) : Int32;  // flags: 65536 
  public function AddMapPathToMinimap( path : SMapPathInstance);  // flags: 65536 
  public function DeleteMapPathsFromMinimap( ids : array<Int32>);  // flags: 65536 
  public function NotifyPlayerEnteredInterior( areaPos : Vector,  areaYaw : Float,  texture : String);  // flags: 65536 
  public function NotifyPlayerExitedInterior();  // flags: 65536 
  public function NotifyPlayerMountedBoat();  // flags: 65536 
  public function NotifyPlayerDismountedBoat();  // flags: 65536 
  public function GetCustomMapPinDefinition( out  definitions : array<SCustomMapPinDefinition>);  // flags: 65536 
  public function GetKnowableMapPinTypes( out  types : array<CName>);  // flags: 65536 
  public function GetDiscoverableMapPinTypes( out  types : array<CName>);  // flags: 65536 
  public function GetDisableableMapPinTypes( out  regularTypes : array<CName>,  out  disabledTypes : array<CName>);  // flags: 65536 
  public event function OnStartTeleportingPlayerToPlayableArea( position : Vector,  rotation : EulerAngles) : Bool;  // flags: 65568 
  public function GetBorderTeleportPosition() : Vector;  // flags: 65536 
  public function GetBorderTeleportRotation() : EulerAngles;  // flags: 65536 
  public function ShouldDisplayHudUpdateByType( type : CName) : Bool;  // flags: 65536 
  private function GetMinimap2Module() : CR4HudModuleMinimap2;  // flags: 16384 
  public function GetAreaMappinsFileName( out  filePath : String);  // flags: 65536 
  public function GetAreaMappinsData( out  mappins : array<SAreaMapPinInfo>);  // flags: 65536 
  private function FillAreaMapPinInfo( out  mappins : array<SAreaMapPinInfo>,  areaType : EAreaName,  areaPinX : Int32,  areaPinY : Int32,  worldPath : String,  requiredChunk : CName,  localisationName : CName,  localisationDescription : CName);  // flags: 16384 
  public function ForceSettingLoadingScreenVideoForWorld( worldName : String);  // flags: 65536 
  public function PerformLocalFastTravelTeleport( destinationPinTag : CName);  // flags: 65536 
  public function PerformGlobalFastTravelTeleport( destinationArea : Int32,  destinationPinTag : CName);  // flags: 65536 
  public function SetDebugTeleportWaypoint( tag : CName);  // flags: 65536 
  private function DebugTeleport();  // flags: 16384 
  public function GetAreaFromWorldPath( worldPath : String,  optional  noWinterPrologVillage : Bool) : Int32;  // flags: 65536 
  public function GetMapName( areaType : Int32) : String;  // flags: 65536 
  public function GetWorldPathFromAreaType( areaType : Int32) : String;  // flags: 65536 
  public function GetLocalisationNameFromAreaType( areaType : Int32) : CName;  // flags: 65536 
  public function GetLocalisationDescriptionFromAreaType( areaType : Int32) : CName;  // flags: 65536 
  public event function OnManageFastTravelAreas( enable : Bool,  show : Bool,  affectedAreas : array<Int32>) : Bool;  // flags: 65568 
  public event function OnManageFastTravelPoints( enable : Bool,  show : Bool,  affectedFastTravelPoints : array<CName>) : Bool;  // flags: 65568 
  public function ManageFastTravelPoint( enable : Bool,  show : Bool,  tag : CName);  // flags: 65536 
  public function GetFastTravelPoints( onlyDiscovered : Bool,  onlyEnabled : Bool,  optional  ignoreLand : Bool,  optional  ignoreWater : Bool,  optional  ignoreVelenAndPrologueWinter : Bool) : array<SAvailableFastTravelMapPin>;  // flags: 65536 
  public function HasFastTravelPoints( onlyDiscovered : Bool,  onlyEnabled : Bool,  optional  ignoreLand : Bool,  optional  ignoreWater : Bool,  optional  ignoreVelenAndPrologueWinter : Bool) : Bool;  // flags: 65536 
  public function GetKnownableEntityNames() : array<CName>;  // flags: 65536 
  public function GetDiscoverableEntityNames() : array<CName>;  // flags: 65536 
  public function GetLocalFastTravelPointPosition( entityName : CName,  landOnly : Bool,  out  position : Vector,  out  rotation : EulerAngles) : Bool;  // flags: 65536 
  public function GetFastTravelPointPosition( worldPath : String,  entityName : CName,  landOnly : Bool,  out  position : Vector,  out  rotation : EulerAngles) : Bool;  // flags: 65536 
  public function AllowSaving( allow : Bool);  // flags: 65536 
  public function DBG_ShowKnownPins( show : Bool);  // flags: 65536 
  public function DBG_UpdateShownKnownPins();  // flags: 65536 
  public function DBG_ShowPins( show : Bool);  // flags: 65536 
  public function DBG_UpdateShownPins();  // flags: 65536 
  public function DBG_ShowAllFT( show : Bool);  // flags: 65536 
  public function DBG_UpdateShownFT();  // flags: 65536 
  public function DBG_AllowFT( allow : Bool);  // flags: 65536 
  public function DBG_IsAllowedFT() : Bool;  // flags: 65536 

}
import class CAINpcStyleTwoHandedHalberdParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcStyleTwoHandedSpearParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcStylePitchforkParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcWitcherCombatStyleParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CWitcherJournalManager extends CJournalManager {

  import public final function SetTrackedQuest( journalEntry : CJournalBase);  // flags: 65561 
  import public final function GetTrackedQuest() : CJournalQuest;  // flags: 65561 
  import public final function GetHighlightedQuest() : CJournalQuest;  // flags: 65561 
  import public final function GetHighlightedObjective() : CJournalQuestObjective;  // flags: 65561 
  import public final function SetHighlightedObjective( journalEntry : CJournalBase) : Bool;  // flags: 65561 
  import public final function SetPrevNextHighlightedObjective( optional  next : Bool) : Bool;  // flags: 65561 
  import public final function GetQuestHasMonsterKnown( journalEntry : CJournalBase) : Bool;  // flags: 65561 
  import public final function SetQuestHasMonsterKnown( journalEntry : CJournalBase,  isKnown : Bool);  // flags: 65561 
  import public final function GetEntryHasAdvancedInfo( journalEntry : CJournalBase) : Bool;  // flags: 65561 
  import public final function SetEntryHasAdvancedInfo( journalEntry : CJournalBase,  isKnown : Bool);  // flags: 65561 
  import public final function GetQuestObjectiveCount( questGuid : CGUID) : Int32;  // flags: 65561 
  import public final function SetQuestObjectiveCount( questGuid : CGUID,  newCount : Int32);  // flags: 65561 
  import public final function GetCreaturesWithHuntingQuestClue( categoryName : CName,  clueIndex : Int32,  out  creatures : array<CJournalCreature>);  // flags: 65561 
  import public final function GetNumberOfCluesFoundForQuest( huntingQuest : CJournalQuest) : Int32;  // flags: 65561 
  import public final function GetAllCluesFoundForQuest( huntingQuest : CJournalQuest,  out  creatures : array<CJournalCreatureHuntingClue>);  // flags: 65561 
  import public final function SetHuntingClueFoundForQuest( huntingQuest : CJournalQuest,  huntingClue : CJournalCreatureHuntingClue);  // flags: 65561 
  import public final function GetTrackedQuestObjectivesData( out  objectives : array<SJournalQuestObjectiveData>);  // flags: 65561 
  import public final function GetCreatureParams( entityFilename : String,  out  params : SJournalCreatureParams) : Bool;  // flags: 65561 
  import public final function ToggleDebugInfo( debugInfo : Int32);  // flags: 65561 
  import public final function ShowLoadingScreenVideo( debugVideo : Bool);  // flags: 65561 
  import public final function GetQuestRewards( journalQuest : CJournalQuest) : array<CName>;  // flags: 65561 
  import public final function GetRegularQuestCount() : Int32;  // flags: 65561 
  import public final function GetMonsterHuntQuestCount() : Int32;  // flags: 65561 
  import public final function GetTreasureHuntQuestCount() : Int32;  // flags: 65561 
  import public final function GetQuestProgress() : Int32;  // flags: 65561 
  import public final function GetJournalAreasWithQuests() : array<Int32>;  // flags: 65561 
  import public final function ForceSettingLoadingScreenVideoForWorld( area : Int32);  // flags: 65561 
  public function GetCurrentlyBuffedCreature() : CJournalCreature;  // flags: 65536 
  public function GetCurrentlyBuffedCreatureName() : CName;  // flags: 65536 

}
import class CAINpcEredinCombatStyleParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcCaranthirCombatStyleParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcImlerithCombatStyleParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CJournalQuestGroup extends CJournalBase {
  import var title : LocalizedString; // 4001

  import public final function GetTitleStringId() : Int32;  // flags: 65561 

}
import class CJournalQuest extends CJournalContainer {
  import var type : eQuestType; // 4001
  import var world : Uint32; // 4001
  import var huntingQuestPath : CJournalPath; // 4001
  import var title : LocalizedString; // 4001
  import var questPhase : soft:CQuestPhase; // 4001

  import public final function GetTitleStringId() : Int32;  // flags: 65561 
  import public final function GetType() : eQuestType;  // flags: 65561 
  import public final function GetWorld() : Int32;  // flags: 65561 
  import public final function GetHuntingQuestCreatureTag() : CName;  // flags: 65561 

}
import class CJournalQuestDescriptionEntry extends CJournalContainerEntry {
  import var description : LocalizedString; // 4001
  import var active : Bool; // 4009

  import public final function GetDescriptionStringId() : Int32;  // flags: 65561 

}
import class CJournalQuestObjective extends CJournalContainer {
  import var title : LocalizedString; // 4001
  import var image : String; // 4001
  import var world : Uint32; // 4001
  import var counterType : eQuestObjectiveType; // 4001
  import var count : Uint32; // 4001
  import var bookShortcut : CName; // 4001
  import var itemShortcut : CName; // 4001
  import var recipeShortcut : CName; // 4001
  import var monsterShortcut : CJournalPath; // 4001

  import public final function GetTitleStringId() : Int32;  // flags: 65561 
  function GetTitle();  // flags: 1 
  import public final function GetWorld() : Int32;  // flags: 65561 
  import public final function GetCount() : Int32;  // flags: 65561 
  import public final function GetCounterType() : eQuestObjectiveType;  // flags: 65561 
  import public final function GetBookShortcut() : CName;  // flags: 65561 
  import public final function GetItemShortcut() : CName;  // flags: 65561 
  import public final function GetRecipeShortcut() : CName;  // flags: 65561 
  import public final function GetMonsterShortcut() : CJournalBase;  // flags: 65561 
  import public final function GetParentQuest() : CJournalQuest;  // flags: 65561 

}
import class CJournalQuestMapPin extends CJournalContainerEntry {
  import var radius : Float; // 4001
  import var mapPinID : CName; // 4001
  import var type : EJournalMapPinType; // 4001
  import var enabledAtStartup : Bool; // 4001

  import public final function GetMapPinID() : CName;  // flags: 65561 
  import public final function GetRadius() : Float;  // flags: 65561 

}
import class CAINpcImlerithSecondStageCombatStyleParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CJournalCharacter extends CJournalContainer {
  import var name : LocalizedString; // 4001
  import var image : String; // 4001
  import var importance : ECharacterImportance; // 4001
  import var entityTemplate : soft:CEntityTemplate; // 4001
  import var active : Bool; // 4009

  import public final function GetNameStringId() : Int32;  // flags: 65561 
  import public final function GetImagePath() : String;  // flags: 65561 
  import public final function GetCharacterImportance() : ECharacterImportance;  // flags: 65561 
  import public final function GetEntityTemplateFilename() : String;  // flags: 65561 

}
import class CJournalCharacterDescription extends CJournalContainerEntry {
  import var description : LocalizedString; // 4001
  import var action : EJournalVisibilityAction; // 4001
  import var active : Bool; // 4009

  import public final function GetDescriptionStringId() : Int32;  // flags: 65561 

}
import class W3CraftsmanComponent extends W3MerchantComponent {

  public function GetCraftsmanLevel( type : ECraftsmanType) : ECraftsmanLevel;  // flags: 65536 
  public function IsCraftsmanType( type : ECraftsmanType) : Bool;  // flags: 65536 
  public function CalculateCostOfCrafting( basePrice : Int32) : Int32;  // flags: 65536 
  public event function OnComponentAttachFinished() : Bool;  // flags: 65568 
  public function SetCrafterLevelTag( type : ECraftsmanType);  // flags: 65536 

}
import class CJournalGlossary extends CJournalContainer {
  import var title : LocalizedString; // 4001
  import var image : String; // 4001
  import var active : Bool; // 4009

  import public final function GetTitleStringId() : Int32;  // flags: 65561 
  import public final function GetImagePath() : String;  // flags: 65561 

}
import class CJournalGlossaryDescription extends CJournalContainerEntry {
  import var description : LocalizedString; // 4001
  import var active : Bool; // 4009

  import public final function GetDescriptionStringId() : Int32;  // flags: 65561 

}
import class CAINpcCiriCombatStyleParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CJournalTutorialGroup extends CJournalBase {
  import var name : LocalizedString; // 4001
  import var image : String; // 4001

  import public final function GetNameStringId() : Int32;  // flags: 65561 
  import public final function GetImage() : String;  // flags: 65561 

}
import class CAINpcStyleTwoHandedSwordParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CJournalTutorial extends CJournalChildBase {
  import var name : LocalizedString; // 4001
  import var image : String; // 4001
  import var video : String; // 4001
  import var description : LocalizedString; // 4001
  import var active : Bool; // 4009

  import public final function GetDescriptionStringId() : Int32;  // flags: 65561 
  import public final function GetNameStringId() : Int32;  // flags: 65561 
  import public final function GetImagePath() : String;  // flags: 65561 
  import public final function GetVideoPath() : String;  // flags: 65561 

}
import class CAINpcVesemirTutorialCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAINpcStyleVesemirTutorialParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAINpcBase extends CAIBaseTree {

  public function Init();  // flags: 65536 

}
import class CJournalCreatureGroup extends CJournalBase {
  import var name : LocalizedString; // 4001
  import var image : String; // 4001

  import public final function GetNameStringId() : Int32;  // flags: 65561 
  import public final function GetImage() : String;  // flags: 65561 

}
import class CAINpcRiderBase extends CAIBaseTree {

  public function Init();  // flags: 65536 

}
import class CJournalCreature extends CJournalContainer {
  import var name : LocalizedString; // 4001
  import var image : String; // 4001
  import var entityTemplate : soft:CEntityTemplate; // 4001
  import var itemsUsedAgainstCreature : array<CName>; // 4001
  import var active : Bool; // 4009

  import public final function GetNameStringId() : Int32;  // flags: 65561 
  import public final function GetImage() : String;  // flags: 65561 
  import public final function GetEntityTemplateFilename() : String;  // flags: 65561 
  import public final function GetItemsUsedAgainstCreature() : array<CName>;  // flags: 65561 

}
import class CAINpcIdle extends CAIIdleTree {

  public function Init();  // flags: 65536 

}
import class CJournalCreatureDescriptionEntry extends CJournalContainerEntry {
  import var description : LocalizedString; // 4001
  import var active : Bool; // 4009

  import public final function GetDescriptionStringId() : Int32;  // flags: 65561 

}
import class CAINpcActiveIdle extends CAIIdleTree {

  public function Init();  // flags: 65536 

}
import class CJournalCreatureVitalSpotEntry extends CJournalContainerEntry {
  import var title : LocalizedString; // 4001
  import var description : LocalizedString; // 4001
  import var active : Bool; // 4009

  import public final function GetTitleStringId() : Int32;  // flags: 65561 
  import public final function GetDescriptionStringId() : Int32;  // flags: 65561 
  import public final function GetCreatureEntry() : CJournalCreature;  // flags: 65561 

}
import class CAIWanderRandom extends CAIWanderTree {

  public function Init();  // flags: 65536 

}
import class W3TutorialManagerUIHandlerStateCraftingSet extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnCraftedSetItem() : Bool;  // flags: 65568 

}
import class CJournalStoryBookPageDescription extends CJournalContainerEntry {
  import var videoFilename : String; // 4001
  import var description : LocalizedString; // 4001
  import var isFinal : Bool; // 4001
  import var active : Bool; // 4009

  import public final function GetVideoFilename() : String;  // flags: 65561 
  import public final function GetDescriptionStringId() : Int32;  // flags: 65561 

}
import class CJournalStoryBookPage extends CJournalContainer {
  import var title : LocalizedString; // 4001
  import var world : Uint32; // 4001
  import var active : Bool; // 4009

  import public final function GetTitleStringId() : Int32;  // flags: 65561 

}
import class CAIDynamicWander extends CAIWanderTree {

  public function OnPostLoad() : Bool;  // flags: 65536 

}
import class CJournalStoryBookChapter extends CJournalBase {
  import var title : LocalizedString; // 4001
  import var image : String; // 4001
  import var active : Bool; // 4009

  import public final function GetTitleStringId() : Int32;  // flags: 65561 
  import public final function GetImage() : String;  // flags: 65561 

}
import class CJournalPlaceGroup extends CJournalBase {
  import var name : LocalizedString; // 4001
  import var image : String; // 4001

  import public final function GetNameStringId() : Int32;  // flags: 65561 
  import public final function GetImage() : String;  // flags: 65561 

}
import class CJournalPlace extends CJournalContainer {
  import var name : LocalizedString; // 4001
  import var image : String; // 4001
  import var active : Bool; // 4009

  import public final function GetNameStringId() : Int32;  // flags: 65561 
  import public final function GetImage() : String;  // flags: 65561 

}
import class CAINpcBoxCarry extends CAINpcIdle {

  public function Init();  // flags: 65536 

}
import class CJournalPlaceDescription extends CJournalContainerEntry {
  import var description : LocalizedString; // 4001
  import var active : Bool; // 4009

  import public final function GetDescriptionStringId() : Int32;  // flags: 65561 

}
import class CR4JournalPlaceEntity extends CGameplayEntity {
  import var placeEntry : CJournalPath; // 4001

  import public function GetJournalPlaceEntry() : CJournalBase;  // flags: 65545 

}
import class CAIWildHuntTwoHandedSwordDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedSwordCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CR4GwintManager extends IGameSystem {

  import public final function GetCardDefs() : array<SCardDefinition>;  // flags: 65561 
  import public final function GetLeaderDefs() : array<SCardDefinition>;  // flags: 65561 
  import public final function GetFactionDeck( faction : eGwintFaction,  out  deck : SDeckDefinition) : Bool;  // flags: 65561 
  import public final function SetFactionDeck( faction : eGwintFaction,  deck : SDeckDefinition);  // flags: 65561 
  import public final function GetPlayerCollection() : array<CollectionCard>;  // flags: 65561 
  import public final function GetPlayerLeaderCollection() : array<CollectionCard>;  // flags: 65561 
  import public final function GetSelectedPlayerDeck() : eGwintFaction;  // flags: 65561 
  import public final function SetSelectedPlayerDeck( index : eGwintFaction);  // flags: 65561 
  import public final function UnlockDeck( index : eGwintFaction);  // flags: 65561 
  import public final function IsDeckUnlocked( index : eGwintFaction) : Bool;  // flags: 65561 
  import public final function AddCardToCollection( cardIndex : Int32);  // flags: 65561 
  import public final function RemoveCardFromCollection( cardIndex : Int32);  // flags: 65561 
  import public final function AddCardToDeck( faction : eGwintFaction,  cardIndex : Int32);  // flags: 65561 
  import public final function RemoveCardFromDeck( faction : eGwintFaction,  cardIndex : Int32);  // flags: 65561 
  import public final function GetHasDoneTutorial() : Bool;  // flags: 65561 
  import public final function SetHasDoneTutorial( value : Bool);  // flags: 65561 
  import public final function GetHasDoneDeckTutorial() : Bool;  // flags: 65561 
  import public final function SetHasDoneDeckTutorial( value : Bool);  // flags: 65561 
  public function HasLootedCard() : Bool;  // flags: 65536 
  public event function OnGwintSetupNewgame() : Bool;  // flags: 65568 
  public function GetTutorialPlayerDeck() : SDeckDefinition;  // flags: 65536 
  protected function setupEnemyDecks();  // flags: 32768 
  public function setDoubleAIEnabled( value : Bool);  // flags: 65536 
  public function getDoubleAIEnabled() : Bool;  // flags: 65536 
  public function GetCurrentPlayerDeck() : SDeckDefinition;  // flags: 65536 
  public function HasUnlockedDeck() : Bool;  // flags: 65536 
  public function SetEnemyDeckIndex( deckIndex : Int32);  // flags: 65536 
  public function SetEnemyDeckByName( deckname : CName);  // flags: 65536 
  public function GetCardDefinition( cardIndex : Int32) : SCardDefinition;  // flags: 65536 
  public function GetCurrentAIDeck() : SDeckDefinition;  // flags: 65536 
  private function SetupAIDeckDefinitions();  // flags: 16384 
  private function SetupAIDeckDefinitions1();  // flags: 16384 
  private function SetupAIDeckDefinitions2();  // flags: 16384 
  private function SetupAIDeckDefinitions3();  // flags: 16384 
  private function SetupAIDeckDefinitions4();  // flags: 16384 
  private function SetupAIDeckDefinitions5();  // flags: 16384 
  private function SetupAIDeckDefinitions6();  // flags: 16384 
  private function SetupAIDeckDefinitions7();  // flags: 16384 
  private function SetupAIDeckDefinitionsNK();  // flags: 16384 
  private function SetupAIDeckDefinitionsNilf();  // flags: 16384 
  private function SetupAIDeckDefinitionsScoia();  // flags: 16384 
  private function SetupAIDeckDefinitionsNML();  // flags: 16384 
  private function SetupAIDeckDefinitionsPrologue();  // flags: 16384 
  private function SetupAIDeckDefinitionsTournament1();  // flags: 16384 
  private function SetupAIDeckDefinitionsTournament2();  // flags: 16384 
  public function GwentLeadersNametoInt( val : CName) : Int32;  // flags: 65536 
  public function GwentNrkdNameToInt( val : CName) : Int32;  // flags: 65536 
  public function GwentNlfgNameToInt( val : CName) : Int32;  // flags: 65536 
  public function GwentSctlNameToInt( val : CName) : Int32;  // flags: 65536 
  public function GwentMstrNameToInt( val : CName) : Int32;  // flags: 65536 
  public function GwentNeutralNameToInt( val : CName) : Int32;  // flags: 65536 
  public function GwentSpecialNameToInt( val : CName) : Int32;  // flags: 65536 

}
import class CVitalSpot extends CObject {
  import var editorLabel : CName; // 4003
  import var entitySlotName : CName; // 4001
  import var normal : Vector; // 4001
  import var cutDirection : Vector; // 4001
  import var vitalSpotEntry : CJournalPath; // 4001
  import var hitReactionAnimation : CName; // 4001
  import var focusPointsCost : Float; // 4001
  import var destroyAfterExecution : Bool; // 4001
  import var gameplayEffects : array<IGameplayEffectExecutor>; // 4005
  import var enableConditions : SVitalSpotEnableConditions; // 4005
  import var visualEffect : CName; // 4001
  import var soundOnFocus : String; // 4001
  import var soundOffFocus : String; // 4001

  function GetJournalEntry();  // flags: 1 

}
import class CAIWildHuntTwoHandedSwordCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAIWildHuntTwoHandedSwordCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CR4InteriorAreaComponent extends CTriggerAreaComponent {
  import var entranceTag : CName; // 4001
  import var texture : String; // 4001

  public event function OnPlayerEntered( entered : Bool) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class CAIWildHuntStyleTwoHandedSwordParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CR4EffectComponent extends CComponent {
  import var effectName : CName; // 4000
  import var effectTarget : EntityHandle; // 4000
  import var targetBone : CName; // 4000

  import public final function PlayEffect( effectName : CName,  target : CEntity,  targetBone : CName);  // flags: 65561 
  import public final function StopEffect();  // flags: 65561 

}
import class CCombatDataComponent extends CComponent {

  import public final function GetAttackersCount() : Int32;  // flags: 65561 
  import public final function GetTicketSourceOwners( out  actors : array<CActor>,  ticketName : CName);  // flags: 65561 
  import public final function TicketSourceOverrideRequest( ticketName : CName,  ticketsCountMod : Int32,  minimalImportanceMod : Float) : Int32;  // flags: 65561 
  import public final function TicketSourceClearRequest( ticketName : CName,  requestId : Int32) : Bool;  // flags: 65561 
  import public final function ForceTicketImmediateImportanceUpdate( ticketName : CName);  // flags: 65561 
  import public final function HasAttackersInRange( range : Float) : Bool;  // flags: 65561 

}
import class CAIWildHuntTwoHandedSwordAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class W3DamageManagerProcessor extends CObject {

  public function ProcessAction( act : W3DamageAction);  // flags: 65536 
  private final function InitializeActionVars( act : W3DamageAction);  // flags: 16400 
  private function ProcessActionQuest( act : W3DamageAction);  // flags: 16384 
  private function PostProcessActionTutorial();  // flags: 16384 
  private function ProcessActionDamage() : Bool;  // flags: 16384 
  private function ProcessInstantKill();  // flags: 16384 
  private function ProcessOnBeforeHitChecks();  // flags: 16384 
  private function ProcessCriticalHitCheck();  // flags: 16384 
  private function LogBeginning();  // flags: 16384 
  private function ProcessDamageIncrease( out  dmgInfos : array<SRawDamage>);  // flags: 16384 
  private function ProcessActionReturnedDamage();  // flags: 16384 
  private function ProcessActionLeshenMutagenDamage();  // flags: 16384 
  private function ProcessSilverStudsReturnedDamage();  // flags: 16384 
  private function ProcessActionBlackBloodReturnedDamage();  // flags: 16384 
  private function ProcessActionThornDamage();  // flags: 16384 
  private function GetAttackersPowerMod() : SAbilityAttributeValue;  // flags: 16384 
  private function GetDamageResists( dmgType : CName,  out  resistPts : Float,  out  resistPerc : Float);  // flags: 16384 
  private function CalculateDamage( dmgInfo : SRawDamage,  powerMod : SAbilityAttributeValue) : Float;  // flags: 16384 
  private function ProcessActionDamage_DealDamage();  // flags: 16384 
  private function ProcessActionDamage_ReduceDurability();  // flags: 16384 
  private function ProcessActionReaction( wasFrozen : Bool,  wasAlive : Bool);  // flags: 16384 
  private function CanDismember( wasFrozen : Bool,  out  dismemberExplosion : Bool,  out  weaponName : CName) : Bool;  // flags: 16384 
  private function CanPerformFinisher( actorVictim : CActor) : Bool;  // flags: 16384 
  private function CanPerformFinisherOnAliveTarget( actorVictim : CActor) : Bool;  // flags: 16384 
  private function ProcessActionBuffs() : Bool;  // flags: 16384 
  private function ApplyQuenBuffChanges();  // flags: 16384 
  private function ProcessDismemberment( wasFrozen : Bool,  dismemberExplosion : Bool);  // flags: 16384 
  private function ProcessFrostDismemberment();  // flags: 16384 
  private function ProcessDismembermentDeathAnim( nearestWound : CName);  // flags: 16384 
  private function StopVO( actor : CActor);  // flags: 16384 
  private function DropEquipmentFromDismember( nearestWound : CName,  optional  dropLeft : Bool,  optional  dropRight : Bool);  // flags: 16384 
  public function ChangeHeldItemAppearance() : Bool;  // flags: 65536 
  private function GetOilProtectionAgainstMonster( dmgType : CName,  out  resist : Float,  out  reduct : Float);  // flags: 16384 
  private function ProcessToxicCloudDismemberExplosion( damages : array<SRawDamage>);  // flags: 16384 
  private final function ProcessSparksFromNoDamage();  // flags: 16400 

}
import class CAIWildHuntTwoHandedAxeDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class IGameplayEffectExecutor extends CObject {

  public function Execute( executor : CGameplayEntity,  target : CActor,  optional  source : String) : Bool;  // flags: 65536 
  public function GetEffectIconPath() : String;  // flags: 65536 
  public function GetEffectNameLocalisationKey() : String;  // flags: 65536 
  public function GetEffectDescriptionLocalisationKey() : String;  // flags: 65536 

}
import class CAIWildHuntTwoHandedAxeCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedAxeCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAIWildHuntTwoHandedAxeCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntStyleTwoHandedAxeParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedPolearmAttackActionTree extends CAIAttackActionTree {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedHalberdDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedHalberdCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedHalberdCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAIWildHuntTwoHandedHalberdCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntStyleTwoHandedHalberdParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedHammerDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedHammerCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedHammerCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAIWildHuntTwoHandedHammerCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntStyleTwoHandedHammerParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedSpearDefaults extends CAINpcDefaults {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedSpearCombat extends CAINpcCombat {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntTwoHandedSpearCombatParams extends CAINpcCombatParams {

  private function SetupCombatStyles();  // flags: 16384 

}
import class CAIWildHuntTwoHandedSpearCombatStyle extends CAINpcCombatStyle {

  public function Init();  // flags: 65536 

}
import class CAIWildHuntStyleTwoHandedSpearParams extends CAINpcCombatStyleParams {

  public function Init();  // flags: 65536 

}
import class BTCondNumberOfSummonedCreaturesAlive extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 

}
import class W3ActorLatentActionFollowPlayer extends IPresetActorLatentAction {

  public function ConvertToActionTree( parentObj : IScriptable) : IAIActionTree;  // flags: 65536 

}
import class CBTTaskPlayAnimationEventDecorator extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function Roll( chance : Float) : Bool;  // flags: 65536 
  public function GetStats();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class W3QuenEntity extends W3SignEntity {

  public function GetSignType() : ESignType;  // flags: 65536 
  public function SetBlockedAllDamage( b : Bool);  // flags: 65536 
  public function GetBlockedAllDamage() : Bool;  // flags: 65536 
  public function Init( inOwner : W3SignOwner,  prevInstance : W3SignEntity,  optional  skipCastingAnimation : Bool) : Bool;  // flags: 65536 
  public event function OnTargetHit( out  damageData : W3DamageAction) : Bool;  // flags: 65568 
  protected function GetSignStats();  // flags: 32768 
  public final function AddBuffImmunities( useDoTs : Bool);  // flags: 65552 
  public final function RemoveBuffImmunities( useDoTs : Bool);  // flags: 65552 
  public event function OnStarted() : Bool;  // flags: 65568 
  public function Impulse();  // flags: 65536 
  public final function IsAnyQuenActive() : Bool;  // flags: 65552 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 
  public final function PlayHitEffect( fxName : CName,  rot : EulerAngles,  optional  isDoT : Bool);  // flags: 65552 
  public function RemoveDoTFX( dt : Float,  id : Int32);  // flags: 66560 
  public final function RemoveHitDoTEntities();  // flags: 65552 
  public final function GetShieldHealth() : Float;  // flags: 65552 
  public final function GetShieldRemainingDuration() : Float;  // flags: 65552 
  public final function SetDataFromSave( health : Float,  duration : Float);  // flags: 65552 
  public function Expire( deltaTime : Float,  id : Int32);  // flags: 66560 
  public final function ForceFinishQuen();  // flags: 65552 

}
import class W3Mutagen26_Effect extends W3Mutagen_Effect {

  public final function GetReturnedDamage( out  points : Float,  out  percents : Float);  // flags: 65552 

}
import class CBTTaskSelectTargetFromList extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function SelectTarget() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CSpawnTreeInitializerRiderIdleAI extends ISpawnTreeInitializerAI {

  public function Init();  // flags: 65536 

}
import class W3Potion_BlackBlood extends W3Effect_Aura {

  public function GetReturnDamageValue() : SAbilityAttributeValue;  // flags: 65536 
  protected function ApplySpawnsOn( victimGE : CGameplayEntity);  // flags: 32768 

}
import class CSpawnTreeInitializerRiderStartingBehavior extends CSpawnTreeInitializerBaseStartingBehavior {

  public function Init();  // flags: 65536 

}
import class CBTTaskAnimalSetIsScared extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTCondAnimalIsScared extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CSpawnTreeInitializerIdleFlightAI extends ISpawnTreeInitializerAI {

  public function Init();  // flags: 65536 

}
import class CBTTask3StateAttack extends CBTTaskAttack {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public latent function Loop() : Int32;  // flags: 65600 
  public function ChooseAnim();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTask3StateCharge extends CBTTask3StateAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Loop() : Int32;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class W3BoltProjectile extends W3ArrowProjectile {

  public function InitializeCrossbow( ownr : CActor,  boltId : SItemUniqueId,  crossId : SItemUniqueId);  // flags: 65536 
  public event function OnProjectileInit() : Bool;  // flags: 65568 
  private function InitCollisionGroups();  // flags: 16384 
  public function DismembersOnKill() : Bool;  // flags: 65536 
  protected function ProcessDamageAction( victim : CGameplayEntity,  pos : Vector,  boneName : CName);  // flags: 32768 
  public event function OnProcessThrowEvent( animEventName : CName) : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public function SetVisibility( flag : Bool);  // flags: 65536 
  private function SetVisibilityTimer( dt : Float,  id : Int32);  // flags: 17408 
  private function Visibility() : Bool;  // flags: 16384 
  public function ThrowProjectile( targetPosIn : Vector);  // flags: 65536 
  public function ReleaseProjectiles( time : Float,  id : Int32);  // flags: 66560 
  public function ReleaseProjectiles2( time : Float,  id : Int32);  // flags: 66560 

}
import class CBehTreeCombatTargetSelectionTask extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function EvaluatePotentialTarget( target : CActor) : Float;  // flags: 65536 
  public function FindTarget() : Bool;  // flags: 65536 
  public function IsTargetInRange() : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CVolumePathManager extends IGameSystem {

  import public function GetPath( start : Vector,  end : Vector,  out  resultPath : array<Vector>,  optional  maxHeight : Float) : Bool;  // flags: 65545 
  import public function GetPointAlongPath( start : Vector,  end : Vector,  distAlongPath : Float,  optional  maxHeight : Float) : Vector;  // flags: 65545 
  import public function IsPathfindingNeeded( start : Vector,  end : Vector) : Bool;  // flags: 65545 

}
import class CBTTaskDodge extends CBTTaskPlayAnimationEventDecorator {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function Dodge() : Bool;  // flags: 65536 
  public function CheckDistance() : Bool;  // flags: 65536 
  public function GetDodgeStats();  // flags: 65536 
  public function ChooseAndCheckDodge() : Bool;  // flags: 65536 
  public function CheckNavMesh() : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class W3ElevatorInteractive extends W3Elevator {

  public final function RegisterSwitch( elevatorSwitch : W3ElevatorSwitch);  // flags: 65552 
  public final function DisableSwitches();  // flags: 65552 
  public final function EnableOrDisableSwitches( onTop : Bool);  // flags: 65552 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public final function OnEndMovement();  // flags: 65552 
  public final function OnStartMovement();  // flags: 65552 
  public function CheckInitialVariables();  // flags: 65536 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnPhantomComponentCollision( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 

}
import class CBTTaskCollisionAttack extends CBTTaskAttack {

  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function NewCurrentAttackData( attackData : CPreAttackEventData);  // flags: 66048 

}
import class W3ElevatorSwitch extends W3InteractionSwitch {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public final function SetSwitch( elevator : W3ElevatorInteractive);  // flags: 65552 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnSyncAnimEnd() : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public final function SetICEnabled( enabled : Bool);  // flags: 65552 

}
import class CBTTaskMagicAttack extends CBTTaskCollisionAttack {

  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function PerformMagicAttack();  // flags: 66048 

}
import class W3ElevatorMechanism extends CEntity {

  public function SetRotationSpeed( linearSpeed : Float);  // flags: 65536 
  public function StartWorking( forward : Bool);  // flags: 65536 
  public function TimerMechanismWorking( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function StopWorking();  // flags: 65536 

}
import class CBTTaskPerformParry extends CBTTaskPlayAnimationEventDecorator {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  private function GetStats();  // flags: 16384 
  private function TryToParry( optional  counter : Bool) : Bool;  // flags: 16384 
  public function AdditiveParry( optional  force : Bool) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function ShouldCounter( isHeavy : Bool) : Bool;  // flags: 65536 
  public function InitializeCombatDataStorage();  // flags: 65536 

}
import class CBTTaskAttackDef extends CBTTaskPlayAnimationEventDecoratorDef {

  public function OnSpawn( task : IBehTreeTask);  // flags: 65536 

}
import class CHorseRiderSharedParams extends CObject {
  import var rider : CActor; // 6000
  import var horse : CActor; // 6000
  import var mountStatus : EVehicleMountStatus; // 6000
  import var boat : EntityHandle; // 6000
  import var vehicleSlot : EVehicleSlot; // 6000

  public function GetHorse() : CActor;  // flags: 65536 

}
import class CBTTaskReaction extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function checkDistance() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function ChooseAndCheckDodge() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CAIStorageRiderData extends CObject {
  import var sharedParams : CHorseRiderSharedParams; // 6000
  import var ridingManagerMountError : Bool; // 6000
  import var ridingManagerCurrentTask : ERidingManagerTask; // 6000
  import var horseScriptedActionTree : IAIActionTree; // 6000
  import var ridingManagerDismountType : EDismountType; // 6000
  import var ridingManagerInstantMount : Bool; // 6000

  import public function PairWithTaggedHorse( actor : CActor,  preferedHorseTag : CName,  range : Float) : Bool;  // flags: 65545 
  import public function OnInstantDismount( riderActor : CActor);  // flags: 65545 
  public function GetRidingManagerCurrentTask() : ERidingManagerTask;  // flags: 65536 

}
import class CBehTreeTaskSheathWeapons extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  private function ShouldProcessItems();  // flags: 16384 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 

}
import class CBehTreeTaskConditionalSheathWeapons extends CBehTreeTaskSheathWeapons {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function DelayedActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskShoot extends CBTTaskPlayAnimationEventDecorator {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function ShootProjectile();  // flags: 65536 

}
import class CBTTaskSpawnEntityAttack extends CBTTaskAttack {

  public function Initialize();  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function SpawnEntity();  // flags: 65536 

}
import class CBTTaskSpawnMultipleEntitiesAttack extends CBTTaskSpawnEntityAttack {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function SpawnEntity();  // flags: 65536 
  public latent function LatentSpawnEntity();  // flags: 65600 
  public function CreateEntity( _SpawnPos : Vector,  _Rotation : EulerAngles) : CEntity;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskSummonCreatures extends CBTTaskAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public latent function SummonCreatures() : Bool;  // flags: 65600 
  public function NavTest( _PosToTest : Vector) : Bool;  // flags: 65536 
  public function OnMinionAttached( minionEntity : CEntity);  // flags: 65536 
  public function MinionNumberCheck() : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskPlaySyncedAnimation extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnCompletion( success : Bool);  // flags: 65536 
  public function OnListenedGameplayEvent( gameEventName : CName) : Bool;  // flags: 65536 
  public function OnGameplayEvent( gameEventName : CName) : Bool;  // flags: 65536 

}
import class ITicketAlgorithmScript extends IScriptable {
  import var overrideTicketsCount : Int32; // 6008

  import public final function GetActor() : CActor;  // flags: 65561 
  import public final function GetNPC() : CNewNPC;  // flags: 65561 
  import public final function GetLocalTime() : Float;  // flags: 65561 
  import public final function GetActionTarget() : CNode;  // flags: 65561 
  import public final function GetCombatTarget() : CActor;  // flags: 65561 
  import public final function GetTimeSinceMyAcquisition() : Float;  // flags: 65561 
  import public final function GetTimeSinceAnyAcquisition() : Float;  // flags: 65561 
  import public final function IsActive() : Bool;  // flags: 65561 
  import public final function HasTicket() : Bool;  // flags: 65561 
  public function CalculateTicketImportance() : Float;  // flags: 65536 

}
import class W3TrapProjectileArea extends W3Trap {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  private function GeneratePositionGrid();  // flags: 16384 
  private function ShufflePositionArray();  // flags: 16384 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function Activate( optional  _Target : CNode);  // flags: 65536 
  private function ShouldExcludeEntity( _Entity : CNode) : Bool;  // flags: 16384 
  private function Update( _dT : Float,  id : Int32);  // flags: 17408 
  private function Shoot() : Bool;  // flags: 16384 
  private function MagnetLandingPosition( out  _Position : Vector);  // flags: 16384 
  private function PickRandomShootPosition() : Vector;  // flags: 16384 
  private function PosCloseToPoint( _PosToFilter : array<Vector>,  _Center : Vector,  _Distance : Float) : array<Vector>;  // flags: 16384 
  private function PosNotForbidden( _PosToFilter : array<Vector>) : array<Vector>;  // flags: 16384 

}
import class CTicketsDefaultConfiguration extends CObject {
  import var tickets : array<CTicketSourceConfiguration>; // 4001

  import public function SetupTicketSource( ticketName : CName,  ticketPoolSize : Int32,  minimalImportance : Float);  // flags: 65545 
  private function Init();  // flags: 16384 

}
import class CBehTreeTaskCriticalState extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnListenedGameplayEvent( gameEventName : CName) : Bool;  // flags: 65536 
  public function ShouldBeScaredOnOverlay() : Bool;  // flags: 65536 

}
import class W3TrapProjectileArea_CreateEntityHelper extends CCreateEntityHelper {

  public event function OnEntityCreated( entity : CEntity) : Bool;  // flags: 65568 

}
import class CFlyingCrittersLairEntityScript extends CFlyingCrittersLairEntity {

  import public function GetPoiCountByType( poiType : CName) : Int32;  // flags: 65545 
  import public function GetSpawnPointArray( out  spawnPointArray : array<CName>);  // flags: 65545 
  public function RequestGroupStateChange( groupState : CName,  optional  affectAllGroups : Bool);  // flags: 65536 
  public function RequestGroupStateChange_ByGroupId( groupId : CFlyingGroupId,  groupState : CName);  // flags: 65536 
  public function RequestCreateGroup( boidCount : Int32,  spawnPOI : CName);  // flags: 65536 
  public function RequestAllGroupsInstantDespawn();  // flags: 65536 
  public function SetBirdMaster( birdMaster : CGameplayEntity);  // flags: 65536 
  public function SignalArrivalAtNode( groupState : CName,  targetNode : CNode,  groupStateSetOnArrival : CName,  groupID : CFlyingGroupId,  optional  delay : Float,  optional  factID : String,  optional  factValue : Int32);  // flags: 65536 
  public function OnBoidPointOfInterestReached( boidCount : Int32,  entity : CEntity,  deltaTime : Float);  // flags: 65536 
  public function GroupIdToGroupIndex( scriptInput : CFlyingSwarmScriptInput,  groupId : CFlyingGroupId) : Int32;  // flags: 65536 
  public function FirstActivation( scriptInput : CFlyingSwarmScriptInput,  deltaTime : Float);  // flags: 65536 
  public function OnActivated( scriptInput : CFlyingSwarmScriptInput,  deltaTime : Float);  // flags: 65536 
  public function OnDeactivated( scriptInput : CFlyingSwarmScriptInput,  deltaTime : Float);  // flags: 65536 
  public function OnTick( scriptInput : CFlyingSwarmScriptInput,  active : Bool,  deltaTime : Float);  // flags: 65536 
  public function UpdateDynamicGroups( scriptInput : CFlyingSwarmScriptInput,  deltaTime : Float);  // flags: 65536 
  public function UpdateCircling( scriptInput : CFlyingSwarmScriptInput,  deltaTime : Float);  // flags: 65536 
  public function UpdateAgressive( scriptInput : CFlyingSwarmScriptInput,  deltaTime : Float);  // flags: 65536 
  private function AttackTimer( delta : Float,  id : Int32);  // flags: 17408 
  private function GroupMergeTimer( delta : Float,  id : Int32);  // flags: 17408 
  private function GroupSplitTimer( delta : Float,  id : Int32);  // flags: 17408 

}
import class CFlyingSwarmScriptInput extends CObject {
  import var groupList : array<CFlyingSwarmGroup>; // 6000

  import public final function CreateGroup( toSpawnCount : Int32,  spawnPoiType : CName,  groupState : CName,  optional  fromOtherGroup_Id : CFlyingGroupId);  // flags: 65561 
  import public final function RemoveGroup( groupId : CFlyingGroupId);  // flags: 65561 
  import public final function MoveBoidToGroup( groupIdA : CFlyingGroupId,  count : Int32,  groupIdB : CFlyingGroupId);  // flags: 65561 

}
import class CBehTreeTaskCSEffect extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function ShouldEnableFinisher() : Bool;  // flags: 65536 
  public function EnableFinisher();  // flags: 65536 
  public function DisableFinisher();  // flags: 65536 
  public function ShouldCompleteOnParryStart() : Bool;  // flags: 65536 
  public function ShouldNotLowerGuard() : Bool;  // flags: 65536 
  public function ShouldTryToDisarm() : Bool;  // flags: 65536 
  public function ShouldDisableHitReaction() : Bool;  // flags: 65536 
  public function Disarm();  // flags: 65536 
  public function FinisherSyncAnim();  // flags: 65536 
  public function CombatCheck() : Bool;  // flags: 65536 
  public function GetStats();  // flags: 65536 
  public function Roll( chance : Float) : Bool;  // flags: 65536 
  public function OnRagdollStart();  // flags: 65536 
  public function OnRagdollUpdate( owner : CNewNPC,  mac : CMovingPhysicalAgentComponent);  // flags: 65536 
  public function OnRagdollStop();  // flags: 65536 
  public function IsThisStagger() : Bool;  // flags: 65536 
  public function IsCliffBehindMe() : Bool;  // flags: 65536 
  public function KillNPCIfNeeded( owner : CNewNPC,  mac : CMovingPhysicalAgentComponent) : Bool;  // flags: 65536 
  public function CanSwimOrFly( owner : CNewNPC,  mac : CMovingPhysicalAgentComponent) : Bool;  // flags: 65536 
  public function ApplyRagdoll();  // flags: 65536 
  public function PlayScream();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( gameEventName : CName) : Bool;  // flags: 65536 
  protected function getBuffType( CSType : ECriticalStateType) : EEffectType;  // flags: 32768 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function InitializeDataStorages();  // flags: 65536 

}
import class BTTaskHandleHorseCollision extends BTTaskGameplayEventListener {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskHitReactionDecorator extends CBTTaskPlayAnimationEventDecorator {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function GetStats();  // flags: 65536 
  public function CheckGuardOrCounter() : Bool;  // flags: 65536 
  public function CheckDistanceToAttacker( attacker : CActor) : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function GetRotateNode() : CNode;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function InitializeReactionDataStorage();  // flags: 65536 

}
import class BTTaskUpdateLookatTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function PredictPosition( target : CActor,  targetPos : Vector) : Vector;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class BTTaskManageObjectsInPhantomComponentSlots extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  private latent function AttachObjects( _DeltaTime : Float);  // flags: 16448 
  private function DetachEntity( shootProjectile : Bool);  // flags: 16384 
  private function DisperseEntities( optional  deactivate : Bool);  // flags: 16384 
  public function ShootProjectile( projectile : CEntity,  optional  allDirections : Bool,  optional  deactivate : Bool);  // flags: 65536 
  public function CreateEntity( i : Int32,  _SpawnPos : Vector,  _Rotation : EulerAngles) : CEntity;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class W3ApplyEffectPhantomComponent extends CPhantomComponent {

  public event function OnCollisionEnter( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public function GetClosestFreeSlotInfo( attachComponents : array<CName>,  _objectPosition : Vector,  _objectHeading : Float,  out  _ClosestSlotName : CName,  out  _Position : Vector,  out  _Heading : Float) : Bool;  // flags: 65536 
  public function SetObjectAttached( b : Bool);  // flags: 65536 
  public function IsObjectAttached() : Bool;  // flags: 65536 

}
import class CBTTaskManageRepulseProjectileEvents extends IBehTreeTask {

  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskSearchForThrowable extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class BTTaskSpawnEntitiesAttack extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function Spawn( position : Vector);  // flags: 65536 
  public function FindPosition() : Vector;  // flags: 65536 
  protected function IsPositionValid( out  whereTo : Vector) : Bool;  // flags: 32768 

}
import class CBTTaskSetBoatAsActionTarget extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function FindBoat();  // flags: 65536 

}
import class CBTTaskMagicMeleeAttack extends CBTTaskMagicAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function PerformMagicAttack();  // flags: 65536 
  public function NewCurrentAttackData( attackData : CPreAttackEventData);  // flags: 65536 
  public function SpawnEffect( attackData : CPreAttackEventData) : Bool;  // flags: 65536 
  public function GetEffectPositionAndRotation( out  pos : Vector,  out  rot : EulerAngles);  // flags: 65536 

}
import class CBTTaskSpawnAnim extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private latent final function SelectSpawnAnim();  // flags: 16464 
  public latent function ActivateSpawn();  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  private function DealDamage();  // flags: 16384 

}
import class CBehTreeHLTaskCombatBase extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class W3Effect_Burning extends W3CriticalDOTEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectAddedPost() : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public function OnTargetDeath();  // flags: 65536 
  public function OnTargetDeathAnimFinished();  // flags: 65536 

}
import class CBTCondHorseIsMounted extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTCondHorseIsMountedDef extends IBehTreeHorseConditionalTaskDefinition {

  public function InitializeEvents();  // flags: 65536 

}
import class CR4TelemetryScriptProxy extends CObject {

  import public final function Log( eventType : ER4TelemetryEvents);  // flags: 65561 
  import public final function LogWithLabel( eventType : ER4TelemetryEvents,  label : String);  // flags: 65561 
  import public final function LogWithValue( eventType : ER4TelemetryEvents,  value : Int32);  // flags: 65561 
  import public final function LogWithValueStr( eventType : ER4TelemetryEvents,  value : String);  // flags: 65561 
  import public final function LogWithLabelAndValue( eventType : ER4TelemetryEvents,  label : String,  value : Int32);  // flags: 65561 
  import public final function LogWithLabelAndValueStr( eventType : ER4TelemetryEvents,  label : String,  value : String);  // flags: 65561 
  import public final function SetCommonStatFlt( statType : ER4CommonStats,  value : Float);  // flags: 65561 
  import public final function SetCommonStatI32( statType : ER4CommonStats,  value : Int32);  // flags: 65561 
  import public final function SetGameProgress( value : Float);  // flags: 65561 
  import public final function AddSessionTag( tag : String);  // flags: 65561 
  import public final function RemoveSessionTag( tag : String);  // flags: 65561 
  import public final function XDPPrintUserStats( statisticName : String);  // flags: 65561 
  import public final function XDPPrintUserAchievement( achievementName : String);  // flags: 65561 

}
import class CBTCondHorseShouldShakeOffRider extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CR4SecondScreenManagerScriptProxy extends CObject {

  import public final function SendGlobalMapPins( mappins : array<SCommonMapPinInstance>);  // flags: 65561 
  import public final function SendAreaMapPins( areaType : Int32,  mappins : array<SCommonMapPinInstance>);  // flags: 65561 
  import public final function SendGameMenuOpen();  // flags: 65561 
  import public final function SendGameMenuClose();  // flags: 65561 
  import public final function SendFastTravelEnable();  // flags: 65561 
  import public final function SendFastTravelDisable();  // flags: 65561 
  import public final function PrintJsonObjectsMemoryUsage();  // flags: 65561 
  private function FastTravelLocal( mapPinTag : CName);  // flags: 16384 
  private function FastTravelGlobal( areaType : Int32,  mapPinTag : CName);  // flags: 16384 

}
import class CR4KinectSpeechRecognizerListenerScriptProxy extends CObject {

  import public final function IsSupported() : Bool;  // flags: 65561 
  import public final function IsEnabled() : Bool;  // flags: 65561 
  import public final function SetEnabled( enable : Bool);  // flags: 65561 
  private function OnListenerRegistered();  // flags: 16384 
  private function OnAudioProblem( audioProblem : Int32);  // flags: 16384 
  private function OnRecognizedCommand( recognizedCommand : Int32,  semanticNames : array<String>,  semanticValues : array<String>,  confidenceScore : Float);  // flags: 16384 
  private function OnHypothesisAvailable( hypothesis : String);  // flags: 16384 
  private function IsKinectBlocked() : Bool;  // flags: 16384 

}
import class CR4GlobalEventsScriptsDispatcher extends CObject {

  import public final function RegisterForCategoryFilterName( eventCategory : EGlobalEventCategory,  filter : CName) : Bool;  // flags: 65561 
  import public final function RegisterForCategoryFilterNameArray( eventCategory : EGlobalEventCategory,  filter : array<CName>) : Bool;  // flags: 65561 
  import public final function RegisterForCategoryFilterString( eventCategory : EGlobalEventCategory,  filter : String) : Bool;  // flags: 65561 
  import public final function RegisterForCategoryFilterStringArray( eventCategory : EGlobalEventCategory,  filter : array<String>) : Bool;  // flags: 65561 
  import public final function UnregisterFromCategoryFilterName( eventCategory : EGlobalEventCategory,  filter : CName) : Bool;  // flags: 65561 
  import public final function UnregisterFromCategoryFilterNameArray( eventCategory : EGlobalEventCategory,  filter : array<CName>) : Bool;  // flags: 65561 
  import public final function UnregisterFromCategoryFilterString( eventCategory : EGlobalEventCategory,  filter : String) : Bool;  // flags: 65561 
  import public final function UnregisterFromCategoryFilterStringArray( eventCategory : EGlobalEventCategory,  filter : array<String>) : Bool;  // flags: 65561 
  import public final function AddFilterNameForCategory( eventCategory : EGlobalEventCategory,  filter : CName) : Bool;  // flags: 65561 
  import public final function AddFilterNameArrayForCategory( eventCategory : EGlobalEventCategory,  filter : array<CName>) : Bool;  // flags: 65561 
  import public final function AddFilterStringForCategory( eventCategory : EGlobalEventCategory,  filter : String) : Bool;  // flags: 65561 
  import public final function AddFilterStringArrayForCategory( eventCategory : EGlobalEventCategory,  filter : array<String>) : Bool;  // flags: 65561 
  import public final function RemoveFilterNameFromCategory( eventCategory : EGlobalEventCategory,  filter : CName) : Bool;  // flags: 65561 
  import public final function RemoveFilterNameArrayFromCategory( eventCategory : EGlobalEventCategory,  filter : array<CName>) : Bool;  // flags: 65561 
  import public final function RemoveFilterStringFromCategory( eventCategory : EGlobalEventCategory,  filter : String) : Bool;  // flags: 65561 
  import public final function RemoveFilterStringArrayFromCategory( eventCategory : EGlobalEventCategory,  filter : array<String>) : Bool;  // flags: 65561 
  public event function OnScriptedEvent( scriptedEventCategory : EScriptedEventCategory,  optional  scriptedEventType : EScriptedEventType,  optional  eventParam : CName) : Bool;  // flags: 65568 
  public event function OnScriptedEventName( scriptedEventCategory : EScriptedEventCategory,  optional  scriptedEventType : EScriptedEventType,  optional  eventParam : CName) : Bool;  // flags: 65568 
  public event function OnScriptedEventString( scriptedEventCategory : EScriptedEventCategory,  optional  scriptedEventType : EScriptedEventType,  optional  eventParam : String) : Bool;  // flags: 65568 
  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 
  public event function OnGlobalEventString( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : String) : Bool;  // flags: 65568 
  public function Init();  // flags: 65536 
  public function IsCustomScriptsCategory( eventCategory : EGlobalEventCategory) : Bool;  // flags: 65536 
  public function AddListener( eventCategory : EGlobalEventCategory,  listener : IGlobalEventScriptedListener) : Bool;  // flags: 65536 
  public function AddListenerFilterName( eventCategory : EGlobalEventCategory,  listener : IGlobalEventScriptedListener,  filter : CName) : Bool;  // flags: 65536 
  public function AddListenerFilterNameArray( eventCategory : EGlobalEventCategory,  listener : IGlobalEventScriptedListener,  filter : array<CName>) : Bool;  // flags: 65536 
  public function AddListenerFilterString( eventCategory : EGlobalEventCategory,  listener : IGlobalEventScriptedListener,  filter : String) : Bool;  // flags: 65536 
  public function AddListenerFilterStringArray( eventCategory : EGlobalEventCategory,  listener : IGlobalEventScriptedListener,  filter : array<String>) : Bool;  // flags: 65536 
  public function RemoveListener( eventCategory : EGlobalEventCategory,  listener : IGlobalEventScriptedListener) : Bool;  // flags: 65536 
  public function RemoveListenerFilterName( eventCategory : EGlobalEventCategory,  listener : IGlobalEventScriptedListener,  filter : CName) : Bool;  // flags: 65536 
  public function RemoveListenerFilterNameArray( eventCategory : EGlobalEventCategory,  listener : IGlobalEventScriptedListener,  filter : array<CName>) : Bool;  // flags: 65536 
  public function RemoveListenerFilterString( eventCategory : EGlobalEventCategory,  listener : IGlobalEventScriptedListener,  filter : String) : Bool;  // flags: 65536 
  public function RemoveListenerFilterStringArray( eventCategory : EGlobalEventCategory,  listener : IGlobalEventScriptedListener,  filter : array<String>) : Bool;  // flags: 65536 

}
import class CBTTaskHorseReassure extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CGameplayLightComponent extends CInteractionComponent {
  import var isLightOn : Bool; // 4001
  import var isCityLight : Bool; // 4001
  import var isInteractive : Bool; // 4001
  import var isAffectedByWeather : Bool; // 4001

  import public function SetLight( toggle : Bool);  // flags: 65545 
  import public function SetInteractive( toggle : Bool);  // flags: 65545 
  import public function IsLightOn() : Bool;  // flags: 65545 
  import public function IsCityLight() : Bool;  // flags: 65545 
  import public function IsInteractive() : Bool;  // flags: 65545 
  import public function IsAffectedByWeather() : Bool;  // flags: 65545 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAnimEvent_SetLight( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_UnlockInteraction( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function ToggleLight();  // flags: 65536 
  public function AardHit();  // flags: 65536 
  public function IgniHit();  // flags: 65536 
  public function FrostHit();  // flags: 65536 
  public function FireHit();  // flags: 65536 
  public function BlockPlayerLightInteraction();  // flags: 65536 

}
import class CCityLightManager extends IGameSystem {

  import public function SetEnabled( toggle : Bool);  // flags: 65545 
  import public function IsEnabled() : Bool;  // flags: 65545 
  import public function ForceUpdate();  // flags: 65545 
  import public function SetUpdateEnabled( value : Bool);  // flags: 65545 
  import public function DebugToggleAll( toggle : Bool);  // flags: 65545 

}
import class CBTTaskHorseNervous extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function UpdateTimeUntillNextNervous();  // flags: 65536 
  public function IsTimeToNextNervous() : Bool;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function Initialize();  // flags: 65536 

}
import class W3Mutagen13_Effect extends W3Mutagen_Effect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function GetForcedDuration() : Float;  // flags: 65536 
  public function IsEffectTypeAffected( effectType : EEffectType) : Bool;  // flags: 65536 

}
import class CBeehiveEntity extends W3Container {

  public event function OnDetaching() : Bool;  // flags: 65568 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public event function OnStreamOut() : Bool;  // flags: 65568 
  public function EnableHangingDamageArea( flag : Bool);  // flags: 65536 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function IsOnFire() : Bool;  // flags: 65536 
  public function OnShotByProjectile();  // flags: 65536 
  public function Fall();  // flags: 65536 
  public function HangAreaDamage( dt : Float,  id : Int32);  // flags: 66560 
  public function DummyDamage( dt : Float,  id : Int32);  // flags: 66560 

}
import class CBTTaskHorseRequiredItemsForRider extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  private function RequiredItems() : Bool;  // flags: 16384 
  public function Initialize();  // flags: 65536 

}
import class W3ToxicCloud extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public event function OnStreamOut() : Bool;  // flags: 65568 
  public function SetBurningChance( c : Float);  // flags: 65536 
  public function SetFromBomb();  // flags: 65536 
  public function IsFromBomb() : Bool;  // flags: 65536 
  public function IsActorInPoisonRange( a : CActor) : Bool;  // flags: 65536 
  public function SetExplodingTargetDamages( dmg : array<SRawDamage>);  // flags: 65536 
  public function GetExplodingTargetDamages() : array<SRawDamage>;  // flags: 65536 
  public function HasExplodingTargetDamages() : Bool;  // flags: 65536 
  public function PermanentlyDisable();  // flags: 65536 
  public function KeepTryingToDisable( dt : Float,  id : Int32);  // flags: 66560 
  public function Enable( b : Bool);  // flags: 65536 
  public function GetPoisonAreaUnsafe() : CTriggerAreaComponent;  // flags: 65536 
  public function GetGasAreaUnsafe() : CTriggerAreaComponent;  // flags: 65536 
  public function OnManageToxicCloud( operations : array<EToxicCloudOperation>);  // flags: 65536 
  public function IsChainedExplosion() : Bool;  // flags: 65536 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function ClearEntitiesInPoisonRange();  // flags: 65536 
  public function GetCamShakeRadius() : Float;  // flags: 65536 
  public function GetEntitiesInExplosionRange() : array<CGameplayEntity>;  // flags: 65536 
  public function GetActorsInPoisonRange() : array<CActor>;  // flags: 65536 
  protected function SetCanBeTargeted( flag : Bool);  // flags: 32768 
  public function PoisonTimer( dt : Float,  id : Int32);  // flags: 66560 
  public final function StopPoisonTimer();  // flags: 65552 

}
import class CR4QuestDLCMounter extends IGameplayDLCMounter {
  import var quest : CQuest; // 4001
  import var taintFact : CName; // 4001
  import var sceneVoiceTagsTableFilePath : String; // 4001
  import var questLevelsFilePath : String; // 4001

  private function LoadQuestLevels( filePath : String);  // flags: 16384 
  private function UnloadQuestLevels( filePath : String);  // flags: 16384 

}
import class CBTTaskHorseManageRiderPosition extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  private function ChooseAttackDir();  // flags: 16384 
  public function ChooseAttackHeight();  // flags: 65536 

}
import class W3Mutagen_Effect extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class CR4FinisherDLC extends CObject {
  import var finisherAnimName : CName; // 6001
  import var woundName : CName; // 6001
  import var finisherSide : EFinisherSide; // 6001
  import var leftCameraAnimName : CName; // 6001
  import var rightCameraAnimName : CName; // 6001
  import var frontCameraAnimName : CName; // 6001
  import var backCameraAnimName : CName; // 6001

  import public function IsFinisherForAnim( eventAnimInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65545 

}
import class CR4FinishersDLCMounter extends IGameplayDLCMounter {
  import var customCameraAnimSet : CSkeletalAnimationSet; // 4001
  import var finishers : array<*CR4FinisherDLC>; // 4005

  private function LoadFinisher( finisher : CR4FinisherDLC);  // flags: 16384 
  private function UnloadFinisher( finisher : CR4FinisherDLC);  // flags: 16384 

}
import class CBTTaskHorseUpdateRiderLookat extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class W3Effect_ApplicatorOnHit extends W3ApplicatorEffect {

  public function ProcessOnHit( victim : CActor,  silverSword : Bool,  steelSword : Bool,  sign : Bool);  // flags: 65536 
  public function CacheSettings();  // flags: 65536 

}
import class CBTTask3StateProjectileAttack extends CBTTask3StateAttack {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function ShootProjectile( optional  customHeading : Float);  // flags: 65536 

}
import class W3Effect_Shrine extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public final function IsFromMutagen23() : Bool;  // flags: 65552 

}
import class CR4PlayerTargeting extends IScriptable {

  import public final function SetConsts( out  consts : SR4PlayerTargetingConsts);  // flags: 65561 
  import public final function BeginFindTarget( out  inValues : SR4PlayerTargetingIn);  // flags: 65561 
  import public final function EndFindTarget( out  outValues : SR4PlayerTargetingOut);  // flags: 65561 
  import public final function FindTarget();  // flags: 65561 
  import public final function WasVisibleInScaledFrame( entity : CEntity,  frameSizeX : Float,  frameSizeY : Float) : Bool;  // flags: 65561 

}
import class W3MonsterElementalArm extends CGameplayEntity {

  public function SetIsActive( toggle : Bool);  // flags: 65536 
  public function SetOwner( actor : CActor);  // flags: 65536 
  public function ExplodeTimer( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function Explode();  // flags: 65536 
  public event function OnContactEvent( position : Vector,  force : Vector,  otherBody : CComponent,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 

}
import class BTTaskExplodeAtDeath extends IBehTreeTask {

  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  private function Explode();  // flags: 16384 

}
import class W3AbilityManager extends IScriptable {
  import var statPoints : array<SBaseStat>; // c000
  import var resistStats : array<SResistanceValue>; // c000
  import var owner : CActor; // 6000
  import var charStats : CCharacterStats; // 6000
  import var usedDifficultyMode : EDifficultyMode; // e000
  import var difficultyAbilities : C2dArrayCName; // 6000
  import var ignoresDifficultySettings : Bool; // 6000

  import public final function CacheStaticScriptData();  // flags: 65561 
  import public final function SetInitialStats( diff : EDifficultyMode) : Bool;  // flags: 65561 
  import public final function HasStat( stat : EBaseCharacterStats) : Bool;  // flags: 65561 
  import public final function StatAddNew( stat : EBaseCharacterStats,  optional  max : Float);  // flags: 65561 
  import public final function RestoreStat( stat : EBaseCharacterStats);  // flags: 65561 
  import public final function RestoreStats();  // flags: 65561 
  import public function GetStat( stat : EBaseCharacterStats,  optional  skipLock : Bool) : Float;  // flags: 65545 
  import public final function GetStatMax( stat : EBaseCharacterStats) : Float;  // flags: 65561 
  import public final function GetStatPercents( stat : EBaseCharacterStats) : Float;  // flags: 65561 
  import public final function GetStats( stat : EBaseCharacterStats,  out  current : Float,  out  max : Float) : Bool;  // flags: 65561 
  import public final function SetStatPointCurrent( stat : EBaseCharacterStats,  val : Float);  // flags: 65561 
  import public final function SetStatPointMax( stat : EBaseCharacterStats,  val : Float);  // flags: 65561 
  import public final function UpdateStatMax( stat : EBaseCharacterStats);  // flags: 65561 
  import public final function HasResistStat( stat : ECharacterDefenseStats) : Bool;  // flags: 65561 
  import public final function GetResistStat( stat : ECharacterDefenseStats,  out  resistStat : SResistanceValue) : Bool;  // flags: 65561 
  import public final function SetResistStat( stat : ECharacterDefenseStats,  out  resistStat : SResistanceValue);  // flags: 65561 
  import public final function ResistStatAddNew( stat : ECharacterDefenseStats);  // flags: 65561 
  import public function RecalcResistStat( stat : ECharacterDefenseStats);  // flags: 65545 
  import public function GetAttributeValueInternal( attributeName : CName,  optional  tags : array<CName>) : SAbilityAttributeValue;  // flags: 65545 
  import public final function CacheDifficultyAbilities();  // flags: 65561 
  import public final function UpdateStatsForDifficultyLevel( diff : EDifficultyMode);  // flags: 65561 
  import public final function UpdateDifficultyAbilities( diff : EDifficultyMode);  // flags: 65561 
  import public final function GetAllStats_Debug( out  stats : array<SBaseStat>) : Bool;  // flags: 65561 
  import public final function GetAllResistStats_Debug( out  stats : array<SResistanceValue>) : Bool;  // flags: 65561 
  public function PostInit();  // flags: 66048 
  public function Init( ownr : CActor,  cStats : CCharacterStats,  isFromLoad : Bool,  diff : EDifficultyMode) : Bool;  // flags: 65536 
  public final function IsInitialized() : Bool;  // flags: 65552 
  public function OnOwnerRevived();  // flags: 65536 
  protected function CheckForbiddenAttribute( attName : CName) : Bool;  // flags: 32768 
  public function GetAttributeValue( attributeName : CName,  optional  tags : array<CName>) : SAbilityAttributeValue;  // flags: 65536 
  protected function GetNonBlockedSkillAbilitiesList( tags : array<CName>) : array<CName>;  // flags: 32768 
  public function CheckBlockedAbilities( dt : Float) : Float;  // flags: 65536 
  protected final function FindBlockedAbility( abName : CName) : Int32;  // flags: 32784 
  public function BlockAbility( abilityName : CName,  block : Bool,  optional  cooldown : Float) : Bool;  // flags: 65536 
  public final function IsAbilityBlocked( abilityName : CName) : Bool;  // flags: 65552 
  public function GetPowerStatValue( stat : ECharacterPowerStats,  optional  abilityTag : CName) : SAbilityAttributeValue;  // flags: 65536 
  protected function MutliplyStatBy( stat : EBaseCharacterStats,  val : Float);  // flags: 32768 
  public function GetResistValue( stat : ECharacterDefenseStats,  out  points : Float,  out  percents : Float);  // flags: 65536 
  public function UsedHPType() : EBaseCharacterStats;  // flags: 65536 
  public function ForceSetStat( stat : EBaseCharacterStats,  val : Float);  // flags: 65536 
  protected function InternalReduceStat( stat : EBaseCharacterStats,  amount : Float);  // flags: 32768 
  public function DrainAir( cost : Float,  optional  delay : Float);  // flags: 65536 
  public function DrainSwimmingStamina( cost : Float,  optional  delay : Float);  // flags: 65536 
  public function DrainStamina( action : EStaminaActionType,  optional  fixedCost : Float,  optional  fixedDelay : Float,  optional  abilityName : CName,  optional  dt : Float,  optional  costMult : Float) : Float;  // flags: 65536 
  public function GetStaminaActionCost( action : EStaminaActionType,  out  cost : Float,  out  delay : Float,  optional  fixedCost : Float,  optional  fixedDelay : Float,  optional  abilityName : CName,  optional  dt : Float,  optional  costMult : Float);  // flags: 65536 
  protected function GetStaminaActionCostInternal( action : EStaminaActionType,  isPerSec : Bool,  out  cost : SAbilityAttributeValue,  out  delay : SAbilityAttributeValue,  optional  abilityName : CName);  // flags: 32768 
  public function GetSkillAttributeValue( abilityName : CName,  attributeName : CName,  addBaseCharAttribute : Bool,  addSkillModsAttribute : Bool) : SAbilityAttributeValue;  // flags: 65536 
  public function DrainFocus( amount : Float);  // flags: 65536 
  public function DrainMorale( amount : Float);  // flags: 65536 
  public function DrainToxicity( amount : Float);  // flags: 65536 
  public function DrainVitality( amount : Float);  // flags: 65536 
  public function DrainEssence( amount : Float);  // flags: 65536 
  public function AddPanic( amount : Float);  // flags: 65536 
  public function GainStat( stat : EBaseCharacterStats,  amount : Float);  // flags: 65536 
  public function GetApplicatorParamsFor( applicator : W3ApplicatorEffect,  out  pwrStatValue : SAbilityAttributeValue);  // flags: 65536 
  public function IgnoresDifficultySettings() : Bool;  // flags: 65536 
  protected function OnVitalityChanged();  // flags: 33280 
  protected function OnToxicityChanged();  // flags: 33280 
  protected function OnFocusChanged();  // flags: 33280 
  protected function OnAirChanged();  // flags: 33280 
  public function OnAbilityAdded( abilityName : CName);  // flags: 65536 
  public function OnAbilityRemoved( abilityName : CName);  // flags: 65536 
  protected function OnAbilityChanged( abilityName : CName);  // flags: 32768 
  public function Debug_GetUsedDifficultyMode() : EDifficultyMode;  // flags: 65536 

}
import class W3GameParams extends CObject {

  public function Init();  // flags: 65536 
  private final function SetWeaponDurabilityModifiers();  // flags: 16400 
  private final function SetArmorDurabilityModifiers();  // flags: 16400 
  public final function GetWeaponDurabilityLoseValue() : Float;  // flags: 65552 
  private function InitArmorAbilities();  // flags: 16384 
  private function InitGlovesAbilities();  // flags: 16384 
  private function InitPantsAbilities();  // flags: 16384 
  private function InitBootsAbilities();  // flags: 16384 
  private function InitWeaponAbilities();  // flags: 16384 
  private function InitForbiddenAttributesList();  // flags: 16384 
  public function IsForbiddenAttribute( nam : CName) : Bool;  // flags: 65536 
  public function GetDurabilityMultiplier( durabilityRatio : Float,  isWeapon : Bool) : Float;  // flags: 65536 
  private function GetDurMult( durabilityRatio : Float,  durs : array<SDurabilityThreshold>) : Float;  // flags: 16384 
  public function GetRandomMasterworkArmorAbility() : CName;  // flags: 65536 
  public function GetRandomMagicalArmorAbility() : CName;  // flags: 65536 
  public function GetRandomMasterworkGlovesAbility() : CName;  // flags: 65536 
  public function GetRandomMagicalGlovesAbility() : CName;  // flags: 65536 
  public function GetRandomMasterworkPantsAbility() : CName;  // flags: 65536 
  public function GetRandomMagicalPantsAbility() : CName;  // flags: 65536 
  public function GetRandomMasterworkBootsAbility() : CName;  // flags: 65536 
  public function GetRandomMagicalBootsAbility() : CName;  // flags: 65536 
  public function GetRandomMasterworkWeaponAbility() : CName;  // flags: 65536 
  public function GetRandomMagicalWeaponAbility() : CName;  // flags: 65536 
  public function GetStaminaActionAttributes( action : EStaminaActionType,  getCostPerSec : Bool,  out  costAttributeName : CName,  out  delayAttributeName : CName);  // flags: 65536 
  public function GetItemLevel( itemCategory : CName,  itemAttributes : array<SAbilityAttributeValue>,  optional  itemName : CName) : Int32;  // flags: 65536 
  public final function SetNewGamePlusLevel( playerLevel : Int32);  // flags: 65552 
  public final function GetNewGamePlusLevel() : Int32;  // flags: 65552 

}
import class CBTTaskHarpyDustAttack extends CBTTaskAttack {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskSwarm extends CBTTaskAttack {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class W3LeshyBirdProjectile extends CProjectileTrajectory {

  public function SetOwner( actor : CActor);  // flags: 65536 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 
  public function Expired() : Bool;  // flags: 65536 
  public function TimeDestroy( deltaTime : Float,  id : Int32);  // flags: 66560 

}
import class CBTTaskSearchForObject extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public final function Search() : Bool;  // flags: 65552 
  public function FilterOutObjects( out  foundObjects : array<CGameplayEntity>);  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskWraithSummonDoppelganger extends CBTTaskPlayAnimationEventDecorator {

  public function Initialize();  // flags: 65536 
  public latent final function Main() : EBTNodeStatus;  // flags: 65616 
  private latent final function LoadResources();  // flags: 16464 
  private final function OnDeactivate();  // flags: 16400 
  public final function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65552 

}
import class CBTTaskWyvernTakeOffEffect extends CBTTaskPlayAnimationEventDecorator {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskFlyPursueTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function DoTrace( out  movePos : Vector);  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class CBTTaskUnderwaterPursueTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function DoTrace( out  movePos : Vector);  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 

}
import class TaskTeleportAction extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  protected function PerformTeleport( newPosition : Vector);  // flags: 32768 
  protected latent function FindSuitablePoint( out  newPosition : Vector,  optional  timeOut : Float) : Bool;  // flags: 32832 
  public function OnDeactivate();  // flags: 65536 
  protected function IsPointSuitableForTeleport( out  whereTo : Vector) : Bool;  // flags: 32768 
  private function CalculateWhereToVec( randVec : Vector) : Vector;  // flags: 16384 
  private function CalculateRandVec() : Vector;  // flags: 16384 
  private latent function SpawnBlinkMarkers( startPos : Vector,  endPos : Vector);  // flags: 16448 

}
import class CBTTaskTeleport extends TaskTeleportAction {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnCompletion( success : Bool);  // flags: 65536 
  public latent function PosChecks( out  pos : Vector) : Bool;  // flags: 65600 
  public latent function SafeTeleport( pos : Vector) : Bool;  // flags: 65600 
  public function ActorInPlayerFOV() : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 

}
import class CBTTaskVolumetricFlyAroundTarget extends CBTTaskVolumetricMove {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function UpdateTargetToNpcVec();  // flags: 65536 
  public function FlyAroundSetInitialDest();  // flags: 65536 
  public function FlyAroundSetDest();  // flags: 65536 
  public function StartFlightTimeCounting();  // flags: 65536 
  public function CheckFlightTime() : Bool;  // flags: 65536 
  public function UpdateNpcToDestDistance();  // flags: 65536 

}
import class CBTTaskCheckAttitudes extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnCompletion( success : Bool);  // flags: 65536 
  public function InitializeReactionDataStorage();  // flags: 65536 

}
import class CBTTaskIsAlarmed extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskIsAngry extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRainReaction extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskReactionStorage extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function OnCompletion( success : Bool);  // flags: 65536 
  public function DoStuff();  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBehTreeTaskReactionStorageCleanup extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskResetAttitudes extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskSetReactionTarget extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 

}
import class W3Potion_Fact extends CBaseGameplayEffect {

  public function Init( params : SEffectInitInfo);  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public function GetFactName() : CName;  // flags: 65536 
  public function GetEffectNameLocalisationKey() : String;  // flags: 65536 
  protected function GetSelfInteraction( e : CBaseGameplayEffect) : EEffectInteract;  // flags: 32768 

}
import class CBTTaskRidingManagerVehicleMount extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function GetVehicleComponent() : CVehicleComponent;  // flags: 65536 
  public latent function OnMountStarted( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFinishedSuccessfully( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFailed( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function MountActor( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public function GetMountTypeVariable() : Float;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRidingManagerVehicleDismount extends IBehTreeTask {

  public function OnDismountStarted( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public function OnDismountFinishedA( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public latent function OnDismountFinishedB_Latent( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public function FindDismountDirection( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent,  out  dismountDirection : Float);  // flags: 65536 
  public function IsPositionValid( vehicleComponent : CVehicleComponent,  _position : Vector) : Bool;  // flags: 65536 
  public latent function DismountActor_Latent( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent,  dismountDirection : Float);  // flags: 65600 
  public latent function DismountActor( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public function DismountActor_NonLatent( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public latent function PlaySyncAnimWithRider( vehicleEntity : CEntity,  eventName : CName,  deactivationEvent : CName);  // flags: 65600 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRidingManagerBoatMount extends CBTTaskRidingManagerVehicleMount {

  public function GetVehicleComponent() : CVehicleComponent;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function OnMountStarted( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFinishedSuccessfully( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFailed( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskRidingManagerBoatDismount extends CBTTaskRidingManagerVehicleDismount {

  public function OnDismountStarted( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public function OnDismountFinishedA( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public latent function OnDismountFinishedB_Latent( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CR4PlayerStateMountHorse extends CR4PlayerStateMountTheVehicle {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public cleanup function MountCleanup();  // flags: 73728 
  public function ProcessMountHorse();  // flags: 65664 
  public event function OnStartTraversingExploration( t : CScriptedExplorationTraverser) : Bool;  // flags: 65568 
  private function OnMountingFailed();  // flags: 16384 
  public event function OnMountAnimStarted() : Bool;  // flags: 65568 
  public event function OnHorseRidingOn() : Bool;  // flags: 65568 
  public event function OnDeath( damageAction : W3DamageAction) : Bool;  // flags: 65568 

}
import class CBTTaskRidingManagerHorseMount extends CBTTaskRidingManagerVehicleMount {

  public function GetVehicleComponent() : CVehicleComponent;  // flags: 65536 
  public latent function OnMountStarted( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFinishedSuccessfully( riderData : CAIStorageRiderData,  behGraphName : CName,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public latent function OnMountFailed( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65600 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskRidingManagerHorseDismount extends CBTTaskRidingManagerVehicleDismount {

  public function OnDismountStarted( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public function OnDismountFinishedA( riderData : CAIStorageRiderData,  vehicleComponent : CVehicleComponent);  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTCondMyHorseIsMounted extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTCondRiderHasPairedHorse extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 
  public function OnListenedGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTCondRiderFightOnHorse extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTCondRiderDistanceToHorse extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Check() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTCondRiderPlayingSyncAnim extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTCondRiderIsMountInProgress extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTCondRiderIsDismountInProgress extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTCondRiderHasFallenFromHorse extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderCombatOnHorseDecorator extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnGameplayEvent( eventName : CName) : Bool;  // flags: 65536 

}
import class CBTTaskRiderMountHorse extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskRiderDismountHorse extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderSetFollowActionOnHorseDef extends IBehTreeRiderTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskRiderSetFollowSideBySideActionOnHorseDef extends IBehTreeRiderTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskRiderSetDoNothingActionOnHorseDef extends IBehTreeRiderTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskRiderSetMoveToActionOnHorseDef extends IBehTreeRiderTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskRiderSetMoveAlongPathActionOnHorseDef extends IBehTreeRiderTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskRiderSetMoveAlongPathWithCompanionActionOnHorseDef extends IBehTreeRiderTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CR4PlayerStateSwimming extends CR4PlayerStateExtendedMovable {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function SwimmingLatentInit();  // flags: 65664 
  public function SwimmingInitGeneral( prevStateName : CName);  // flags: 65536 
  public function SwimmingInitNormal( prevStateName : CName);  // flags: 65536 
  public function SwimmingInitAfterAimThrow();  // flags: 65536 
  private latent function HideUsableItemL();  // flags: 16448 
  private function DisableRadialSlots();  // flags: 16384 
  private function EnableRadialSlots();  // flags: 16384 
  private function ResetVariables();  // flags: 16384 
  private function EnableBuffImmunities( enable : Bool);  // flags: 16384 
  private function SetCapsuleToSwim( _swimming : Bool);  // flags: 16384 
  private function StateBlockInputActions( toggle : Bool);  // flags: 16384 
  private function ShouldSpawnWaterSplash( optional  prevState : CName);  // flags: 16384 
  public event function OnPlayerTickTimer( deltaTime : Float) : Bool;  // flags: 65568 
  private function SwimmingLoop( dt : Float);  // flags: 16384 
  private function FailSafeVerify();  // flags: 16384 
  private function UpdatePitch();  // flags: 16384 
  private function TryToPopState();  // flags: 16384 
  public function ShouldDrainStamina() : Bool;  // flags: 65536 
  public function IsInColdWater() : Bool;  // flags: 65536 
  public function IsInTroubledWater() : Bool;  // flags: 65536 
  public function GetWindPower() : Float;  // flags: 65536 
  public function GetWaterDepth() : Float;  // flags: 65536 
  public function CheckIdle() : Bool;  // flags: 65536 
  public function EnableUnlimitedDiving( enable : Bool);  // flags: 65536 
  public function IsSwimmingAllowed() : Bool;  // flags: 65536 
  private function ToggleWalkDeep( toggle : Bool);  // flags: 16384 
  private function ToggleSwimming( toggle : Bool,  optional  ignorePAC : Bool);  // flags: 16384 
  private function ToggleDiving( toggle : Bool);  // flags: 16384 
  private function SetSwimming( dt : Float,  id : Int32);  // flags: 17408 
  private function ShouldGoDiving( depth : Float);  // flags: 16384 
  private function SpawnWaterSplash( splash : CName);  // flags: 16384 
  private function ReleaseDiveDown() : Bool;  // flags: 16384 
  private function GetSubmergeDepth() : Float;  // flags: 16384 
  private function CheckWaterDepth( minDepth : Float) : Bool;  // flags: 16384 
  private function ChangeEmergeSpeed( value : Float);  // flags: 16384 
  private function ResetEmergeSpeed();  // flags: 16384 
  private function CalculateWindPower();  // flags: 16384 
  private function ToggleSwimStagger( toggle : Bool);  // flags: 16384 
  public function SwimmingStagger( dt : Float,  id : Int32);  // flags: 66560 
  private function SetBehaviorGraphVariables( f : Float);  // flags: 16384 
  public function PredictWaterDepth( pos : Vector);  // flags: 65536 
  public event function OnOceanTriggerLeave() : Bool;  // flags: 65568 
  public event function OnDivingEnd() : Bool;  // flags: 65568 
  public event function OnTeleportToStartPos() : Bool;  // flags: 65568 
  public event function OnTeleportToStartPosEnd() : Bool;  // flags: 65568 
  public event function OnWaterBottomTouch() : Bool;  // flags: 65568 
  public function ReleaseBlockDiveDown( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnParentSpawned() : Bool;  // flags: 65568 
  public event function OnDiveInput( divePitch : Float) : Bool;  // flags: 65568 
  public event function OnEmptyStamina() : Bool;  // flags: 65568 
  public event function OnAllowShallowWaterCheck() : Bool;  // flags: 65568 
  public event function OnCheckDiving() : Bool;  // flags: 65568 
  public event function OnAllowSwimmingSprint() : Bool;  // flags: 65568 
  public event function OnAllowedDiveDown() : Bool;  // flags: 65568 
  public event function OnDiving( dir : Int32) : Bool;  // flags: 65568 
  public event function OnDive() : Bool;  // flags: 65568 
  public event function OnHitAnimationStart() : Bool;  // flags: 65568 
  public event function OnDiveAnimationStart() : Bool;  // flags: 65568 
  public event function OnDiveAnimationEnd() : Bool;  // flags: 65568 
  public event function OnDivingStateStart() : Bool;  // flags: 65568 
  public event function OnDivingStateStop() : Bool;  // flags: 65568 
  public event function OnSwimStart() : Bool;  // flags: 65568 
  public event function OnSwimEnd() : Bool;  // flags: 65568 
  public event function OnIdleStart() : Bool;  // flags: 65568 
  public event function OnIdleEnd() : Bool;  // flags: 65568 
  public event function OnDivingEndStart() : Bool;  // flags: 65568 
  public event function OnDivingEndStop() : Bool;  // flags: 65568 
  public event function OnJumpToWaterStart() : Bool;  // flags: 65568 
  public event function OnJumpToDiveStart() : Bool;  // flags: 65568 
  public event function OnJumpToWaterEnd() : Bool;  // flags: 65568 
  public event function OnSwimToIdleStart() : Bool;  // flags: 65568 
  public event function OnSwimToIdleEnd() : Bool;  // flags: 65568 
  public event function OnPerformEvade( playerEvadeType : EPlayerEvadeType) : Bool;  // flags: 65568 
  public function PerformEvade( playerEvadeType : EPlayerEvadeType) : Bool;  // flags: 65536 
  public event function OnDodgeBoost() : Bool;  // flags: 65568 
  public function DodgeBoostTimeOut( dt : Float,  id : Int32);  // flags: 66560 
  private function ProcessPlayerOrientation();  // flags: 16384 
  public function EnableSprintingCamera( flag : Bool);  // flags: 65536 
  public function EnableRunCamera( flag : Bool);  // flags: 65536 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnIsCameraUnderwater() : Bool;  // flags: 65568 
  private function UpdateCameraShooting( out  moveData : SCameraMovementData,  timeDelta : Float);  // flags: 16384 
  private function UpdateDivingPitch();  // flags: 16384 
  private function TurnOnSwimmingCamera();  // flags: 16384 
  private function TurnOnDivingCamera();  // flags: 16384 
  public event function OnAnimEvent_TurnOnDiving( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_AllowSwitchToDiving( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  private function LogSwimming( text : String);  // flags: 16384 

}
import class CBTTaskRiderSetRaceAlongPathActionOnHorseDef extends IBehTreeRiderTaskDefinition {

  public function OnSpawn( taskGen : IBehTreeTask);  // flags: 65536 

}
import class CBTTaskRiderAdjustToHorse extends IBehTreeTask {

  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderNotifyScriptedActionOnHorse extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderNotifyHorseAboutCombatTarget extends IBehTreeTask {

  public function OnDeactivate();  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderNotifyHorseAboutMounting extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskRiderStopAttack extends IBehTreeTask {

  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public function OnDeactivate();  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CBTTaskSailorMountBoat extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskSailorDismountBoat extends IBehTreeTask {

  public function Initialize();  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 

}
import class CBTTaskCondIsMountedOnBoat extends IBehTreeTask {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function Initialize();  // flags: 65536 

}
import class CCameraPivotPositionControllerJump extends ICustomCameraScriptedPivotPositionController {

  protected function ControllerUpdate( out  currentPosition : Vector,  out  currentVelocity : Vector,  timeDelta : Float);  // flags: 32768 
  private function UpdateExactCamera( out  currentPosition : Vector,  out  currentVelocity : Vector,  timeDelta : Float);  // flags: 16384 
  private function UpdateOldCamera( out  currentPosition : Vector,  out  currentVelocity : Vector,  timeDelta : Float);  // flags: 16384 
  protected function ControllerActivate( currentOffset : Float);  // flags: 32768 
  private function GetFollowPos() : Vector;  // flags: 16384 
  private function GetBoneToFollowPosition() : Vector;  // flags: 16384 
  private function ComputeTargetPos() : Vector;  // flags: 16384 
  private function ComputeOffset() : Vector;  // flags: 16384 
  private function ComputeBlendZCoef( timeDelta : Float,  height : Float) : Float;  // flags: 16384 
  private function InitHeightTrace( position : Vector);  // flags: 16384 
  private function ComputeTaceHeightAdded( position : Vector,  deltaTime : Float) : Float;  // flags: 16384 
  private function ComputeTaceHeightAddedState( position : Vector,  deltaTime : Float) : Float;  // flags: 16384 
  private function ComputeGroundHeight( position : Vector,  out  height : Float) : Bool;  // flags: 16384 

}
import class CR4InventoryMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnGuiSceneEntitySpawned( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnGuiSceneEntityDestroyed() : Bool;  // flags: 65568 
  private function RestoreSaved();  // flags: 16384 
  public event function OnSortingRequested() : Bool;  // flags: 65568 
  public event function OnTabDataRequested( tabIndex : Int32,  isHorse : Bool) : Bool;  // flags: 65568 
  public event function OnTabChanged( tabIndex : Int32) : Bool;  // flags: 65568 
  public function updateCurrentTab();  // flags: 65536 
  public function PopulateTabData( tabIndex : Int32);  // flags: 65536 
  private function PopulateDataForTab( tabIndex : Int32,  entriesArray : CScriptedFlashArray);  // flags: 16384 
  public function SetInitialTabNewFlags();  // flags: 65536 
  public function getTabFromItem( item : SItemUniqueId) : InventoryMenuTabIndexes;  // flags: 65536 
  public function getTabFromFilter( inventoryFilterType : EInventoryFilterType) : InventoryMenuTabIndexes;  // flags: 65536 
  public function UpdateEncumbranceInfo();  // flags: 65536 
  public function GetCurrentInventoryState() : EInventoryMenuState;  // flags: 65536 
  private function SetInventoryState( targetMode : Int32);  // flags: 16384 
  private function UpdateEntityTemplate();  // flags: 16384 
  public function SetMenuState( newState : CName);  // flags: 65536 
  protected function ApplyMenuState( newState : CName);  // flags: 32768 
  public function UpdateData();  // flags: 65536 
  public function InventoryUpdateItem( item : SItemUniqueId);  // flags: 65536 
  public function ShopUpdateItem( item : SItemUniqueId);  // flags: 65536 
  public function InventoryUpdateItems( itemsList : array<SItemUniqueId>);  // flags: 65536 
  public function InventoryRemoveItem( item : SItemUniqueId,  optional  keepSelectionIdx : Bool);  // flags: 65536 
  public function ShopRemoveItem( item : SItemUniqueId);  // flags: 65536 
  public function PaperdollRemoveItem( item : SItemUniqueId);  // flags: 65536 
  public function PaperdollUpdateItemsList( itemsList : array<SItemUniqueId>);  // flags: 65536 
  public function PaperdollUpdateItem( item : SItemUniqueId);  // flags: 65536 
  public function PaperdollUpdateHorseItem( item : SItemUniqueId);  // flags: 65536 
  public function UpdateItemData( item : SItemUniqueId);  // flags: 65536 
  public function PaperdollUpdateAll();  // flags: 65536 
  public function UpdateHorsePaperdoll();  // flags: 65536 
  public function UpdateHorseInventory();  // flags: 65536 
  public function UpdateContainer();  // flags: 65536 
  public function UpdateShop();  // flags: 65536 
  private function UpdateItemsList( flashBinding : String,  targetInventory : W3GuiBaseInventoryComponent,  optional  secondaryInventory : W3GuiBaseInventoryComponent);  // flags: 16384 
  private function UpdateItemsCounter();  // flags: 16384 
  public event function OnGetItemData( item : SItemUniqueId,  compareItemType : Int32) : Bool;  // flags: 65568 
  public event function OnGetItemDataForMouse( item : SItemUniqueId,  compareItemType : Int32) : Bool;  // flags: 65568 
  public event function OnShowStatTooltip( statName : CName) : Bool;  // flags: 65568 
  public event function OnGetEmptyPaperdollTooltip( equipID : Int32,  isLocked : Bool) : Bool;  // flags: 65568 
  public function ShowStatTooltip( statName : CName);  // flags: 65536 
  public function HideStatTooltip();  // flags: 65536 
  public function GetItemExpTooltipData( item : SItemUniqueId) : CScriptedFlashObject;  // flags: 65536 
  public function ShowEmptySlotTooltip( slotId : Int32);  // flags: 65536 
  public event function OnClearSlotNewFlag( item : SItemUniqueId) : Bool;  // flags: 65568 
  public function ShowItemTooltip( item : SItemUniqueId,  compareItemType : Int32);  // flags: 65536 
  public function ShowItemMouseTooltip( item : SItemUniqueId,  compareItemType : Int32);  // flags: 65536 
  public function HideItemTooltip();  // flags: 65536 
  public function GetCurrentInventoryComponent() : W3GuiBaseInventoryComponent;  // flags: 65536 
  public function GetCurrentInventory( item : SItemUniqueId) : CInventoryComponent;  // flags: 65536 
  public function GetInventoryComponent( _targetInv : W3GuiBaseInventoryComponent) : CInventoryComponent;  // flags: 65536 
  public function getShopInventory() : CInventoryComponent;  // flags: 65536 
  public function GetFilterType( item : SItemUniqueId) : EInventoryFilterType;  // flags: 65536 
  public function GetItemDefaultActionName( item : SItemUniqueId) : String;  // flags: 65536 
  public function GetItemDefaultAction( item : SItemUniqueId) : EInventoryActionType;  // flags: 65536 
  private function GetHealthTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetToxicityTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetStaminaTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetAdrenalineTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetOffenseTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetDefenseTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetSignsTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function PushStatItem( out  statsList : CScriptedFlashArray,  label : String,  value : String);  // flags: 16384 
  private function StatToStr( value : Float) : String;  // flags: 16384 
  private function UpdatePlayerStatisticsData();  // flags: 16384 
  private function updateSentStatValue( statName : CName,  statValue : String);  // flags: 16384 
  private function getLastSentStatValue( statName : CName) : String;  // flags: 16384 
  private function GetSignStat( targetSkill : ESkill) : String;  // flags: 16384 
  public function GetCurrentEquippedQuickSlot() : EEquipmentSlots;  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public event function OnGlobalUpdate() : Bool;  // flags: 65568 
  public event function OnSetInventoryGridFilter( item : SItemUniqueId) : Bool;  // flags: 65568 
  public event function OnSaveItemGridPosition( item : SItemUniqueId,  gridPos : Int32) : Bool;  // flags: 65568 
  private function SetGridPosition( item : SItemUniqueId,  gridPos : Int32);  // flags: 16384 
  private function GetGridPosition( item : SItemUniqueId) : Int32;  // flags: 16384 
  public event function OnTooltipLoaded() : Bool;  // flags: 65568 
  public event function OnHighlightPaperDollSlot( slotType : Int32) : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnSetActiveItem() : Bool;  // flags: 65568 
  public event function OnSwapItems( playerItem : SItemUniqueId,  paperdollItem : SItemUniqueId,  paperdollSlot : Int32) : Bool;  // flags: 65568 
  public event function OnPutInSocket( item : SItemUniqueId) : Bool;  // flags: 65568 
  public function ShowApplyOilMode( item : SItemUniqueId);  // flags: 65536 
  public event function OnRepairItem( item : SItemUniqueId) : Bool;  // flags: 65568 
  public function TryEquipToPockets( item : SItemUniqueId,  slot : Int32) : Bool;  // flags: 65536 
  private function EquipToFirstEmptySocket( itemId : SItemUniqueId,  targetSlotList : array<Int32>);  // flags: 16384 
  public event function OnDropOnPaperdoll( item : SItemUniqueId,  slot : Int32,  quantity : Int32) : Bool;  // flags: 65568 
  public event function OnApplyOil( item : SItemUniqueId,  slot : Int32) : Bool;  // flags: 65568 
  public event function OnApplyUpgrade( item : SItemUniqueId,  slot : Int32) : Bool;  // flags: 65568 
  public event function OnApplyRepairKit( item : SItemUniqueId,  slot : Int32) : Bool;  // flags: 65568 
  public event function OnEquipItem( item : SItemUniqueId,  slot : Int32,  quantity : Int32) : Bool;  // flags: 65568 
  public function FindEmptySlot( first : EEquipmentSlots,  last : EEquipmentSlots,  out  outSlot : Int32) : Bool;  // flags: 65536 
  public function FindMaskSlot( first : EEquipmentSlots,  last : EEquipmentSlots,  out  outSlot : Int32) : Bool;  // flags: 65536 
  public event function OnUnequipItem( item : SItemUniqueId,  moveToIndex : Int32) : Bool;  // flags: 65568 
  public function UnequipItem( item : SItemUniqueId,  moveToIndex : Int32) : Bool;  // flags: 65536 
  public function UpdateInventoryFilter( filterType : EInventoryFilterType);  // flags: 65536 
  public event function OnDragItemStarted( itemId : SItemUniqueId) : Bool;  // flags: 65568 
  public event function OnEmptySlotActivate( equipID : Int32) : Bool;  // flags: 65568 
  protected function GetTabIndexForSlot( equipID : Int32) : Int32;  // flags: 32768 
  public event function OnDropItem( item : SItemUniqueId,  quantity : Int32) : Bool;  // flags: 65568 
  public event function OnReadBook( item : SItemUniqueId) : Bool;  // flags: 65568 
  public event function OnUpgradeItem( item : SItemUniqueId,  slot : Int32,  quantity : Int32) : Bool;  // flags: 65568 
  public event function OnTransferItem( item : SItemUniqueId,  quantity : Int32,  moveToIdx : Int32) : Bool;  // flags: 65568 
  public event function OnSellItem( itemId : SItemUniqueId,  quantity : Int32) : Bool;  // flags: 65568 
  public event function OnBuyItem( item : SItemUniqueId,  quantity : Int32,  moveToIdx : Int32) : Bool;  // flags: 65568 
  private function OpenQuantityPopup( itemId : SItemUniqueId,  action : EQuantityTransferFunction,  maxValue : Int32);  // flags: 16384 
  public function TakeItem( item : SItemUniqueId,  quantity : Int32);  // flags: 65536 
  public function GiveItem( item : SItemUniqueId,  quantity : Int32);  // flags: 65536 
  public function BuyItem( item : SItemUniqueId,  quantity : Int32) : Bool;  // flags: 65536 
  public function SellItem( item : SItemUniqueId,  quantity : Int32) : SItemUniqueId;  // flags: 65536 
  public function DropItem( item : SItemUniqueId,  quantity : Int32) : Bool;  // flags: 65536 
  public function FinalDropItem( item : SItemUniqueId,  quantity : Int32);  // flags: 65536 
  public function UpdatePlayerMoney();  // flags: 65536 
  public function UpdateMerchantData();  // flags: 65536 
  public event function OnSetCurrentPlayerGrid( value : String) : Bool;  // flags: 65568 
  public event function OnConsumeItem( item : SItemUniqueId) : Bool;  // flags: 65568 
  public event function OnMoveItem( item : SItemUniqueId,  moveToIndex : Int32) : Bool;  // flags: 65568 
  public event function OnMoveItems( item : SItemUniqueId,  moveToIndex : Int32,  itemSecond : SItemUniqueId,  moveToSecondIndex : Int32) : Bool;  // flags: 65568 
  public event function OnContainerFilterSelected( filterType : EInventoryFilterType) : Bool;  // flags: 65568 
  public function SaveStateData();  // flags: 65536 
  public event function OnModuleSelected( moduleID : Int32,  moduleBindingName : String) : Bool;  // flags: 65568 
  protected function createStatContext();  // flags: 32768 
  protected function createPaperdollContext();  // flags: 32768 
  protected function createInventoryContext();  // flags: 32768 
  protected function createExternalContext();  // flags: 32768 
  public event function OnSelectInventoryItem( itemId : SItemUniqueId,  slot : Int32,  positionX : Float,  positionY : Float) : Bool;  // flags: 65568 
  public event function OnSelectPaperdollItem( itemId : SItemUniqueId,  slot : Int32,  positionX : Float,  positionY : Float) : Bool;  // flags: 65568 
  public event function OnSelectPlayerStat( statId : CName) : Bool;  // flags: 65568 
  public function SaveSelectedItem( itemId : SItemUniqueId);  // flags: 65536 
  public function ReadBook( item : SItemUniqueId);  // flags: 65536 
  public function ShowBookPopup( BookTitle : String,  BookText : String);  // flags: 65536 
  public event function OnShowFullStats() : Bool;  // flags: 65568 
  public event function OnPlaySound( soundKey : String) : Bool;  // flags: 65568 
  public event function OnInputHandled( NavCode : String,  KeyCode : Int32,  ActionId : Int32) : Bool;  // flags: 65568 
  public event function OnMouseInputHandled( NavCodeAnalog : String,  itemId : SItemUniqueId,  slotId : Int32,  moduleBinding : String) : Bool;  // flags: 65568 
  public event function OnSetMouseInventoryComponent( moduleBinding : String,  slotId : Int32) : Bool;  // flags: 65568 
  public event function OnShowItemPopup( item : SItemUniqueId) : Bool;  // flags: 65568 
  public function ShowItemInfoPopup( item : SItemUniqueId);  // flags: 65536 
  public function OnItemPopupClosed();  // flags: 65536 
  private function UpdateGuiSceneEntityItems();  // flags: 16384 
  public event function OnInventoryItemSelected( itemId : SItemUniqueId) : Bool;  // flags: 65568 
  public function ShowSelectionMode( sourceItem : SItemUniqueId,  targetSlotList : array<Int32>);  // flags: 65536 
  public function HideSelectionMode();  // flags: 65536 
  public event function OnSelectionModeCancelRequested() : Bool;  // flags: 65568 
  public event function OnSelectionModeTargetChosen( targetSlot : Int32) : Bool;  // flags: 65568 
  private function ApplyUpgrade( itemId : SItemUniqueId,  targetSlot : Int32);  // flags: 16384 
  private function ApplyOil( itemId : SItemUniqueId,  targetSlot : Int32);  // flags: 16384 
  private function ApplyRepairKit( itemId : SItemUniqueId,  targetSlot : Int32);  // flags: 16384 
  public function UpdateAllItemData();  // flags: 65536 
  public final function GetCurrentlySelectedTab() : Int32;  // flags: 65552 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class W3Effect_WellFed extends W3RegenEffect {

  protected function GetSelfInteraction( e : CBaseGameplayEffect) : EEffectInteract;  // flags: 32768 
  public function CacheSettings();  // flags: 65536 

}
import class W3Effect_WellHydrated extends W3RegenEffect {

  protected function GetSelfInteraction( e : CBaseGameplayEffect) : EEffectInteract;  // flags: 32768 
  public function CacheSettings();  // flags: 65536 

}
import class W3Effect_DoTHPRegenReduce extends CBaseGameplayEffect {

  public function GetEffectValue() : SAbilityAttributeValue;  // flags: 65536 

}
import class CEncounterDataManager extends IScriptable {

  public function ProcessFullRespawn();  // flags: 65536 
  private function ResetData();  // flags: 16384 
  public function DisableMonitor( monitor : ISpawnTreeSpawnMonitorInitializer);  // flags: 65536 
  public function IsMonitorEnabled( monitor : ISpawnTreeSpawnMonitorInitializer) : Bool;  // flags: 65536 
  public function AddOwnerTask( _task : SOwnerEncounterTaskParams);  // flags: 65536 
  public function AddExternalTask( _task : SExternalEncounterTaskParams);  // flags: 65536 
  public function RemoveOwnerTask( _task : SOwnerEncounterTaskParams);  // flags: 65536 
  public function RemoveExternalTask( _task : SExternalEncounterTaskParams);  // flags: 65536 
  public function SetOwnerTaskUniqueId( _task : SOwnerEncounterTaskParams);  // flags: 65536 
  public function SetExternalTaskUniqueId( _task : SExternalEncounterTaskParams);  // flags: 65536 
  public function GetOwnerTaskByID( _id : Int32,  out  task : SOwnerEncounterTaskParams) : Bool;  // flags: 65536 
  public function GetExternalTaskByID( _id : Int32,  out  task : SExternalEncounterTaskParams) : Bool;  // flags: 65536 
  public function DisableCreaturesGroup( groupName : CName,  sourceName : CName);  // flags: 65536 
  public function EnableCreaturesGroup( groupName : CName,  sourceName : CName);  // flags: 65536 
  private function InitCreaturesGroupEntry( groupName : CName) : CreaturesGroupDef;  // flags: 16384 
  public function GetDisabledCreaturesGroupSourcesAmount( groupName : CName) : Int32;  // flags: 65536 
  public function IsCreatureGroupDisableByAnySource( groupName : CName) : Bool;  // flags: 65536 
  public function AddLostCreatureByEntry( entryName : CName);  // flags: 65536 
  public function RemoveLostCreatureByEntry( entryName : CName);  // flags: 65536 
  public function GetLostCreaturesByEntry( entryName : CName) : Int32;  // flags: 65536 
  public function AddKilledCreatureByEntry( entryName : CName);  // flags: 65536 
  public function AddSpawnedCreatureByEntry( entryName : CName);  // flags: 65536 
  public function RemoveSpawnedCreatureByEntry( entryName : CName);  // flags: 65536 
  public function SetCurrentlySpawnedCreatureByEntry( entryName : CName,  spawnedValue : Int32);  // flags: 65536 
  public function AddCurrentlySpawnedCreatureByEntry( entryName : CName);  // flags: 65536 
  public function RemoveCurrentlySpawnedCreatureByEntry( entryName : CName);  // flags: 65536 
  public function GetKilledCreaturesByEntry( entryName : CName) : Int32;  // flags: 65536 
  public function GetCurrentlySpawnedCreaturesByEntry( entryName : CName) : Int32;  // flags: 65536 
  public function GetSpawnedCreaturesByEntry( entryName : CName) : Int32;  // flags: 65536 
  private function InitCreatureCounterEntry( entryName : CName) : CreatureCounterDef;  // flags: 16384 
  public function AddKilledCreature();  // flags: 65536 
  public function AddSpawnedCreature();  // flags: 65536 
  public function RemoveSpawnedCreature();  // flags: 65536 
  public function GetKilledCreatures() : Int32;  // flags: 65536 
  public function GetCurrentlySpawnedCreatures() : Int32;  // flags: 65536 
  public function GetSpawnedCreatures() : Int32;  // flags: 65536 
  public function SetCurrentlySpawnedCreaturesAmount( spawnedValue : Int32);  // flags: 65536 

}
import class CAIRiderIdleRedefinitionParameters extends CAIRedefinitionParameters {

  public function Init();  // flags: 65536 

}
import class CAIStartingBehaviorParameters extends CAIRedefinitionParameters {

  public function SetPriority( p : Int32);  // flags: 65536 

}
import class CAIRiderStartingBehaviorParameters extends CAIRedefinitionParameters {

  public function SetPriority( p : Int32);  // flags: 65536 

}
import class CBridgePiece extends CScriptedDestroyableComponent {

  public final function IdleTick( time : Float);  // flags: 65552 
  public final function PreDestroyTick( time : Float);  // flags: 65552 
  public final function DestroyTick( time : Float);  // flags: 65552 
  public final function PostDestroyTick( time : Float);  // flags: 65552 

}
import class W3SpawnEntityOnAnimEvent extends CScriptedComponent {

  public event function OnComponentAttached() : Bool;  // flags: 65568 
  public event function OnAnimEvent_Custom( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function SpawnEntity();  // flags: 65536 

}
import class W3WindEffectOnGroundComponent extends CSelfUpdatingComponent {

  public event function OnComponentAttached() : Bool;  // flags: 65568 
  public event function OnAnimEvent_Custom( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnComponentTick( _Dt : Float) : Bool;  // flags: 65568 
  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  private function PlayEffect();  // flags: 16384 

}
import class CAINpcWorkIdle extends CAIIdleTree {

  public function Init();  // flags: 65536 

}
import class W3OnSpawnPortal extends CEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function HideCreature( _actor : CActor);  // flags: 65536 
  public function SetFxTimeout( _timeout : Float);  // flags: 65536 
  public function SetFxName( _fxName : CName);  // flags: 65536 
  public function StopFxTimer( _timeDelta : Float,  id : Int32);  // flags: 66560 
  public function DestroyPortalTimer( _timeDelta : Float,  id : Int32);  // flags: 66560 
  public function ShowCreatureTimer( _timeDelta : Float,  id : Int32);  // flags: 66560 
  private function SetVisibility( _actor : CActor,  _isVisible : Bool);  // flags: 16384 

}
import class CExplorationStateInvalid extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CSpawnTreeInitializerSmartWanderAndWorkAI extends ISpawnTreeInitializerIdleSmartAI {

  public function GetObjectForPropertiesEdition() : IScriptable;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 
  public function Init();  // flags: 65536 

}
import class CAIWanderWithHistory extends CAIWanderTree {

  public function Init();  // flags: 65536 

}
import class CSpawnTreeInitializerSmartWanderAI extends ISpawnTreeInitializerIdleSmartAI {

  public function GetObjectForPropertiesEdition() : IScriptable;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 
  public function Init();  // flags: 65536 

}
import class CSpawnTreeInitializerSmartWorkAI extends ISpawnTreeInitializerIdleSmartAI {

  public function GetObjectForPropertiesEdition() : IScriptable;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 
  public function Init();  // flags: 65536 
  public function GetSubInitializerClassName() : CName;  // flags: 65536 
  public function GetContextMenuSpecialOptions( out  names : array<String>);  // flags: 65536 
  public function CreateSpawner( visibility : ESpawnTreeSpawnVisibility);  // flags: 65536 
  public function RunSpecialOption( option : Int32);  // flags: 65536 

}
import class W3MapInitData extends W3MenuInitData {

  public function GetTriggeredExitEntity() : Bool;  // flags: 65536 
  public function SetTriggeredExitEntity( triggeredExitEntity : Bool);  // flags: 65536 
  public function GetUsedFastTravelEntity() : CEntity;  // flags: 65536 
  public function SetUsedFastTravelEntity( entity : CEntity);  // flags: 65536 
  public function GetIsSailing() : Bool;  // flags: 65536 
  public function SetIsSailing( isSailing : Bool);  // flags: 65536 

}
import class W3FocusModeEffectIntensity extends CObject {

  public function Init( strategy : EFocusModeChooseEntityStrategy);  // flags: 65536 
  public function Update( entity : CEntity,  distance : Float,  intensity : Float);  // flags: 65536 
  public function ForceUpdate( entity : CEntity,  distance : Float,  intensity : Float);  // flags: 65536 
  public function ValueChanged() : Bool;  // flags: 65536 
  public function GetValue( optional  reset : Bool) : Float;  // flags: 65536 
  public function GetBestEntity() : CEntity;  // flags: 65536 
  public function Reset();  // flags: 65536 
  public function IsBestEntity( distance : Float,  intensity : Float) : Bool;  // flags: 65536 

}
import class CExplorationStateClimb extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  private function DebugEnterToClimb();  // flags: 16384 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  protected function AddActionsToBlock();  // flags: 32768 
  public function GetIfCameraIsKept() : Bool;  // flags: 65536 
  public function GetCameraSet( out  cameraSet : CCameraParametersSet) : Bool;  // flags: 65536 
  private function AddAnimEventCallbacks();  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  public function StateUpdateInactive( _Dt : Float);  // flags: 65536 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  private function InitClimbs();  // flags: 16384 
  private function InitializeClimb( i : Int32);  // flags: 16384 
  private function ComputeMinMaxHeight( out  heightTotalMin : Float,  out  heightTotalMax : Float);  // flags: 16384 
  private function FindPlayerState() : EClimbRequirementType;  // flags: 16384 
  private function InputWantsToEnter() : Bool;  // flags: 16384 
  private function ComputeInput();  // flags: 16384 
  private function OracleWantsToEnter() : Bool;  // flags: 16384 
  private function GetDistanceType() : EClimbDistanceType;  // flags: 16384 
  private function PreRefineIsValid() : Bool;  // flags: 16384 
  private function RefinePlayerState();  // flags: 16384 
  private function PostRefineState();  // flags: 16384 
  private function FindApropriateClimb() : Bool;  // flags: 16384 
  private function SetBehaviorData();  // flags: 16384 
  private function SetProperCameraAnim( reset : Bool,  speed : Float);  // flags: 16384 
  private function CancelCameraAnimation();  // flags: 16384 
  private function SetInitialMovementAdjustor();  // flags: 16384 
  private function PrepareMovementAdjustorParameters();  // flags: 16384 
  private function StartMovementAdjustorTranslation( duration : Float);  // flags: 16384 
  private function StartMovementAdjustorInitialRotation( duration : Float);  // flags: 16384 
  private function StartMovementAdjustorInitialTranslation( translationBack : Vector);  // flags: 16384 
  private function StartMovementAdjustorRotation( duration : Float);  // flags: 16384 
  private function ApplyFakeGravity();  // flags: 16384 
  private function UpdateAdjusting2D( _Dt : Float);  // flags: 16384 
  private function ApplyAnimationSpeed( speed : Float);  // flags: 16384 
  private function StartMovementAdjustorCorrectPelvis();  // flags: 16384 
  private function StartHandIK( left : Bool,  right : Bool);  // flags: 16384 
  private function StopHandIK( left : Bool,  right : Bool);  // flags: 16384 
  private function UpdateHandsIK( _Dt : Float);  // flags: 16384 
  private function UpdateAndSetHandsIKBlend( _Dt : Float);  // flags: 16384 
  private function UpdateTranslationOutsideCapsule( _Dt : Float);  // flags: 16384 
  private function UpdateTargetPelvisTranslationTarget();  // flags: 16384 
  private function CorrectPelvisStartEnd();  // flags: 16384 
  private function SetTranslationToBehaviour();  // flags: 16384 
  private function ResetTranslationToBehaviour();  // flags: 16384 
  private function UpdateRunOrWalk();  // flags: 16384 
  private function CheckVerticalSlideEnd();  // flags: 16384 
  public function UpdateCameraIfNeeded( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65536 
  public function GetDebugText() : String;  // flags: 65536 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags,  active : Bool) : Bool;  // flags: 65568 
  private function DebugLogSuccesfullClimb();  // flags: 16384 
  private function GetClimbTypeText() : String;  // flags: 16384 

}
import class CR4HudModuleInteractions extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnRequestShowHold() : Bool;  // flags: 65568 
  public event function OnRequestHideHold() : Bool;  // flags: 65568 
  public event function OnHoldInteractionCallback() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public event function OnInteractionsUpdated( component : CInteractionComponent) : Bool;  // flags: 65568 
  public function GetInteractionScreenPosition( interactionEntity : CEntity,  interactionComponent : CInteractionComponent,  out  screenPos : Vector,  optional  normalized : Bool) : Bool;  // flags: 65536 
  protected function SetInteractionEntity( entity : CGameplayEntity,  comp : CInteractionComponent);  // flags: 32768 
  public function IsInteractionInCameraView( interactionComponent : CInteractionComponent) : Bool;  // flags: 65536 
  protected function UpdateScale( scale : Float,  flashModule : CScriptedFlashSprite) : Bool;  // flags: 32768 
  public function ForceUpdateModule();  // flags: 65536 
  public function EnableHoldIndicator( gpadKeyCode : Int32,  kbKeyCode : Int32,  label : String,  holdDuration : Float,  optional  intName : CName);  // flags: 65536 
  public function DisableHoldIndicator();  // flags: 65536 
  public function AddFocusInteractionIcon( entity : CEntity,  actionName : CName);  // flags: 65536 
  public function InvalidateAllFocusInteractionIcons();  // flags: 65536 
  public function RemoveAllFocusInteractionIcons();  // flags: 65536 
  public function UpdateFocusInteractionIcons();  // flags: 65536 
  public function GetFocusInteractionUpdateInterval() : Float;  // flags: 65536 
  public function GetFocusInteractionRadius() : Float;  // flags: 65536 
  public function OnInputContextChanged();  // flags: 65536 

}
import class CPlayerStateTraverseExploration extends CPlayerStateBase {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnCanLeaveState( newState : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public final function SetExploration( e : SExplorationQueryToken);  // flags: 65552 
  public function ProcessExploration();  // flags: 65664 

}
import class CExplorationStateSlide extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  protected function AddActionsToBlock();  // flags: 32768 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  private function StateEnterSpecific( prevStateName : CName);  // flags: 16384 
  private function AddAnimEventCallbacks();  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function PrepareFallFromSlide();  // flags: 16384 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  public function StateUpdateInactive( _Dt : Float);  // flags: 65536 
  public function GetBehaviorEventName() : CName;  // flags: 65536 
  public function GetBehaviorIsEventForced( fromState : CName) : Bool;  // flags: 65536 
  public function GetDebugText() : String;  // flags: 65536 
  private function GrabOrCreateDefaultMaterialParams();  // flags: 16384 
  private function WantsToEnterBasic( optional  checkingForExit : Bool) : Bool;  // flags: 16384 
  public function WantsToEnterWide() : Bool;  // flags: 65536 
  private function StateWantsToExit() : Bool;  // flags: 16384 
  private function SpeedAllowsExit() : Bool;  // flags: 16384 
  private function UpdateFallCoef( _Dt : Float);  // flags: 16384 
  private function ApplySlideDamage( _Dt : Float);  // flags: 16384 
  private function SetProperCameraAnim( increasing : Bool);  // flags: 16384 
  private function StopCameraAnim();  // flags: 16384 
  protected function CheckLandingDamage();  // flags: 32768 
  private function SetTerrainParameters();  // flags: 16384 
  private function FindMaterialId( materialName : CName) : Int32;  // flags: 16384 
  private function FindPresetByName( presetName : CName) : Int32;  // flags: 16384 
  private function UpdateForcedDirection( slideDir : Vector);  // flags: 16384 
  private function ComputeOrientingSpeed( slideCoef : Float) : Float;  // flags: 16384 
  private function SubstateChangePrecheck( _Dt : Float);  // flags: 16384 
  private function UpdateAngleToRotateToAdaptToSlope( slideDirection : Vector,  _Dt : Float);  // flags: 16384 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 
  private function UpdateCollisions();  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function ReactToSlide() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags,  active : Bool) : Bool;  // flags: 65568 

}
import class CR4HudModuleSignInfo extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public event function OnSignInfoShowBckArrow( bShow : Bool) : Bool;  // flags: 65568 
  public function UpdateSignData();  // flags: 65536 
  private function GetSignIcon() : String;  // flags: 16384 
  private function GetSignIconByType( signType : ESignType) : String;  // flags: 16384 
  public function ShowBckArrow( bShow : Bool);  // flags: 65536 
  public function EnableElement( enable : Bool);  // flags: 65536 

}
import class CR4HudModuleItemInfo extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function GetCiriItem() : SItemUniqueId;  // flags: 65536 
  public function ResetItems();  // flags: 65536 
  public function UpdateItem( out  currItem : SItemUniqueId,  out  prevItem : SItemUniqueId,  out  prevItemAmmo : Int32,  bindingID : HudItemInfoBinding,  slotId : Int32);  // flags: 65536 
  public function ClearItems();  // flags: 65536 
  public function UpdateItemData( item : SItemUniqueId,  bindingID : HudItemInfoBinding);  // flags: 65536 
  private function GetKeyByBinding( bindingName : HudItemInfoBinding) : Int32;  // flags: 16384 
  private function GetPCKeyByBinding( bindingName : HudItemInfoBinding) : Int32;  // flags: 16384 
  protected function UpdatePosition( anchorX : Float,  anchorY : Float);  // flags: 32768 
  public function ForceShowElement();  // flags: 65536 
  public function EnableElement( enable : Bool);  // flags: 65536 
  public function ShowElementIgnoreState( show : Bool,  optional  bImmediately : Bool);  // flags: 65536 
  public function SetAlwaysDisplayed( value : Bool);  // flags: 65536 

}
import class W3Condition extends CObject {

  public function Test( actor : CActor) : Bool;  // flags: 66048 

}
import class CExplorationStateSkatingDash extends CExplorationStateAbstract {

  protected function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 32768 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  protected function StateEnterSpecific( prevStateName : CName);  // flags: 32768 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  public function StateUpdateInactive( _Dt : Float);  // flags: 65536 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function SetTheForwardFoot();  // flags: 16384 
  private function HasEnoughStamina() : Bool;  // flags: 16384 
  private function BlockStamina();  // flags: 16384 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class W3FlammableAreaTrigger extends W3EffectAreaTrigger {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Ignite();  // flags: 65536 
  private function Explode();  // flags: 16384 
  public function Extinguish( td : Float,  id : Int32);  // flags: 66560 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public function OnFireHitAfter( td : Float,  id : Int32);  // flags: 66560 
  private function IsActive() : Bool;  // flags: 16384 
  private function SetActive( val : Bool);  // flags: 16384 

}
import class CExplorationInterceptorStateAbstract extends CExplorationStateTransitionAbstract {

  public function IsMachForThisStates( _FromN : CName,  _ToN : CName) : Bool;  // flags: 65536 

}
import class CExplorationStateJump extends CExplorationStateAbstract {

  protected function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 32768 
  protected function AddActionsToBlock();  // flags: 32768 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  protected function StateEnterSpecific( prevStateName : CName);  // flags: 32768 
  public function GetIfCameraIsKept() : Bool;  // flags: 65536 
  private function AddAnimEventCallbacks();  // flags: 16384 
  public function GetBehaviorEventName() : CName;  // flags: 65536 
  public function GetBehaviorIsEventForced( fromState : CName) : Bool;  // flags: 65536 
  public function NeedsBehaviorConfirmation() : Bool;  // flags: 65536 
  private function StateEnterConfirmedSpecific();  // flags: 16384 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  public function StateUpdateInactive( _Dt : Float);  // flags: 65536 
  private function UpdateCameraChange();  // flags: 16384 
  private function StateExitSpecific( nextStateName : CName);  // flags: 16384 
  private function RemoveAnimEventCallbacks();  // flags: 16384 
  public function GetDebugText() : String;  // flags: 65536 
  private function GetProperJumpTypeParameters( prevStateName : CName);  // flags: 16384 
  private function SetSpeedOverrideCheck();  // flags: 16384 
  private function SaveProperJumpParameters();  // flags: 16384 
  private function GetJumpTypeThatShouldPlay( prevStateName : CName) : EJumpType;  // flags: 16384 
  private function SetJumpParametersBasedOnType( type : EJumpType);  // flags: 16384 
  private function BlockStamina( prevStateName : CName);  // flags: 16384 
  private function AddConservingVelocityToTheParams();  // flags: 16384 
  private function WantsToInteractWithExploration() : Bool;  // flags: 16384 
  private function CanWeCheckForInteraction() : Bool;  // flags: 16384 
  private function IsInteractionPointInRange( point : Vector) : Bool;  // flags: 16384 
  private function IsInteractionPointInRangeOnStartFalling( point : Vector) : Bool;  // flags: 16384 
  private function ShouldAirCollide() : Bool;  // flags: 16384 
  private function ShouldSideCollide() : Bool;  // flags: 16384 
  private function GetExplorationOwnerPosition() : Vector;  // flags: 16384 
  private function Update2DLogicMovement( _Dt : Float);  // flags: 16384 
  private function UpdateVerticalMovement( _Dt : Float) : Float;  // flags: 16384 
  private function ChangeTo( jumpSubstate : EJumpSubState);  // flags: 16384 
  private function ChangeToTakeOff();  // flags: 16384 
  private function ChangeToFlight();  // flags: 16384 
  private function ChangeToInertial();  // flags: 16384 
  private function ChangeToPredictingLand();  // flags: 16384 
  private function CheckLandPrediction() : Bool;  // flags: 16384 
  private function SetBehaviorParameters();  // flags: 16384 
  private function SetInitialOrientation();  // flags: 16384 
  private function HasToTurnBack() : Bool;  // flags: 16384 
  private function GetJumpInitialOrientation();  // flags: 16384 
  public function UpdateCameraIfNeeded( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65536 
  private function ChangeCameraToFall();  // flags: 16384 
  public function ReactToHitCeiling() : Bool;  // flags: 65536 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo);  // flags: 65536 

}
import class CExplorationStateSkatingDrift extends CExplorationStateAbstract {

  private function InitializeSpecific( _Exploration : CExplorationStateManager);  // flags: 16384 
  private function AddDefaultStateChangesSpecific();  // flags: 16384 
  public function StateWantsToEnter() : Bool;  // flags: 65536 
  public function StateCanEnter( curStateName : CName) : Bool;  // flags: 65536 
  protected function StateEnterSpecific( prevStateName : CName);  // flags: 32768 
  public function StateChangePrecheck() : CName;  // flags: 65536 
  protected function StateUpdateSpecific( _Dt : Float);  // flags: 32768 
  protected function StateExitSpecific( nextStateName : CName);  // flags: 32768 
  protected function UpdateExit( _Dt : Float,  braking : Bool);  // flags: 32768 
  public function ReactToLoseGround() : Bool;  // flags: 65536 
  public function ReactToHitGround() : Bool;  // flags: 65536 
  public function CanInteract() : Bool;  // flags: 65536 

}
import class CR4HudModuleMessage extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public event function OnMessageHidden() : Bool;  // flags: 65568 
  public function CheckPendingMessages() : Bool;  // flags: 65536 
  public function DisplayPendingMessage();  // flags: 65536 

}
import class CR4HudModuleTimeLapse extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function SetShowTime( showTime : Float);  // flags: 65536 
  public function SetTimeLapseMessage( localisationKey : String);  // flags: 65536 
  public function SetTimeLapseAdditionalMessage( localisationKey : String);  // flags: 65536 
  public function Show( bShow : Bool);  // flags: 65536 

}
import class W3Trap extends W3MonsterClue {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnClueDetected() : Bool;  // flags: 65568 
  public event function OnWeaponHit( act : W3DamageAction) : Bool;  // flags: 65568 
  public function Activate( optional  _Target : CNode);  // flags: 65536 
  public function Deactivate( optional  _Delta : Float,  optional  id : Int32);  // flags: 66560 
  public final function RemoveTarget( _Target : CNode);  // flags: 65552 
  private function ArmTrapTimer( optional  _Delta : Float,  optional  id : Int32);  // flags: 17408 
  private function DisarmTrapTimer( optional  _Delta : Float,  optional  id : Int32);  // flags: 17408 
  public function Arm( shouldArm : Bool);  // flags: 65536 
  public function UpdateInteraction( optional  comp : CComponent);  // flags: 65536 
  public function DisableAllInteractions();  // flags: 65536 
  private function SetFacts();  // flags: 16384 
  private function StructFactsHack();  // flags: 16384 
  public event function OnManageTrap( operations : array<ETrapOperation>,  activator : CActor) : Bool;  // flags: 65568 

}
import class W3IllusionSpawner extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function SpawnIllusion();  // flags: 65536 
  public function ManualDispel();  // flags: 65536 
  public function SetDestroyed();  // flags: 65536 

}
import class W3IllusionaryObstacle extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function SetOneLinerHandling( h : EIllusionDiscoveredOneliner);  // flags: 65536 
  public function Dispel();  // flags: 65536 
  private function DeactivateFocusArea( _delta : Float,  id : Int32);  // flags: 17408 
  public function OverrideIllusionObstacleFactOnSpawn( overrideFactName : String);  // flags: 65536 
  public function OverrideIllusionObstacleFactOnDiscovery( overrideFactName : String);  // flags: 65536 
  public function SetDestroyed();  // flags: 65536 
  public function SetIllusionSpawner( _illusionSpawner : W3IllusionSpawner);  // flags: 65536 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function DestroyObstacle( optional  destroyAfter : Float);  // flags: 65536 
  public function SetIllusionEnabled( enabled : Bool);  // flags: 65536 
  public function PlayerHasMedallion() : Bool;  // flags: 65536 
  public final function SetDiscoveryOnelinerTag( t : String);  // flags: 65552 
  public function DispelAllIlussions();  // flags: 65536 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3BeeSwarm extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Enable( flag : Bool);  // flags: 65536 
  public function SetVelocity( newVel : Float);  // flags: 65536 
  public function IsPlayerTooFar() : Bool;  // flags: 65536 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public function DestroyEnt( dt : Float,  id : Int32);  // flags: 66560 
  public function SetSwarmOriginEntity( e : CGameplayEntity);  // flags: 65536 
  public function GetOriginPoint() : Vector;  // flags: 65536 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function ApplyEffect( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function CheckForTargets( dt : Float,  id : Int32);  // flags: 66560 
  public function HasTarget() : Bool;  // flags: 65536 
  public function GetTargets() : array<CGameplayEntity>;  // flags: 65536 
  public function ClearVictims();  // flags: 65536 

}
import class W3AnimatedContainer extends W3Container {

  public event function OnDetaching() : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function ProcessLoot();  // flags: 65536 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public function OnContainerClosed();  // flags: 65536 
  public function PlayInteractionAnimation();  // flags: 65536 
  public function BlockGameplayActions( lock : Bool);  // flags: 65536 
  public function ShouldBlockGameplayActionsOnInteraction() : Bool;  // flags: 65536 
  public function GetToPointAndStartAction() : Bool;  // flags: 65536 
  private function AttachObject();  // flags: 16384 
  private function DetachObject();  // flags: 16384 
  public event function OnPlayerActionStartFinished() : Bool;  // flags: 65568 
  public event function OnPlayerActionEnd() : Bool;  // flags: 65568 
  public event function OnAnimEvent_Custom( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function TimerDeactivateAnimation( td : Float,  id : Int32);  // flags: 66560 

}
import class W3CookingPlace extends W3Container {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function OnContainerClosed();  // flags: 65536 
  private function LoadXMLData();  // flags: 16384 
  protected function CookingStarted();  // flags: 32768 
  protected function CookingDone();  // flags: 32768 
  private function Cooking( dt : Float,  id : Int32);  // flags: 17408 
  protected function Cook() : Bool;  // flags: 32768 
  private function UseSchematic( schematic : SCookingSchematic,  optional  quantity : Int32);  // flags: 16384 
  private function UseIngredients( items : array<SItemParts>);  // flags: 16384 
  protected function FindSchematicForIngredients( ingredients : array<SItemParts>,  out  matchedIngredients : array<SItemParts>) : Int32;  // flags: 32768 
  protected function FindSchematicByIngredientName( ingredientName : CName) : Int32;  // flags: 32768 
  protected function VoodooDollCurse();  // flags: 33280 
  protected function TreasureNekker();  // flags: 32768 
  protected function SpawnRandomEnemies();  // flags: 32768 

}
import class W3CampfirePlace extends W3CookingPlace {

  protected function CookingStarted();  // flags: 32768 
  protected function CookingDone();  // flags: 32768 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionDeactivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function ApplyBurning( dt : Float,  id : Int32);  // flags: 66560 
  public function OnContainerClosed();  // flags: 65536 
  public function ExplodeBombs();  // flags: 65536 
  protected function VoodooDollCurse();  // flags: 32768 

}
import class W3treasureHuntContainer extends W3Container {

  public function OnContainerClosed();  // flags: 65536 
  public function ProcessOnLootedEvents();  // flags: 65536 
  private function ActivateEvents( events : array<W3SwitchEvent>);  // flags: 16384 

}
import class CBoatRacingGateEntity extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private function ActivateNextGate();  // flags: 16384 
  private function AddFactOnReaching();  // flags: 16384 
  public function SetIsActive( val : Bool);  // flags: 65536 
  public function IsActive() : Bool;  // flags: 65536 
  public function SetIsReached( val : Bool);  // flags: 65536 
  public function IsReached() : Bool;  // flags: 65536 
  public function ActivateGate();  // flags: 65536 

}
import class W3MonsterClue extends W3AnimationInteractionEntity {

  public event function OnStreamIn() : Bool;  // flags: 65568 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnUpdateFocus( distance : Float,  accuracy : Float) : Bool;  // flags: 65568 
  public event function OnInteractionAttached( interaction : CInteractionComponent) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  public event function OnWeaponHit( act : W3DamageAction) : Bool;  // flags: 65568 
  public function ShouldBlockGameplayActionsOnInteraction() : Bool;  // flags: 65536 
  public event function OnDimmingFinished() : Bool;  // flags: 65568 
  public function SetAvailable( newIsAvailable : Bool);  // flags: 65536 
  public function SetInteractive( newIsInteractive : Bool);  // flags: 65536 
  public event function OnAvailabilityChange() : Bool;  // flags: 65568 
  public function GetIsAvailable() : Bool;  // flags: 65536 
  public function GetIsInteractive() : Bool;  // flags: 65536 
  public function GetIsReusable() : Bool;  // flags: 65536 
  public function GetIsVisible() : Bool;  // flags: 65536 
  public function GetWasDetected() : Bool;  // flags: 65536 
  public function GetIsIgnoringFM() : Bool;  // flags: 65536 
  public function PlayClueVoiceset( voicesetEnum : EPlayerVoicesetType);  // flags: 65536 
  public function IsInteractiveInternal() : Bool;  // flags: 65536 
  public function UpdateInteraction( optional  comp : CComponent);  // flags: 65536 
  public function UpdateVisibility();  // flags: 65536 
  public function ChangeAttribute( actionType : EFocusClueAttributeAction,  currentValue : Bool,  changeFlag : Bool) : Bool;  // flags: 65536 
  public function SetAttributes( actionType : EFocusClueAttributeAction,  changeIsAvailable : Bool,  changeIsInteractive : Bool,  changeIsReusable : Bool,  changeIsVisible : Bool,  changeWasDetected : Bool,  changeisIgnoringFM : Bool);  // flags: 65536 
  public function AddFacts();  // flags: 65536 
  public function RemoveFacts();  // flags: 65536 
  public event function OnPlayerActionEnd() : Bool;  // flags: 65568 
  public function CheckDistances( distance : Float,  accuracy : Float);  // flags: 65536 
  private function IndicateClue();  // flags: 16384 
  public function ResetFocusVibrationBlockTimer( delta : Float,  id : Int32);  // flags: 66560 
  public function MarkSeenClues();  // flags: 65536 
  public event function OnDetectionDistance( inRange : Bool,  accuracy : Float) : Bool;  // flags: 65568 
  public event function OnClueDetected() : Bool;  // flags: 65568 
  public event function OnManageClue( operations : array<EClueOperation>) : Bool;  // flags: 65568 
  public function DetectClue();  // flags: 65536 
  public function DelayedClueDetection( t : Float,  id : Int32);  // flags: 66560 
  public function ResetClue( removeFacts : Bool,  leaveVisible : Bool);  // flags: 65536 
  public function GetFocusActionName() : CName;  // flags: 65536 
  public function CanShowFocusInteractionIcon() : Bool;  // flags: 65536 
  public function ProcessReleaseVersions();  // flags: 65536 
  public function ProcessDecalsReleaseVersions( hideTag : CName,  optional  showTag : CName);  // flags: 65536 
  public function ProcessStaticMeshesReleaseVersions( hideTag : CName,  optional  showTag : CName);  // flags: 65536 
  public function ProcessMeshesReleaseVersions( hideTag : CName,  optional  showTag : CName);  // flags: 65536 
  public function ProcessRigidMeshesReleaseVersions( hideTag : CName,  optional  showTag : CName);  // flags: 65536 

}
import class SpringDamper extends CObject {

  public final function SetSmoothTime( value : Float);  // flags: 65552 
  public final function Init( curr : Float,  dest : Float);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function SetValue( value : Float);  // flags: 65552 
  public final function GetValue() : Float;  // flags: 65552 
  public final function GetDestValue() : Float;  // flags: 65552 
  public final function Update( dt : Float);  // flags: 65552 
  public final function UpdateAndGet( dt : Float,  value : Float) : Float;  // flags: 65552 
  public function UpdateManual( out  current : Float,  out  velocity : Float,  dest : Float,  dt : Float);  // flags: 65536 

}
import class CFocusSoundParam extends CGameplayEntityParam {
  import var eventStart : CName; // 4001
  import var eventStop : CName; // 4001
  import var hearingAngle : Float; // 4001
  import var visualEffectBoneName : CName; // 4001

  import public final function GetEventStart() : CName;  // flags: 65561 
  import public final function GetEventStop() : CName;  // flags: 65561 
  import public final function GetHearingAngle() : Float;  // flags: 65561 
  import public final function GetVisualEffectBoneName() : CName;  // flags: 65561 

}
import class W3AardEntity extends W3SignEntity {

  public function GetSignType() : ESignType;  // flags: 65536 
  public event function OnStarted() : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  protected function ProcessThrow( alternateCast : Bool);  // flags: 32768 
  public function ProcessThrowTimer( dt : Float,  id : Int32);  // flags: 66560 
  protected function ProcessThrow_MainTick( alternateCast : Bool);  // flags: 32768 
  public final function PlayAardFX( hitsWater : Bool);  // flags: 65552 
  public function DelayedDestroyTimer( dt : Float,  id : Int32);  // flags: 66560 

}
import class W3Effect_YrdenHealthDrain extends W3DamageOverTimeEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  protected function SetEffectValue();  // flags: 32768 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 

}
import class W3Switch extends CGameplayEntity {

  public function __PrintState( optional  prefix : Bool);  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAnimSwitchedOff() : Bool;  // flags: 65568 
  public event function OnAnimSwitchingOn() : Bool;  // flags: 65568 
  public event function OnAnimSwitchedOn() : Bool;  // flags: 65568 
  public event function OnAnimSwitchingOff() : Bool;  // flags: 65568 
  public event function OnManageSwitch( operations : array<ESwitchOperation>,  force : Bool,  skipEvents : Bool) : Bool;  // flags: 65568 
  public function Reset( optional  enable : EResetSwitchMode,  optional  lock : EResetSwitchMode,  optional  on : EResetSwitchMode,  optional  force : Bool,  optional  skipEvents : Bool);  // flags: 65536 
  public function RestoreAfterSave();  // flags: 65536 
  public function Turn( on : Bool,  actor : CActor,  force : Bool,  skipEvents : Bool);  // flags: 65536 
  public function ProcessPostTurnActions( force : Bool,  skip : Bool);  // flags: 65536 
  public function Toggle( actor : CActor,  force : Bool,  skip : Bool);  // flags: 65536 
  public function Enable( enable : Bool);  // flags: 65536 
  public function Lock( lock : Bool);  // flags: 65536 
  public function IsEnabled() : Bool;  // flags: 65536 
  public function IsLocked() : Bool;  // flags: 65536 
  public function IsOn() : Bool;  // flags: 65536 
  public function IsOff() : Bool;  // flags: 65536 
  public function IsSwitchingOn() : Bool;  // flags: 65536 
  public function IsSwitchingOff() : Bool;  // flags: 65536 
  public function IsUndefined() : Bool;  // flags: 65536 
  public function IsUseCountReached() : Bool;  // flags: 65536 
  public function IsAvailable() : Bool;  // flags: 65536 
  public function AddLinkToVirtualSwitch( virtual : W3VirtualSwitch);  // flags: 65536 
  public function NotifyVirtualSwitches();  // flags: 65536 
  protected function ActivateEvents( events : array<W3SwitchEvent>);  // flags: 32768 

}
import class W3Elevator extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public latent function ProcessAttachement();  // flags: 65600 
  public function BlockActions( block : Bool);  // flags: 65536 
  public function IsOnTop() : Bool;  // flags: 65536 
  public function OnEndMovement();  // flags: 65536 
  public function OnStartMovement();  // flags: 65536 

}
import class W3TrapProjectileStatue extends W3Trap {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  private final function Update( _dT : Float,  id : Int32);  // flags: 17424 
  private function RotateTowardsTarget( _dT : Float);  // flags: 16384 
  public final function Activate( optional  _Target : CNode);  // flags: 65552 
  private function GetShootingPosition() : Vector;  // flags: 16384 
  private function CockProjectile();  // flags: 16384 
  private function ShootProjectile( _dT : Float);  // flags: 16384 

}
import class W3TrapTripwire extends W3Trap {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private function ShouldExcludeActor( _Actor : CActor) : Bool;  // flags: 16384 
  public function Activate( optional  _Target : CNode);  // flags: 65536 
  public function SpringTripwire( _Target : CNode);  // flags: 65536 

}
import class W3Effect_Bleeding extends W3DamageOverTimeEffect {

  public function OnDamageDealt( dealtDamage : Bool);  // flags: 65536 

}
import class W3ImmobilizeEffect extends W3CriticalEffect {

  public function CacheSettings();  // flags: 65536 

}
import class W3BlindnessEffect extends W3CriticalEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 

}
import class W3Effect_AutoEssenceRegen extends W3AutoRegenEffect {

  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 

}
import class W3Effect_AutoMoraleRegen extends W3AutoRegenEffect {

  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 

}
import class W3Effect_AutoStaminaRegen extends W3AutoRegenEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  protected function SetEffectValue();  // flags: 32768 

}
import class W3Effect_AutoVitalityRegen extends W3AutoRegenEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  protected function SetEffectValue();  // flags: 32768 

}
import class W3Effect_AutoAirRegen extends W3AutoRegenEffect {

  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 

}
import class W3Effect_AutoPanicRegen extends W3AutoRegenEffect {

  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 

}
import class W3Effect_AutoSwimmingStaminaRegen extends W3AutoRegenEffect {

  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 

}
import class W3Effect_DoppelgangerEssenceRegen extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 

}
import class W3Effect_AdrenalineDrain extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 

}
import class W3Effect_HeavyKnockdown extends W3CriticalEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAddedPost() : Bool;  // flags: 65568 
  public function OnTimeUpdated( deltaTime : Float);  // flags: 65536 
  protected function CalculateDuration( optional  setInitialDuration : Bool);  // flags: 32768 

}
import class W3Effect_Hypnotized extends W3CriticalEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function CumulateWith( effect : CBaseGameplayEffect);  // flags: 65536 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Effect_WitchHypnotized extends W3CriticalEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function CumulateWith( effect : CBaseGameplayEffect);  // flags: 65536 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Effect_Knockdown extends W3CriticalEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAddedPost() : Bool;  // flags: 65568 
  public function OnTimeUpdated( deltaTime : Float);  // flags: 65536 
  protected function CalculateDuration( optional  setInitialDuration : Bool);  // flags: 32768 

}
import class W3Effect_KnockdownTypeApplicator extends W3ApplicatorEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function Init( params : SEffectInitInfo);  // flags: 65536 

}
import class W3Effect_Stagger extends W3CriticalEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function OnTimeUpdated( dt : Float);  // flags: 65536 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Effect_Swarm extends W3CriticalDOTEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  protected function IsImmuneToAllDamage( dt : Float) : Bool;  // flags: 32768 

}
import class W3Effect_SnowstormQ403 extends W3Effect_Snowstorm {

  protected function StopEffects();  // flags: 32768 
  protected function PlayEffects();  // flags: 32768 

}
import class W3Effect_Snowstorm extends W3CriticalDOTEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectAddedPost() : Bool;  // flags: 65568 
  protected function OnPaused();  // flags: 32768 
  protected function OnResumed();  // flags: 32768 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  protected function StopEffects();  // flags: 32768 
  protected function PlayEffects();  // flags: 32768 

}
import class W3Effect_Pull extends W3ImmobilizeEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public event function OnSlideFinish( requestName : CName,  notify : EMovementAdjustmentNotify) : Bool;  // flags: 65568 

}
import class W3Effect_CounterStrikeHit extends W3CriticalEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 

}
import class W3Effect_Ragdoll extends W3CriticalEffect {

  public function CacheSettings();  // flags: 65536 
  public function OnTimeUpdated( deltaTime : Float);  // flags: 65536 

}
import class W3Effect_BleedingTracking extends W3DamageOverTimeEffect {

  public function OnDamageDealt( dealtDamage : Bool);  // flags: 65536 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 

}
import class W3Effect_PoisonCritical extends W3CriticalDOTEffect {

  public function CacheSettings();  // flags: 65536 

}
import class W3Effect_VitalityDrain extends W3DamageOverTimeEffect {

  public function OnDamageDealt( dealtDamage : Bool);  // flags: 65536 

}
import class W3Effect_AirDrain extends CBaseGameplayEffect {

  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Effect_AirDrainDive extends CBaseGameplayEffect {

  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  protected function CalculateDuration( optional  setInitialDuration : Bool);  // flags: 32768 

}
import class W3Effect_StaminaDrainSwimming extends CBaseGameplayEffect {

  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  private function ReadXMLValues();  // flags: 16384 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class CCustomCameraBoatPPC extends CCustomCameraRopePPC {

  import public final function SetPivotOffset( offset : Vector);  // flags: 65561 

}
import class W3Effect_StaminaDrain extends CBaseGameplayEffect {

  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  private function ReadXMLValues();  // flags: 16384 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Potion_Cat extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  protected function OnPaused();  // flags: 32768 
  protected function OnResumed();  // flags: 32768 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  private final function EnableScreenFx( en : Bool);  // flags: 16400 

}
import class W3Potion_FullMoon extends W3ChangeMaxStatEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 

}
import class W3Potion_GoldenOriole extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function CumulateWith( effect : CBaseGameplayEffect);  // flags: 65536 
  protected function GetEffectStrength() : Float;  // flags: 32768 

}
import class W3Potion_KillerWhale extends W3ChangeMaxStatEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public function CacheSettings();  // flags: 65536 

}
import class W3Potion_MariborForest extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 

}
import class W3Potion_TawnyOwl extends W3RegenEffect {

  public function OnTimeUpdated( deltaTime : Float);  // flags: 65536 

}
import class W3Potion_WhiteHoney extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 

}
import class W3Potion_WhiteRaffardDecoction extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Potion_PheromoneNekker extends W3Potion_Pheromone {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Potion_PheromoneDrowner extends W3Potion_Pheromone {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Potion_PheromoneBear extends W3Potion_Pheromone {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Effect_AxiiGuardMe extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public function SetDrainStaminaOnExit();  // flags: 65536 
  protected function CalculateDuration( optional  setInitialDuration : Bool);  // flags: 32768 

}
import class W3Effect_Slowdown extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  public function CumulateWith( effect : CBaseGameplayEffect);  // flags: 65536 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Effect_SlowdownFrost extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Effect_AbilityOnLowHP extends CBaseGameplayEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  protected function GetSelfInteraction( e : CBaseGameplayEffect) : EEffectInteract;  // flags: 32768 

}
import class W3Effect_Drowning extends W3DamageOverTimeEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  protected function CalculateDuration( optional  setInitialDuration : Bool);  // flags: 32768 

}
import class W3Effect_Choking extends W3DamageOverTimeEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Effect_OverEncumbered extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 

}
import class W3Effect_SilverDust extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  private final function BlockAbilities( block : Bool);  // flags: 16400 

}
import class W3Effect_Drunkenness extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  protected function OnPaused();  // flags: 32768 
  protected function OnResumed();  // flags: 32768 

}
import class CMonsterNestEntity extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function CanPlayVoiceSet() : Bool;  // flags: 65536 
  public function GetVoicesetName( val : ENestType) : CName;  // flags: 65536 
  private function SetMappinOnLoad();  // flags: 16384 
  public function PlayerHasBombActivator() : Bool;  // flags: 65536 
  public event function OnAnimEvent_Custom( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_AttachBomb( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_DetachBomb( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function AddExp();  // flags: 65536 
  public function BlockPlayerNestInteraction();  // flags: 65536 
  public function AddBonusExp();  // flags: 65536 
  public function GetEncounter();  // flags: 65536 
  public function SetBossKilled( killed : Bool);  // flags: 65536 
  public function SetRebuild( isRebuilding : Bool);  // flags: 65536 
  public function IncrementBossKilledCounter();  // flags: 65536 
  public function GetBossKilledCounter() : Int32;  // flags: 65536 
  public function ProcessRebuildingSchedule( timeDelta : GameTime,  id : Int32);  // flags: 66560 
  public function SpawnBoss( time : Float,  id : Int32);  // flags: 66560 
  public function IsBossProtectingNest() : Bool;  // flags: 65536 
  public function RebuildNest();  // flags: 65536 
  public function IsSetDestructionFactImmediately() : Bool;  // flags: 65536 

}
import class W3FireAura extends W3Effect_Aura {

  protected function ApplySpawnsOn( entityGE : CGameplayEntity);  // flags: 32768 

}
import class CMajorPlaceOfPowerEntity extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  private final function GetBuffCooldown() : GameTime;  // flags: 16400 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function CanPlayVoiceSet() : Bool;  // flags: 65536 

}
import class W3NoticeBoard extends CR4MapPinEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function HACK_FixNamesAndTags();  // flags: 65536 
  public function WasVisited() : Bool;  // flags: 65536 
  public function FixErrands();  // flags: 65536 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionDeactivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionActivationTest( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function UpdateInteraction( optional  waitForComponent : Bool);  // flags: 65536 
  private function EnableInteractionComponentDelayed( delta : Float,  id : Int32);  // flags: 17408 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  private function AddDiscoveredFact();  // flags: 16384 
  private function SetEntitiesKnown();  // flags: 16384 
  public function CanAddErrand( candidateToAdd : ErrandDetailsList) : Bool;  // flags: 65536 
  public function AddErrand( newErrand : ErrandDetailsList);  // flags: 65536 
  public function SetCardsVisible( optional  bSilent : Bool);  // flags: 65536 
  public function HideAllCards();  // flags: 65536 
  public function GetFirstFreeErrandSlot( optional  bOverrideFlaw : Bool) : Int32;  // flags: 65536 
  public function RemoveEmptyActiveErrands();  // flags: 65536 
  public function GetRandomFlawErrand() : String;  // flags: 65536 
  public function ResetFlawErrands();  // flags: 65536 
  public function RemoveFlawErrand() : Int32;  // flags: 65536 
  public function CheckFact( factName : String,  forbidden : Bool) : Bool;  // flags: 65536 
  public function UpdateBoard( optional  bSilent : Bool);  // flags: 65536 
  public function CheckIfEmpty();  // flags: 65536 
  public function IsEmpty( checkFluff : Bool) : Bool;  // flags: 65536 
  public function HasAnyQuest() : Bool;  // flags: 65536 
  public function HasAnyNote() : Bool;  // flags: 65536 
  public function RemoveQuest( errandName : String) : Bool;  // flags: 65536 
  public function AddQuestMappin( entityTag : CName,  entityType : AQMTN_EntityType);  // flags: 65536 
  public function AcceptNewQuest( errandName : String) : Bool;  // flags: 65536 
  public function GetStaticMapPinType( out  type : CName);  // flags: 65536 

}
import class W3FastTravelEntity extends CR4FastTravelEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionDeactivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private function OnPlayerEnteredBorder();  // flags: 16384 
  private function OnPlayerExitedBorder();  // flags: 16384 

}
import class W3MagicLampEntity extends CInteractiveEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3TreasureHuntMappinEntity extends CR4MapPinEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function Enable();  // flags: 65536 
  public function Disable();  // flags: 65536 

}
import class CTeleportEntity extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function EnableTeleport( flag : Bool);  // flags: 65536 
  public function EnableTeleportArea( flag : Bool);  // flags: 65536 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function PlayerHasKey() : Bool;  // flags: 65536 
  public function ActivateTeleport( activationTime : Float);  // flags: 65536 
  public function ActivateTeleportAreaAfter( td : Float,  id : Int32);  // flags: 66560 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function SetupTeleportData( td : Float,  id : Int32);  // flags: 66560 
  public function TeleportMe( td : Float,  id : Int32);  // flags: 66560 
  public function TeleportMeWithBlackscreen( td : Float,  id : Int32);  // flags: 66560 
  public function DeactivateTeleport();  // flags: 65536 
  public function FadeInAfter( td : Float,  id : Int32);  // flags: 66560 
  public function SetDestinationParameters( nodeTag : CName,  factOnTp : String);  // flags: 65536 
  private function UpdateInteractions();  // flags: 16384 
  private function AddFactOnActivation();  // flags: 16384 
  private function AddFactOnTeleport();  // flags: 16384 

}
import class CRiftEntity extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function ActivateRift( optional  dontActivateEncounter : Bool);  // flags: 65536 
  public final function SetCanBeDisabled( b : Bool);  // flags: 65552 
  public function DeactivateRiftIfPossible();  // flags: 65536 
  public function DeactivateRift();  // flags: 65536 
  public function DeactivateRiftAfter( td : Float,  id : Int32);  // flags: 66560 
  public function IsRiftOpen() : Bool;  // flags: 65536 
  public event function OnOpenedRiftCheck() : Bool;  // flags: 65568 
  public event function OnYrdenHit( caster : CGameplayEntity) : Bool;  // flags: 65568 
  public function EnableEncounter( flag : Bool);  // flags: 65536 
  public function DisableEncounterAfter( td : Float,  id : Int32);  // flags: 66560 
  public function SetSpawnLimit( spawnLimit : Int32);  // flags: 65536 
  public function IncrementSpawnCounter();  // flags: 65536 
  private function CheckSpawnLimit();  // flags: 16384 
  public function EnableColdArea( flag : Bool);  // flags: 65536 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function ProcessArea( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function PrepareCollisionEntity();  // flags: 65536 
  public function CreateCollisionEntity();  // flags: 65536 
  public function DestroyCollisionEntity();  // flags: 65536 
  public function OnDiscovered( discovered : Bool);  // flags: 65536 

}
import class W3ItemRepairObject extends CR4MapPinEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function IsWeaponRepairEntity() : Bool;  // flags: 65536 
  public function WaitForPlayerSpawn( dt : Float,  id : Int32);  // flags: 66560 
  public function CheckIfPlayerCanInteract() : Bool;  // flags: 65536 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  private function FadeInTimer( dt : Float,  id : Int32);  // flags: 17408 
  public final function RepairsSword() : Bool;  // flags: 65552 
  public final function RepairsArmor() : Bool;  // flags: 65552 

}
import class W3EntranceEntity extends CR4MapPinEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3Mutagen03_Effect extends W3Mutagen_Effect {

  public event function OnEffectAddedPost() : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Herb extends W3RefillableContainer {

  public function GetStaticMapPinTag( out  tag : CName);  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function ApplyAppearance( appearanceName : String);  // flags: 65536 
  protected function PreRefillContainer();  // flags: 32768 

}
import class W3ActorRemains extends W3AnimatedContainer {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function LootDropped( optional  own : CActor);  // flags: 65536 
  public event function OnItemGiven( data : SItemChangedData) : Bool;  // flags: 65568 
  public event function OnItemTaken( itemId : SItemUniqueId,  quantity : Int32) : Bool;  // flags: 65568 
  public function OnContainerClosed();  // flags: 65536 
  public function HasTrophyItems() : Bool;  // flags: 65536 
  public function CanDismember() : Bool;  // flags: 65536 
  public function FinalizeLooting();  // flags: 65536 
  public function ProcessDismemberment();  // flags: 65536 
  public function ProcessDismembermentTimer( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function FadeInTimer( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function EndAnimationTimer( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function LootTimeout( td : Float,  id : Int32);  // flags: 66560 
  public event function OnFocusModeEnabled( enabled : Bool) : Bool;  // flags: 65568 

}
import class W3POI_SpoilsOfWarEntity extends CR4MapPinEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3POI_BanditCampEntity extends CR4MapPinEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3POI_BanditCampfireEntity extends CR4MapPinEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3POI_BossAndTreasureEntity extends CR4MapPinEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3Mutagen06_Effect extends W3Mutagen_Effect {

  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3POI_ContrabandEntity extends CR4MapPinEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3POI_ContrabandShipEntity extends CR4MapPinEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3POI_RescuingTownEntity extends CR4MapPinEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3POI_DungeonCrawlEntity extends CR4MapPinEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3Mutagen09_Effect extends W3Mutagen_Effect {

  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 

}
import class W3Mutagen14_Effect extends W3Mutagen_Effect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Mutagen15_Effect extends W3Mutagen_Effect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Mutagen16_Effect extends W3Mutagen_Effect {

  public event function OnEffectAddedPost() : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  private final function UpdateEncumbrance();  // flags: 16400 

}
import class W3Mutagen18_Effect extends W3Mutagen_Effect {

  public event function OnEffectRemoved() : Bool;  // flags: 65568 

}
import class W3Mutagen23_Effect extends W3Mutagen_Effect {

  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 

}
import class W3Effect_Aura extends W3ApplicatorEffect {

  public event function OnUpdate( deltaTime : Float) : Bool;  // flags: 65568 
  public function CacheSettings();  // flags: 65536 

}
import class W3AutoRegenEffect extends W3RegenEffect {

  protected function SetEffectValue();  // flags: 32768 

}
import class W3ExplosiveBolt extends W3BoltProjectile {

  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public final function AddToxicCloud( gas : W3ToxicCloud);  // flags: 65552 
  public final function RemoveToxicCloud( gas : W3ToxicCloud);  // flags: 65552 

}
import class W3ChangeMaxStatEffect extends CBaseGameplayEffect {

  public function Init( params : SEffectInitInfo);  // flags: 65536 

}
import class W3Potion_Pheromone extends CBaseGameplayEffect {

  protected function GetSelfInteraction( e : CBaseGameplayEffect) : EEffectInteract;  // flags: 32768 

}
import class W3DestructSelfEntity extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public final function SetTimer( _DestructAfterDelay : Float);  // flags: 65552 
  private final function StopEffectAfter( delta : Float,  id : Int32);  // flags: 17424 

}
import class VectorSpringDamper extends CObject {

  public final function SetSmoothTime( value : Float);  // flags: 65552 
  public final function Init( curr : Vector,  dest : Vector);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function SetValue( value : Vector);  // flags: 65552 
  public final function GetValue() : Vector;  // flags: 65552 
  public final function GetDestValue() : Vector;  // flags: 65552 
  public final function Update( dt : Float);  // flags: 65552 
  public final function UpdateAndGet( dt : Float,  value : Vector) : Vector;  // flags: 65552 
  public function UpdateManual( out  current : Vector,  out  velocity : Vector,  dest : Vector,  dt : Float);  // flags: 65536 

}
import class CSpawnTreeInitializerSmartDynamicWanderAI extends ISpawnTreeInitializerIdleSmartAI {

  public function GetObjectForPropertiesEdition() : IScriptable;  // flags: 65536 
  public function GetEditorFriendlyName() : String;  // flags: 65536 
  public function Init();  // flags: 65536 

}
import class W3MerchantComponent extends CScriptedComponent {

  public function GetMapPinType() : CName;  // flags: 65536 
  public function GetScriptInfo( type : CName,  cacheable : Bool);  // flags: 65536 

}
import class CSpawnTreeEncunterStateByEntryMonitorInitializer extends ISpawnTreeSpawnMonitorInitializer {

  public function MonitorCreatureKilled( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function MonitorCreatureSpawned( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function MonitorCreatureLost( actor : CActor,  spawnTreeEntry : CBaseCreatureEntry,  encounter : CEncounter);  // flags: 65536 
  public function TestCondition( value : Int32) : Bool;  // flags: 65536 
  public function SetTasks( encounter : CEncounter);  // flags: 65536 
  public function GetFriendlyName() : String;  // flags: 65536 

}
import class CIdleAIEntryGenerator extends CSpawnTreeBaseEntryGenerator {

  public function GetFriendlyName() : String;  // flags: 65536 
  public function GenerateEntries();  // flags: 65536 
  public function ApplyIdleInitializerCfg( init : CSpawnTreeInitializerIdleAI,  idleTree : CAIIdleTree);  // flags: 65536 
  public function ApplyGuardAreaCfg( init : CSpawnTreeInitializerGuardArea,  cfg : SGuardAreaEntryGeneratorNodeParam);  // flags: 65536 

}
import class CWanderEntryGenerator extends CSpawnTreeBaseEntryGenerator {

  public function GetFriendlyName() : String;  // flags: 65536 
  public function GenerateEntries();  // flags: 65536 
  public function ApplyCreatureEntryCfg( cEntry : CCreatureEntry,  cfg : SWanderEntryGeneratorParam);  // flags: 65536 
  public function ApplyWanderInitializerCfg( initializer : CSpawnTreeInitializerSmartWanderAI,  cfg : SWanderEntryGeneratorParam);  // flags: 65536 

}
import class W3AirDrainArea extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3GameZoneTrigger extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3BirdAttackTrigger extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function GetLairEntity() : Bool;  // flags: 65536 
  public function RequestAttack( t : Float,  id : Int32);  // flags: 66560 

}
import class CFloePiece extends CScriptedDestroyableComponent {

  public final function IdleTick( time : Float);  // flags: 65552 
  public final function PreDestroyTick( time : Float);  // flags: 65552 
  public final function DestroyTick( time : Float);  // flags: 65552 
  public final function PostDestroyTick( time : Float);  // flags: 65552 

}
import class W3ConditionalTrigger extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3GenericSceneArea extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private function SearchForSceneSpeakers() : array<CNewNPC>;  // flags: 16384 
  private function GetIsNPCGroupValid( target : CNewNPC) : Bool;  // flags: 16384 
  private function GetIsTargetAsleep( target : CNewNPC) : Bool;  // flags: 16384 
  private function GetValidScenes( npcVoiceTag : CName) : array<genericSceneDefinition>;  // flags: 16384 
  public function PlaySceneTimer( time : Float,  id : Int32);  // flags: 66560 
  private function CheckAreaValidity() : Bool;  // flags: 16384 
  public function RestartSceneTimer( optional  delay : Float);  // flags: 65536 
  public function TryToPlayScene() : Bool;  // flags: 65536 

}
import class W3AirDrainEntity extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3AnimationInteractionEntity extends CGameplayEntity {

  public event function OnDetaching() : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function PlayInteractionAnimation();  // flags: 65536 
  public function BlockGameplayActions( lock : Bool);  // flags: 65536 
  public function ShouldBlockGameplayActionsOnInteraction() : Bool;  // flags: 65536 
  public function GetToPointAndStartAction() : Bool;  // flags: 65536 
  private function AttachObject();  // flags: 16384 
  private function DetachObject();  // flags: 16384 
  public event function OnPlayerActionEnd() : Bool;  // flags: 65568 
  public event function OnAnimEvent_Custom( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function TimerDeactivateAnimation( td : Float,  id : Int32);  // flags: 66560 

}
import class W3BeehiveStandingEntity extends W3AnimatedContainer {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnItemGiven( data : SItemChangedData) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function ClearActorsInRange();  // flags: 65536 
  public function GetActorsInArea() : array<CActor>;  // flags: 65536 

}
import class CMagicBombEntity extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Init();  // flags: 65536 
  public function Explode( td : Float,  id : Int32);  // flags: 66560 
  public function Explosion();  // flags: 65536 

}
import class CPhilippaAttractorTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class CMagicMineEntity extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Enable( flag : Bool);  // flags: 65536 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function Countdown();  // flags: 65536 
  public function Explode( td : Float,  id : Int32);  // flags: 66560 
  public function DealDamage();  // flags: 65536 

}
import class CBaseAICombatStorage extends CObject {

  public function SetIsAttacking( value : Bool,  optional  timeStamp : Float);  // flags: 65536 
  public function GetIsAttacking() : Bool;  // flags: 65536 
  public function SetIsCharging( value : Bool);  // flags: 65536 
  public function GetIsCharging() : Bool;  // flags: 65536 
  public function SetIsTaunting( value : Bool,  optional  timeStamp : Float);  // flags: 65536 
  public function GetIsTaunting() : Bool;  // flags: 65536 
  public function GetTauntTimeStamp() : Float;  // flags: 65536 
  public function SetIsShooting( value : Bool);  // flags: 65536 
  public function SetIsAiming( value : Bool);  // flags: 65536 
  public function GetIsShooting() : Bool;  // flags: 65536 
  public function GetIsAiming() : Bool;  // flags: 65536 
  public function SetPreCombatWarning( value : Bool);  // flags: 65536 
  public function GetPreCombatWarning() : Bool;  // flags: 65536 
  public function SetCriticalState( cstate : ECriticalStateType,  value : Bool,  timeOfChange : Float);  // flags: 65536 
  public function GetCriticalState( cstate : ECriticalStateType) : Bool;  // flags: 65536 
  public function GetTimeOfLastCSDeactivation( cstate : ECriticalStateType) : Float;  // flags: 65536 
  public function Init();  // flags: 65536 

}
import class CNewNPCStateNewIdle extends CNewNPCStateBase {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function IdleInit();  // flags: 65664 
  public latent function StateIdle();  // flags: 65600 

}
import class CNewNPCStateDrinkingBartender extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function DrinkingBartenderStateInit();  // flags: 65664 

}
import class CNewNPCStateDrinkingNPCContestant extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function DrinkingNPCContestantStateInit();  // flags: 65664 

}
import class CBaseGameplayEffect extends CObject {

  public function Init( params : SEffectInitInfo);  // flags: 65536 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  protected function SetEffectValue();  // flags: 32768 
  public function CacheSettings();  // flags: 65536 
  public function RecalcDuration();  // flags: 65536 
  protected function CalculateDuration( optional  setInitialDuration : Bool);  // flags: 32768 
  public function GetAbilityName() : CName;  // flags: 65536 
  public event function OnEffectAddedPost() : Bool;  // flags: 65568 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  protected function PlayTargetFX();  // flags: 32768 
  protected function StopTargetFX();  // flags: 32768 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  private function SwitchCameraEffect();  // flags: 16384 
  public function OnTargetDeath();  // flags: 65536 
  public function OnTargetUnconscious();  // flags: 65536 
  public function OnTargetDeathAnimFinished();  // flags: 65536 
  public final function GetInteraction( effect : CBaseGameplayEffect) : EEffectInteract;  // flags: 65552 
  protected function GetSelfInteraction( e : CBaseGameplayEffect) : EEffectInteract;  // flags: 32768 
  protected function GetEffectStrength() : Float;  // flags: 32768 
  public function CumulateWith( effect : CBaseGameplayEffect);  // flags: 65536 
  public function OnTimeUpdated( dt : Float);  // flags: 65536 
  public function Pause( sourceName : CName,  optional  singleLock : Bool);  // flags: 65536 
  protected function OnPaused();  // flags: 32768 
  protected function OnResumed();  // flags: 32768 
  public final function Resume( sourceName : CName);  // flags: 65552 
  public final function ResumeForced();  // flags: 65552 
  private final function ResumeInternal( optional  sourceName : CName,  optional  forced : Bool);  // flags: 16400 
  public function IsPaused( optional  sourceName : CName) : Bool;  // flags: 65536 
  public function GetDurationLeft() : Float;  // flags: 65536 
  public function GetInitialDuration() : Float;  // flags: 65536 
  public function GetCreator() : CGameplayEntity;  // flags: 65536 
  public function IsPositive() : Bool;  // flags: 65536 
  public function IsNegative() : Bool;  // flags: 65536 
  public function IsNeutral() : Bool;  // flags: 65536 
  public function ShowOnHUD() : Bool;  // flags: 65536 
  public function GetIcon() : String;  // flags: 65536 
  public function IsActive() : Bool;  // flags: 65536 
  public function GetEffectNameLocalisationKey() : String;  // flags: 65536 
  public function GetEffectDescriptionLocalisationKey() : String;  // flags: 65536 
  public function GetEffectType() : EEffectType;  // flags: 65536 
  public function IsPotionEffect() : Bool;  // flags: 65536 
  public function IsSignEffect() : Bool;  // flags: 65536 
  public function SetTimeLeft( t : Float);  // flags: 65536 
  public function IsPausedDuringDialogAndCutscene() : Bool;  // flags: 65536 
  public function GetSourceName() : String;  // flags: 65536 
  public function IsOnPlayer() : Bool;  // flags: 65536 
  public function GetTimeActive() : Float;  // flags: 65536 
  public function CanBeAppliedOnDeadTarget() : Bool;  // flags: 65536 
  public function GetResistStat() : ECharacterDefenseStats;  // flags: 65536 
  public function GetBuffResist() : Float;  // flags: 65536 
  public function GetBuffLevel() : Int32;  // flags: 65536 
  public final function Debug_HAX_FIX( t : CActor);  // flags: 65552 
  public final function RecalcPotionDuration();  // flags: 65552 

}
import class W3EffectManager extends CObject {

  public final function Initialize( actor : CActor);  // flags: 65552 
  public final function PerformUpdate( deltaTime : Float);  // flags: 65552 
  private final function PrepareAutoBuffs() : array<CName>;  // flags: 16400 
  private final function FilterAutoBuff( out  autoEffects : array<CName>,  regenStat : ECharacterRegenStats,  effectType : EEffectType);  // flags: 16400 
  private final function FilterOutAllApart( out  autoEffects : array<CName>,  effectType : EEffectType);  // flags: 16400 
  private final function FilterOutExactly( out  autoEffects : array<CName>,  effectType : EEffectType);  // flags: 16400 
  public final function StartVitalityRegen() : Bool;  // flags: 65552 
  public final function StopVitalityRegen();  // flags: 65552 
  public final function StartEssenceRegen() : Bool;  // flags: 65552 
  public final function StopEssenceRegen();  // flags: 65552 
  public final function StartStaminaRegen() : Bool;  // flags: 65552 
  public final function StopStaminaRegen();  // flags: 65552 
  public final function StartMoraleRegen() : Bool;  // flags: 65552 
  public final function StopMoraleRegen();  // flags: 65552 
  public final function StartPanicRegen() : Bool;  // flags: 65552 
  public final function StopPanicRegen();  // flags: 65552 
  public final function StartAirRegen() : Bool;  // flags: 65552 
  public final function StopAirRegen();  // flags: 65552 
  public final function StartSwimmingStaminaRegen() : Bool;  // flags: 65552 
  public final function StopSwimmingStaminaRegen();  // flags: 65552 
  private final function StopRegenInternal( effectType : EEffectType);  // flags: 16400 
  private final function StartRegenInternal( regenStat : ECharacterRegenStats,  effectType : EEffectType) : Bool;  // flags: 16400 
  public final function OnLoad( own : CActor);  // flags: 65552 
  public final function IsReady() : Bool;  // flags: 65552 
  public final function GetCurrentlyAnimatedCS() : CBaseGameplayEffect;  // flags: 65552 
  public final function SetCurrentlyAnimatedCS( buff : CBaseGameplayEffect);  // flags: 65552 
  public final function GetCurrentEffects( optional  type : EEffectType,  optional  sourceName : String,  optional  partialSourceNameSearch : Bool) : array<CBaseGameplayEffect>;  // flags: 65552 
  private final function ApplyEffect( effect : CBaseGameplayEffect,  overridenEffectsIdxs : array<Int32>,  cumulateIdx : Int32,  customParams : W3BuffCustomParams) : EEffectInteract;  // flags: 16400 
  private final function OnBuffRemoved();  // flags: 16400 
  private final function OnBuffAdded( effect : CBaseGameplayEffect);  // flags: 16400 
  public final function UpdateLocalBuffsArray( out  localArray : array<CBaseGameplayEffect>);  // flags: 65552 
  public final function AddEffectCustom( params : SCustomEffectParams) : EEffectInteract;  // flags: 65552 
  public final function AddEffectDefault( effectType : EEffectType,  creat : CGameplayEntity,  optional  srcName : String,  optional  signEffect : Bool) : EEffectInteract;  // flags: 65552 
  private final function InternalAddEffect( effectType : EEffectType,  creat : CGameplayEntity,  srcName : String,  optional  inDuration : Float,  optional  customVal : SAbilityAttributeValue,  optional  customAbilityName : CName,  optional  customFXName : CName,  optional  signEffect : Bool,  optional  powerStatValue : SAbilityAttributeValue,  optional  customParams : W3BuffCustomParams,  optional  vibratePadLowFreq : Float,  optional  vibratePadHighFreq : Float) : EEffectInteract;  // flags: 16400 
  public final function GetDrunkMutagens() : array<CBaseGameplayEffect>;  // flags: 65552 
  public final function GetPotionBuffs() : array<CBaseGameplayEffect>;  // flags: 65552 
  public final function GetEffect( effectType : EEffectType,  optional  sourceName : String) : CBaseGameplayEffect;  // flags: 65552 
  public final function RemoveEffect( effect : CBaseGameplayEffect,  optional  csForcedRemove : Bool);  // flags: 65552 
  private final function RemoveEffectOnIndex( index : Int32,  optional  csForcedRemove : Bool);  // flags: 16400 
  public final function RemoveAllPotionEffectsBut( skip : CBaseGameplayEffect);  // flags: 65552 
  public final function RemoveAllEffectsOfType( type : EEffectType,  optional  forced : Bool);  // flags: 65552 
  public final function RemoveAllNonAutoEffects();  // flags: 65552 
  public final function OwnerHasDied();  // flags: 65552 
  public final function OwnerHasEnteredUnconscious();  // flags: 65552 
  public final function OnOwnerRevived();  // flags: 65552 
  public final function OwnerHasFinishedDeathAnim();  // flags: 65552 
  private final function UpdateStatValueChange( stat : EBaseCharacterStats,  val : Float);  // flags: 16400 
  public final function HasEffect( effectType : EEffectType) : Bool;  // flags: 65552 
  public final function GetEffectTimePercentageByType( effectType : EEffectType) : Int32;  // flags: 65552 
  public final function GetEffectTimePercentage( buff : CBaseGameplayEffect) : Int32;  // flags: 65552 
  public final function AddEffectsFromAction( action : W3DamageAction) : Bool;  // flags: 65552 
  private final function GetNonSignApplyBuffTest( applyChance : Float) : Bool;  // flags: 16400 
  private final function GetSignApplyBuffTest( signType : ESignType,  effectType : EEffectType,  powerStatValue : SAbilityAttributeValue,  isAlternate : Bool,  caster : CActor) : Bool;  // flags: 16400 
  public final function ProcessOnHitEffects( victim : CActor,  silverSword : Bool,  steelSword : Bool,  sign : Bool);  // flags: 65552 
  public final function PauseEffects( effectType : EEffectType,  sourceName : CName,  optional  singleLock : Bool,  optional  duration : Float,  optional  useMaxDuration : Bool);  // flags: 65552 
  private final function PauseEffect( buff : CBaseGameplayEffect,  sourceName : CName,  optional  singleLock : Bool,  optional  duration : Float,  optional  useMaxDuration : Bool);  // flags: 16400 
  public final function PauseAllRegenEffects( sourceName : CName,  optional  singleLock : Bool,  optional  duration : Float,  optional  useMaxDuration : Bool);  // flags: 65552 
  public final function ResumeAllRegenEffects( sourceName : CName);  // flags: 65552 
  private final function ResumeAllBuffsForced();  // flags: 16400 
  public final function PauseHPRegenEffects( sourceName : CName,  optional  duration : Float);  // flags: 65552 
  public final function PauseStaminaRegen( sourceName : CName);  // flags: 65552 
  public final function ResumeStaminaRegen( sourceName : CName);  // flags: 65552 
  public final function ResumeHPRegenEffects( sourceName : CName);  // flags: 65552 
  public final function ResumeEffects( effectType : EEffectType,  sourceName : CName);  // flags: 65552 
  private final function ResumeEffectsInternal( effectType : EEffectType,  optional  sourceName : CName,  optional  forced : Bool);  // flags: 16400 
  public final function GetCriticalBuffsCount() : Int32;  // flags: 65552 
  public final function GetCriticalBuffs() : array<CBaseGameplayEffect>;  // flags: 65552 
  public final function HasPotionBuff() : Bool;  // flags: 65552 
  public final function CacheStatUpdate( stat : EBaseCharacterStats,  value : Float);  // flags: 65552 
  public final function CacheDamage( damageTypeName : CName,  val : Float,  attacker : CGameplayEntity,  carrier : CBaseGameplayEffect,  DoTdt : Float,  dontShowHitParticle : Bool,  pwrStatType : ECharacterPowerStats,  isEnvironment : Bool);  // flags: 65552 
  public final function RecalcEffectDurations();  // flags: 65552 
  public final function UpdateApplicatorBuffs();  // flags: 65552 
  public final function GetPotionBuffLevel( effectType : EEffectType) : Int32;  // flags: 65552 
  public final function CanBeRemoved() : Bool;  // flags: 65552 
  public final function ShouldStopFx( fx : CName) : Bool;  // flags: 65552 
  public final function IsPlayingFX( fx : CName) : Bool;  // flags: 65552 
  public final function AddPlayedFX( fx : CName,  sourceName : String);  // flags: 65552 
  public final function RemovePlayedFX( fx : CName,  sourceName : String);  // flags: 65552 
  public final function SimulateBuffTimePassing( simulatedTime : Float);  // flags: 65552 
  public final function Debug_ReleaseCriticalStateSaveLocks();  // flags: 65552 
  private final function HasAllShrineBuffs() : Bool;  // flags: 16400 
  public final function HasAnyMutagen23ShrineBuff() : Bool;  // flags: 65552 

}
import class CR4LootManager extends IGameSystem {

  import public final function SetCurrentArea( areaName : String);  // flags: 65561 
  import public final function GetCurrentArea() : String;  // flags: 65561 
  public function OnAreaChanged( newArea : EAreaName);  // flags: 65536 

}
import class C2dArray extends CResource {
  import var headers : array:12,0,String; // 4000
  import var data : array:12,0,array:12,0,String; // 4000

  import public final function GetValueAt( column : Int32,  row : Int32) : String;  // flags: 65561 
  import public final function GetValue( header : String,  row : Int32) : String;  // flags: 65561 
  import public final function GetValueAtAsName( column : Int32,  row : Int32) : CName;  // flags: 65561 
  import public final function GetValueAsName( header : String,  row : Int32) : CName;  // flags: 65561 
  import public final function GetNumRows() : Int32;  // flags: 65561 
  function GetNumColumns();  // flags: 1 
  import public final function GetRowIndexAt( column : Int32,  value : String) : Int32;  // flags: 65561 
  import public final function GetRowIndex( header : String,  value : String) : Int32;  // flags: 65561 

}
import class CIndexed2dArray extends C2dArray {

  import public final function GetRowIndexByKey( key : CName) : Int32;  // flags: 65561 

}
import class CPlayerInput extends CObject {

  public function Initialize( isFromLoad : Bool,  optional  previousInput : CPlayerInput);  // flags: 65536 
  public function Destroy();  // flags: 65536 
  public function FindActionLockIndex( action : EInputActionBlock,  sourceName : CName) : Int32;  // flags: 65536 
  public function BlockAction( action : EInputActionBlock,  sourceName : CName,  lock : Bool,  optional  keepOnSpawn : Bool,  optional  onSpawnedNullPointerHackFix : CPlayer,  optional  isFromQuest : Bool,  optional  isFromPlace : Bool);  // flags: 65536 
  public final function TutorialForceUnblockRadial() : array<SInputActionLock>;  // flags: 65552 
  public final function TutorialForceRestoreRadialLocks( radialLocks : array<SInputActionLock>);  // flags: 65552 
  private function OnActionLockChanged( action : EInputActionBlock,  locked : Bool,  optional  sourceName : CName,  optional  onSpawnedNullPointerHackFix : CPlayer);  // flags: 16384 
  public function BlockAllActions( sourceName : CName,  lock : Bool,  optional  exceptions : array<EInputActionBlock>,  optional  saveLock : Bool,  optional  onSpawnedNullPointerHackFix : CPlayer,  optional  isFromQuest : Bool,  optional  isFromPlace : Bool);  // flags: 65536 
  public final function BlockAllQuestActions( sourceName : CName,  lock : Bool);  // flags: 65552 
  public function BlockAllUIQuestActions( sourceName : CName,  lock : Bool);  // flags: 65536 
  public function ForceUnlockAllInputActions( alsoQuestLocks : Bool);  // flags: 65536 
  public function RemoveLocksOnSpawn();  // flags: 65536 
  public function GetActionLocks( action : EInputActionBlock) : array<SInputActionLock>;  // flags: 65536 
  public function GetAllActionLocks() : C2dArraySInputActionLock;  // flags: 65536 
  public function IsActionAllowed( action : EInputActionBlock) : Bool;  // flags: 65536 
  public function IsActionBlockedBy( action : EInputActionBlock,  sourceName : CName) : Bool;  // flags: 65536 
  public final function GetActionBlockedHudLockType( action : EInputActionBlock) : CName;  // flags: 65552 
  public event function OnCommSprint( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommSprintToggle( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommWalkToggle( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommGuard( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommSpawnHorse( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommMenuHub( action : SInputAction) : Bool;  // flags: 65568 
  public final function PushMenuHub();  // flags: 65552 
  public event function OnCommPanelChar( action : SInputAction) : Bool;  // flags: 65568 
  public final function PushCharacterScreen();  // flags: 65552 
  public event function OnCommPanelInv( action : SInputAction) : Bool;  // flags: 65568 
  public final function PushInventoryScreen();  // flags: 65552 
  public event function OnCommDeckEditor( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommPanelMed( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommPanelMapPC( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommPanelMap( action : SInputAction) : Bool;  // flags: 65568 
  public final function PushMapScreen();  // flags: 65552 
  public event function OnCommPanelJour( action : SInputAction) : Bool;  // flags: 65568 
  public final function PushJournalScreen();  // flags: 65552 
  public event function OnCommPanelMeditation( action : SInputAction) : Bool;  // flags: 65568 
  public final function PushMeditationScreen();  // flags: 65552 
  public event function OnCommPanelCrafting( action : SInputAction) : Bool;  // flags: 65568 
  public final function PushCraftingScreen();  // flags: 65552 
  public event function OnCommPanelBestiary( action : SInputAction) : Bool;  // flags: 65568 
  public final function PushBestiaryScreen();  // flags: 65552 
  public event function OnCommPanelAlch( action : SInputAction) : Bool;  // flags: 65568 
  public final function PushAlchemyScreen();  // flags: 65552 
  public event function OnCommPanelGlossary( action : SInputAction) : Bool;  // flags: 65568 
  public final function PushGlossaryScreen();  // flags: 65552 
  public event function OnShowControlsHelp( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommPanelUIResize( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommPanelFakeHud( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommSteelSword( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommSilverSword( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommSheatheAny( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommSheatheSteel( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommSheatheSilver( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommDrinkPot( action : SInputAction) : Bool;  // flags: 65568 
  public function PotDrinkTimer( isDoubleTapped : Bool);  // flags: 65536 
  public event function OnCbtComboDigitLeft( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtComboDigitRight( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnSelectSign( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnToggleSigns( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnToggleNextSign( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnTogglePreviousSign( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnToggleItem( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommDrinkPotion1( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCommDrinkPotion2( action : SInputAction) : Bool;  // flags: 65568 
  private function SendToxicityTooHighMessage();  // flags: 16384 
  public function ShowItemInfo();  // flags: 65536 
  public event function OnDiving( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnDivingDodge( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnExpFistFightLight( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnExpFistFightHeavy( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnExpFocus( action : SInputAction) : Bool;  // flags: 65568 
  private function ShouldSwitchAttackType() : Bool;  // flags: 16384 
  public event function OnCbtAttackWithAlternateLight( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtAttackWithAlternateHeavy( action : SInputAction) : Bool;  // flags: 65568 
  public function CbtAttackPC( action : SInputAction,  isHeavy : Bool);  // flags: 65536 
  public event function OnCbtAttackLight( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtAttackHeavy( action : SInputAction) : Bool;  // flags: 65568 
  private function CheckFinisherInput() : Bool;  // flags: 16384 
  private function IsPlayerAbleToPerformSpecialAttack() : Bool;  // flags: 16384 
  public event function OnCbtSpecialAttackWithAlternateLight( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtSpecialAttackWithAlternateHeavy( action : SInputAction) : Bool;  // flags: 65568 
  public function CbSpecialAttackPC( action : SInputAction,  isHeavy : Bool);  // flags: 65536 
  public event function OnCbtSpecialAttackLight( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtSpecialAttackHeavy( action : SInputAction) : Bool;  // flags: 65568 
  public function CancelHoldAttacks();  // flags: 65536 
  public event function OnCbtCiriSpecialAttack( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtCiriAttackHeavy( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtCiriSpecialAttackHeavy( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtCiriDodge( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtCiriDash( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtDodge( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtRoll( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnMovementDoubleTap( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCastSign( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnThrowBomb( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnThrowBombHold( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnThrowBombAbort( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtThrowItem( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtThrowItemHold( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtThrowCastAbort( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtSelectLockTarget( inputVector : Vector) : Bool;  // flags: 65568 
  public event function OnCbtLockAndGuard( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtCameraLockOrSpawnHorse( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtCameraLock( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnChangeCameraPreset( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnChangeCameraPresetByMouseWheel( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnMeditationAbort( action : SInputAction) : Bool;  // flags: 65568 
  public function Dbg_UnlockAllActions();  // flags: 65536 
  public event function OnDbgSpeedUp( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnDbgHit( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnDbgKillTarget( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnDbgKillAll( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnDbgResurrectPlayer( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnDbgKillAllTargetingPlayer( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnBoatDismount( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCiriDrawWeapon( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCiriHolsterWeapon( action : SInputAction) : Bool;  // flags: 65568 
  private final function CiriSheatheWeapon();  // flags: 16400 
  public event function OnCommHoldFastMenu( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnFastMenu( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnIngameMenu( action : SInputAction) : Bool;  // flags: 65568 
  public final function Debug_ClearAllActionLocks( optional  action : EInputActionBlock,  optional  all : Bool);  // flags: 65552 

}
import class CPlayerStateAttached extends CPlayerStateBase {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function SetupState( entity : CEntity,  optional  toSlot : CName);  // flags: 65536 

}
import class CPlayerStateBoardObserving extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 

}
import class CPlayerStatePlayerDialogScene extends CPlayerStateBase {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnBlockingSceneEnded( optional  output : CStorySceneOutput) : Bool;  // flags: 65568 

}
import class CPlayerStateDrinkingPlayerContestant extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function Init();  // flags: 65664 

}
import class CPlayerStateApproachTheVehicle extends CPlayerStateBase {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public final function SetupState( v : CVehicleComponent,  sn : Int32);  // flags: 65552 
  public function ProcessApproachTheVehicle();  // flags: 65664 
  protected final function CalcSlidingDuration( destination : Vector) : Float;  // flags: 32784 
  public function CanAccesFastTravel( target : W3FastTravelEntity) : Bool;  // flags: 65536 

}
import class CPlayerStateDismountBoat extends CPlayerStateDismountTheVehicle {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public cleanup function DismountCleanup();  // flags: 73728 
  public function ProcessDismountBoat();  // flags: 65664 
  public function DismountFromPassenger( fromPass : Bool);  // flags: 65536 
  public function StandUpPositionCorrection( timeDelta : Float,  id : Int32);  // flags: 66560 
  public event function OnDeath( damageAction : W3DamageAction) : Bool;  // flags: 65568 

}
import class CPlayerStateDismountTheVehicle extends CPlayerStatePostUseVehicle {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public final function SetupState( v : CVehicleComponent,  inDismountType : EDismountType);  // flags: 65552 
  public cleanup function DismountCleanup();  // flags: 73728 
  public function ContinuedState();  // flags: 65536 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnAnimEvent_enable_physics( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_disableFeetIK( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_enableFeetIK( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 

}
import class CPopsGasEntity extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public final function Enable( flag : Bool);  // flags: 65552 
  public final function Spawn( flag : Bool);  // flags: 65552 
  public function Settle( deltaTime : Float,  id : Int32);  // flags: 66560 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function Restore( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function PoisonVictim( deltaTime : Float,  id : Int32);  // flags: 66560 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 

}
import class CRiftEntityStateOpened extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function OpenRift();  // flags: 65664 
  public event function OnOpenedRiftCheck() : Bool;  // flags: 65568 
  public function DontEnableEncounterOnStart();  // flags: 65536 

}
import class W3SmellyCheese extends W3AirDrainEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public function ReactivateVisuals( delta : Float,  id : Int32);  // flags: 66560 
  public function ReactivateLogic( delta : Float,  id : Int32);  // flags: 66560 

}
import class CInteractiveEntity extends CR4MapPinEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Init();  // flags: 65536 
  public function Activate( flag : Bool);  // flags: 65536 
  public function EnableEntity( flag : Bool);  // flags: 65536 

}
import class W3SnowMound extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  protected function MeltSnow();  // flags: 32768 

}
import class W3ToxicCloudStateArmed extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public function Explode( source : CEntity);  // flags: 65536 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 

}
import class W3EffectItem extends CItemEntity {

  public event function OnGrab() : Bool;  // flags: 65568 
  public event function OnPut() : Bool;  // flags: 65568 

}
import class W3LightSource extends W3UsableItem {

  public event function OnUsed( usedBy : CEntity) : Bool;  // flags: 65568 
  public event function OnHidden( usedBy : CEntity) : Bool;  // flags: 65568 

}
import class W3QuestUsableItem extends W3UsableItem {

  public event function OnUsed( usedBy : CEntity) : Bool;  // flags: 65568 
  public event function OnHidden( hiddenBy : CEntity) : Bool;  // flags: 65568 

}
import class W3MagicOilLamp extends W3QuestUsableItem {

  public event function OnUsed( usedBy : CEntity) : Bool;  // flags: 65568 
  public event function OnHidden( usedBy : CEntity) : Bool;  // flags: 65568 

}
import class W3Potestaquisitor extends W3QuestUsableItem {

  public event function OnUsed( usedBy : CEntity) : Bool;  // flags: 65568 
  public event function OnHidden( hiddenBy : CEntity) : Bool;  // flags: 65568 
  private function StartScanningAnomalies( shouldStart : Bool);  // flags: 16384 
  private function ScanningAnomalies( dt : Float,  optional  id : Int32);  // flags: 17408 
  private function UpdateEffect( effectName : CName);  // flags: 16384 
  private function StopScanningAnomalies();  // flags: 16384 

}
import class W3AardObstacle extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 

}
import class W3BuffImmunityEntity extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function ToggleActivate( toggle : Bool);  // flags: 65536 
  public function UpdateActors( dt : Float,  id : Int32);  // flags: 66560 
  private function RemoveImmunityFromActorsInRange();  // flags: 16384 
  protected function ToggleBuffImmunity( actor : CActor,  toggle : Bool);  // flags: 32768 

}
import class W3CombatDamageEntity extends CInteractiveEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3FlammableDamageEntity extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function SpawnDamageArea();  // flags: 65536 
  public function PlayBurningEffect();  // flags: 65536 
  public function TurnOnFireFading( deltaTime : Float,  id : Int32);  // flags: 66560 

}
import class W3DestroyableTerrain extends CInteractiveEntity {

  public function GetDestroyableElement( type : Int32,  id : Int32) : CScriptedDestroyableComponent;  // flags: 65536 
  public function GetDestroyableElements( type : Int32) : array<CScriptedDestroyableComponent>;  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function updateTick( time : Float,  id : Int32);  // flags: 66560 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3DestroyableTerrainStateOnIdle extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3Bridge extends W3DestroyableTerrain {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function tickTimer( time : Float,  id : Int32);  // flags: 66560 
  public function Split();  // flags: 65536 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3DestroyableTerrainStateOnPreDestroy extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3DestroyableTerrainStateOnDestroy extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3EntitySpawner extends W3UsableEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function CanBeUsed() : Bool;  // flags: 65536 
  public function TimerSpawnEntity( td : Float,  id : Int32);  // flags: 66560 
  public function UseEntity();  // flags: 65536 

}
import class W3FloeEntity extends W3DestroyableTerrain {

  public function EnableEffectOne( stop : Bool);  // flags: 65536 
  public function EnableEffectTwo( stop : Bool);  // flags: 65536 
  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function tickTimer( time : Float,  id : Int32);  // flags: 66560 
  public function Split();  // flags: 65536 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3IgniObstacleEntity extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  public function Init();  // flags: 65536 

}
import class CUsableEntity extends CInteractiveEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function Init();  // flags: 65536 
  public function Activate( flag : Bool);  // flags: 65536 
  public function EnableInteraction( flag : Bool);  // flags: 65536 

}
import class CScheduledUsableEntity extends CUsableEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function Init();  // flags: 65536 
  public function Activate( flag : Bool);  // flags: 65536 
  public function ProcessSwitchingSchedule( time : Float,  id : Int32);  // flags: 66560 

}
import class W3LightEntityDamaging extends CLightEntitySimple {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  protected function TurnLightOn();  // flags: 32768 
  protected function TurnLightOff();  // flags: 32768 
  public function EnableDamage( en : Bool);  // flags: 65536 
  public function TickTimer( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 

}
import class W3SignOwner extends CObject {

  protected function BaseInit( parentActor : CActor);  // flags: 32768 
  public function GetActor() : CActor;  // flags: 65536 
  public function GetPlayer() : W3PlayerWitcher;  // flags: 65536 
  public function IsPlayer() : Bool;  // flags: 65536 
  public function InitCastSign( signEntity : W3SignEntity) : Bool;  // flags: 65536 
  public function ChangeAspect( signEntity : W3SignEntity,  newSkill : ESkill) : Bool;  // flags: 65536 
  public function SetCurrentlyCastSign( type : ESignType,  entity : W3SignEntity);  // flags: 65536 
  public function GetSkillAbilityName( skill : ESkill) : CName;  // flags: 65536 
  public function GetSkillLevel( skill : ESkill) : Int32;  // flags: 65536 
  public function GetSkillAttributeValue( skill : ESkill,  attributeName : CName,  addBaseCharAttribute : Bool,  addSkillModsAttribute : Bool) : SAbilityAttributeValue;  // flags: 65536 
  public function GetPowerStatValue( stat : ECharacterPowerStats,  optional  abilityTag : CName) : SAbilityAttributeValue;  // flags: 65536 
  public function CanUseSkill( skill : ESkill) : Bool;  // flags: 65536 
  public function IsSkillEquipped( skill : ESkill) : Bool;  // flags: 65536 
  public function HasStaminaToUseSkill( skill : ESkill,  optional  perSec : Bool,  optional  signHack : Bool) : Bool;  // flags: 65536 
  public function LockCameraToTarget( flag : Bool);  // flags: 65536 
  public function LockActorToTarget( flag : Bool);  // flags: 65536 
  public function RemoveTemporarySkills();  // flags: 65536 
  public function GetHandAimPitch() : Float;  // flags: 65536 
  public function HasCustomAttackRange() : Bool;  // flags: 65536 
  public function GetCustomAttackRange() : CName;  // flags: 65536 
  public event function OnDelayOrientationChange() : Bool;  // flags: 65568 
  public event function OnProcessCastingOrientation( isContinueCasting : Bool) : Bool;  // flags: 65568 

}
import class RangedWeapon extends CItemEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnChangeTo( newState : CName) : Bool;  // flags: 65568 
  public event function OnRangedWeaponPress() : Bool;  // flags: 65568 
  public event function OnRangedWeaponRelease() : Bool;  // flags: 65568 
  public event function OnWeaponWait() : Bool;  // flags: 65568 
  public event function OnWeaponDrawStart() : Bool;  // flags: 65568 
  public event function OnWeaponReloadStart() : Bool;  // flags: 65568 
  public event function OnWeaponReload() : Bool;  // flags: 65568 
  public event function OnWeaponReloadEnd() : Bool;  // flags: 65568 
  public event function OnWeaponAimStart() : Bool;  // flags: 65568 
  public event function OnWeaponShootStart() : Bool;  // flags: 65568 
  public event function OnWeaponAimEnd() : Bool;  // flags: 65568 
  public event function OnProcessThrowEvent( animEventName : CName) : Bool;  // flags: 65568 
  public event function OnWeaponShootEnd() : Bool;  // flags: 65568 
  public event function OnWeaponHolsterStart() : Bool;  // flags: 65568 
  public event function OnWeaponHolsterEnd() : Bool;  // flags: 65568 
  public event function OnWeaponToNormalTransStart() : Bool;  // flags: 65568 
  public event function OnWeaponToNormalTransEnd() : Bool;  // flags: 65568 
  public event function OnReplaceAmmo() : Bool;  // flags: 65568 
  public event function OnForceHolster( optional  forceUpperBodyAnim : Bool,  optional  instant : Bool,  optional  dropItem : Bool) : Bool;  // flags: 65568 
  public function Initialize( newOwner : CActor);  // flags: 65536 
  public function IsWeaponBeingUsed() : Bool;  // flags: 65536 
  protected function ReloadWeaponWithOrWithoutAnimIfNeeded() : Bool;  // flags: 32768 
  protected function SetBehaviorGraphVariables( varName : CName,  flag : Bool,  optional  num : Int32);  // flags: 32768 
  protected function RaiseOwnerGraphEvents( eventName : CName,  force : Bool) : Bool;  // flags: 32768 
  protected function PlayOwnerReloadAnim() : Bool;  // flags: 32768 
  protected function ReloadWeapon( id : SItemUniqueId) : Bool;  // flags: 32768 
  protected function Lock();  // flags: 32768 
  protected function Unlock();  // flags: 32768 
  protected function SetOwnerOrientation();  // flags: 32768 
  public function ProcessFullBodyAnimWeightTimer( time : Float,  id : Int32);  // flags: 66560 
  public function InputLockFailsafe( time : Float,  id : Int32);  // flags: 66560 
  public function OnSprintHolster();  // flags: 65536 
  protected function ProcessFullBodyAnimWeight( optional  forceUpperBodyAnim : Bool) : Bool;  // flags: 32768 
  protected function ExitCombatAction() : Bool;  // flags: 32768 
  protected function ProcessCharacterRotationInCombat();  // flags: 32768 
  public final function ClearDeployedEntity( destroyBolt : Bool);  // flags: 65552 
  public function IsDeployedEntAiming() : Bool;  // flags: 65536 
  public function GetDeployedEntity() : W3AdvancedProjectile;  // flags: 65536 
  protected function SetDeployedEntVisibility( flag : Bool);  // flags: 32768 
  public function ProcessCanAttackWhenNotInCombat();  // flags: 65536 
  public function CanAttackWhenNotInCombat() : Bool;  // flags: 65536 
  public function PerformedDraw() : Bool;  // flags: 65536 
  protected function ResetAllSettings();  // flags: 32768 
  protected function HolsterAfterDelay( timeDelta : Float,  id : Int32);  // flags: 33792 
  protected function HolsterWhenMovingTimer( timeDelta : Float,  id : Int32);  // flags: 33792 
  protected function ProcessEnableRadialSlot();  // flags: 32768 
  public function IsShootingComplete() : Bool;  // flags: 65536 

}
import class W3ConfuseEffect extends W3CriticalEffect {

  public function GetCriticalHitChanceBonus() : Float;  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function CacheSettings();  // flags: 65536 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public function SetDrainStaminaOnExit();  // flags: 65536 

}
import class W3ForestTrigger extends CEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function IsPlayerInForest() : Bool;  // flags: 65536 

}
import class W3IgniProjectile extends W3SignProjectile {

  public function SetDT( d : Float);  // flags: 65536 
  public function IsUsed() : Bool;  // flags: 65536 
  public function SetIsUsed( used : Bool);  // flags: 65536 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  protected function ProcessCollision( collider : CGameplayEntity,  pos : Vector,  normal : Vector);  // flags: 32768 
  public event function OnAttackRangeHit( entity : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 
  public function IsProjectileFromChannelMode() : Bool;  // flags: 65536 

}
import class CR4PlayerStateUseGenericVehicle extends CPlayerStateUseVehicle {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public final function SetVehicle( v : CVehicleComponent);  // flags: 65552 
  public function DismountVehicle();  // flags: 65536 
  public function BeginState( prevStateName : CName);  // flags: 65536 
  public function ContinuedState();  // flags: 65536 
  public function EndState( nextStateName : CName);  // flags: 65536 
  protected function Init();  // flags: 32768 
  protected final function DetachFromVehicle();  // flags: 32784 
  public function CanAccesFastTravel( target : W3FastTravelEntity) : Bool;  // flags: 65536 
  public event function OnPlayerTickTimer( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnHitStart() : Bool;  // flags: 65568 
  public event function OnHitEnd() : Bool;  // flags: 65568 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  protected function ShouldEnableBoatMusic();  // flags: 32768 
  public function FindTarget();  // flags: 65536 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 

}
import class W3Blood extends CEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function DestroyTimer2( dt : Float,  id : Int32);  // flags: 66560 
  public function DestroyWhenNotVisible( dt : Float,  id : Int32);  // flags: 66560 

}
import class W3SignEntityStateNormalCast extends W3SignEntityStateBaseCast {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 

}
import class W3VisualFx extends CEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function SetDestroyTime( time : Float);  // flags: 65536 
  public function DestroyOnFxEnd( fxName : CName);  // flags: 65536 
  public function TimerDestroyOnFxEnd( dt : Float,  id : Int32);  // flags: 66560 
  public function TimerStopVisualFX( td : Float,  id : Int32);  // flags: 66560 
  protected function FunctionStopVisualFX();  // flags: 32768 
  public function DestroyVisualFX( td : Float,  id : Int32);  // flags: 66560 

}
import class W3AxiiEntity extends W3SignEntity {

  public function GetSignType() : ESignType;  // flags: 65536 
  public function Init( inOwner : W3SignOwner,  prevInstance : W3SignEntity,  optional  skipCastingAnimation : Bool) : Bool;  // flags: 65536 
  public event function OnProcessSignEvent( eventName : CName) : Bool;  // flags: 65568 
  public event function OnStarted() : Bool;  // flags: 65568 
  public function OnHorseStarted();  // flags: 65536 
  private final function IsTargetValid( actor : CActor,  isAdditionalTarget : Bool) : Bool;  // flags: 16400 
  private function SelectTargets();  // flags: 16384 
  protected function ProcessThrow();  // flags: 32768 
  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 
  public function HAXX_THIS_SHT__AXII_ABORTED();  // flags: 65536 
  public function OnDisplayTargetChange( newTarget : CActor);  // flags: 65536 
  private function AddMagic17Effect( target : CActor);  // flags: 16384 
  private function RemoveMagic17Effect( target : CActor);  // flags: 16384 

}
import class W3SignEntityStateChanneling extends W3SignEntityStateBaseCast {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnCheckChanneling() : Bool;  // flags: 65568 
  public function Update() : Bool;  // flags: 65536 
  protected function ShouldStopChanneling() : Bool;  // flags: 32768 

}
import class W3SignEntityStateActive extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 

}
import class W3Mutagen17_Effect extends W3Mutagen_Effect {

  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  public function HasBoost() : Bool;  // flags: 65536 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public function ClearBoost();  // flags: 65536 

}
import class W3SignEntityStateBaseCast extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 

}
import class CBTTaskCastSign extends CBTTaskAttack {

  public function IsAvailable() : Bool;  // flags: 65536 
  public function OnActivate() : EBTNodeStatus;  // flags: 65536 
  public latent function Main() : EBTNodeStatus;  // flags: 65600 
  public function OnDeactivate();  // flags: 65536 
  public function OnAnimEvent( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65536 
  public function Started();  // flags: 65536 
  public function Throw();  // flags: 65536 
  public function Ended();  // flags: 65536 
  public function SetupSignType();  // flags: 65536 
  public function GetAttackRangeType() : CName;  // flags: 65536 

}
import class W3MagicalThing extends CProjectileTrajectory {

  public function ExtInit( caster : CActor,  damage : Float);  // flags: 65536 
  public function ThrowAt( target : CActor);  // flags: 65536 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 

}
import class W3PhysicalThing extends CProjectileTrajectory {

  public function ExtInit( caster : CActor,  damage : Float);  // flags: 65536 
  public function ThrowAt( target : CActor);  // flags: 65536 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 

}
import class W3PhysicalSwitch extends W3Switch {

  protected function ActivateEvents( events : array<W3SwitchEvent>);  // flags: 32768 
  public function Enable( enable : Bool);  // flags: 65536 
  public function Lock( lock : Bool);  // flags: 65536 

}
import class W3CollectiblePlaces extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function GetCollectibleInstanceTag() : String;  // flags: 65536 

}
import class W3ClueCorpse extends W3MonsterClue {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  public function ApplyDismemberment( time : Float,  id : Int32);  // flags: 66560 
  public function UpdateVisibility();  // flags: 65536 

}
import class W3DisarmClue extends W3MonsterClue {

  public event function OnClueDetected() : Bool;  // flags: 65568 
  public function DisarmTimer( td : Float,  id : Int32);  // flags: 66560 

}
import class W3DaoPillarObstacle extends W3DurationObstacle {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  private function Appear( _Delta : Float,  optional  id : Int32);  // flags: 17408 

}
import class W3IceSpike extends W3DurationObstacle {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  private function Appear( optional  _Delta : Float,  optional  id : Int32);  // flags: 17408 
  private function DealDamage( optional  _Delta : Float,  optional  id : Int32);  // flags: 17408 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  private function SpecificDisappear();  // flags: 16384 
  private function ShowDestructible();  // flags: 16384 

}
import class W3WitchBoilingWaterObstacle extends W3DurationObstacle {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  private function Appear( _Delta : Float,  optional  id : Int32);  // flags: 17408 
  public function SetParams() : Bool;  // flags: 65536 
  public function ScaleEffect( deltaTime : Float,  id : Int32);  // flags: 66560 
  private function SpecificDisappear();  // flags: 16384 

}
import class CFoodBoidPointOfInterest extends CBoidPointOfInterestComponentScript {

  public function OnUsed( count : Int32,  deltaTime : Float);  // flags: 65536 

}
import class TextPopupData extends W3PopupData {

  public function SetMessageText( value : String);  // flags: 65536 
  public function SetMessageTitle( value : String);  // flags: 65536 
  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 
  protected function DefineDefaultButtons();  // flags: 32768 
  protected function GetContentRef() : String;  // flags: 32768 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 

}
import class CR4HudModuleDeathScreen extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function PopulateData();  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public event function OnPress( tag : CName) : Bool;  // flags: 65568 
  public event function OnOpened( opened : Bool) : Bool;  // flags: 65568 
  public event function OnLoad() : Bool;  // flags: 65568 
  public event function OnQuit() : Bool;  // flags: 65568 
  public event function OnRespawn() : Bool;  // flags: 65568 

}
import class DialogueSliderData extends SliderPopupData {

  protected function GetContentRef() : String;  // flags: 32768 
  protected function DefineDefaultButtons();  // flags: 32768 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 

}
import class W3WhiteFrostWaveProjectile extends CProjectileTrajectory {

  public function SetWhiteFrost( f : W3WhiteFrost);  // flags: 65536 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 

}
import class W3WhiteFrost extends W3Petard {

  protected function ProcessLoopEffect();  // flags: 32768 
  protected function LoadDataFromItemXMLStats();  // flags: 32768 
  public function WaveProjectile( dt : Float,  optional  id : Int32);  // flags: 66560 
  public function Collided( ent : CGameplayEntity);  // flags: 65536 

}
import class CR4HudModuleWolfHead extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function DisplayNewLevelIndicator();  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function UpdateVitality();  // flags: 65536 
  public function UpdateStamina();  // flags: 65536 
  public function UpdateToxicity();  // flags: 65536 
  public function UpdateExperience();  // flags: 65536 
  private function GetCurrentExperience() : Float;  // flags: 16384 
  private function GetLevelExperience() : Float;  // flags: 16384 
  private function GetTargetExperience() : Float;  // flags: 16384 
  public function UpdateMedallion();  // flags: 65536 
  private function UpdateFocusPoints();  // flags: 16384 
  public function ResetFocusPoints();  // flags: 65536 
  public function LockFocusPoints( value : Int32);  // flags: 65536 
  public function UpdateSignData();  // flags: 65536 
  public function UpdateStateByPlayer();  // flags: 65536 
  private function GetSignIcon() : String;  // flags: 16384 
  private function GetSignIconByType( signType : ESignType) : String;  // flags: 16384 
  public function ShowLevelUpIndicator( value : Bool);  // flags: 65536 
  public function SetAlwaysDisplayed( value : Bool);  // flags: 65536 

}
import class W3RiddleServer extends CGameplayEntity {

  public function UpdatePairedRiddleNodes();  // flags: 65536 
  public function AddPairedRiddleNode( riddleNode : W3RiddleNode);  // flags: 65536 
  public function AddRiddleNode();  // flags: 65536 
  public function AddValidPosition();  // flags: 65536 
  public function CheckCombination();  // flags: 65536 
  public function RemoveValidPosition();  // flags: 65536 
  private function ActivateEvents( events : array<W3SwitchEvent>);  // flags: 16384 

}
import class W3RiddleNode extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnIgniHit( sign : W3IgniProjectile) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public function InitializeServer();  // flags: 65536 
  public function InitializeServerTimer( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function SetCurrentPairedRiddleNodeId( id : Int32);  // flags: 65536 
  public function AddCurrentPairedRiddleNodeId( id : Int32);  // flags: 65536 
  public function RemoveCurrentPairedRiddleNodeId( id : Int32);  // flags: 65536 
  public function SetCurrentPairedRiddleNodesIds( ids : array<Int32>);  // flags: 65536 
  public function PlayEffects();  // flags: 65536 
  public function PlayExternalEffectOnpairedNodeByID( id : Int32);  // flags: 65536 
  public function StopExternalEffectOnpairedNodeByID( id : Int32);  // flags: 65536 
  public function StopEffects();  // flags: 65536 
  public function ChangePosition();  // flags: 65536 
  public function SetPosition();  // flags: 65536 
  public function SetPositionTimer( timeDelta : Float,  id : Int32);  // flags: 66560 

}
import class ConfirmationPopupData extends TextPopupData {

  protected function DefineDefaultButtons();  // flags: 32768 
  protected function GetContentRef() : String;  // flags: 32768 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 
  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 
  protected function GetAcceptText() : String;  // flags: 32768 
  protected function GetDeclineText() : String;  // flags: 32768 

}
import class CR4ListBaseMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function SaveStateData();  // flags: 65536 
  public event function OnCategoryOpened( categoryName : CName,  opened : Bool) : Bool;  // flags: 65568 
  public event function OnEntryRead( tag : CName) : Bool;  // flags: 65568 
  public event function OnEntrySelected( tag : CName) : Bool;  // flags: 65568 
  public event function OnEntryPress( tag : CName) : Bool;  // flags: 65568 
  protected function HandleMenuLoaded();  // flags: 32768 
  public function PopulateData();  // flags: 65536 
  public function CreateItems( itemsNames : array<CName>) : CScriptedFlashArray;  // flags: 65536 
  public function FillItemInformation( flashObject : CScriptedFlashObject,  index : Int32);  // flags: 65536 
  public function GetItemQuantity( id : Int32) : Int32;  // flags: 65536 
  public event function OnGetItemData( item : Int32,  compareItemType : Int32) : Bool;  // flags: 65568 
  public function UpdateDescription( entryName : CName);  // flags: 65536 
  public function UpdateImage( entryName : CName);  // flags: 65536 
  public function UpdateItems( tag : CName);  // flags: 65536 

}
import class W3VirtualSwitch extends W3Switch {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function OnGetRequiredSwitches( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function Notify( activeSwitch : W3Switch);  // flags: 66048 
  protected function Fail( failed : W3Switch);  // flags: 32768 
  public function Turn( on : Bool,  actor : CActor,  force : Bool,  skip : Bool);  // flags: 65536 

}
import class W3PlayerWitcherStateApproachInteractionState extends CR4PlayerStateExtendedMovable {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function InitStateApproachInteraction( prevStateName : CName);  // flags: 65664 
  public function SetObjectPointHeading( head : Float,  obj : CEntity);  // flags: 65536 
  public function SetSyncInteractionAnimation( on : Bool,  switchType : PhysicalSwitchAnimationType);  // flags: 65536 
  public function PlaySyncInteractionAnimation();  // flags: 65536 
  public event function OnReactToBeingHit( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  private function SetInteractionComponent( b : Bool);  // flags: 16384 
  private function StopApproach();  // flags: 16384 
  public function InputCheckDelay( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function InputCheck( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function ApproachTimeout( timeDelta : Float,  id : Int32);  // flags: 66560 

}
import class W3Door extends W3LockableEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public event function OnManageDoor( operations : array<EDoorOperation>,  force : Bool) : Bool;  // flags: 65568 
  public function Close();  // flags: 65536 
  public function Toggle( force : Bool);  // flags: 65536 
  public function CanBeOpened( force : Bool) : Bool;  // flags: 65536 
  public function CanBeClosed( force : Bool) : Bool;  // flags: 65536 
  public function IsOpened() : Bool;  // flags: 65536 
  public function Open() : Bool;  // flags: 65536 
  protected function OnLock();  // flags: 32768 
  public event function OnStateChange( newState : Bool) : Bool;  // flags: 65568 
  public event function OnInteractionActivated( interactionComponentName : String,  activator : CEntity) : Bool;  // flags: 65568 

}
import class W3FocusAreaTrigger extends CGameplayEntity {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaActivated( area : CTriggerAreaComponent,  activated : Bool) : Bool;  // flags: 65568 
  public function Disable();  // flags: 65536 
  public function Enable();  // flags: 65536 
  public function ChangeFocusAreaIntensity( newIntensity : Float);  // flags: 65536 
  private function SetupClueConnections();  // flags: 16384 
  public function SmartFocusAreaCheck();  // flags: 65536 

}
import class CGateEntity extends W3LockableEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnStreamIn() : Bool;  // flags: 65568 
  private function HandleInitialState();  // flags: 16384 
  public function CloseGate( passedSpeedModifier : Float);  // flags: 65536 
  public function OpenGate( passedSpeedModifier : Float);  // flags: 65536 
  public function EnableDeniedArea( toggle : Bool);  // flags: 65536 
  public function PlayGateSounds();  // flags: 65536 
  public function StopGateSounds( td : Float,  id : Int32);  // flags: 66560 
  public function GetCurrState() : CName;  // flags: 65536 
  public function SetCurrState( stateName : CName);  // flags: 65536 
  public function GetSpeedModifier() : Float;  // flags: 65536 
  public function SetSpeedModifier( passedSpeedModifier : Float);  // flags: 65536 

}
import class W3PhysicalDamageMechanism extends CGameplayEntity {

  public function Activate();  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function IsActive() : Bool;  // flags: 65536 
  public event function OnManageMechanism( operations : array<EPhysicalDamagemechanismOperation>) : Bool;  // flags: 65568 
  public event function OnActorCollision( object : CObject,  physicalActorindex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnPropertyAnimationFinished( propertyName : CName,  animationName : CName) : Bool;  // flags: 65568 
  protected function ActivateTimer( dt : Float,  id : Int32);  // flags: 33792 

}
import class W3MicroQuestActivator extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function GetCurrentTime() : Int32;  // flags: 65536 
  public function CanMicroQuestBeStarted( mQEntry : EncounterEntryDetails) : Bool;  // flags: 65536 
  public function QuestAvailableAgain();  // flags: 65536 
  public function BackToInactive( deltaTime : Float,  id : Int32);  // flags: 66560 

}
import class W3MonsterHuntInvestigationArea extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  private function CheckAreaValidity() : Bool;  // flags: 16384 
  private function SwitchInvestigationMusic( turnOn : Bool);  // flags: 16384 
  public function SetInvestigationAreaEnabled( isEnabled : Bool,  optional  silentTurnOff : Bool);  // flags: 65536 
  public function SetInvestigationAreaActive( isActive : Bool);  // flags: 65536 
  private function ProcessAreaActivation();  // flags: 16384 
  private function GetIsRequiredQuestTracked() : Bool;  // flags: 16384 
  public function QuestTrackerCheckTimer( dt : Float,  id : Int32);  // flags: 66560 
  private function UpdateCurrentInvestigationArea();  // flags: 16384 

}
import class W3ClueCondition extends CObject {

  public function CheckCondition( waypoint : CNode) : Bool;  // flags: 65536 

}
import class W3ClueWaypoint extends CObject {

  public function WaypointReached() : Bool;  // flags: 65536 

}
import class CR4OverlayMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public function RequestClose();  // flags: 65536 
  protected function BlurBackground( firstLayer : CR4MenuBase,  value : Bool);  // flags: 32768 

}
import class CR4MenuItemSelect extends CR4OverlayMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnSelectItem( item : SItemUniqueId) : Bool;  // flags: 65568 
  public function RequestClose();  // flags: 65536 
  protected function UpdateData();  // flags: 32768 

}
import class CR4PreparationPotionsAndBombsMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateData();  // flags: 65536 
  public function UpdateBombs();  // flags: 65536 
  public function UpdatePotions();  // flags: 65536 
  private function UpdatePlayerOrens();  // flags: 16384 
  private function UpdatePlayerLevel();  // flags: 16384 
  private function GetCurrentLevel() : Int32;  // flags: 16384 
  private function GetCurrentExperience() : String;  // flags: 16384 
  public function UpdateTooltipCompareData( item : SItemUniqueId,  compareItem : SItemUniqueId,  tooltipInv : CInventoryComponent,  tooltipName : String);  // flags: 65536 
  public function UpdateNavigationTitles();  // flags: 65536 
  public function GetItemDefaultAction( item : SItemUniqueId) : String;  // flags: 65536 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnEquipItem( item : SItemUniqueId,  slot : Int32,  quantity : Int32) : Bool;  // flags: 65568 
  public event function OnUpdateTooltipCompareData( item : SItemUniqueId,  compareItemType : Int32,  tooltipName : String) : Bool;  // flags: 65568 

}
import class CR4PreparationMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnGuiSceneEntitySpawned( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnGuiSceneEntityDestroyed() : Bool;  // flags: 65568 
  public function UpdateItemsFromEntity( entity : CEntity);  // flags: 65536 
  private function CreateItems( itemsNames : array<CName>) : CScriptedFlashArray;  // flags: 16384 
  public function getCurrentTrackedCreatureTag( out  journalCreature : CJournalCreature,  out  trackedType : PreparationTrackType) : Bool;  // flags: 65536 
  public function SetButtons();  // flags: 65536 
  public function UpdateOilSlotLocks();  // flags: 65536 
  public function UpdateToxicityBar();  // flags: 65536 
  private function sendTrackedMonsterInfo();  // flags: 16384 
  public function GetDescription( currentCreature : CJournalCreature) : String;  // flags: 65536 
  private function initMeditationState();  // flags: 16384 
  protected function equipTypeToTabIndex( equipId : Int32) : PreparationMenuTabIndexes;  // flags: 32768 
  protected function tabIndexToItemType( tabIndex : Int32) : EPreporationItemType;  // flags: 32768 
  public event function OnTabDataRequested( tabIndex : Int32) : Bool;  // flags: 65568 
  public function PopulateTabData( tabIndex : Int32);  // flags: 65536 
  private function PopulateDataForTab( tabIndex : Int32,  entriesArray : CScriptedFlashArray);  // flags: 16384 
  private function updateSlotsItems();  // flags: 16384 
  private function setMenuMode();  // flags: 16384 
  public event function OnSelectInventoryItem( itemId : SItemUniqueId,  slot : Int32) : Bool;  // flags: 65568 
  public event function OnEquipItemPrep( item : SItemUniqueId,  equipID : Int32) : Bool;  // flags: 65568 
  public event function OnUnequipItemPrep( equipID : Int32) : Bool;  // flags: 65568 
  private function GetLocItemOilCategory( item : SItemUniqueId) : String;  // flags: 16384 
  public event function OnGetItemData( item : SItemUniqueId,  compareItemType : Int32) : Bool;  // flags: 65568 
  public event function OnGetEmptyPaperdollTooltip( equipID : Int32,  isLocked : Bool) : Bool;  // flags: 65568 
  public event function OnGetAppliedOilTooltip( equipID : Int32) : Bool;  // flags: 65568 
  public function CompareItemsStats( itemStats : array<SAttributeTooltip>,  compareItemStats : array<SAttributeTooltip>,  out  compResult : CScriptedFlashArray);  // flags: 65536 
  public function GetItemRarityDescription( item : SItemUniqueId,  tooltipInv : CInventoryComponent) : String;  // flags: 65536 

}
import class CR4PreparationMutagensMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateData();  // flags: 65536 
  public function UpdateToxicityBar();  // flags: 65536 
  public function UpdateMutagens();  // flags: 65536 
  private function UpdatePlayerOrens();  // flags: 16384 
  private function UpdatePlayerLevel();  // flags: 16384 
  private function GetCurrentLevel() : Int32;  // flags: 16384 
  private function GetCurrentExperience() : String;  // flags: 16384 
  public function UpdateTooltipCompareData( item : SItemUniqueId,  compareItem : SItemUniqueId,  tooltipInv : CInventoryComponent,  tooltipName : String);  // flags: 65536 
  public function UpdateNavigationTitles();  // flags: 65536 
  public function UpdateRightMenuOptionsData( item : SItemUniqueId);  // flags: 65536 
  public function GetItemDefaultAction( item : SItemUniqueId) : String;  // flags: 65536 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnEquipItem( item : SItemUniqueId,  slot : Int32,  quantity : Int32) : Bool;  // flags: 65568 
  public event function OnSetCurrentPlayerGrid( value : String) : Bool;  // flags: 65568 
  public event function OnMoveItem( item : SItemUniqueId,  moveToIndex : Int32) : Bool;  // flags: 65568 
  public event function OnMoveItems( item : SItemUniqueId,  moveToIndex : Int32,  itemSecond : SItemUniqueId,  moveToSecondIndex : Int32) : Bool;  // flags: 65568 
  public event function OnUpdateTooltipCompareData( item : SItemUniqueId,  compareItemType : Int32,  tooltipName : String) : Bool;  // flags: 65568 
  public event function OnUpdateRightMenuOptions( item : SItemUniqueId) : Bool;  // flags: 65568 
  public event function OnRightMenuOptionChoosen( itemId : SItemUniqueId,  quantity : Int32,  actionValue : Int32) : Bool;  // flags: 65568 

}
import class CR4PreparationOilsMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateData();  // flags: 65536 
  public function UpdateBombs();  // flags: 65536 
  private function UpdatePlayerOrens();  // flags: 16384 
  private function UpdatePlayerLevel();  // flags: 16384 
  private function GetCurrentLevel() : Int32;  // flags: 16384 
  private function GetCurrentExperience() : String;  // flags: 16384 
  public function UpdateTooltipCompareData( item : SItemUniqueId,  compareItem : SItemUniqueId,  tooltipInv : CInventoryComponent,  tooltipName : String);  // flags: 65536 
  public function UpdateNavigationTitles();  // flags: 65536 
  public function GetItemDefaultAction( item : SItemUniqueId) : String;  // flags: 65536 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnUpgradeItem( item : SItemUniqueId,  slot : Int32,  quantity : Int32) : Bool;  // flags: 65568 
  public event function OnUpdateTooltipCompareData( item : SItemUniqueId,  compareItemType : Int32,  tooltipName : String) : Bool;  // flags: 65568 

}
import class CR4RyanAlchemyMenu extends CR4Menu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnBrew( _RecipeIndex : Int32) : Bool;  // flags: 65568 
  private function PopulateData();  // flags: 16384 

}
import class CR4PopupBase extends CR4Popup {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingPopup() : Bool;  // flags: 65568 
  public function UpdateAcceptCancelSwaping();  // flags: 65536 
  protected function UpdateControlSchemeLock();  // flags: 32768 
  protected function SetControllerType( isGamepad : Bool);  // flags: 32768 
  protected function SetPlatformType( platformType : Platform);  // flags: 32768 
  public function setArabicAligmentMode();  // flags: 65536 
  public event function OnPlaySoundEvent( soundName : String) : Bool;  // flags: 65568 

}
import class W3MonsterHuntNPC extends CNewNPC {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnDestroyed() : Bool;  // flags: 65568 
  public event function OnDeath( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  public function MonsterHuntNPCBossBarTimer( delta : Float,  id : Int32);  // flags: 66560 
  private function ShowMonsterHuntBossFightIndicator( enable : Bool);  // flags: 16384 
  public function SwitchMonsterHuntCombatMusic( enable : Bool);  // flags: 65536 
  public function GetIsBossbarOn() : Bool;  // flags: 65536 
  private function SwitchAssociatedInvestigationAreas( enable : Bool);  // flags: 16384 

}
import class W3NonPlayerAbilityManager extends W3AbilityManager {

  public function Init( ownr : CActor,  cStats : CCharacterStats,  isFromLoad : Bool,  diff : EDifficultyMode) : Bool;  // flags: 65536 
  public function PostInit();  // flags: 65536 
  protected function OnVitalityChanged();  // flags: 32768 
  protected function OnToxicityChanged();  // flags: 32768 
  protected function OnFocusChanged();  // flags: 32768 
  protected function OnAirChanged();  // flags: 32768 
  private function InitWeatherBonuses();  // flags: 16384 
  public function GetWeatherBonus( dayPart : EDayPart,  weather : EWeatherEffect,  moonState : EMoonState) : CName;  // flags: 65536 
  private function InitSkills();  // flags: 16384 
  protected function GetAttributeValueInternal( attributeName : CName,  optional  tags : array<CName>) : SAbilityAttributeValue;  // flags: 32768 

}
import class W3TripwireSwitch extends W3PhysicalSwitch {

  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public function OnCheckInventoryEntities( delta : Float,  id : Int32);  // flags: 66560 
  public function TurnOnIfPossible( entity : CEntity);  // flags: 65536 
  public function TurnOffIfPossible( entity : CEntity);  // flags: 65536 
  public function OnDelayedTurnOn( delta : Float,  id : Int32);  // flags: 66560 
  public function OnDelayedTurnOff( delta : Float,  id : Int32);  // flags: 66560 
  public function Disarm();  // flags: 65536 

}
import class W3IgniEntity extends W3SignEntity {

  public function GetSignType() : ESignType;  // flags: 65536 
  public event function OnStarted() : Bool;  // flags: 65568 
  public function UpdateBurningChance( actor : CActor,  dt : Float) : Bool;  // flags: 65536 
  protected function InitThrown();  // flags: 32768 
  public function BroadcastSignCast_Override();  // flags: 65536 
  public function ShowChannelingCollisionFx( pos : Vector,  rot : EulerAngles,  normall : Vector);  // flags: 65536 
  public function ShowChannelingRangeFx( pos : Vector,  rot : EulerAngles);  // flags: 65536 
  protected function CleanUp();  // flags: 32768 
  public function CollisionFXTimedOutDestroy( dt : Float,  id : Int32);  // flags: 66560 
  public function RangeFXTimedOutDestroy( dt : Float,  id : Int32);  // flags: 66560 

}
import class W3POIDispenser extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExtit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function IsDispenserAvailable() : Bool;  // flags: 65536 
  public function GetPOISpawnPoints() : array<CNode>;  // flags: 65536 
  public function GetPointToActive() : CNode;  // flags: 65536 
  public function GetEntitySpawnPos( selectedPoint : CNode) : Vector;  // flags: 65536 
  public function GetRespawnInterval() : Float;  // flags: 65536 
  public function SpawnPOI();  // flags: 65536 
  public function RespawnPOI( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function DespawnPOI( entity : W3PointOfInterestEntity);  // flags: 65536 
  public function DeactivatePOI( entity : W3PointOfInterestEntity);  // flags: 65536 
  public function DespawnAllPOIs( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function IsPlayerNear() : Bool;  // flags: 65536 
  public function ActivateFoodDispenser( isOn : Bool);  // flags: 65536 

}
import class W3PointOfInterestEntity extends CGameplayEntity {

  public function AssignDispenser( activator : W3POIDispenser);  // flags: 65536 
  public function GetDispenser() : W3POIDispenser;  // flags: 65536 
  public function CanBeDestroyed() : Bool;  // flags: 65536 

}
import class W3FlyingSwarmStateChangeRequest extends CObject {

  public function Init( id : CFlyingGroupId,  newState : CName);  // flags: 65536 

}
import class W3FlyingSwarmCreateGroupRequest extends CObject {

  public function Init( inBoidCount : Int32,  inSpawnPOI : CName);  // flags: 65536 

}
import class W3Rat extends CNewNPC {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnChangeDyingInteractionPriorityIfNeeded() : Bool;  // flags: 65568 

}
import class CR4PlayerStateUnconscious extends CR4PlayerStateExtendedMovable {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnPlayerTickTimer( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public function ProcessUncounscious();  // flags: 65664 
  public latent function HideWeapon();  // flags: 65600 
  public latent function TimeFlow();  // flags: 65600 
  public function ChangeInteractionPriority();  // flags: 65536 
  public function ResetInteractionPriority();  // flags: 65536 
  public function TakeMoneyFromPlayer();  // flags: 65536 
  public function RemoveArmor();  // flags: 65536 
  public function TeleportPlayerToNewPosition();  // flags: 65536 
  public function TeleportAwayFromElevator();  // flags: 65536 
  public function CacheSwordInHand();  // flags: 65536 
  public function RestoreSword();  // flags: 65536 
  public function DisplayMessage();  // flags: 65536 
  public function SetIsUnconscious( flag : Bool);  // flags: 65536 
  public event function OnCheckUnconscious() : Bool;  // flags: 65568 
  public event function OnKilledByGuard() : Bool;  // flags: 65568 
  public event function OnKilledByElevator() : Bool;  // flags: 65568 

}
import class W3ContextManager extends CObject {

  public function Init( targetCommonMenu : CR4CommonMenu);  // flags: 65536 
  public function ActivateContext( targetContext : W3UIContext);  // flags: 65536 
  public function HandleUserInput( navCode : String,  actionId : Int32);  // flags: 65536 
  public function updateInputFeedback();  // flags: 65536 

}
import class W3UIContext extends CObject {

  public function HandleUserFeedback( keyName : String);  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function Init( ownerManager : W3ContextManager);  // flags: 65536 
  public function GetButtonsList( out  externalList : array<SKeyBinding>);  // flags: 65536 
  protected function AddInputBinding( label : String,  padNavCode : String,  optional  keyboardNavCode : Int32,  optional  useInContextMenu : Bool,  optional  IsLocalized : Bool);  // flags: 32768 
  protected function IsPadBindingExist( padNavCode : String) : Bool;  // flags: 32768 

}
import class W3ContextMenu extends W3PopupData {

  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 
  protected function DefineDefaultButtons();  // flags: 32768 
  protected function GetContentRef() : String;  // flags: 32768 

}
import class W3GuiBaseInventoryComponent extends CObject {

  public function Initialize( inv : CInventoryComponent);  // flags: 65536 
  protected function InvalidateItems( items : array<SItemUniqueId>);  // flags: 32768 
  public function GetInventoryComponent() : CInventoryComponent;  // flags: 65536 
  public function GetItemName( item : SItemUniqueId) : CName;  // flags: 65536 
  public function GiveItem( itemId : SItemUniqueId,  customer : W3GuiBaseInventoryComponent,  optional  quantity : Int32,  optional  out  newItemID : SItemUniqueId) : Bool;  // flags: 65536 
  public function ReceiveItem( itemId : SItemUniqueId,  giver : W3GuiBaseInventoryComponent,  optional  quantity : Int32,  optional  out  newItemID : SItemUniqueId) : Bool;  // flags: 65536 
  public function CanDrop( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function DropItem( item : SItemUniqueId,  quantity : Int32);  // flags: 65536 
  public function ClearItemIsNewFlag( item : SItemUniqueId);  // flags: 65536 
  public function GetInventoryFlashArray( out  flashArray : CScriptedFlashArray,  flashObject : CScriptedFlashObject);  // flags: 65536 
  public function HasNewFlagOnItem() : Bool;  // flags: 65536 
  public function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetItemActionType( item : SItemUniqueId,  optional  bGetDefault : Bool) : EInventoryActionType;  // flags: 65536 
  public function SetInventoryFlashObjectForItem( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 65536 
  public function GetItemQuantity( item : SItemUniqueId) : Int32;  // flags: 65536 
  protected function IsUnequipSwordIsAlllowed( item : SItemUniqueId) : Bool;  // flags: 32768 
  public function isHorseItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  protected function GetCurrentSlotForItem( item : SItemUniqueId) : Int32;  // flags: 32768 
  protected function GetItemEquippedSlot( item : SItemUniqueId) : EEquipmentSlots;  // flags: 32768 
  protected function GetTooltipText( item : SItemUniqueId) : String;  // flags: 32768 
  public function CanBeUpgradedBy( targetItem : SItemUniqueId,  upgradeItem : SItemUniqueId) : Bool;  // flags: 65536 
  public function isQuestItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isQuickslotItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isWeaponItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isArmorItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isUpgradeItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isToolItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isPotionItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isOilItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isPetardItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isAlchemyItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isFoodItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isIngredientItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function isItemSchematic( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetFilterTypeByItem( item : SItemUniqueId) : EInventoryFilterType;  // flags: 65536 
  public final function GetAllItems() : array<SItemUniqueId>;  // flags: 65552 
  public function GetBookText( item : SItemUniqueId) : String;  // flags: 65536 
  public function GetAlchemyBookText( item : SItemUniqueId) : String;  // flags: 65536 
  public function GetSchematicBookText( item : SItemUniqueId) : String;  // flags: 65536 

}
import class W3GuiHorseInventoryComponent extends W3GuiBaseInventoryComponent {

  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 
  protected function isEquipped( item : SItemUniqueId) : Bool;  // flags: 32768 
  protected function GetCurrentSlotForItem( item : SItemUniqueId) : Int32;  // flags: 32768 
  public function SetInventoryFlashObjectForItem( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 65536 

}
import class CR4GuiSceneController extends CObject {

  public function OnGuiSceneEntitySpawned();  // flags: 65536 
  public function OnGuiSceneEntityDestroyed();  // flags: 65536 
  public function SetEntityTemplate( entityTemplateAlias : String);  // flags: 65536 
  public function SetEntityAppearance( appearance : CName);  // flags: 65536 
  public function SetEnvironmentAndSunRotation( environmentAlias : String,  environmentSunRotation : EulerAngles);  // flags: 65536 
  public function SetCamera( cameraLookAt : Vector,  cameraRotation : EulerAngles,  cameraDistance : Float,  fov : Float);  // flags: 65536 
  public function SetEntityTransform( position : Vector,  rotation : EulerAngles,  scale : Vector);  // flags: 65536 
  public function SetEntityItems( updateItems : Bool);  // flags: 65536 

}
import class CR4HudEventController extends CObject {

  private function FindDelayedEvent( eventName : String) : Int32;  // flags: 16384 
  public function RunEvent_MinimapModule_NotifyPlayerEnteredInterior( areaPos : Vector,  areaYaw : Float,  texture : String);  // flags: 65536 
  public function RunEvent_MinimapModule_NotifyPlayerExitedInterior();  // flags: 65536 
  public function RunEvent_MinimapModule_NotifyPlayerMountedBoat();  // flags: 65536 
  public function RunEvent_MinimapModule_NotifyPlayerDismountedBoat();  // flags: 65536 
  public function RunEvent_QuestsModule_OnQuestTrackingStarted( journalQuest : CJournalQuest);  // flags: 65536 
  public function RunEvent_QuestsModule_OnTrackedQuestObjectiveHighlighted( journalObjective : CJournalQuestObjective,  journalObjectiveIndex : Int32);  // flags: 65536 
  public function RunEvent_ControlsFeedbackModule_Update( inputContextName : CName);  // flags: 65536 
  public function RunEvent_BossFocusModule_ShowBossIndicator( enable : Bool,  bossTag : CName);  // flags: 65536 
  public function RunEvent_OxygenBarModule_SetInGasArea( entered : Bool);  // flags: 65536 
  private function CheckDelayedEvent();  // flags: 16384 
  public function RunDelayedEvents();  // flags: 65536 
  private function RunDelayedEvent( module : CHudModule,  delayedEvent : CHudEvent);  // flags: 16384 

}
import class CInGameConfigBufferedWrapper extends CObject {

  public function FillAppendWithGroup( groupName : CName);  // flags: 65536 
  public function GetVarValue( groupName : CName,  varName : CName) : String;  // flags: 65536 
  public function SetVarValue( groupName : CName,  varName : CName,  varValue : String);  // flags: 65536 
  public function AnyBufferedVarHasTag( tag : CName) : Bool;  // flags: 65536 
  public function ApplyNewValues();  // flags: 65536 
  public function FlushBuffer();  // flags: 65536 
  public function UndoAndFlushBuffer();  // flags: 65536 
  public function IsEmpty() : Bool;  // flags: 65536 
  public function ClearBuffer();  // flags: 65536 

}
import class W3MessagePopupData extends CObject {

  public function setActionsByType( msgType : EUserDialogButtons);  // flags: 65536 

}
import class CR4StartScreenMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  private function SetFadeTime();  // flags: 16384 
  public function startFade();  // flags: 65536 
  public event function OnKeyPress() : Bool;  // flags: 65568 
  public event function OnPlaySoundEvent( soundName : String) : Bool;  // flags: 65568 
  public function setStandardtext();  // flags: 65536 
  public function setWaitingText();  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CR4HudModuleDialog extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function SetGwentMode( value : Bool);  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function UpdateCanBeSkipped( canBeSkipped : Bool);  // flags: 65536 
  public function OnMissingContentDialogClosed();  // flags: 65536 
  public event function OnDialogOptionSelected( index : Int32) : Bool;  // flags: 65568 
  public event function OnDialogOptionAccepted( index : Int32) : Bool;  // flags: 65568 
  public event function OnDialogSkipped( value : Int32) : Bool;  // flags: 65568 
  public function OnDialogSentenceSet( text : String);  // flags: 65536 
  public function OnDialogPreviousSentenceSet( text : String);  // flags: 65536 
  public function OnDialogPreviousSentenceHide();  // flags: 65536 
  public function OnDialogSentenceHide();  // flags: 65536 
  public function OnDialogChoicesSet( choices : array<SSceneChoice>);  // flags: 65536 
  private function SendDialogChoicesToUI( choices : array<SSceneChoice>,  allowContentMissingDialog : Bool);  // flags: 16384 
  public function OnDialogChoiceTimeoutSet( timeOutPercent : Float);  // flags: 65536 
  public function OnDialogChoiceTimeoutHide();  // flags: 65536 
  public function OnDialogSkipConfirmShow();  // flags: 65536 
  public function OnDialogSkipConfirmHide();  // flags: 65536 
  public function OpenMonsterHuntNegotiationPopup( rewardName : CName,  minimalGold : Int32,  alwaysSuccessful : Bool);  // flags: 65536 
  public function OpenBetPopup( rewardName : CName,  overrideCurrent : Int32);  // flags: 65536 
  public function DialogueSliderDataPopupResult( value : Float,  optional  monsterBarganingPopupMenuParent : CR4MenuPopup);  // flags: 65536 
  public function GetLastNegotiationResult() : ENegotiationResult;  // flags: 65536 
  public function IsPopupOpened() : Bool;  // flags: 65536 

}
import class CR4MessagePopup extends CR4PopupBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingPopup() : Bool;  // flags: 65568 
  public event function OnAllMessagesShown() : Bool;  // flags: 65568 
  public event function OnUserAction( messageId : Int32,  actionId : Int32) : Bool;  // flags: 65568 
  protected function AddMessageToQueue( messageData : W3MessagePopupData) : Int32;  // flags: 32768 
  public function ShowMessage( messageData : W3MessagePopupData);  // flags: 65536 
  public function GetCurrentMessageData() : W3MessagePopupData;  // flags: 65536 
  public function GetCurrentMsgId() : Int32;  // flags: 65536 
  protected function SendMessageToAS( messageData : W3MessagePopupData);  // flags: 32768 
  public function HideMessage( messageId : Int32);  // flags: 65536 
  public event function OnMessageHidden() : Bool;  // flags: 65568 
  public function DisplayProgressBar( progressValue : Float,  progressType : EUserMessageProgressType);  // flags: 65536 
  public event function OnProgressUpdateRequested() : Bool;  // flags: 65568 

}
import class W3MenuInitData extends CObject {

  public function getDefaultState() : CName;  // flags: 65536 
  public function setDefaultState( value : CName);  // flags: 65536 

}
import class W3PortalConfirmationPopupData extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 
  protected function GetAcceptText() : String;  // flags: 32768 
  protected function GetDeclineText() : String;  // flags: 32768 

}
import class CR4HudModuleQuests extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function OnLevelUp();  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function CheckIfUpdateIsAllowed() : Bool;  // flags: 65536 
  public event function OnHighlightNextObjective( action : SInputAction) : Bool;  // flags: 65568 
  public function OnQuestTrackingStarted( journalQuest : CJournalQuest);  // flags: 65536 
  public function OnTrackedQuestUpdated( journalQuest : CJournalQuest);  // flags: 65536 
  public function OnTrackedQuestObjectivesUpdated( journalObjective : CJournalQuestObjective);  // flags: 65536 
  public function OnTrackedQuestObjectiveCounterUpdated( journalObjective : CJournalQuestObjective);  // flags: 65536 
  public function OnTrackedQuestObjectiveHighlighted( journalObjective : CJournalQuestObjective,  objectiveIndex : Int32);  // flags: 65536 
  private function Test();  // flags: 16384 
  private function UpdateQuest();  // flags: 16384 
  private function UpdateObjectives();  // flags: 16384 
  public function HAXGetTrackedObjectives( out  l_objectives : array<SJournalQuestObjectiveData>);  // flags: 65536 
  private function SendQuestName();  // flags: 16384 
  private function SendObjectives();  // flags: 16384 
  public function SendObjectiveCounter( objective : CJournalQuestObjective);  // flags: 65536 
  public function HighlightObjective( objective : CJournalQuestObjective,  objectiveIndex : Int32);  // flags: 65536 
  private function ShowQuestTracker( show : Bool);  // flags: 16384 
  private function GetObjectiveIndex( objective : CJournalQuestObjective) : Int32;  // flags: 16384 
  public function GetCounterText( objectiveEntry : CJournalQuestObjective) : String;  // flags: 65536 
  protected function GetColorByQuestType( journalQuest : CJournalQuest) : Int32;  // flags: 32768 
  public function ShowElement( show : Bool,  optional  bImmediately : Bool);  // flags: 65536 
  public function SetEnabled( value : Bool);  // flags: 65536 

}
import class CR4HudModuleControlsFeedback extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function UpdateInputContext( inputContextName : CName);  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function UpdateInputContextActions();  // flags: 65536 
  public function ForceModuleUpdate();  // flags: 65536 
  public function SetEnabled( value : Bool);  // flags: 65536 
  private function UpdateSwordDisplay();  // flags: 16384 
  private function SendInputContextActions( inputContextName : CName,  optional  isForced : Bool);  // flags: 16384 
  protected function UpdateScale( scale : Float,  flashModule : CScriptedFlashSprite) : Bool;  // flags: 32768 
  protected function UpdatePosition( anchorX : Float,  anchorY : Float);  // flags: 32768 
  public event function OnControllerChanged() : Bool;  // flags: 65568 
  public event function OnInputHandled( NavCode : String,  KeyCode : Int32,  ActionId : Int32) : Bool;  // flags: 65568 

}
import class CR4HudModuleBossFocus extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function ShowBossIndicator( enable : Bool,  bossTag : CName,  optional  bossEntity : CActor);  // flags: 65536 
  private function OnShow();  // flags: 16384 
  private function OnHide();  // flags: 16384 
  private function UpdateNameAndHealth( onShow : Bool);  // flags: 16384 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 

}
import class CR4HudModuleOxygenBar extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  private function UpdateOxygene();  // flags: 16384 
  public function EnableElement( enable : Bool);  // flags: 65536 
  public function ForceShowElement( force : Bool);  // flags: 65536 
  public function SetIsInGasArea( b : Bool);  // flags: 65536 

}
import class CR4MenuPopup extends CR4OverlayMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function SetButtons();  // flags: 65536 
  public event function OnSetQuantity( QuantityValue : Int32) : Bool;  // flags: 65568 
  public event function OnContextActionChange( navCode : String,  autoExec : Bool) : Bool;  // flags: 65568 
  public event function OnInputHandled( NavCode : String,  KeyCode : Int32,  ActionId : Int32) : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public function RequestClose();  // flags: 65536 
  protected function CreatePopupInstance( PopupDataObject : W3PopupData);  // flags: 32768 
  public function UpdatePopupInstance( PopupDataObject : W3PopupData);  // flags: 65536 
  protected function BlurBackground( firstLayer : CR4MenuBase,  value : Bool);  // flags: 32768 
  public function SetBarValue( value : Float);  // flags: 65536 
  public function ShowItemRTT( templateName : String,  itemCategory : CName);  // flags: 65536 
  public function HideItemRTT();  // flags: 65536 
  protected function UpdateSceneEntityFromCreatureDataComponent( entity : CEntity);  // flags: 32768 
  private function UpdateItemScale();  // flags: 16384 
  public event function OnGuiSceneEntitySpawned( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnRotateItemRight() : Bool;  // flags: 65568 
  public event function OnRotateItemLeft() : Bool;  // flags: 65568 
  private function RotateItem( delta : Float);  // flags: 16384 

}
import class CR4BlacksmithMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function SetMenuState( newState : CName);  // flags: 65536 
  protected function ApplyMenuState( newState : CName);  // flags: 32768 
  protected function UpdateRepairAllInputFeedback( newState : CName);  // flags: 32768 
  public event function OnClearSlotNewFlag( item : SItemUniqueId) : Bool;  // flags: 65568 
  public function RemoveNewItemMark( item : SItemUniqueId);  // flags: 65536 
  public function HandleActionConfirmation( value : Bool);  // flags: 65536 
  public event function OnRequestConfirmation( itemId : SItemUniqueId,  price : Int32) : Bool;  // flags: 65568 
  public function ShowConfirmationPopup( itemId : SItemUniqueId,  price : Int32,  quantity : Int32);  // flags: 65536 
  public function OnDisassembleStack( itemId : SItemUniqueId,  price : Int32,  quantity : Int32);  // flags: 65536 
  private function ShowDisassembleQuantityPopup( itemId : SItemUniqueId,  price : Int32);  // flags: 16384 
  public event function OnRemoveImprovements( item : SItemUniqueId,  price : Int32) : Bool;  // flags: 65568 
  public event function OnDisassembleItem( item : SItemUniqueId,  price : Int32) : Bool;  // flags: 65568 
  public event function OnStartCrafting() : Bool;  // flags: 65568 
  public event function OnRepairItem( item : SItemUniqueId,  price : Int32) : Bool;  // flags: 65568 
  public event function OnRepairAllItems() : Bool;  // flags: 65568 
  public function RepairAll();  // flags: 65536 
  public event function OnGetItemData( item : SItemUniqueId,  compareItemType : Int32) : Bool;  // flags: 65568 
  public event function OnGlobalUpdate() : Bool;  // flags: 65568 
  public event function OnSaveItemGridPosition( item : SItemUniqueId,  gridPos : Int32) : Bool;  // flags: 65568 
  public function UpdateData();  // flags: 65536 
  public function InventoryUpdateAll();  // flags: 65536 
  public function UpdateMerchantData();  // flags: 65536 
  public function InventoryUpdateItems( itemsList : array<SItemUniqueId>);  // flags: 65536 
  public function UpdatePlayerMoney();  // flags: 65536 
  private function UpdateItemsList( itemsList : array<SItemUniqueId>);  // flags: 16384 
  private function UpdateItem( item : SItemUniqueId);  // flags: 16384 
  private function RemoveItem( item : SItemUniqueId);  // flags: 16384 
  private function UpdateItemsCounter();  // flags: 16384 
  public function GetCurrentInventory() : CInventoryComponent;  // flags: 65536 
  public function GetItemDefaultActionName( item : SItemUniqueId) : String;  // flags: 65536 
  public function GetItemDefaultAction( item : SItemUniqueId) : EInventoryActionType;  // flags: 65536 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnMoveItem( item : SItemUniqueId,  moveToIndex : Int32) : Bool;  // flags: 65568 
  public event function OnMoveItems( item : SItemUniqueId,  moveToIndex : Int32,  itemSecond : SItemUniqueId,  moveToSecondIndex : Int32) : Bool;  // flags: 65568 
  public event function OnPlaySound( soundKey : String) : Bool;  // flags: 65568 
  public event function OnSetCurrentPlayerGrid( value : String) : Bool;  // flags: 65568 
  public event function OnEquipItem( item : SItemUniqueId,  slot : Int32,  quantity : Int32) : Bool;  // flags: 65568 
  public function ShowItemTooltip( item : SItemUniqueId,  compareItemType : Int32);  // flags: 65536 
  public event function OnShowItemPopup( item : SItemUniqueId) : Bool;  // flags: 65568 
  public function PlayOpenSoundEvent();  // flags: 65536 
  public event function OnAppendGFxButton( actionId : Int32,  gamepadNavCode : String,  keyboardKeyCode : Int32,  label : String,  holdPrefix : Bool) : Bool;  // flags: 65568 

}
import class W3PlayerWitcherStateCombatSilver extends W3PlayerWitcherStateCombatSword {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function GetSwordType() : CName;  // flags: 65536 
  public function CombatSilverInit( prevStateName : CName);  // flags: 65664 
  public function CombatSilverDone( nextStateName : CName);  // flags: 65664 
  private latent function CombatSilverLoop();  // flags: 16448 
  public final function HACK_ExternalCombatComboUpdate( timeDelta : Float);  // flags: 65552 

}
import class W3PlayerWitcherStateCombatSteel extends W3PlayerWitcherStateCombatSword {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function GetSwordType() : CName;  // flags: 65536 
  public function CombatSteelInit( prevStateName : CName);  // flags: 65664 
  public function CombatSteelDone( nextStateName : CName);  // flags: 65664 
  private latent function CombatSteelLoop();  // flags: 16448 
  public final function HACK_ExternalCombatComboUpdate( timeDelta : Float);  // flags: 65552 

}
import class W3TooltipComponent extends CObject {

  public function initialize( inventory : CInventoryComponent,  flashValueStorage : CScriptedFlashValueStorage);  // flags: 65536 
  public function setCurrentInventory( invComponent : CInventoryComponent);  // flags: 65536 
  public function setShopInventory( invComponent : CInventoryComponent);  // flags: 65536 
  public function GetEmptySlotData( equipID : Int32) : CScriptedFlashObject;  // flags: 65536 
  public function GetEmptyPreparationSlotData( equipID : Int32,  isLocked : Bool) : CScriptedFlashObject;  // flags: 65536 
  public function GetBaseItemData( item : SItemUniqueId,  itemInvComponent : CInventoryComponent,  optional  isShopItem : Bool,  optional  compareWithItem : SItemUniqueId,  optional  compareItemInv : CInventoryComponent) : CScriptedFlashObject;  // flags: 65536 
  private function GetCrossbowPrimatyStat( itemId : SItemUniqueId,  itemInvComponent : CInventoryComponent,  out  primaryStatLabel : String,  out  primaryStatValue : Float);  // flags: 16384 
  private function AddSocketsInfo( itemId : SItemUniqueId,  itemInvComponent : CInventoryComponent,  out  flashDataObj : CScriptedFlashArray);  // flags: 16384 
  private function AddOilInfo( itemId : SItemUniqueId,  itemInvComponent : CInventoryComponent,  out  flashDataObj : CScriptedFlashObject);  // flags: 16384 
  private function AddItemStats( itemStats : array<SAttributeTooltip>,  out  resultGFxArray : CScriptedFlashArray,  rootGFxObject : CScriptedFlashObject,  ignorePrimaryStat : Bool,  defaultPrefix : String);  // flags: 16384 
  private function AddBuffStats( itemId : SItemUniqueId,  itemInvComponent : CInventoryComponent,  out  resultGFxArray : CScriptedFlashArray,  rootGFxObject : CScriptedFlashObject);  // flags: 16384 
  public function GetExItemData( item : SItemUniqueId,  optional  isShopItem : Bool) : CScriptedFlashObject;  // flags: 65536 
  public function GetTooltipData( itemId : SItemUniqueId,  isShopItem : Bool,  compareItem : Bool) : CScriptedFlashObject;  // flags: 65536 
  protected function GetGenStatsGFxData( itemStats : array<SItemGenericStat>,  comparingItemsStats : array<SItemGenericStat>,  enableCompare : Bool) : CScriptedFlashArray;  // flags: 32768 
  protected function GetMutagenGenStatsGFxData() : CScriptedFlashArray;  // flags: 32768 
  protected function GetBuffDuration( itemId : SItemUniqueId,  inv : CInventoryComponent) : Float;  // flags: 32768 
  protected function GetGenericStats( item : SItemUniqueId,  inv : CInventoryComponent) : array<SItemGenericStat>;  // flags: 32768 
  protected function AppendDefaultGenericStats( out  statsList : array<SItemGenericStat>,  item : SItemUniqueId,  inv : CInventoryComponent);  // flags: 32768 
  protected function AddGenericStat( out  statsList : array<SItemGenericStat>,  statName : String,  statValue : Float);  // flags: 32768 
  protected function AppendGenericStat( out  statsList : array<SItemGenericStat>,  statName : String,  statValue : Float,  optional  resetValue : Bool);  // flags: 32768 
  protected function GetAttributeValue( item : SItemUniqueId,  statName : CName,  inv : CInventoryComponent) : Float;  // flags: 32768 
  protected function IsInited() : Bool;  // flags: 32768 
  private function addGFxItemStat( out  targetArray : CScriptedFlashArray,  type : String,  value : String,  optional  label : String,  optional  isHtml : Bool);  // flags: 16384 
  public function GetItemRarityDescription( item : SItemUniqueId,  tooltipInv : CInventoryComponent) : String;  // flags: 65536 
  private function CompareItemsStats( itemStats : array<SAttributeTooltip>,  compareItemStats : array<SAttributeTooltip>,  out  compResult : CScriptedFlashArray,  rootGFxObject : CScriptedFlashObject,  optional  dontCompare : Bool,  optional  extendedData : Bool);  // flags: 16384 
  private function getCategoryDescription( itemCategory : CName) : String;  // flags: 16384 
  private function GetGwintCardDescription( cardIndex : Int32) : String;  // flags: 16384 
  public function GetSchematicDataFromXML( schematicName : CName) : SCraftingSchematic;  // flags: 65536 
  public function GetRecipeDataFromXML( recipeName : CName) : SAlchemyRecipe;  // flags: 65536 

}
import class CR4HudModuleBase extends CR4HudModule {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function AddHudModuleReference( hudModule : CR4HudModuleBase);  // flags: 65536 
  public function ShowElement( show : Bool,  optional  bImmediately : Bool);  // flags: 65536 
  public function SetEnabled( value : Bool);  // flags: 65536 
  public function GetEnabled() : Bool;  // flags: 65536 
  public function SnapToAnchorPosition();  // flags: 65536 
  protected function UpdatePosition( anchorX : Float,  anchorY : Float);  // flags: 32768 
  protected function UpdateScale( scale : Float,  flashModule : CScriptedFlashSprite) : Bool;  // flags: 32768 
  public event function OnBreakPoint( text : String) : Bool;  // flags: 65568 
  public function ShowTutorialHighlight( bShow : Bool,  tutorialHighlightName : String);  // flags: 65536 
  protected function SetControllerType( isGamepad : Bool);  // flags: 32768 
  protected function SetPlatformType( platformType : Platform);  // flags: 32768 
  public function SetTickInterval( tickInterval : Float);  // flags: 65536 
  public function CanTick( timeDelta : Float) : Bool;  // flags: 65536 
  public event function OnPlaySoundEvent( soundName : String) : Bool;  // flags: 65568 

}
import class CR4HudModuleAnchors extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function GetAnchorSprite( _AnchorName : String) : CScriptedFlashSprite;  // flags: 65536 
  public function UpdateAnchorsPositions();  // flags: 65536 
  public function UpdateAnchorsAspectRatio();  // flags: 65536 

}
import class CR4PlayerStateCombat extends CR4PlayerStateExtendedMovable {

  public function SetupState( initialAction : EInitialAction,  optional  initialBuff : CBaseGameplayEffect);  // flags: 65536 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function StatsInit();  // flags: 65536 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnStateCanGoToCombat() : Bool;  // flags: 65568 
  public function CombatInit();  // flags: 65664 
  public function CombatLoop( timeDelta : Float,  id : Int32);  // flags: 66560 
  private function UpdateIsInAir();  // flags: 16384 
  public function StatsUpdate();  // flags: 65536 
  public function CombatEndCheck( timeDelta : Float,  id : Int32);  // flags: 66560 
  public function ResetTimeToEndCombat();  // flags: 65536 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  public event function OnCFMCameraZoomFail() : Bool;  // flags: 65568 
  public function CFMCameraZoomFail();  // flags: 65664 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  private function ProcessPlayerOrientation();  // flags: 16384 
  protected function ProcessPlayerCombatStance();  // flags: 32768 
  protected function DisableCombatStance( timeDelta : Float,  stance : EPlayerCombatStance);  // flags: 32768 
  private function DisableCombatStanceTimer( timeDelta : Float,  id : Int32);  // flags: 17408 
  protected function SetStance( stance : EPlayerCombatStance);  // flags: 32768 
  public event function OnAnimEvent_AllowInput( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_AllowRoll( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_ForceAttack( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_PunchHand( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnPreAttackEvent( animEventName : CName,  animEventType : EAnimationEventType,  data : CPreAttackEventData,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnPerformGuard() : Bool;  // flags: 65568 
  public event function OnPerformEvade( playerEvadeType : EPlayerEvadeType) : Bool;  // flags: 65568 
  public function PerformEvade( playerEvadeType : EPlayerEvadeType,  isRolling : Bool);  // flags: 65664 
  private function FillDodgePlaylists( isRolling : Bool);  // flags: 16384 
  private function CreatePlaylist( numOfAnims : Int32) : array<Float>;  // flags: 16384 
  private function SkipStaminaDodgeEvadeCost() : Bool;  // flags: 16384 
  protected function GetEvadeDirection( playerEvadeType : EPlayerEvadeType) : EPlayerEvadeDirection;  // flags: 32768 
  public function GetRawDodgeHeading() : Float;  // flags: 65536 
  public function GetDodgeHeading( playerEvadeType : EPlayerEvadeType) : Float;  // flags: 65536 
  public function UpdateDodgeInfoTimer( time : Float,  id : Int32);  // flags: 66560 
  public function GetDodgeHeadingForMovementHeading( movementHeading : Float) : Float;  // flags: 65536 
  public function UpdateRollInfoTimer( time : Float,  id : Int32);  // flags: 66560 
  protected function GetLandingEvadeDirection( landAt : Vector,  evadingHeading : Float) : EPlayerEvadeDirection;  // flags: 32768 
  private final function CleanUpComboStuff();  // flags: 16400 
  private final function CacheComboAttack( attackId : Int32,  slideTarget : CGameplayEntity,  sliding : Bool,  aspectName : CName);  // flags: 16400 
  public final function BuildComboPlayer();  // flags: 65552 
  private final function BuildCombo();  // flags: 16400 
  public event function OnCreateAttackAspects() : Bool;  // flags: 65568 
  public event function OnPerformAttack( playerAttackType : CName) : Bool;  // flags: 65568 
  private function IsInCombatAction_Attack() : Bool;  // flags: 16384 
  public function ProcessAttackApproach( playerAttackType : CName);  // flags: 65664 
  public function EnableAttackApproach( playerAttackType : CName);  // flags: 65664 
  public function ProcessAttackTimer( time : Float,  id : Int32);  // flags: 66560 
  public function AttackTimerEnd( time : Float,  id : Int32);  // flags: 66560 
  public function ProcessAttack( playerAttackType : CName,  performApproachAttack : Bool);  // flags: 65664 
  public function SpecialAttackHeavyAllowedTimer( time : Float,  id : Int32);  // flags: 66560 
  public event function OnInterruptAttack() : Bool;  // flags: 65568 
  public function OnComboAttackCallback( out  callbackInfo : SComboAttackCallbackInfo);  // flags: 65536 
  private function GetMaxAttackDist() : Float;  // flags: 16384 
  private function GetPlayerToTargetDistance( getPredictedDistance : Bool,  translationScale : Float,  optional  customTime : Float) : Float;  // flags: 16384 
  public function CombatComboUpdate( timeDelta : Float,  id : Int32);  // flags: 66560 
  protected final function InteralCombatComboUpdate( timeDelta : Float);  // flags: 32784 
  private final function MarkSlidePosition( position : Vector);  // flags: 16400 
  public final function ResetComboPlayerAndGoToIdle();  // flags: 65552 
  private function BlockAllCombatTickets( block : Bool);  // flags: 16384 
  private function ReleaseTicketRequests();  // flags: 16384 
  private function ForceTicketUpdate();  // flags: 16384 
  private function InitTicketNames();  // flags: 16384 
  public event function OnBlockAllCombatTickets( block : Bool) : Bool;  // flags: 65568 
  public event function OnForceTicketUpdate() : Bool;  // flags: 65568 
  public event function OnCombatActionEndComplete() : Bool;  // flags: 65568 

}
import class CR4HudModuleDamagedItems extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  private function CheckDamagedItems();  // flags: 16384 
  public function OnItemUnequippedFromSlot( slot : Int32);  // flags: 65536 

}
import class CR4HudModuleSubtitles extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnSubtitleAdded( id : Int32,  speakerNameDisplayText : String,  htmlString : String) : Bool;  // flags: 65568 
  public event function OnSubtitleRemoved( id : Int32) : Bool;  // flags: 65568 
  protected function UpdateScale( scale : Float,  flashModule : CScriptedFlashSprite) : Bool;  // flags: 32768 

}
import class CR4HudModuleOneliners extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public event function OnCreateOneliner( target : CEntity,  value : String,  ID : Int32) : Bool;  // flags: 65568 
  public event function OnRemoveOneliner( ID : Int32) : Bool;  // flags: 65568 
  private function IsTargetCloseEnough( target : CActor) : Bool;  // flags: 16384 
  protected function UpdateScale( scale : Float,  flashModule : CScriptedFlashSprite) : Bool;  // flags: 32768 

}
import class CR4PlayerStateExtendedMovable extends CPlayerStateMovable {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnAnimEvent_CombatStanceLeft( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_CombatStanceRight( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnSpawnHorse() : Bool;  // flags: 65568 
  public event function OnPlayerTickTimer( deltaTime : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  protected function SetInteriorCameraDesiredPositionMult( _interiorCameraDesiredPositionMult : Float);  // flags: 32768 
  protected function UpdateCameraInterior( out  moveData : SCameraMovementData,  timeDelta : Float);  // flags: 32768 

}
import class CR4HudModuleJournalUpdate extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public event function OnInputHandled( NavCode : String,  KeyCode : Int32,  ActionId : Int32) : Bool;  // flags: 65568 
  public function CheckPending() : Bool;  // flags: 65536 
  public function DisplayPending();  // flags: 65536 
  public function RegisterTrackQuestBindings();  // flags: 65536 
  public function IsTrackableQuest() : Bool;  // flags: 65536 
  public function GetQuestStatusTitle( status : EJournalStatus,  questType : eQuestType) : String;  // flags: 65536 
  public function GetPendingSize() : Int32;  // flags: 65536 
  public function AddQuestUpdate( journalQuest : CJournalQuest,  isQuestUpdate : Bool);  // flags: 65536 
  public function CheckSceneAndCutsceneDisplay( status : EJournalStatus,  isQuestUpdate : Bool) : Bool;  // flags: 65536 
  public function AddCraftingSchematicUpdate( schematicName : CName);  // flags: 65536 
  public function AddAlchemySchematicUpdate( schematicName : CName);  // flags: 65536 
  public function AddJournalUpdate( journalEntry : CJournalBase,  isDescription : Bool);  // flags: 65536 
  public function GetEntryText( journalEntry : CJournalBase) : String;  // flags: 65536 
  public function GetEntryTitle( journalEntry : CJournalBase,  isDescription : Bool) : String;  // flags: 65536 
  public function AddLevelUpUpdate( level : Int32);  // flags: 65536 
  public function AddExperienceUpdate( exp : Int32);  // flags: 65536 
  public function AddMapPinUpdate( mapPinName : CName);  // flags: 65536 
  public function AddItemRecivedDuringSceneUpdate( itemName : CName,  optional  quantity : Int32);  // flags: 65536 
  public function HasQuestPendingUpdate( journalQuest : CJournalQuest,  status : EJournalStatus) : Bool;  // flags: 65536 
  public function HasJournalPendingUpdate( journalBase : CJournalBase) : Bool;  // flags: 65536 
  public function ForceAddJournalUpdateInfo( locKeyText : String,  locKeyTitle : String);  // flags: 65536 
  public function GetTrackedQuestName() : String;  // flags: 65536 
  public event function OnRemoveUpdate() : Bool;  // flags: 65568 
  public event function OnShowUpdateEnd() : Bool;  // flags: 65568 
  public event function OnShowEntryInPanel( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnTrackQuest( action : SInputAction) : Bool;  // flags: 65568 
  public function OpenEntryInPanel();  // flags: 65536 
  public function OpenGlossaryPanel( panelName : CName);  // flags: 65536 
  public function OpenSchematicPanel();  // flags: 65536 
  public function OpenQuestPanel();  // flags: 65536 
  protected function GatherBindersArray( out  resultArray : CScriptedFlashArray,  bindersList : array<SKeyBinding>,  optional  isContextBinding : Bool);  // flags: 32768 
  protected function UpdateInputFeedback();  // flags: 32768 
  public function SetButtons( isJournalEntry : Bool);  // flags: 65536 
  protected function AddInputBinding( label : String,  padNavCode : String,  optional  keyboardKeyCode : Int32);  // flags: 32768 

}
import class CR4HudModuleConsole extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function CheckPendingMessages() : Bool;  // flags: 65536 
  public event function OnMessageHidden( value : String) : Bool;  // flags: 65568 
  public function ConsoleMsg( msgText : String);  // flags: 65536 
  public function DisplayConsoleMsg( msgText : String);  // flags: 65536 
  public function ConsoleTest();  // flags: 65536 
  public function ConsoleCleanup();  // flags: 65536 
  protected function UpdatePosition( anchorX : Float,  anchorY : Float);  // flags: 32768 

}
import class W3PlayerWitcherStateCombatSword extends CR4PlayerStateCombat {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function GetSwordType() : CName;  // flags: 65536 
  protected function InitSwordItem();  // flags: 32768 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  protected function ProcessStartupAction( action : EInitialAction);  // flags: 32768 
  public function CombatSwordInit();  // flags: 65664 
  public latent function CombatSwordLoop();  // flags: 65600 
  public event function OnCreateAttackAspects() : Bool;  // flags: 65568 
  private final function CreateAttackLightAspect();  // flags: 16400 
  private final function CreateAttackHeavyAspect();  // flags: 16400 
  private final function CreateAttackLightFarAspect();  // flags: 16400 
  private final function CreateAttackHeavyFarAspect();  // flags: 16400 
  private final function CreateAttackLightFlyingAspect();  // flags: 16400 
  private final function CreateAttackHeavyFlyingAspect();  // flags: 16400 
  private final function CreateAttackLightVsRiderAspect();  // flags: 16400 
  private final function CreateAttackHeavyVsRiderAspect();  // flags: 16400 
  private final function CreateAttackLightAspectSlopeUp();  // flags: 16400 
  private final function CreateAttackLightAspectSlopeDown();  // flags: 16400 
  private final function CreateAttackLightCapsuleShort();  // flags: 16400 
  private final function CreateAttackNeutral();  // flags: 16400 
  private final function CreateAttackNeutralUnconscious();  // flags: 16400 
  protected function PerformPirouette();  // flags: 32768 
  public event function OnPerformSpecialAttack( isLightAttack : Bool,  enableAttack : Bool) : Bool;  // flags: 65568 
  public function PerformSpecialAttackLight( enableAttack : Bool);  // flags: 65664 
  public function UpdateSpecialAttackLightHeading( time : Float,  id : Int32);  // flags: 66560 
  public function PerformSpecialAttackHeavy( enableAttack : Bool);  // flags: 65664 
  public event function OnAnimEvent_FinishSpecialHeavyAttack( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnSAHeavyStartComplete() : Bool;  // flags: 65568 

}
import class W3ReplacerCiriStateCombatSword extends CR4PlayerStateCombat {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  protected function ProcessStartupAction( action : EInitialAction);  // flags: 32768 
  public event function OnCreateAttackAspects() : Bool;  // flags: 65568 
  private final function CreateAttackLightAspect();  // flags: 16400 
  private final function CreateAttackLightFarAspect();  // flags: 16400 
  private final function CreateAttackLightFlyingAspect();  // flags: 16400 
  private final function CreateAttackLightAspectSlopeUp();  // flags: 16400 
  private final function CreateAttackLightAspectSlopeDown();  // flags: 16400 
  private final function CreateAttackLightVsRiderAspect();  // flags: 16400 
  private final function CreateAttackLightCapsuleShort();  // flags: 16400 
  private final function CreateAttackNeutral();  // flags: 16400 
  private final function CreateAttackNeutralUnconscious();  // flags: 16400 
  public event function OnPerformSpecialAttack( startAttack : Bool) : Bool;  // flags: 65568 
  public event function OnPerformSpecialAttackHeavy( startAttack : Bool) : Bool;  // flags: 65568 
  public event function OnPerformCounter() : Bool;  // flags: 65568 
  public event function OnPerformDodge() : Bool;  // flags: 65568 
  public event function OnPerformDash() : Bool;  // flags: 65568 
  public event function OnPerformDashAttack() : Bool;  // flags: 65568 
  public event function OnHitStart() : Bool;  // flags: 65568 
  public event function OnCombatActionEndComplete() : Bool;  // flags: 65568 
  public event function OnDeath( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  public function ReleaseButtonHack( dt : Float,  id : Int32);  // flags: 66560 
  public function PerformSpecialAttack( startAttack : Bool);  // flags: 65664 
  public function PerformSpecialAttackHeavy( startAttack : Bool);  // flags: 65664 
  public function PerformCounter();  // flags: 65664 
  public function PerformDodge( optional  dash : Bool,  optional  attackDash : Bool);  // flags: 65664 
  protected function UpdateCameraInterior( out  moveData : SCameraMovementData,  timeDelta : Float);  // flags: 32768 
  public function Interrupt();  // flags: 65664 
  private latent function CompleteSpecialAttack( optional  jumpBehindTarget : Bool);  // flags: 16448 
  private latent function CompleteSpecialAttackHeavy();  // flags: 16448 
  private function PerformSpecialAttackHeavyCleanup();  // flags: 16384 
  private function EnergyBurst( radius : Float);  // flags: 16384 
  private function SpecialAttackCleanup();  // flags: 16384 
  private function SpecialAttackSphereCleanup();  // flags: 16384 
  private function PhantomsCleanup();  // flags: 16384 
  private function SpawnSpecialAttackSphere();  // flags: 16384 
  public function SpecialAttackTimer( dt : Float,  id : Int32);  // flags: 66560 
  private function Appear();  // flags: 16384 
  private latent function Disappear();  // flags: 16448 
  private latent function SlideToNewPosition( duration : Float,  newPos : Vector,  optional  newHeading : Vector,  optional  alsoTeleport : Bool);  // flags: 16448 
  private latent function RotateToNewHeading( duration : Float,  newHeading : Vector);  // flags: 16448 
  private latent function SlideToNewNode( duration : Float,  node : CNode);  // flags: 16448 
  private function GetProperHeadingForCamera( vec : Vector,  optional  use90 : Bool) : Vector;  // flags: 16384 
  private function IsPositionSupaCool( pos : Vector) : Bool;  // flags: 16384 
  private function GetBetterPosition( oldPosition : Vector,  out  newPosition : Vector) : Bool;  // flags: 16384 
  private function FindSpecialAttackTargets( out  targets : array<CActor>,  maxEnemiesNo : Int32);  // flags: 16384 
  private latent function ExecuteSpecialAttack( targets : array<CActor>);  // flags: 16448 
  private function GetSlideDuration( destinationPos : Vector) : Float;  // flags: 16384 
  private function GetSpawnPosAndRot( target : CNode,  angleDiff : Float,  distOffset : Float,  out  spawnPos : Vector,  out  spawnRot : EulerAngles);  // flags: 16384 
  private function GetSpawnOffsetPosition( targetPos : Vector,  out  headingVec : Vector,  offset : Float) : Vector;  // flags: 16384 
  private latent function SpawnPhantomWithAnim( position : Vector,  rotation : EulerAngles,  optional  target : CActor,  optional  animationName : CName);  // flags: 16448 
  private latent function SpawnPhantomInFrozenFrame( position : Vector,  rotation : EulerAngles,  anim : Float);  // flags: 16448 
  private function AddPhantom( phantom : W3CiriPhantom);  // flags: 16384 
  private function SelectRandomAnim( out  animName : CName);  // flags: 16384 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 

}
import class W3ReplacerCiriStateCombatSteel extends W3ReplacerCiriStateCombatSword {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function CombatSteelInit( prevStateName : CName);  // flags: 65664 
  public function CombatSteelDone( nextStateName : CName);  // flags: 65664 
  private latent function CombatSteelLoop();  // flags: 16448 
  public final function HACK_ExternalCombatComboUpdate( timeDelta : Float);  // flags: 65552 

}
import class CStoryScenePlayerStateGameplay extends CScriptableState {

  public event function OnBlockingSceneStarted( scene : CStoryScene) : Bool;  // flags: 65568 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class CStoryScenePlayerStateBlocking extends CScriptableState {

  public event function OnCutsceneStarted() : Bool;  // flags: 65568 
  public event function OnBlockingSceneEnded( output : CStorySceneOutput) : Bool;  // flags: 65568 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnDbgRestartSection( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnDbgRestartScene( action : SInputAction) : Bool;  // flags: 65568 

}
import class CStoryScenePlayerStateCutscene extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnCutsceneEnded() : Bool;  // flags: 65568 

}
import class CStoryScenePlayerStateMovie extends CScriptableState {

  public event function OnEnterSate( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnMovieEnded() : Bool;  // flags: 65568 

}
import class W3YrdenEntity extends W3SignEntity {

  public function GetSignType() : ESignType;  // flags: 65536 
  public function SkillUnequipped( skill : ESkill);  // flags: 65536 
  public function SkillEquipped( skill : ESkill);  // flags: 65536 
  public event function OnProcessSignEvent( eventName : CName) : Bool;  // flags: 65568 
  public final function ClearActorsInArea();  // flags: 65552 
  protected function GetSignStats();  // flags: 32768 
  public event function OnStarted() : Bool;  // flags: 65568 
  protected latent function Place();  // flags: 32832 
  private final function DisablePreviousYrdens();  // flags: 16400 
  public function TimedCanceled( delta : Float,  id : Int32);  // flags: 66560 
  protected function NotifyGameplayEntitiesInArea( componentName : CName);  // flags: 32768 
  public event function OnVisualDebug( frame : CScriptedRenderFrame,  flag : EShowFlags,  selected : Bool) : Bool;  // flags: 65568 

}
import class DialogueMonsterBarganingSliderData extends DialogueSliderData {

  protected function GetContentRef() : String;  // flags: 32768 
  protected function DefineDefaultButtons();  // flags: 32768 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 
  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 

}
import class BettingSliderData extends DialogueSliderData {

  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 

}
import class CR4PlayerStateExploration extends CR4PlayerStateExtendedMovable {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnStateCanGoToCombat() : Bool;  // flags: 65568 
  public event function OnStateCanUpdateExplorationSubstates() : Bool;  // flags: 65568 
  public final function NeedsToSheatheWeapon( sheatheWeapon : Bool);  // flags: 65552 
  public function ExplorationInit( prevStateName : CName);  // flags: 65664 
  public function ExplorationLoop( time : Float,  id : Int32);  // flags: 66560 
  public function ResetStanceTimer( time : Float,  id : Int32);  // flags: 66560 
  private function ProcessPlayerOrientation();  // flags: 16384 
  private function InitCamera();  // flags: 16384 
  private function CameraCleanup();  // flags: 16384 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraExplorationRotCtrlChange() : Bool;  // flags: 65568 
  private function UpdateCameraMeditation( out  moveData : SCameraMovementData,  timeDelta : Float);  // flags: 16384 
  private function UpdateCameraClueGround( out  moveData : SCameraMovementData,  timeDelta : Float);  // flags: 16384 
  public function Mount( vehicle : CVehicleComponent,  optional  mountType : EVehicleMountType);  // flags: 65664 
  public event function OnReactToBeingHit( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnHit( damageData : W3DamageAction,  attackType : CName,  optional  hitAnimationPlayType : EActionHitAnim) : Bool;  // flags: 65568 

}
import class CFocusModeCombatCamera_CurveDamp_MC extends CObject {

  protected function ControllerUpdate( timeDelta : Float);  // flags: 32768 
  protected function ControllerRotate( hasYaw : Bool,  angleYaw : Float,  hasPitch : Bool,  anglePitch : Float);  // flags: 32768 
  protected function ControllerSetDesiredYaw( yaw : Float);  // flags: 32768 
  protected function ControllerSetDesiredPitch( pitch : Float);  // flags: 32768 
  protected function ControllerSetDesiredDistance( distance : Float);  // flags: 32768 
  protected function ControllerGetPosition( out  posOut : Vector);  // flags: 32768 
  protected function ControllerGetRotation( out  rotOut : EulerAngles);  // flags: 32768 
  protected function ControllerGetDistance( out  distance : Float);  // flags: 32768 
  protected function ControllerSetRotation( rotation : EulerAngles);  // flags: 32768 
  protected function ControllerSetDistance( distance : Float);  // flags: 32768 
  protected function ControllerSetFov( inFov : Float);  // flags: 32768 
  protected function ControllerGetFov( out  outFov : Float);  // flags: 32768 
  public function ManualUpdate( timeDelta : Float);  // flags: 65536 
  public function SetManualMode( flag : Bool);  // flags: 65536 
  public function SetTimeScale( scale : Float);  // flags: 65536 
  public function IsInterpolating() : Bool;  // flags: 65536 
  public function GetProgress() : Float;  // flags: 65536 
  public function ResetValues( yaw : Float,  pitch : Float,  distance : Float);  // flags: 65536 
  public function ResetDistanceValue( distance : Float);  // flags: 65536 
  protected function InternalUpdate( timeDelta : Float);  // flags: 32768 
  protected function CheckDampers();  // flags: 32768 
  protected function GetDistanceForUpdate() : Float;  // flags: 32768 
  protected function UpdatePositionAndRotation();  // flags: 32768 

}
import class CFocusModeCombatCamera_CurveDamp_Rot_MC extends CFocusModeCombatCamera_CurveDamp_MC {

  protected function InternalUpdate( timeDelta : Float);  // flags: 32768 
  protected function CheckDampers();  // flags: 32768 
  protected function UpdatePositionAndRotation();  // flags: 32768 

}
import class CFocusModeCombatCamera_CurveDamp_PC extends CObject {

  protected function ControllerUpdate( timeDelta : Float);  // flags: 32768 
  protected function ControllerSetPosition( position : Vector);  // flags: 32768 
  protected function ControllerSetDesiredPosition( position : Vector);  // flags: 32768 
  protected function ControllerGetPosition( out  position : Vector);  // flags: 32768 
  public function ManualUpdate( timeDelta : Float);  // flags: 65536 
  public function IsInterpolating() : Bool;  // flags: 65536 
  public function ResetValue( pivot : Vector);  // flags: 65536 
  public function SetTimeScale( scale : Float);  // flags: 65536 
  private final function InternalUpdate( timeDelta : Float);  // flags: 16400 
  private final function CheckDampers();  // flags: 16400 

}
import class W3PlayerWitcherStateMeditationBase extends CR4PlayerStateExtendedMovable {

  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public function StopRequested( optional  closeUI : Bool);  // flags: 66048 
  public event function OnReactToBeingHit( damageAction : W3DamageAction) : Bool;  // flags: 65568 

}
import class CR4PlayerStateDismountHorse extends CPlayerStateDismountTheVehicle {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public cleanup function DismountCleanup();  // flags: 73728 
  public function ProcessDismountHorse();  // flags: 65664 
  public event function OnAnimEvent_AllowFall( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_SlideBack( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function CheckSwimmingOnDismount( dt : Float,  id : Int32);  // flags: 66560 

}
import class CR4PlayerStateHorseRiding extends CR4PlayerStateUseGenericVehicle {

  protected function Init();  // flags: 32768 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnCombatStart() : Bool;  // flags: 65568 
  public event function OnCombatFinished() : Bool;  // flags: 65568 
  public event function OnDismountActionScriptCallback() : Bool;  // flags: 65568 
  public function DrawWeaponIfNeeded( dt : Float,  id : Int32);  // flags: 66560 
  public function EnableDynamicCanter( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnDeath( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  public function ProcessHorseRiding();  // flags: 65664 
  public function PlayerDied();  // flags: 65664 
  public cleanup function RidingCleanup();  // flags: 73728 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  private function CheckForWeapons();  // flags: 16384 
  public function ChangeTicketPool( apply : Bool);  // flags: 65536 
  public function DismountVehicle();  // flags: 65536 
  private function HorseHit();  // flags: 16384 
  public event function OnAnimEvent_ActionBlend( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Sign( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnAnimEvent_Throwable( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnDrawWeaponStart() : Bool;  // flags: 65568 
  public event function OnHolsterWeaponStart() : Bool;  // flags: 65568 
  public event function OnTakeDamage( action : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnRaiseSignEvent() : Bool;  // flags: 65568 
  public event function OnProcessCastingOrientation( isContinueCasting : Bool) : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateNull extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function ShouldEnterNextState();  // flags: 65664 
  public event function OnItemAction( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCastSign( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnAttack( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnAirBorn() : Bool;  // flags: 65568 
  public event function OnHorseActionStart() : Bool;  // flags: 65568 
  public event function OnMeleeWeaponNotReady() : Bool;  // flags: 65568 
  public event function OnHitStart() : Bool;  // flags: 65568 
  public function StartItemAction();  // flags: 65536 
  public function StartCastSignAction();  // flags: 65536 
  public function StartAttackAction();  // flags: 65536 
  public event function OnDrawWeaponRequest() : Bool;  // flags: 65568 
  public function DrawWeapon();  // flags: 65536 

}
import class CR4PlayerStateMountTheVehicle extends CPlayerStateBase {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public final function SetupState( v : CVehicleComponent,  inMountType : EMountType,  inVehicleSlot : EVehicleSlot);  // flags: 65552 
  public cleanup function MountCleanup();  // flags: 73728 
  protected function OnMountingFailed();  // flags: 32768 
  public function ContinuedState();  // flags: 65536 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 

}
import class CR4PlayerStateMountBoat extends CR4PlayerStateMountTheVehicle {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public cleanup function MountCleanup();  // flags: 73728 
  public function ProcessMountBoat();  // flags: 65664 
  private function OnMountingFailed();  // flags: 16384 
  private function GetMountFacing() : EPlayerBoatMountFacing;  // flags: 16384 

}
import class CR4PlayerStateSailing extends CR4PlayerStateUseGenericVehicle {

  protected function Init();  // flags: 32768 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function ProcessBoatSailing();  // flags: 65664 
  public cleanup function SailingCleanup();  // flags: 73728 
  public function DismountVehicle();  // flags: 65536 
  public event function OnReactToBeingHit( damageAction : W3DamageAction) : Bool;  // flags: 65568 
  private function InitCamera();  // flags: 16384 
  private final function GetGearRatio( gear : Int32) : Float;  // flags: 16400 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public function CanAccesFastTravel( target : W3FastTravelEntity) : Bool;  // flags: 65536 

}
import class CR4PlayerStateSailingPassive extends CR4PlayerStateUseGenericVehicle {

  protected function Init();  // flags: 32768 
  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function ProcessBoatSailingPassive();  // flags: 65664 
  public function DismountVehicle();  // flags: 65536 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateSwordAttack extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nexStateName : CName) : Bool;  // flags: 65568 
  public function InitAndBeginSwordAttack();  // flags: 65664 
  private function ChooseInitialOrientation();  // flags: 16384 
  public latent function BeginSwordAttack();  // flags: 65600 
  public latent function AdjustOrientationAndMaintainTimeout();  // flags: 65600 
  public function GoBackFromSlowMo();  // flags: 65664 
  public event function OnAttack( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnHorseActionStart() : Bool;  // flags: 65568 
  public event function OnHitStart() : Bool;  // flags: 65568 
  public event function OnDismountStarted() : Bool;  // flags: 65568 
  public function AbortAttack();  // flags: 65664 
  public function FinishAttack();  // flags: 65664 
  public function CanPerformAttack() : Bool;  // flags: 65536 
  public function ChooseAttackHeight();  // flags: 65536 
  public latent function DoAttack();  // flags: 65600 
  private function FillAttackRangesArray( horizontalVal : Float) : array<CName>;  // flags: 16384 
  private function GatherEntitiesInAttackRanges( speed : Float,  attackRanges : array<CName>) : array<CGameplayEntity>;  // flags: 16384 
  private function DealDamageToHostiles( entities : array<CGameplayEntity>,  speed : Float,  baseDamage : Float);  // flags: 16384 
  private function TurnOnSlowMo();  // flags: 16384 
  private function TurnOffSlowMo();  // flags: 16384 
  private function ShouldActivateSlowMo() : Bool;  // flags: 16384 

}
import class W3VehicleCombatManagerStateRangedAttack extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnItemAction( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnItemActionHold( action : SInputAction) : Bool;  // flags: 65568 
  public function ItemActionHold();  // flags: 65536 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  timeDelta : Float) : Bool;  // flags: 65568 
  public event function OnProcessAnimEvent( animEventName : CName) : Bool;  // flags: 65568 
  public event function OnItemActionAbort( action : SInputAction) : Bool;  // flags: 65568 
  public function AbortItemAction() : Bool;  // flags: 65536 
  public event function OnHorseActionStart() : Bool;  // flags: 65568 
  public event function OnHitStart() : Bool;  // flags: 65568 

}
import class W3VehicleCombatManagerStateThrowProjectile extends W3VehicleCombatManagerStateRangedAttack {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public cleanup function ThrowProjectileCleanup();  // flags: 73728 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function OneFrameDelayHACK();  // flags: 65664 
  public event function OnItemAction( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnItemActionHold( action : SInputAction) : Bool;  // flags: 65568 
  public function ItemActionHold();  // flags: 65536 
  public event function OnItemActionAbort( action : SInputAction) : Bool;  // flags: 65568 
  public function AbortItemAction() : Bool;  // flags: 65536 
  public event function OnProcessAnimEvent( animEventName : CName) : Bool;  // flags: 65568 
  public latent function FireProjectile( abort : Bool);  // flags: 65600 

}
import class W3BoulderProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  protected function VictimCollision( victim : CGameplayEntity);  // flags: 32768 
  protected function DealDamageToVictim( victim : CGameplayEntity);  // flags: 32768 
  protected function PlayCollisionEffect( optional  victim : CGameplayEntity);  // flags: 32768 
  protected function DeactivateProjectile( optional  victim : CGameplayEntity);  // flags: 32768 
  protected function ProjectileHitGround();  // flags: 32768 

}
import class W3TraceGroundProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 
  public function Sampling( dt : Float,  optional  id : Int32);  // flags: 66560 
  private function Loop();  // flags: 16384 
  private function doTrace( comp : CComponent,  out  outZdiff : Float) : Bool;  // flags: 16384 

}
import class W3ElementalIfrytProjectile extends W3TraceGroundProjectile {

  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 

}
import class W3EredinFrostProjectile extends W3TraceGroundProjectile {

  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 

}
import class W3ElementalDaoProjectile extends W3TraceGroundProjectile {

  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 

}
import class W3StoneProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 
  public function Rotate( dt : Float,  id : Int32);  // flags: 66560 

}
import class W3EnvironmentProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 
  public function Rotate( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 

}
import class BeamProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 

}
import class PoisonProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  protected function VictimCollision( victim : CGameplayEntity);  // flags: 32768 
  protected function DealDamageToVictim( victim : CGameplayEntity);  // flags: 32768 
  protected function PlayCollisionEffect( optional  victim : CGameplayEntity);  // flags: 32768 
  protected function DeactivateProjectile();  // flags: 32768 
  protected function ProjectileHitGround();  // flags: 32768 
  protected function SpawnEntity( onGround : Bool);  // flags: 32768 
  public event function OnRangeReached() : Bool;  // flags: 65568 

}
import class DebuffProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 

}
import class W3FireballProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  protected function VictimCollision( victim : CGameplayEntity);  // flags: 32768 
  protected function DealDamageToVictim( victim : CGameplayEntity);  // flags: 32768 
  protected function PlayCollisionEffect( optional  victim : CGameplayEntity);  // flags: 32768 
  protected function DeactivateProjectile( optional  victim : CGameplayEntity);  // flags: 32768 
  protected function ProjectileHitGround();  // flags: 32768 
  public event function OnRangeReached() : Bool;  // flags: 65568 

}
import class W3IceMeteorProjectile extends W3MeteorProjectile {

  protected function DealDamageToVictim( victim : CGameplayEntity);  // flags: 32768 

}
import class W3LightningBoltProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  protected function VictimCollision( victim : CGameplayEntity);  // flags: 32768 
  protected function DealDamageToVictim( victim : CGameplayEntity);  // flags: 32768 
  protected function PlayCollisionEffect( optional  victim : CGameplayEntity);  // flags: 32768 
  protected function DeactivateProjectile();  // flags: 32768 
  protected function ProjectileHitGround();  // flags: 32768 
  public event function OnRangeReached() : Bool;  // flags: 65568 

}
import class W3IceSpearProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  protected function DestroyRequest();  // flags: 32768 
  protected function PlayCollisionEffect();  // flags: 32768 
  protected function VictimCollision();  // flags: 32768 
  protected function DealDamageToVictim();  // flags: 32768 
  protected function DeactivateProjectile();  // flags: 32768 
  protected function ProjectileHitGround();  // flags: 32768 

}
import class W3SpawnMeteor extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  protected function VictimCollision( victim : CGameplayEntity);  // flags: 32768 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  protected function DeactivateProjectile();  // flags: 32768 
  protected function PlayCollisionEffect( optional  victim : CGameplayEntity);  // flags: 32768 
  protected function SummonCreatureEvent();  // flags: 32768 
  public function ProjectileHitGround();  // flags: 65536 
  protected function DealDamageToVictim( victim : CGameplayEntity);  // flags: 32768 

}
import class W3AirDrainProjectile extends W3AdvancedProjectile {

  public event function OnProjectileInit() : Bool;  // flags: 65568 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  protected function DeactivateProjectile( optional  fast : Bool);  // flags: 32768 
  protected function PlayCollisionEffect();  // flags: 32768 
  protected function VictimCollision( victim : CGameplayEntity);  // flags: 32768 

}
import class W3ObjectProjectile extends CProjectileTrajectory {

  public function SetOwner( actor : CActor);  // flags: 65536 
  public event function OnProjectileCollision( pos : Vector,  normal : Vector,  collidingComponent : CComponent,  hitCollisionsGroups : array<CName>,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 
  public event function OnRangeReached() : Bool;  // flags: 65568 
  public function TimeDestroy( deltaTime : Float,  id : Int32);  // flags: 66560 

}
import class CQuestCombatManagerBlock extends IQuestCombatManagerBaseBlock {

  public function GetBlockName() : String;  // flags: 65536 
  public function GetAITree() : IAITree;  // flags: 65536 
  public function GetContextMenuSpecialOptions( out  names : array<String>);  // flags: 65536 
  public function RunSpecialOption( option : Int32);  // flags: 65536 

}
import class CQuestMonsterCombatManagerBlock extends IQuestCombatManagerBaseBlock {

  public function GetBlockName() : String;  // flags: 65536 
  public function GetAITree() : IAITree;  // flags: 65536 
  public function GetContextMenuSpecialOptions( out  names : array<String>);  // flags: 65536 
  public function RunSpecialOption( option : Int32);  // flags: 65536 

}
import class W3TutorialManagerUIHandlerStateTutHandlerBaseState extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  protected final function QuitState();  // flags: 32784 
  protected final function CloseHint( n : CName);  // flags: 32784 
  protected final function IsCurrentHint( h : CName) : Bool;  // flags: 32784 
  protected final function ShowHint( tutorialScriptName : CName,  optional  x : Float,  optional  y : Float,  optional  durationType : ETutorialHintDurationType,  optional  highlights : array<STutorialHighlight>,  optional  fullscreen : Bool,  optional  isHudTutorial : Bool);  // flags: 32784 
  public event function OnMenuClosing( menuName : CName) : Bool;  // flags: 65568 
  public event function OnMenuClosed( menuName : CName) : Bool;  // flags: 65568 
  public event function OnMenuOpening( menuName : CName) : Bool;  // flags: 65568 
  public event function OnMenuOpened( menuName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 

}
import class W3FoodDispenser extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExtit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public function GetEntitySpawnPos() : Vector;  // flags: 65536 
  public function SpawnFood( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function DespawnFood( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function IsPlayerNear() : Bool;  // flags: 65536 
  public function ActivateFoodDispenser( isOn : Bool);  // flags: 65536 

}
import class W3BoatSpawnerStateSpawnBoatLatentHack extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnDelayedSpawnedBoat() : Bool;  // flags: 65568 
  public function Hack_Entry_Name_Collision_Bug_W3BoatSpawner_SpawnBoatLatentHack();  // flags: 65664 

}
import class W3HorseComponentStateExploration extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  private function UnregisterInput();  // flags: 16384 
  private function IsSpeedLocked( optional  ignoredLock : CName) : Bool;  // flags: 16384 
  private function ToggleSpeedLock( lockName : CName,  toggle : Bool);  // flags: 16384 
  private function LeaveThisState();  // flags: 16384 
  public event function OnTick( dt : Float) : Bool;  // flags: 65568 
  public event function OnMountStarted( entity : CEntity,  vehicleSlot : EVehicleSlot) : Bool;  // flags: 65568 
  public event function OnMountFinished( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnDismountStarted( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnDismountFinished( entity : CEntity,  vehicleSlot : EVehicleSlot) : Bool;  // flags: 65568 
  public event function OnIdleBegin() : Bool;  // flags: 65568 
  public event function OnIdleEnd() : Bool;  // flags: 65568 
  public event function OnHorseFastStopBegin() : Bool;  // flags: 65568 
  public event function OnHorseFastStopEnd() : Bool;  // flags: 65568 
  public event function OnTakeDamage( action : W3DamageAction) : Bool;  // flags: 65568 
  public event function OnCriticalEffectAdded( criticalEffect : ECriticalStateType) : Bool;  // flags: 65568 
  public event function OnCombatAction( action : EVehicleCombatAction) : Bool;  // flags: 65568 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  public event function OnSettlementEnter() : Bool;  // flags: 65568 
  public event function OnSettlementExit() : Bool;  // flags: 65568 
  public event function OnCanGallop() : Bool;  // flags: 65568 
  public event function OnCanCanter() : Bool;  // flags: 65568 
  public event function OnStopTheVehicleInstant() : Bool;  // flags: 65568 
  public event function OnForceStop() : Bool;  // flags: 65568 
  public event function OnHorseStop() : Bool;  // flags: 65568 
  private function ResetForceStop();  // flags: 16384 
  public event function OnJumpHack() : Bool;  // flags: 65568 
  public event function OnHorseWalkBackWallStart() : Bool;  // flags: 65568 
  public event function OnHorseWalkBackWallEnd() : Bool;  // flags: 65568 
  private function CanPlayCollisionAnim() : Bool;  // flags: 16384 
  private final function Prepare();  // flags: 16400 
  private final function Restore();  // flags: 16400 
  private final function Reset();  // flags: 16400 
  private final function ResetRotation();  // flags: 16400 
  private final function ProcessControlInput( lr : Float,  fb : Float,  timeDelta : Float,  useLocalSpace : Bool);  // flags: 16400 
  private function ShouldApplyCorrection( stickInputX : Float,  stickInputY : Float) : Bool;  // flags: 16384 
  private function ApplyCorrection( inputVector : Vector,  out  correctedDir : Float,  out  stickInputX : Float,  stickInputY : Float) : Bool;  // flags: 16384 
  private function ShouldStopBecauseOfCorrection( inputVecInWS : Vector,  correctionVec : Vector) : Bool;  // flags: 16384 
  private function PerformNavDataTest() : Bool;  // flags: 16384 
  private function PerformInclinationTest( stickInputX : Float,  stickInputY : Float) : Bool;  // flags: 16384 
  private function GetInclinationBetweenPoints( startPoint : Vector,  rawEndPoint : Vector,  out  endPoint : Vector,  zOffset : Float) : Float;  // flags: 16384 
  private function GetLocalInclination( optional  inPoint : Vector) : Float;  // flags: 16384 
  private function PerformWaterTest( stickInputX : Float,  stickInputY : Float) : Bool;  // flags: 16384 
  private function PerformWaterJumpTest() : Bool;  // flags: 16384 
  private function PerformFallJumpTest() : Bool;  // flags: 16384 
  private function PerformObstructionJumpTest() : Bool;  // flags: 16384 
  private function PerformAutoJumpTest( stickInputX : Float,  stickInputY : Float) : Bool;  // flags: 16384 
  private function GetInputVectorInCamSpace( stickInputX : Float,  stickInputY : Float) : Vector;  // flags: 16384 
  private function GetInputVectorInLocalSpace( stickInputX : Float,  stickInputY : Float) : Vector;  // flags: 16384 
  private function LineTest( startPos : Vector,  heading : Vector,  anticipationDist : Float,  speedFactor : Float,  out  furthestAccessiblePoint : Vector,  optional  sideTests : Bool) : Bool;  // flags: 16384 
  private function CircleTest( startPos : Vector,  heading : Vector,  anticipationDist : Float,  radius : Float) : Bool;  // flags: 16384 
  private function SweepTest( startPos : Vector,  heading : Vector,  anticipationDist : Float,  heightOffset : Float,  radius : Float) : Bool;  // flags: 16384 
  private final function UpdateLogic( dt : Float);  // flags: 16400 
  private final function CheckSliding( out  _slidingDisablesControll : Bool) : Bool;  // flags: 16400 
  private final function Jump();  // flags: 16400 
  public event function OnBehJumpStarted() : Bool;  // flags: 65568 
  public event function OnBehJumpEnded() : Bool;  // flags: 65568 
  public event function OnHideHorse() : Bool;  // flags: 65568 
  public event function OnKillHorse() : Bool;  // flags: 65568 
  public event function OnAnimEvent_Jumping( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnHitGround() : Bool;  // flags: 65568 
  public event function OnCheckHorseJump() : Bool;  // flags: 65568 
  private function CanCanter() : Bool;  // flags: 16384 
  public event function OnSpeedPress( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnSpeedHold( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnDecelerate( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnStop( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnHorseJump( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnHorseDismountKeyboard( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnHorseDismount() : Bool;  // flags: 65568 
  private function DismountHorse() : Bool;  // flags: 16384 
  public event function OnSmartDismount() : Bool;  // flags: 65568 
  public function SetupDismount();  // flags: 65536 
  private function IsRiderInCombatAction() : Bool;  // flags: 16384 
  private final function UpdateDebugGUI();  // flags: 16400 
  private function SetTimeoutForCurrentSpeed();  // flags: 16384 
  private function IsHorseControllable() : Bool;  // flags: 16384 
  private function MaintainCameraVariables( dt : Float);  // flags: 16384 
  private function GallopPressed();  // flags: 16384 
  private function SpursKick();  // flags: 16384 
  private function PlayVoicesetFasterHorse();  // flags: 16384 
  private function PlayVoicesetSlowerHorse();  // flags: 16384 
  private function CanPlayVoiceset( _currentTime : Float) : Bool;  // flags: 16384 
  private function GetHorseVelocity() : Vector;  // flags: 16384 
  private function GetSubmergeDepth() : Float;  // flags: 16384 
  private function IsHorseOnNavMesh() : Bool;  // flags: 16384 
  private function InitCollisionGroups();  // flags: 16384 
  private function CalculateSoundParameters( dt : Float);  // flags: 16384 
  private function ResetSoundParameters();  // flags: 16384 

}
import class W3LevelManager extends CObject {

  public function Initialize();  // flags: 65536 
  public function PostInit( own : W3PlayerWitcher,  bFromLoad : Bool);  // flags: 65536 
  public final function ResetCharacterDev();  // flags: 65552 
  private function LoadLevelingDataFromXML();  // flags: 16384 
  public function AddPoints( type : ESpendablePointType,  amount : Int32,  show : Bool);  // flags: 65536 
  public function SpendPoints( type : ESpendablePointType,  amount : Int32);  // flags: 65536 
  public function GetPointsFree( type : ESpendablePointType) : Int32;  // flags: 65536 
  public function GetPointsUsed( type : ESpendablePointType) : Int32;  // flags: 65536 
  public function GetPointsTotal( type : ESpendablePointType) : Int32;  // flags: 65536 
  public function GetLevel() : Int32;  // flags: 65536 
  public function GetMaxLevel() : Int32;  // flags: 65536 
  public function GetTotalExpForCurrLevel() : Int32;  // flags: 65536 
  public function GetTotalExpForNextLevel() : Int32;  // flags: 65536 
  private function GainLevel( show : Bool);  // flags: 16384 
  public function AutoLevel();  // flags: 65536 

}
import class W3MainMenuInitData extends W3MenuInitData {

  public function GetPanelXOffset() : Int32;  // flags: 65536 
  public function SetPanelXOffset( value : Int32);  // flags: 65536 

}
import class W3ApplyLoadConfirmation extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 
  protected function ClosePopup();  // flags: 32768 

}
import class W3SaveGameConfirmation extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 
  protected function ClosePopup();  // flags: 32768 

}
import class W3NewGameConfirmation extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 
  protected function ClosePopup();  // flags: 32768 

}
import class W3ActionConfirmation extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 
  protected function ClosePopup();  // flags: 32768 

}
import class W3DeleteSaveConf extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 
  protected function ClosePopup();  // flags: 32768 

}
import class W3DifficultyChangeConfirmation extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 
  protected function ClosePopup();  // flags: 32768 

}
import class IngameMenuStructureCreator extends CObject {

  protected function CreateMenuItem( id : String,  label : String,  tag : Int32,  type : Int32,  createEmptyChildList : Bool,  optional  listTitle : String) : CScriptedFlashObject;  // flags: 32768 
  public function PopulateMenuData() : CScriptedFlashArray;  // flags: 65536 
  protected function CreateDifficultyListArray() : CScriptedFlashArray;  // flags: 32768 
  protected function AddDifficulyOptionItem( difficulty : EDifficultyMode,  parentArray : CScriptedFlashArray);  // flags: 32768 
  protected function AddNewgameTutorialOption( difficulty : EDifficultyMode,  parentArray : CScriptedFlashArray);  // flags: 32768 
  protected function AddNewgameSimulateImportOption( difficulty : EDifficultyMode,  tutorialsOn : Bool,  parentArray : CScriptedFlashArray);  // flags: 32768 
  protected function AddNewGamePlusOption( tag : Int32,  parentArray : CScriptedFlashArray);  // flags: 32768 
  protected function CreateImortedSaveGamesArray() : CScriptedFlashArray;  // flags: 32768 

}
import class CR4CommonIngameMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public function OnRequestSubMenu( menuName : CName,  optional  initData : IScriptable);  // flags: 65536 
  public event function OnInputHandled( NavCode : String,  KeyCode : Int32,  ActionId : Int32) : Bool;  // flags: 65568 
  public event function OnSwipe( swipe : Int32) : Bool;  // flags: 65568 
  private function DefineMenuItem( itemName : CName,  itemLabel : String,  optional  parentMenuItem : CName);  // flags: 16384 
  private function SetupMenu();  // flags: 16384 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function CloseMenuRequest();  // flags: 65536 
  public function ChildRequestCloseMenu();  // flags: 65536 
  public function GetParentMenuName( menu : CName) : CName;  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CR4CommonMainMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  private function updateHudConfigs();  // flags: 16384 
  public function GetCurrentBackgroundMovie() : String;  // flags: 65536 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public function OnRequestSubMenu( menuName : CName,  optional  initData : IScriptable);  // flags: 65536 
  public event function OnSwipe( swipe : Int32) : Bool;  // flags: 65568 
  private function DefineMenuItem( itemName : CName,  itemLabel : String,  optional  parentMenuItem : CName);  // flags: 16384 
  private function SetupMenu();  // flags: 16384 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function CloseMenuRequest();  // flags: 65536 
  public function ChildRequestCloseMenu();  // flags: 65536 
  public function GetParentMenuName( menu : CName) : CName;  // flags: 65536 
  protected function GatherBindersArray( out  resultArray : CScriptedFlashArray,  bindersList : array<SKeyBinding>,  optional  isContextBinding : Bool);  // flags: 32768 
  protected function UpdateInputFeedback();  // flags: 32768 
  public function SetButtons();  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 
  public function SetMenuAlpha( value : Int32);  // flags: 65536 

}
import class CR4DeathScreenMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  private function updateHudConfigs();  // flags: 16384 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public function OnRequestSubMenu( menuName : CName,  optional  initData : IScriptable);  // flags: 65536 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function CloseMenuRequest();  // flags: 65536 
  public function ChildRequestCloseMenu();  // flags: 65536 
  public function PopulateData();  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 
  public function SetMenuAlpha( value : Int32);  // flags: 65536 
  public event function OnPress( tag : CName) : Bool;  // flags: 65568 
  public function HideInputFeedback();  // flags: 65536 
  public event function OnLoad() : Bool;  // flags: 65568 
  public event function OnQuit() : Bool;  // flags: 65568 
  public event function OnRespawn() : Bool;  // flags: 65568 

}
import class W3GuiPlayerInventoryComponent extends W3GuiBaseInventoryComponent {

  protected function InvalidateItems( items : array<SItemUniqueId>);  // flags: 32768 
  public function SetShopInvCmp( targetShopInvCmp : W3GuiShopInventoryComponent);  // flags: 65536 
  public function SetFilterType( filterType : EInventoryFilterType);  // flags: 65536 
  public function GetFilterType() : EInventoryFilterType;  // flags: 65536 
  public function SetItemCategoryType( cat : CName);  // flags: 65536 
  public function SwapItems( gridItem : SItemUniqueId,  paperdollItem : SItemUniqueId);  // flags: 65536 
  public function EquipItem( item : SItemUniqueId,  slot : Int32);  // flags: 65536 
  public function EquipItemInGivenSlot( item : SItemUniqueId,  slot : Int32);  // flags: 65536 
  public function UnequipItem( item : SItemUniqueId);  // flags: 65536 
  public function DropItem( item : SItemUniqueId,  quantity : Int32);  // flags: 65536 
  public function UpgradeItem( item : SItemUniqueId,  upgrade : SItemUniqueId);  // flags: 65536 
  public function ConsumeItem( item : SItemUniqueId);  // flags: 65536 
  public function MoveItem( item : SItemUniqueId,  moveToIndex : Int32);  // flags: 65536 
  public function MoveItems( item : SItemUniqueId,  moveToIndex : Int32,  itemSecond : SItemUniqueId,  moveSecondToIndex : Int32);  // flags: 65536 
  public function CleanupItemsGridPosition();  // flags: 65536 
  public function ReadBook( item : SItemUniqueId);  // flags: 65536 
  public function IsBookRead( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function UpdateTooltip( item : SItemUniqueId,  secondItem : SItemUniqueId);  // flags: 65536 
  public function GetItemName( item : SItemUniqueId) : CName;  // flags: 65536 
  public function GetCraftedItemInfo( craftedItemName : CName,  targetObject : CScriptedFlashObject);  // flags: 65536 
  protected function isEquipped( item : SItemUniqueId) : Bool;  // flags: 32768 
  protected function getQuickslotId( item : SItemUniqueId) : Int32;  // flags: 32768 
  public function SetInventoryFlashObjectForItem( itemId : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 65536 
  public function GetOnlyMiscItems( out  items : array<SItemUniqueId>);  // flags: 65536 
  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 
  private function filterByTagsList( item : SItemUniqueId) : Bool;  // flags: 16384 
  private function CheckShowItemByCategory( item : SItemUniqueId,  itemCategory : CName) : Bool;  // flags: 16384 
  private function CheckIfShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 16384 
  protected function HAXIsMiscItem( item : SItemUniqueId) : Bool;  // flags: 32768 
  protected function GetItems( out  items : array<SItemUniqueId>);  // flags: 32768 
  public function GetItemActionType( item : SItemUniqueId,  optional  bGetDefault : Bool) : EInventoryActionType;  // flags: 65536 

}
import class W3GuiDisassembleInventoryComponent extends W3GuiPlayerInventoryComponent {

  public function SetInventoryFlashObjectForItem( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 65536 
  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 
  private function addRecyclingPartsList( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 16384 
  private function addSocketsListInfo( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 16384 

}
import class W3GuiRepairInventoryComponent extends W3GuiBaseInventoryComponent {

  public function SetInventoryFlashObjectForItem( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 65536 
  public function GetTotalRepairCost() : Int32;  // flags: 65536 
  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 
  public function RepairItem( item : SItemUniqueId,  priceModiffier : Float);  // flags: 65536 
  public function RepairAllItems( priceModiffier : Float);  // flags: 65536 
  public function CanRepairItem( item : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetRepairPrice( item : SItemUniqueId) : Float;  // flags: 65536 
  public function GetRepairAllPrice() : Float;  // flags: 65536 

}
import class W3GuiSocketsInventoryComponent extends W3GuiPlayerInventoryComponent {

  public function SetUpgradableFilter( item : SItemUniqueId);  // flags: 65536 
  public function SetSocketsFilter( value : Bool);  // flags: 65536 
  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 
  public function SetInventoryFlashObjectForItem( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 65536 
  private function addSocketsListInfo( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 16384 
  private function HasFilledSockets( targetItem : SItemUniqueId) : Bool;  // flags: 16384 

}
import class PriceConfirmationPopupData extends ConfirmationPopupData {

  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 
  public function SetPrice( value : Float);  // flags: 65536 
  protected function GetContentRef() : String;  // flags: 32768 
  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 

}
import class RepairAllPopupData extends ConfirmationPopupData {

  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 
  public function SetPrice( value : Float);  // flags: 65536 
  protected function GetContentRef() : String;  // flags: 32768 
  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 

}
import class QuantityPopupData extends SliderPopupData {

  protected function GetPopupTitle() : String;  // flags: 32768 
  protected function GetContentRef() : String;  // flags: 32768 
  protected function DefineDefaultButtons();  // flags: 32768 
  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 

}
import class ItemInfoPopupData extends TextPopupData {

  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 
  public function SetupOverlayRef( target : CR4MenuPopup);  // flags: 65536 
  protected function ClosePopup();  // flags: 32768 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 
  protected function DefineDefaultButtons();  // flags: 32768 
  protected function GetContentRef() : String;  // flags: 32768 

}
import class CR4CharacterMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnTabDataRequested( tabIndex : Int32) : Bool;  // flags: 65568 
  public event function OnTabChanged( tabIndex : Int32) : Bool;  // flags: 65568 
  private function PopulateTabData( tabIndex : Int32);  // flags: 16384 
  private function PopulateDataForTabWithSkills( tabIndex : Int32,  skillType : ESkillPath);  // flags: 16384 
  private function PopulateDataForMutagenTab();  // flags: 16384 
  private function PopulateDataForTab( tabIndex : Int32,  entriesArray : CScriptedFlashArray);  // flags: 16384 
  private function GetTabForSkill( skillID : ESkill) : CharacterMenuTabIndexes;  // flags: 16384 
  public event function OnStartApplyMode() : Bool;  // flags: 65568 
  public event function OnCancelApplyMode() : Bool;  // flags: 65568 
  public event function OnInventoryItemSelected( itemId : SItemUniqueId) : Bool;  // flags: 65568 
  public event function OnBuySkill( skill : ESkill,  slotID : Int32) : Bool;  // flags: 65568 
  public event function OnSwapSkill( skill1 : ESkill,  slotID1 : Int32,  skill2 : ESkill,  slotID2 : Int32) : Bool;  // flags: 65568 
  public event function OnEquipSkill( skill : ESkill,  slotID : Int32) : Bool;  // flags: 65568 
  public event function OnUnequipSkill( slotID : Int32) : Bool;  // flags: 65568 
  public event function OnUpgradeSkill( skillID : ESkill) : Bool;  // flags: 65568 
  public event function OnEquipMutagen( itemID : SItemUniqueId,  slotId : EEquipmentSlots) : Bool;  // flags: 65568 
  public event function OnUnequipMutagen( slotID : Int32) : Bool;  // flags: 65568 
  protected function tryUnequipSkill( skill : ESkill);  // flags: 32768 
  public function handleBuySkillConfirmation( skill : ESkill);  // flags: 65536 
  public function UpdateData( tabs : Bool);  // flags: 65536 
  protected function UpdateGroupsData();  // flags: 32768 
  private function RemoveMutagenBonus();  // flags: 16384 
  private function GetGroupBonusDescription( groupId : Int32) : String;  // flags: 16384 
  protected function CreateBonusGFxData( index : Int32) : CScriptedFlashObject;  // flags: 32768 
  protected function UpdateAppliedSkills();  // flags: 32768 
  protected function GetSlotForSkill( skill : ESkill) : Int32;  // flags: 32768 
  protected function UpdateAppliedSkillIfEquipped( skill : ESkill);  // flags: 32768 
  protected function UpdateAppliedSkill( slotID : Int32);  // flags: 32768 
  protected function SendEquippedSkillInfo( curSlot : SSkillSlot);  // flags: 32768 
  protected function UpdateMutagens();  // flags: 32768 
  protected function GetSkillGFxObject( curSkill : SSkill,  out  dataObject : CScriptedFlashObject);  // flags: 32768 
  protected function CheckIfLocked( skill : SSkill) : Bool;  // flags: 32768 
  protected function SkillsPathsPointsSpent( skill : SSkill) : Int32;  // flags: 32768 
  protected function UpdateSkillPoints();  // flags: 32768 
  private function CheckIfAvailable( skill : SSkill) : Bool;  // flags: 16384 
  private function GetCurrentSkillPoints() : Int32;  // flags: 16384 
  private function GetSkillTooltipDescriptionForSkillLevel( targetSkill : SSkill,  skillLevel : Int32) : String;  // flags: 16384 
  private function GetSwordSkillsTooltipDescription( targetSkill : SSkill,  skillLevel : Int32,  locKey : String) : String;  // flags: 16384 
  private function GetSignSkillsTooltipDescription( targetSkill : SSkill,  skillLevel : Int32,  locKey : String) : String;  // flags: 16384 
  private function GetAlchemySkillsTooltipDescription( targetSkill : SSkill,  skillLevel : Int32,  locKey : String) : String;  // flags: 16384 
  private function GetPerkTooltipDescription( targetSkill : SSkill,  skillLevel : Int32,  locKey : String) : String;  // flags: 16384 
  private function GetSkillTooltipDescription( targetSkill : SSkill,  out  currentLevelDesc : String,  out  nextLevelDesc : String);  // flags: 16384 
  public event function OnNotEnoughtPoints() : Bool;  // flags: 65568 
  public event function OnGetSkillTooltipData( targetSkill : ESkill,  compareItemType : Int32) : Bool;  // flags: 65568 
  public event function OnGetEmptySlotTooltipData( unlockedAtLevel : Int32) : Bool;  // flags: 65568 
  public event function OnGetLockedTooltipData( unlockedAtLevel : Int32) : Bool;  // flags: 65568 
  public event function OnGetMutagenEmptyTooltipData( unlockedAtLevel : Int32) : Bool;  // flags: 65568 
  public event function OnGetMutagenLockedTooltipData( unlockedAtLevel : Int32) : Bool;  // flags: 65568 
  public event function OnGetItemData( item : SItemUniqueId,  compareItemType : Int32) : Bool;  // flags: 65568 
  public function CompareItemsStats( itemStats : array<SAttributeTooltip>,  compareItemStats : array<SAttributeTooltip>,  out  compResult : CScriptedFlashArray);  // flags: 65536 
  private function getCategoryDescription( itemCategory : CName) : String;  // flags: 16384 
  public function GetItemRarityDescription( item : SItemUniqueId,  tooltipInv : CInventoryComponent) : String;  // flags: 65536 
  private function addGFxItemStat( out  targetArray : CScriptedFlashArray,  type : String,  value : String,  optional  label : String);  // flags: 16384 
  public function UpdatePlayerStatisticsData();  // flags: 65536 
  private function updateSentStatValue( statName : CName,  statValue : String);  // flags: 16384 
  private function getLastSentStatValue( statName : CName) : String;  // flags: 16384 
  public event function OnSelectPlayerStat( statId : CName) : Bool;  // flags: 65568 
  public event function OnStatisticsLostFocus() : Bool;  // flags: 65568 
  public function ShowStatTooltip( statName : CName);  // flags: 65536 
  private function GetHealthTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetToxicityTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetStaminaTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetAdrenalineTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetOffenseTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetDefenseTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetSignsTooltipData( out  GFxData : CScriptedFlashArray);  // flags: 16384 
  private function GetSignStat( targetSkill : ESkill) : String;  // flags: 16384 
  private function StatToStr( value : Float) : String;  // flags: 16384 
  private function PushStatItem( out  statsList : CScriptedFlashArray,  label : String,  value : String);  // flags: 16384 
  public event function OnShowFullStats() : Bool;  // flags: 65568 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class W3BuySkillConfirmation extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 

}
import class CharacterStatsPopupData extends TextPopupData {

  protected function GetContentRef() : String;  // flags: 32768 
  protected function DefineDefaultButtons();  // flags: 32768 
  public function OnUserFeedback( KeyCode : String);  // flags: 65536 
  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 

}
import class W3PlayerAbilityManager extends W3AbilityManager {

  public final function Init( ownr : CActor,  cStats : CCharacterStats,  isFromLoad : Bool,  diff : EDifficultyMode) : Bool;  // flags: 65552 
  public function OnOwnerRevived();  // flags: 65536 
  private final function PrecacheModifierSkills();  // flags: 16400 
  public final function PostInit();  // flags: 65552 
  public final function GetPlayerSkills() : array<SSkill>;  // flags: 65552 
  public final function AddTempNonAlchemySkills() : array<SSimpleSkill>;  // flags: 65552 
  public final function GetPlayerSkill( type : ESkill) : SSkill;  // flags: 65552 
  private final function AddPassiveSkillBuff( skill : ESkill);  // flags: 16400 
  private final function ReloadAcquiredSkills( out  acquiredSkills : array<SRestoredSkill>);  // flags: 16400 
  protected final function OnFocusChanged();  // flags: 32784 
  protected final function OnVitalityChanged();  // flags: 32784 
  protected final function OnAirChanged();  // flags: 32784 
  protected final function OnToxicityChanged();  // flags: 32784 
  public final function GetPlayerSkillMutagens() : array<SMutagenSlot>;  // flags: 65552 
  public final function GetSkillGroupIdOfMutagenSlot( eqSlot : EEquipmentSlots) : Int32;  // flags: 65552 
  public final function IsSkillMutagenSlotUnlocked( eqSlot : EEquipmentSlots) : Bool;  // flags: 65552 
  private final function GetMutagenSlotForGroupId( groupID : Int32) : EEquipmentSlots;  // flags: 16400 
  public final function GetSkillGroupsCount() : Int32;  // flags: 65552 
  public final function GetSkillGroupIDFromIndex( idx : Int32) : Int32;  // flags: 65552 
  private final function GetMutagenSlotIndex( eqSlot : EEquipmentSlots) : Int32;  // flags: 16400 
  private final function GetMutagenSlotIndexFromItemId( item : SItemUniqueId) : Int32;  // flags: 16400 
  public final function OnSkillMutagenEquipped( item : SItemUniqueId,  slot : EEquipmentSlots,  prevColor : ESkillColor);  // flags: 65552 
  public final function OnSkillMutagenUnequipped( item : SItemUniqueId,  slot : EEquipmentSlots,  prevColor : ESkillColor);  // flags: 65552 
  public final function OnSwappedMutagensPost( a : SItemUniqueId,  b : SItemUniqueId);  // flags: 65552 
  private final function MutagensSyngergyBonusProcess( enable : Bool,  skillLevel : Int32);  // flags: 16400 
  private final function MutagenSynergyBonusEnable( mutagenItemId : SItemUniqueId,  enable : Bool,  bonusSkillLevel : Int32);  // flags: 16400 
  public final function GetMutagenBonusAbilityName( mutagenItemId : SItemUniqueId) : CName;  // flags: 65552 
  public final function GetSkillGroupIdFromSkillSlotId( skillSlotId : Int32) : Int32;  // flags: 65552 
  public function GetMutagenSlotIDFromGroupID( groupID : Int32) : Int32;  // flags: 65536 
  public final function GetGroupBonus( groupID : Int32) : CName;  // flags: 65552 
  public final function GetGroupBonusCount( commonColor : ESkillColor,  groupID : Int32) : Int32;  // flags: 65552 
  public final function GetSkillGroupColor( groupID : Int32) : ESkillColor;  // flags: 65552 
  public final function GetSkillGroupColorCount( commonColor : ESkillColor,  groupID : Int32) : ESkillColor;  // flags: 65552 
  private final function LinkUpdate( newColor : ESkillColor,  prevColor : ESkillColor);  // flags: 16400 
  private final function UpdateLinkBonus( a : ESkillColor,  added : Bool);  // flags: 16400 
  public final function GetSkillColor( skill : ESkill) : ESkillColor;  // flags: 65552 
  public final function GetSkillLevel( skill : ESkill) : Int32;  // flags: 65552 
  public final function GetSkillMaxLevel( skill : ESkill) : Int32;  // flags: 65552 
  public final function GetSkillStaminaUseCost( skill : ESkill,  optional  isPerSec : Bool) : Float;  // flags: 65552 
  public final function GetSkillAttributeValue( abilityName : CName,  attributeName : CName,  addBaseCharAttribute : Bool,  addSkillModsAttribute : Bool) : SAbilityAttributeValue;  // flags: 65552 
  protected final function GetStaminaActionCostInternal( action : EStaminaActionType,  isPerSec : Bool,  out  cost : SAbilityAttributeValue,  out  delay : SAbilityAttributeValue,  optional  abilityName : CName);  // flags: 32784 
  protected final function GetNonBlockedSkillAbilitiesList( optional  tags : array<CName>) : array<CName>;  // flags: 32784 
  public final function IsSkillBlocked( skill : ESkill) : Bool;  // flags: 65552 
  public final function BlockSkill( skill : ESkill,  block : Bool,  optional  cooldown : Float) : Bool;  // flags: 65552 
  public final function CheckBlockedSkills( dt : Float) : Float;  // flags: 65552 
  public final function BlockAbility( abilityName : CName,  block : Bool,  optional  cooldown : Float) : Bool;  // flags: 65552 
  protected final function InitSkills();  // flags: 32784 
  protected final function IsCoreSkill( skill : ESkill) : Bool;  // flags: 32784 
  protected final function CacheSkills( skillDefinitionName : CName,  out  cache : array<SSkill>);  // flags: 32784 
  private final function CacheSkill( skillType : Int32,  abilityName : CName,  definitionNode : SCustomNode,  out  skill : SSkill);  // flags: 16400 
  private final function LoadMutagenSlotsDataFromXML();  // flags: 16400 
  public final function AddSkill( skill : ESkill,  isTemporary : Bool);  // flags: 65552 
  protected final function AddSkillInternal( skill : ESkill,  spendPoints : Bool,  isTemporary : Bool,  optional  skipTutorialMessages : Bool) : Bool;  // flags: 32784 
  public final function RemoveTemporarySkill( skill : SSimpleSkill) : Bool;  // flags: 65552 
  public final function HasLearnedSkill( skill : ESkill) : Bool;  // flags: 65552 
  private final function GetSkillFromAbilityName( abilityName : CName) : ESkill;  // flags: 16400 
  public final function CanLearnSkill( skill : ESkill) : Bool;  // flags: 65552 
  public final function HasSpentEnoughPoints( skill : ESkill) : Bool;  // flags: 65552 
  public final function PathPointsSpentInSkillPathOfSkill( skill : ESkill) : Int32;  // flags: 65552 
  public final function GetSkillAbilityName( skill : ESkill) : CName;  // flags: 65552 
  public final function GetSkillLocalisationKeyName( skill : ESkill) : String;  // flags: 65552 
  public final function GetSkillLocalisationKeyDescription( skill : ESkill,  optional  level : Int32) : String;  // flags: 65552 
  public final function GetSkillIconPath( skill : ESkill) : String;  // flags: 65552 
  public final function GetSkillSubPathType( skill : ESkill) : ESkillSubPath;  // flags: 65552 
  public final function GetSkillPathType( skill : ESkill) : ESkillPath;  // flags: 65552 
  protected function GetItemResistStatIndex( slot : EEquipmentSlots,  stat : ECharacterDefenseStats) : Int32;  // flags: 32768 
  protected final function RecalcResistStat( stat : ECharacterDefenseStats);  // flags: 32784 
  private final function SetItemResistStat( slot : EEquipmentSlots,  stat : ECharacterDefenseStats);  // flags: 16400 
  public final function RecalcItemResistDurability( slot : EEquipmentSlots,  itemId : SItemUniqueId);  // flags: 65552 
  private final function RecalcResistStatFromItem( stat : ECharacterDefenseStats,  slot : EEquipmentSlots);  // flags: 16400 
  public final function DrainStamina( action : EStaminaActionType,  optional  fixedCost : Float,  optional  fixedDelay : Float,  optional  abilityName : CName,  optional  dt : Float,  optional  costMult : Float) : Float;  // flags: 65552 
  public final function FloorStaminaSegment();  // flags: 65552 
  public final function GetStat( stat : EBaseCharacterStats,  optional  skipLock : Bool) : Float;  // flags: 65552 
  public final function AddToxicityOffset( val : Float);  // flags: 65552 
  public final function RemoveToxicityOffset( val : Float);  // flags: 65552 
  public final function GetOffenseStat() : Int32;  // flags: 65552 
  public final function GetDefenseStat() : Int32;  // flags: 65552 
  public final function GetSignsStat() : Float;  // flags: 65552 
  public event function OnLevelGained( currentLevel : Int32) : Bool;  // flags: 65568 
  private final function InitSkillSlots();  // flags: 16400 
  public final function GetSkillSlotID( skill : ESkill) : Int32;  // flags: 65552 
  public final function GetSkillSlotIDFromIndex( skillSlotIndex : Int32) : Int32;  // flags: 65552 
  public final function GetSkillSlotIndex( slotID : Int32,  checkIfUnlocked : Bool) : Int32;  // flags: 65552 
  public final function GetSkillSlotIndexFromSkill( skill : ESkill) : Int32;  // flags: 65552 
  public final function EquipSkill( skill : ESkill,  slotID : Int32) : Bool;  // flags: 65552 
  public final function UnequipSkill( slotID : Int32) : Bool;  // flags: 65552 
  private final function OnSkillEquip( skill : ESkill);  // flags: 16400 
  private final function OnSkillUnequip( skill : ESkill);  // flags: 16400 
  private final function SetPerkArmorBonus( skill : ESkill,  enable : Bool);  // flags: 16400 
  public final function UpdatePerkArmorBonus( skill : ESkill,  enable : Bool,  optional  count : Int32);  // flags: 65552 
  public final function SetPerk01Abilities( enableDay : Bool,  enableNight : Bool);  // flags: 65552 
  private final function OnSkillEquippedLevelChange( skill : ESkill,  prevLevel : Int32,  currLevel : Int32);  // flags: 16400 
  public final function CanUseSkill( skill : ESkill) : Bool;  // flags: 65552 
  public final function IsSkillEquipped( skill : ESkill) : Bool;  // flags: 65552 
  public final function GetSkillOnSlot( slotID : Int32,  out  skill : ESkill) : Bool;  // flags: 65552 
  public final function GetSkillSlots() : array<SSkillSlot>;  // flags: 65552 
  public final function GetSkillSlotsCount() : Int32;  // flags: 65552 
  public final function IsSkillSlotUnlocked( slotIndex : Int32) : Bool;  // flags: 65552 
  public final function ResetCharacterDev();  // flags: 65552 
  public final function TutorialMutagensUnequipPlayerSkills() : array<STutorialSavedSkill>;  // flags: 65552 
  public final function TutorialMutagensEquipOneGoodSkill();  // flags: 65552 
  public final function TutorialMutagensEquipOneGoodOneBadSkill();  // flags: 65552 
  public final function TutorialMutagensEquipThreeGoodSkills();  // flags: 65552 
  public final function TutorialMutagensCleanupTempSkills( savedEquippedSkills : array<STutorialSavedSkill>);  // flags: 65552 
  private final function TutorialGetRidOfTempSkill( tutTempArrIdx : Int32);  // flags: 16400 
  private final function TutorialSelectAndAddTempSkill( optional  ofWrongColor : Bool,  optional  index : Int32);  // flags: 16400 
  private final function TutorialGetConnectedSkillsSlotsIDs() : array<Int32>;  // flags: 16400 
  private final function TutorialUpdateUI();  // flags: 16400 
  public final function Debug_HAX_UnlockSkillSlot( slotIndex : Int32) : Bool;  // flags: 65552 
  public final function DBG_SkillSlots();  // flags: 65552 

}
import class W3PlayerWitcherStateMeditationWaiting extends W3PlayerWitcherStateMeditationBase {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function LatentHackMeditationWaitingAbort();  // flags: 65664 
  private function Loop_StupidNameCollision();  // flags: 16512 
  private latent function BlendIn() : Float;  // flags: 16448 
  private latent function BlendOut( estimatedBlendTimeReal : Float);  // flags: 16448 
  private latent function KeepWaiting( blendTime : GameTime);  // flags: 16448 
  public function RequestWaitStop();  // flags: 65536 
  public function StopRequested( optional  closeUI : Bool);  // flags: 65536 
  private final function FinalHack_GetSimulateBuffTime() : Float;  // flags: 16400 

}
import class IInventoryScriptedListener extends CObject {

  public event function OnInventoryScriptedEvent( eventType : EInventoryEventType,  itemId : SItemUniqueId,  quantity : Int32,  fromAssociatedInventory : Bool) : Bool;  // flags: 65568 

}
import class W3PlayerWitcherStateMeditation extends W3PlayerWitcherStateMeditationBase {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function InitState( prevStateName : CName);  // flags: 65664 
  public function SetMeditationPointHeading( head : Float);  // flags: 65536 
  public function IsSitting() : Bool;  // flags: 65536 
  public event function OnAnimEvent_OpenUI( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public function StopRequested( optional  closeUI : Bool);  // flags: 65536 
  private function Loop();  // flags: 16512 
  public latent function StopMeditation();  // flags: 65600 
  public function MeditationWait( targetHour : Int32);  // flags: 65536 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnGameCameraPostTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 

}
import class CR4GlossaryStorybookMenu extends CR4ListBaseMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function UpdateImage( tag : CName);  // flags: 65536 
  public event function OnEntryPress( tag : CName) : Bool;  // flags: 65568 
  public event function OnVideoStopped() : Bool;  // flags: 65568 
  public function ShowMenuAgain();  // flags: 65536 
  public function SetMovieIsPlaying( value : Bool);  // flags: 65536 
  private function PopulateData();  // flags: 16384 
  public function UpdateDescription( entryName : CName);  // flags: 65536 
  public function GetDescription( currentStorybookPage : CJournalStoryBookPage) : String;  // flags: 65536 
  public function UpdateItems( tag : CName);  // flags: 65536 

}
import class CR4MapMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  protected function GetSavedDataMenuName() : CName;  // flags: 32768 
  public function Initialize();  // flags: 65536 
  private function UpdateQuestAreas();  // flags: 16384 
  public function SetMenuState( newState : CName);  // flags: 65536 
  private function UpdateInputFeedback();  // flags: 16384 
  protected function SetMapTitle( mapTitle : String);  // flags: 32768 
  protected function SetCurrentAreaId( areaId : EAreaName);  // flags: 32768 
  public event function OnDebugEvent( id : Int32) : Bool;  // flags: 65568 
  public function UpdateData( optional  ignoreSelectionChange : Bool);  // flags: 65536 
  private function UpdateCurrentQuestData();  // flags: 16384 
  private function UpdatePlayerPin( out  flashArray : CScriptedFlashArray);  // flags: 16384 
  private function UpdateUserMapPin( out  flashArray : CScriptedFlashArray);  // flags: 16384 
  public function ReinitializeMap();  // flags: 65536 
  public function UpdateActiveAreas();  // flags: 65536 
  public function UpdateEntityPins( out  flashArray : CScriptedFlashArray,  commonMapManager : CCommonMapManager);  // flags: 65536 
  private function AddPinTypeData( out  dataObject : CScriptedFlashObject,  targetPin : SCommonMapPinInstance);  // flags: 16384 
  public event function OnPinch( value : Float) : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function SaveStateData();  // flags: 65536 
  public event function OnSwitchToWorldMap() : Bool;  // flags: 65568 
  public event function OnSwitchToHubMap( areaName : String) : Bool;  // flags: 65568 
  public event function OnGetMappointData( pinTag : CName) : Bool;  // flags: 65568 
  private function AddUniquePinTypeFilter( pinType : CName);  // flags: 16384 
  private function EnablePinFilter( pinType : CName);  // flags: 16384 
  private function DisablePinFilter( pinType : CName);  // flags: 16384 
  private function DisableAllPinFilters( exceptions : array<CName>);  // flags: 16384 
  private function IsPinFilterDisabled( pinType : CName) : Bool;  // flags: 16384 
  private function CheckFilter( targetType : CName) : Bool;  // flags: 16384 
  public event function OnGetFiltersData() : Bool;  // flags: 65568 
  private function GetPinTypeDescription( pinType : CName,  out  label : String,  out  description : String);  // flags: 16384 
  public event function OnUpdateFilter( pinType : CName,  enabled : Bool) : Bool;  // flags: 65568 
  public event function OnRequestFastTravelData() : Bool;  // flags: 65568 
  public event function OnRequestObjectivesMappins() : Bool;  // flags: 65568 
  private function requestFastTravelData();  // flags: 16384 
  private function requestObjectivesMappins();  // flags: 16384 
  protected function GetQuestMappins( out  flashArray : CScriptedFlashArray);  // flags: 32768 
  protected function InsertQuestMappinGroup( out  targetContainer : CScriptedFlashArray,  targetQuest : CJournalQuest,  selected : Bool);  // flags: 32768 
  protected function InsertQuestObjectiveMappins( out  targetContainer : CScriptedFlashArray,  targetQuest : CJournalQuest,  targetObjective : CJournalQuestObjective,  commonMappins : array<SCommonMapPinInstance>,  area : Int32);  // flags: 32768 
  protected function GetQuestMappinData( mapPinTag : CName,  commonMappins : array<SCommonMapPinInstance>) : CScriptedFlashObject;  // flags: 32768 
  public function GetAreaDefaultPosition( areaId : Int32,  out  x : Float,  out  y : Float);  // flags: 65536 
  public function GetAreaName( areaId : Int32) : CName;  // flags: 65536 
  public event function OnHighlightObjective( tag : CName) : Bool;  // flags: 65568 
  public event function OnTrackQuest( tag : CName) : Bool;  // flags: 65568 
  public function SwitchToHubMap( area : EAreaName);  // flags: 65536 
  public event function OnEntrySelected( tag : CName) : Bool;  // flags: 65568 
  public event function OnSwitchToInterior() : Bool;  // flags: 65568 
  public event function OnUserMapPinSet( posX : Float,  posY : Float) : Bool;  // flags: 65568 
  public event function OnStaticMapPinUsed( pinTag : CName,  areaId : Int32) : Bool;  // flags: 65568 
  public function UpdateTitle();  // flags: 65536 
  private function UpdateDefaultPosition( areaId : Int32);  // flags: 16384 
  private function UpdateMapSettings();  // flags: 16384 
  public function GetShownMapName() : String;  // flags: 65536 
  public function GetMapTitle() : String;  // flags: 65536 
  public function IsCurrentAreaShown() : Bool;  // flags: 65536 
  private function FilterPinsByDuplicateName( pinsArray : array<SCommonMapPinInstance>) : array<SCommonMapPinInstance>;  // flags: 16384 
  public event function OnSkipPressed() : Bool;  // flags: 65568 
  public event function OnCategoryOpened( categoryName : CName,  opened : Bool) : Bool;  // flags: 65568 
  public function EnableDebugMode( enable : Bool);  // flags: 65536 
  public function EnableUnlimitedZoom( enable : Bool);  // flags: 65536 
  public function EnableManualLod( enable : Bool);  // flags: 65536 
  public function ShowBorders( show : Bool);  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CR4JournalQuestMenu extends CR4ListBaseMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  protected function UpdateTrackedQuest();  // flags: 32768 
  public function GetQuests();  // flags: 65536 
  public event function OnObjectiveRead( tag : CName) : Bool;  // flags: 65568 
  public event function OnObjectiveSelected( _ObjectiveID : CName) : Bool;  // flags: 65568 
  public event function OnTrackQuest( tag : CName) : Bool;  // flags: 65568 
  protected function HighlightAnyObjective( targetEntry : CJournalBase);  // flags: 32768 
  public event function OnEntrySelected( tag : CName) : Bool;  // flags: 65568 
  public event function OnHighlightObjective( tag : CName) : Bool;  // flags: 65568 
  public function UpdateImage( tag : CName);  // flags: 65536 
  private function UpdateTwoQuests( questOne : CJournalQuest,  questTwo : CJournalQuest);  // flags: 16384 
  private function PopulateData();  // flags: 16384 
  private function generateFlashObjectForQuest( targetQuest : CJournalQuest) : CScriptedFlashObject;  // flags: 16384 
  public function GetQuestIconByType( type : eQuestType) : String;  // flags: 65536 
  public function UpdateObjectives( tag : CName);  // flags: 65536 
  public function GetAreaName( questEntry : CJournalQuest) : CName;  // flags: 65536 
  public function GetDescription( currentQuest : CJournalQuest) : String;  // flags: 65536 
  public function UpdateDescription( entryName : CName);  // flags: 65536 
  public function UpdateItems( tag : CName);  // flags: 65536 
  private function CreateRewards( rewards : array<CName>) : CScriptedFlashArray;  // flags: 16384 
  public event function OnGetItemData( item : Int32,  compareItemType : Int32) : Bool;  // flags: 65568 
  private function AppendArrayOfItemRewards( out  first : array<SItemReward>,  second : array<SItemReward>);  // flags: 16384 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CR4AlchemyMenu extends CR4ListBaseMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnEntryRead( tag : CName) : Bool;  // flags: 65568 
  public event function OnStartCrafting() : Bool;  // flags: 65568 
  public event function OnCraftItem( tag : CName) : Bool;  // flags: 65568 
  public event function OnEntryPress( tag : CName) : Bool;  // flags: 65568 
  public event function OnEntrySelected( tag : CName) : Bool;  // flags: 65568 
  public event function OnShowCraftedItemTooltip( tag : CName) : Bool;  // flags: 65568 
  protected function ShowSelectedItemInfo( tag : CName);  // flags: 32768 
  public function CreateItem( recipeIndex : Int32);  // flags: 65536 
  private function PopulateData();  // flags: 16384 
  public function UpdateDescription( tag : CName);  // flags: 65536 
  public function GetDescription( currentCharacter : CJournalCharacter) : String;  // flags: 65536 
  public function FindRecipieID( tag : CName) : Int32;  // flags: 65536 
  public function GetItemQuantity( id : Int32) : Int32;  // flags: 65536 
  public function UpdateItems( tag : CName);  // flags: 65536 
  private function UpdateItemsById( id : Int32);  // flags: 16384 
  public function FillItemInformation( flashObject : CScriptedFlashObject,  index : Int32);  // flags: 65536 
  public function GetItemRarityDescription( itemName : CName) : String;  // flags: 65536 
  private function getCategoryDescription( itemCategory : CName) : String;  // flags: 16384 
  private function addGFxItemStat( out  targetArray : CScriptedFlashArray,  type : String,  value : String);  // flags: 16384 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CR4GlossaryBestiaryMenu extends CR4ListBaseMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnGuiSceneEntitySpawned( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnGuiSceneEntityDestroyed() : Bool;  // flags: 65568 
  public event function OnEntrySelected( tag : CName) : Bool;  // flags: 65568 
  public function UpdateImage( entryName : CName);  // flags: 65536 
  private function PopulateData();  // flags: 16384 
  public function GetDescription( currentCreature : CJournalCreature) : String;  // flags: 65536 
  public function UpdateDescription( entryName : CName);  // flags: 65536 
  public function UpdateItems( tag : CName);  // flags: 65536 
  public function UpdateItemsFromEntity( entity : CEntity);  // flags: 65536 
  private function CreateItems( itemsNames : array<CName>) : CScriptedFlashArray;  // flags: 16384 
  private function TryGetSignData( signName : CName,  out  localizationKey : String,  out  iconPath : String);  // flags: 16384 
  public event function OnGetItemData( item : Int32,  compareItemType : Int32) : Bool;  // flags: 65568 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CR4GlossaryEncyclopediaMenu extends CR4ListBaseMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  private function PopulateData();  // flags: 16384 
  private function PopulateDataCharacters( flashArray : CScriptedFlashArray);  // flags: 16384 
  private function AddCharacterJournalEntryToArray( journalCharacter : CJournalCharacter,  flashArray : CScriptedFlashArray);  // flags: 16384 
  public function GetCharacterDescription( currentCharacter : CJournalCharacter) : String;  // flags: 65536 
  public function getCharacterImage( character : CJournalCharacter) : String;  // flags: 65536 
  private function PopulateDataLocations( flashArray : CScriptedFlashArray);  // flags: 16384 
  private function AddLocationJournalEntryToArray( journalEntry : CJournalPlaceGroup,  flashArray : CScriptedFlashArray);  // flags: 16384 
  public function GetPlaceDescription( currentEntry : CJournalPlace) : String;  // flags: 65536 
  public function getPlaceImage( place : CJournalPlace) : String;  // flags: 65536 
  private function PopulateDataEvents( flashArray : CScriptedFlashArray);  // flags: 16384 
  private function AddEventJournalEntryToArray( journalEntry : CJournalGlossaryGroup,  flashArray : CScriptedFlashArray);  // flags: 16384 
  public function GetEventsDescription( currentEntry : CJournalGlossary) : String;  // flags: 65536 
  public function getEventImage( jEvent : CJournalGlossary) : String;  // flags: 65536 
  private function GetGlossaryLocalizedStringById( id : Int32) : String;  // flags: 16384 
  public function UpdateDescription( entryName : CName);  // flags: 65536 
  public function UpdateImage( tag : CName);  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class CR4MeditationClockMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public function SetButtons();  // flags: 65536 
  public function UpdateCurrentHours();  // flags: 65536 
  public function SendCurrentTimeToAS();  // flags: 65536 
  public event function OnMeditate( dayTime : Float) : Bool;  // flags: 65568 
  public event function OnMeditateBlocked() : Bool;  // flags: 65568 
  public event function OnStopMeditate() : Bool;  // flags: 65568 
  public function GetCurrentDayTime( type : String) : Int32;  // flags: 65536 
  public function StartWaiting();  // flags: 65536 
  public function StopWaiting();  // flags: 65536 
  public function MeditatingEnd();  // flags: 65536 
  public function PlayOpenSoundEvent();  // flags: 65536 
  private final function ShowDisallowedNotification();  // flags: 16400 

}
import class CR4CraftingMenu extends CR4ListBaseMenu {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public event function OnCloseMenu() : Bool;  // flags: 65568 
  public event function OnEntryRead( tag : CName) : Bool;  // flags: 65568 
  public event function OnStartCrafting() : Bool;  // flags: 65568 
  public event function OnCraftItem( tag : CName) : Bool;  // flags: 65568 
  public event function OnEntryPress( tag : CName) : Bool;  // flags: 65568 
  public event function OnEntrySelected( tag : CName) : Bool;  // flags: 65568 
  public event function OnShowCraftedItemTooltip( tag : CName) : Bool;  // flags: 65568 
  public function CreateItem( schematic : CName);  // flags: 65536 
  private function UpdateItemsCounter();  // flags: 16384 
  private function PopulateData();  // flags: 16384 
  public function UpdateMerchantData( targetNpc : CNewNPC);  // flags: 65536 
  public function UpdateDescription( tag : CName);  // flags: 65536 
  public function UpdateItems( tag : CName);  // flags: 65536 
  protected function ShowSelectedItemInfo( tag : CName);  // flags: 32768 
  public function FillItemInformation( flashObject : CScriptedFlashObject,  index : Int32);  // flags: 65536 
  public final function GetCraftsmanComponent() : W3CraftsmanComponent;  // flags: 65552 
  public function PlayOpenSoundEvent();  // flags: 65536 

}
import class W3CraftingManager extends CObject {

  public function Init( masterComp : W3CraftsmanComponent);  // flags: 65536 
  private function LoadSchematicsXMLData();  // flags: 16384 
  public function CanCraftSchematic( schematicName : CName,  checkMerchant : Bool) : ECraftingException;  // flags: 65536 
  public function GetSchematic( s : CName,  out  ret : SCraftingSchematic) : Bool;  // flags: 65536 
  public function GetCraftingCost( schematic : CName) : Int32;  // flags: 65536 
  public function Craft( schemName : CName,  out  item : SItemUniqueId) : ECraftingException;  // flags: 65536 

}
import class CCreatureDataComponent extends CScriptedComponent {

  public function GetItemsUsedAgainstCreature() : array<CName>;  // flags: 65536 
  public function GetSkillsUsedAgainstCreature() : array<CName>;  // flags: 65536 
  public function GetCameraDistance() : Float;  // flags: 65536 
  public function GetCameraLookAtZ() : Float;  // flags: 65536 
  public function GetCameraRotationYaw() : Float;  // flags: 65536 
  public function GetCameraRotationPitch() : Float;  // flags: 65536 
  public function GetEnvironmentSunRotationYaw() : Float;  // flags: 65536 
  public function GetEnvironmentSunRotationPitch() : Float;  // flags: 65536 
  public function GetDesiredAppearance() : CName;  // flags: 65536 
  public function GetEntityPosition() : Vector;  // flags: 65536 
  public function GetEntityRotation() : EulerAngles;  // flags: 65536 
  public function getEntityScale() : Vector;  // flags: 65536 
  public function getFov() : Float;  // flags: 65536 

}
import class CR4GwintBaseMenu extends CR4MenuBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public function OnQuitGameConfirmed();  // flags: 65536 
  protected function SendCardTemplates();  // flags: 32768 
  private function AddCardsToFlashArray( l_flashArray : CScriptedFlashArray,  cards : array<SCardDefinition>);  // flags: 16384 
  private function AddCardEffectsToFlashObject( flashObject : CScriptedFlashObject,  card : SCardDefinition);  // flags: 16384 
  private function AddSummonFlagsToObject( flashObject : CScriptedFlashObject,  card : SCardDefinition);  // flags: 16384 
  public function CreateDeckDefinitionFlash( deckInfo : SDeckDefinition) : CScriptedFlashObject;  // flags: 65536 
  public function FillArrayWithCardList( cardList : array<CollectionCard>,  targetArray : CScriptedFlashArray);  // flags: 65536 
  public event function OnConfirmSurrender() : Bool;  // flags: 65568 

}
import class W3GwintQuitConfPopup extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 

}
import class CR4GwintGameMenu extends CR4GwintBaseMenu {

  public function EnableJournalTutorialEnries();  // flags: 65536 
  public event function OnConfigUI() : Bool;  // flags: 65568 
  public event function OnClosingMenu() : Bool;  // flags: 65568 
  public function OnQuitGameConfirmed();  // flags: 65536 
  private function SendCardValues();  // flags: 16384 
  private function SendDecksInformation();  // flags: 16384 
  private function SendPlayerNames();  // flags: 16384 
  public event function OnChooseCoinFlip() : Bool;  // flags: 65568 
  public event function OnMatchResult( pWon : Bool) : Bool;  // flags: 65568 
  public event function OnNeutralRoundVictoryAchievement() : Bool;  // flags: 65568 
  public event function OnHeroRoundVictoryAchievement() : Bool;  // flags: 65568 
  public function SetPlayerStarts( playerFirst : Bool);  // flags: 65536 
  protected function sendTutorialStrings();  // flags: 32768 

}
import class W3ChooseGwintTurnPopup extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 
  protected function GetAcceptText() : String;  // flags: 32768 
  protected function GetDeclineText() : String;  // flags: 32768 

}
import class W3VehicleCombatManager extends CEntity {

  public function Setup( player : CR4Player,  _vehicle : CVehicleComponent);  // flags: 65536 
  public function IsInCombatAction() : Bool;  // flags: 65536 
  public function IsInSwordAttackCombatAction() : Bool;  // flags: 65536 
  public event function OnRaiseSignEvent() : Bool;  // flags: 65568 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  public event function OnAirBorn() : Bool;  // flags: 65568 
  public event function OnLanded() : Bool;  // flags: 65568 
  public event function OnProcessAnimEvent( animEventName : CName) : Bool;  // flags: 65568 
  public event function OnItemActionAbort( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnHorseActionStart() : Bool;  // flags: 65568 
  public event function OnHorseActionStop() : Bool;  // flags: 65568 
  public event function OnMeleeWeaponReady() : Bool;  // flags: 65568 
  public event function OnMeleeWeaponNotReady() : Bool;  // flags: 65568 
  public event function OnHitStart() : Bool;  // flags: 65568 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  public event function OnMountFinished() : Bool;  // flags: 65568 
  public event function OnDismountStarted() : Bool;  // flags: 65568 
  public event function OnDrawWeaponRequest() : Bool;  // flags: 65568 

}
import class CBoatBodyComponentStateIdle extends CScriptableState {

  public event function OnCutsceneStarted() : Bool;  // flags: 65568 

}
import class CBoatBodyComponentStateCutscene extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnCutsceneEnded() : Bool;  // flags: 65568 

}
import class CBoatComponentStateIdle extends CScriptableState {

  public event function OnCutsceneStarted() : Bool;  // flags: 65568 

}
import class CBoatComponentStateCutscene extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnCutsceneEnded() : Bool;  // flags: 65568 

}
import class W3GuiPaperdollInventoryComponent extends W3GuiPlayerInventoryComponent {

  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 
  protected function GetTooltipText( item : SItemUniqueId) : String;  // flags: 32768 
  protected function isEquipped( item : SItemUniqueId) : Bool;  // flags: 32768 
  public function SetInventoryFlashObjectForItem( itemId : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 65536 

}
import class W3GuiContainerInventoryComponent extends W3CommonContainerInventoryComponent {

  public function ReceiveItem( item : SItemUniqueId,  giver : W3GuiBaseInventoryComponent,  optional  quantity : Int32,  optional  newItemID : SItemUniqueId) : Bool;  // flags: 65536 

}
import class W3GuiShopInventoryComponent extends W3GuiBaseInventoryComponent {

  protected function InvalidateItems( items : array<SItemUniqueId>);  // flags: 32768 
  public function SetInventoryFlashObjectForItem( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 65536 
  protected function ShopHasInfiniteFunds() : Bool;  // flags: 32768 
  public function GiveItem( itemId : SItemUniqueId,  customer : W3GuiBaseInventoryComponent,  optional  quantity : Int32,  optional  out  newItemID : SItemUniqueId) : Bool;  // flags: 65536 
  public function ReceiveItem( itemId : SItemUniqueId,  giver : W3GuiBaseInventoryComponent,  optional  quantity : Int32,  optional  out  newItemID : SItemUniqueId) : Bool;  // flags: 65536 
  public function GetItemActionType( item : SItemUniqueId,  optional  bGetDefault : Bool) : EInventoryActionType;  // flags: 65536 
  public function GetItemName( item : SItemUniqueId) : CName;  // flags: 65536 

}
import class W3PlayerStatsContext extends W3UIContext {

  public function SetInventoryRef( TargetInvMenu : CR4InventoryMenu);  // flags: 65536 
  public function SetStatName( value : CName);  // flags: 65536 
  protected function updateInputFeedback();  // flags: 32768 

}
import class W3InventoryPaperdollContext extends W3InventoryItemContext {

  protected function updateInputFeedback();  // flags: 32768 
  public function HandleUserFeedback( keyName : String);  // flags: 65536 
  protected function execurePrimaryAction();  // flags: 32768 

}
import class W3InventoryGridContext extends W3InventoryItemContext {

  protected function updateInputFeedback();  // flags: 32768 
  protected function execurePrimaryAction();  // flags: 32768 

}
import class W3ExternalGridContext extends W3InventoryItemContext {

  protected function updateInputFeedback();  // flags: 32768 
  protected function execurePrimaryAction();  // flags: 32768 

}
import class BookPopupFeedback extends TextPopupData {

  protected function GetContentRef() : String;  // flags: 32768 

}
import class W3DestroyItemConfPopup extends ConfirmationPopupData {

  protected function OnUserAccept();  // flags: 32768 
  protected function OnUserDecline();  // flags: 32768 

}
import class W3TutorialManagerUIHandlerStatePotions extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public event function OnPotionTabSelected() : Bool;  // flags: 65568 
  public event function OnPotionEquipped( potionItemName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateOils extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public event function OnOilTabSelected() : Bool;  // flags: 65568 
  public event function OnOilApplied() : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateBooks extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnSelectedItem( itemId : SItemUniqueId) : Bool;  // flags: 65568 
  public event function OnSelectedTab( properTab : Bool) : Bool;  // flags: 65568 
  public event function OnBookRead() : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateArmorUpgrades extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnSelectingArmor() : Bool;  // flags: 65568 
  public event function OnSelectingArmorAborted() : Bool;  // flags: 65568 
  public event function OnUpgradedItem() : Bool;  // flags: 65568 
  public event function OnTabSelected() : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateFood extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public event function OnPotionTabSelected() : Bool;  // flags: 65568 
  public event function OnSelectedItem( itemId : SItemUniqueId) : Bool;  // flags: 65568 
  public event function OnFoodEquipped() : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateSecondPotionEquip extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public event function OnPotionTabSelected() : Bool;  // flags: 65568 
  public event function OnPotionEquipped( potionItemName : CName) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateRecipeReading extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnSelectedItem( itemId : SItemUniqueId) : Bool;  // flags: 65568 
  public event function OnSelectedTab( properTab : Bool) : Bool;  // flags: 65568 
  public event function OnBookRead() : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateRunes extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnSelectedItem( itemId : SItemUniqueId) : Bool;  // flags: 65568 
  public event function OnSelectingSword() : Bool;  // flags: 65568 
  public event function OnSelectingSwordAborted() : Bool;  // flags: 65568 
  public event function OnUpgradedItem() : Bool;  // flags: 65568 

}
import class W3TutorialManagerUIHandlerStateShop extends W3TutorialManagerUIHandlerStateTutHandlerBaseState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public event function OnBoughtItem() : Bool;  // flags: 65568 

}
import class W3InventoryItemContext extends W3UIContext {

  public function Init( ownerManager : W3ContextManager);  // flags: 65536 
  public function SetSecondInventoryComponentRef( ref : CInventoryComponent);  // flags: 65536 
  public function SetInventoryRef( TargetInvMenu : CR4InventoryMenu);  // flags: 65536 
  public function SetContextMenuData( posX : Float,  posY : Float);  // flags: 65536 
  public function SetCurrentSlot( TargetSlot : EEquipmentSlots);  // flags: 65536 
  public function SetCurrentItem( TargetItemId : SItemUniqueId);  // flags: 65536 
  protected function triggerTooltip();  // flags: 32768 
  protected function ShowContextMenu();  // flags: 32768 
  public function HandleUserFeedback( keyName : String);  // flags: 65536 
  protected function IsHorseItem( currentItemId : SItemUniqueId) : Bool;  // flags: 32768 
  protected function updateInputFeedback();  // flags: 32768 
  protected function execurePrimaryAction();  // flags: 32768 

}
import class W3GuiItemSelectComponent extends W3GuiPlayerInventoryComponent {

  public function InitFilter( filterValue : W3ItemSelectMenuInitData);  // flags: 65536 
  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 
  protected function isEquipped( item : SItemUniqueId) : Bool;  // flags: 32768 
  protected function chekTags( item : SItemUniqueId,  targetTags : array<CName>) : Bool;  // flags: 32768 

}
import class W3ItemSelectMenuInitData extends CObject {

  public function applyItemSelection( item : SItemUniqueId);  // flags: 65536 

}
import class W3Bird extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function SetBirdManager( m : CBirdsManager);  // flags: 65536 
  public function DestructionTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function Fly() : Bool;  // flags: 65536 
  public event function OnAnimEvent_ReadyToFly( animEventName : CName,  animEventType : EAnimationEventType,  animInfo : SAnimationEventAnimInfo) : Bool;  // flags: 65568 
  public event function OnPropertyAnimationFinished( propertyName : CName,  animationName : CName) : Bool;  // flags: 65568 

}
import class W3CurveFish extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function SetFishManager( m : W3CurveFishManager);  // flags: 65536 
  public function SetupFishBaseSpeed();  // flags: 65536 
  public function DestructionTimer( dt : Float,  id : Int32);  // flags: 66560 
  public function ModifyFishSpeed();  // flags: 65536 
  public function SpeedHandler( dt : Float,  id : Int32);  // flags: 66560 
  public event function OnDestroyed() : Bool;  // flags: 65568 

}
import class W3SignEntity extends CGameplayEntity {

  public function GetSignType() : ESignType;  // flags: 65536 
  public event function OnProcessSignEvent( eventName : CName) : Bool;  // flags: 65568 
  public function Init( inOwner : W3SignOwner,  prevInstance : W3SignEntity,  optional  skipCastingAnimation : Bool) : Bool;  // flags: 65536 
  public event function OnStarted() : Bool;  // flags: 65568 
  public event function OnThrowing() : Bool;  // flags: 65568 
  public event function OnEnded( optional  isEnd : Bool) : Bool;  // flags: 65568 
  public event function OnSignAborted( optional  force : Bool) : Bool;  // flags: 65568 
  public event function OnCheckChanneling() : Bool;  // flags: 65568 
  public function GetOwner() : CActor;  // flags: 65536 
  public function SkillUnequipped( skill : ESkill);  // flags: 65536 
  public function SkillEquipped( skill : ESkill);  // flags: 65536 
  public function OnNormalCast();  // flags: 65536 
  public function SetAlternateCast( newSkill : ESkill);  // flags: 65536 
  public function IsAlternateCast() : Bool;  // flags: 65536 
  protected function GetSignStats();  // flags: 32768 
  protected function CleanUp();  // flags: 32768 
  public function Attach( optional  toSlot : Bool,  optional  toWeaponSlot : Bool);  // flags: 65536 
  public function Detach();  // flags: 65536 
  public function InitSignDataForDamageAction( act : W3DamageAction);  // flags: 65536 
  private function FillActionDamageFromSkill( act : W3DamageAction);  // flags: 16384 
  private function FillActionBuffsFromSkill( act : W3DamageAction);  // flags: 16384 
  protected function CacheActionBuffsFromSkill();  // flags: 32768 
  public function GetSkill() : ESkill;  // flags: 65536 
  public function BroadcastSignCast( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function BroadcastSignCast_Override();  // flags: 65536 
  public event function OnCastFriendly() : Bool;  // flags: 65568 
  public function DestroyCastFriendlyTimer( dt : Float,  id : Int32);  // flags: 66560 

}
import class W3TutorialPopupData extends CObject {

  public function AddHighlightedArea( x : Float,  y : Float,  width : Float,  height : Float);  // flags: 65536 
  public function PlayFeedbackAnim( isCorrect : Bool);  // flags: 65536 
  public function GetHighlightedAreas() : array<TutorialHighlightedArea>;  // flags: 65536 
  public function CloseTutorialPopup( optional  willBeCloned : Bool);  // flags: 65536 
  public function CloseCallback( optional  forceClose : Bool,  optional  closedByUser : Bool,  optional  willBeCloned : Bool);  // flags: 65536 

}
import class SliderPopupData extends TextPopupData {

  protected function GetContentRef() : String;  // flags: 32768 
  public function GetGFxData( parentFlashValueStorage : CScriptedFlashValueStorage) : CScriptedFlashObject;  // flags: 65536 

}
import class W3GuiPreparationPotionsAndBombsInventoryComponent extends W3GuiPlayerInventoryComponent {

  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 

}
import class W3GuiPreparationInventoryComponent extends W3GuiPlayerInventoryComponent {

  public function GetContainerItems( out  flashArray : CScriptedFlashArray,  flashObject : CScriptedFlashObject,  optional  groupFilter : EPreporationItemType);  // flags: 65536 
  public function GetSlotsItems( out  flashArray : CScriptedFlashArray,  flashObject : CScriptedFlashObject,  optional  groupFilter : EPreporationItemType);  // flags: 65536 
  protected function GetOilSlotItemsFlashArray( out  flashArray : CScriptedFlashArray,  flashObject : CScriptedFlashObject);  // flags: 32768 
  protected function FillItemInfoFromOilName( oilName : CName,  slotType : EEquipmentSlots,  out  flashObject : CScriptedFlashObject);  // flags: 32768 
  public function SetInventoryFlashObjectForItem( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject);  // flags: 65536 
  public function GetItemPrepCategory( item : SItemUniqueId) : EPreporationItemType;  // flags: 65536 
  public function AddDummyCategoryItem( item : SItemUniqueId,  out  flashObject : CScriptedFlashObject,  out  flashArray : CScriptedFlashArray);  // flags: 65536 
  protected function SetupFilter( checkEquipped : Bool,  groupFilter : EPreporationItemType);  // flags: 32768 
  protected function GetPrepCategoryLabel( targetCategory : EPreporationItemType) : String;  // flags: 32768 
  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 
  public function GetItemActionType( item : SItemUniqueId,  optional  bGetDefault : Bool) : EInventoryActionType;  // flags: 65536 

}
import class W3GuiPreparationMutagensInventoryComponent extends W3GuiPlayerInventoryComponent {

  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 

}
import class W3GuiPreparationOilsInventoryComponent extends W3GuiPlayerInventoryComponent {

  protected function ShouldShowItem( item : SItemUniqueId) : Bool;  // flags: 32768 

}
import class W3SignOwnerPlayer extends W3SignOwner {

  public function Init( parentActor : CActor);  // flags: 65536 
  public function GetPlayer() : W3PlayerWitcher;  // flags: 65536 
  public function IsPlayer() : Bool;  // flags: 65536 
  public function InitCastSign( signEntity : W3SignEntity) : Bool;  // flags: 65536 
  public function ChangeAspect( signEntity : W3SignEntity,  newSkill : ESkill) : Bool;  // flags: 65536 
  public function GetSkillLevel( skill : ESkill) : Int32;  // flags: 65536 
  public function SetCurrentlyCastSign( type : ESignType,  entity : W3SignEntity);  // flags: 65536 
  public function GetSkillAbilityName( skill : ESkill) : CName;  // flags: 65536 
  public function GetSkillAttributeValue( skill : ESkill,  attributeName : CName,  addBaseCharAttribute : Bool,  addSkillModsAttribute : Bool) : SAbilityAttributeValue;  // flags: 65536 
  public function GetPowerStatValue( stat : ECharacterPowerStats,  optional  abilityTag : CName) : SAbilityAttributeValue;  // flags: 65536 
  public function CanUseSkill( skill : ESkill) : Bool;  // flags: 65536 
  public function IsSkillEquipped( skill : ESkill) : Bool;  // flags: 65536 
  public function HasStaminaToUseSkill( skill : ESkill,  optional  perSec : Bool,  optional  signHack : Bool) : Bool;  // flags: 65536 
  public function RemoveTemporarySkills();  // flags: 65536 
  public function GetHandAimPitch() : Float;  // flags: 65536 
  public event function OnDelayOrientationChange() : Bool;  // flags: 65568 
  public event function OnProcessCastingOrientation( isContinueCasting : Bool) : Bool;  // flags: 65568 

}
import class W3Reputation extends CObject {

  public function Initialize();  // flags: 65536 
  public function SetFactionName( fName : EFactionName);  // flags: 65536 
  public function GetFaction( i : Int32) : EFactionName;  // flags: 65536 
  public function GetReputationPoints( fName : EFactionName) : Int32;  // flags: 65536 
  public function GetNegativeReputationPoints( fName : EFactionName) : Int32;  // flags: 65536 
  public function ChangeReputationAmongFaction( factionName : EFactionName,  addAmount : Int32);  // flags: 65536 
  public function GetReputationBonuses( reputationLevels : EReputationLevel,  out  buyPriceMult : Float,  out  sellPriceMult : Float);  // flags: 65536 
  public function GetReputationLevel( factionName : EFactionName) : EReputationLevel;  // flags: 65536 
  public function ResetNegativeReputationPoints( factionName : EFactionName);  // flags: 65536 

}
import class W3MedallionController extends CObject {

  public function SetInstantIntensity( intensity : Float);  // flags: 65536 
  public function Activate( activate : Bool,  optional  duration : Float);  // flags: 65536 
  public function BlockActivation( block : Bool);  // flags: 65536 
  public function IsActive() : Bool;  // flags: 65536 
  public function GetTreshold() : Float;  // flags: 65536 
  public function SetFocusModeFactor( factor : Float);  // flags: 65536 

}
import class W3PlayerWitcherStateCombatFists extends CR4PlayerStateCombat {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function CombatFistsInit( prevStateName : CName);  // flags: 65664 
  public function CombatFistsDone( nextStateName : CName);  // flags: 65664 
  public latent function CombatFistsLoop();  // flags: 65600 
  public event function OnCombatActionStart() : Bool;  // flags: 65568 
  public event function OnCombatActionEnd() : Bool;  // flags: 65568 
  public event function OnCombatActionEndComplete() : Bool;  // flags: 65568 
  public event function OnCreateAttackAspects() : Bool;  // flags: 65568 
  private final function CreateAttackLightNoTargetAspect();  // flags: 16400 
  private final function CreateAttackHeavyNoTargetAspect();  // flags: 16400 
  private final function CreateAttackLightAspect();  // flags: 16400 
  private final function CreateAttackHeavyAspect();  // flags: 16400 
  private final function CreateAttackLightFarAspect();  // flags: 16400 
  private final function CreateAttackHeavyFarAspect();  // flags: 16400 
  public event function OnGuardedReleased() : Bool;  // flags: 65568 
  public event function OnUnconsciousEnd() : Bool;  // flags: 65568 

}
import class W3NPCBackgroundPair extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function AttachEntityToSlotRegardlessOfSlotType( i : Int32,  slotName : CName,  entityContainingSlot : EBgNPCType) : Bool;  // flags: 65536 
  public function IncomingAnimEvent( eventName : CName);  // flags: 65536 

}
import class W3NPCBackground extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function SetParentPairedBackgroundNPCEntity( ent : W3NPCBackgroundPair);  // flags: 65536 

}
import class W3Potion_Blizzard extends CBaseGameplayEffect {

  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public function KilledEnemy();  // flags: 65536 
  public function OnLoad( t : CActor,  eff : W3EffectManager);  // flags: 65536 
  public function OnTimeUpdated( dt : Float);  // flags: 65536 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  private final function RemoveSlowMo();  // flags: 16400 

}
import class W3PlayerTutorialInput extends CPlayerInput {

  public function Initialize( isFromLoad : Bool,  optional  previousInput : CPlayerInput);  // flags: 65536 
  public event function OnCbtThrowItem( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCbtThrowItemHold( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnMovement( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCameraMovement( action : SInputAction) : Bool;  // flags: 65568 
  public event function OnCastSign( action : SInputAction) : Bool;  // flags: 65568 
  private final function SignStaminaTest();  // flags: 16400 

}
import class CR4HudModuleCrosshair extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 

}
import class CActionLockerByCounter extends CObject {

  public function Init( blockingAction : EInputActionBlock,  blockingName : CName);  // flags: 65536 
  public function Reset();  // flags: 65536 
  public function Lock( lock : Bool);  // flags: 65536 

}
import class CR4HudModuleCompanion extends CR4HudModuleBase {

  public event function OnConfigUI() : Bool;  // flags: 65568 
  public function ShowCompanion( showModule : Bool,  npcTag : CName,  optional  iconPath : String);  // flags: 65536 
  public function ShowCompanionSecond( npcTag : CName,  optional  iconPath : String);  // flags: 65536 
  public event function OnTick( timeDelta : Float) : Bool;  // flags: 65568 
  public function ResendDisplayName();  // flags: 65536 
  public function ResendDisplayNameSecond();  // flags: 65536 
  public function UpdateVitality();  // flags: 65536 
  public function UpdateVitality2();  // flags: 65536 

}
import class WeaponHolster extends CObject {

  public event function OnEquipMeleeWeapon( weapontype : EPlayerWeapon,  ignoreActionLock : Bool,  optional  sheatheIfAlreadyEquipped : Bool,  optional  forceHolster : Bool) : Bool;  // flags: 65568 
  public event function OnEquippedMeleeWeapon( weapontype : EPlayerWeapon) : Bool;  // flags: 65568 
  public event function OnWeaponDrawReady() : Bool;  // flags: 65568 
  public event function OnWeaponHolsterReady() : Bool;  // flags: 65568 
  public event function OnHolsterLeftHandItem() : Bool;  // flags: 65568 
  public function Initialize( _owner : CActor,  restored : Bool);  // flags: 65536 
  protected function SetCurrentMeleWeapon( weapon : EPlayerWeapon);  // flags: 32768 
  public function UpdateRealWeapon();  // flags: 65536 
  protected function GetOwner() : CActor;  // flags: 32768 
  public function HolsterWeapon( ignoreActionLock : Bool,  optional  forceHolster : Bool);  // flags: 65536 
  public event function OnForcedHolsterWeapon() : Bool;  // flags: 65568 
  public function GetCurrentMeleeWeapon() : EPlayerWeapon;  // flags: 65536 
  public function GetCurrentMeleeWeaponName() : CName;  // flags: 65536 
  public function TryToPrepareMeleeWeaponToAttack() : Bool;  // flags: 65536 
  public function IsOnTheMiddleOfHolstering() : Bool;  // flags: 65536 
  public function IsMeleeWeaponReady() : Bool;  // flags: 65536 
  public function EndedCombat();  // flags: 65536 
  public function GetMostConvenientMeleeWeapon( targetToDrawAgainst : CActor,  optional  ignoreActionLock : Bool) : EPlayerWeapon;  // flags: 65536 
  protected function IsThisWeaponAlreadyEquipped( weaponType : EPlayerWeapon) : Bool;  // flags: 32768 
  protected function GetWeaponCategoryName( weaponType : EPlayerWeapon) : CName;  // flags: 32768 
  protected function QueueMeleeWeapon( weapontype : EPlayerWeapon,  optional  sheatheIfAlreadyEquipped : Bool);  // flags: 32768 
  protected function IsWeaponQueued() : Bool;  // flags: 32768 
  protected function UnqueueMeleeWeapon();  // flags: 32768 
  protected function EquipQueuedMeleeWeaponIfAny() : Bool;  // flags: 32768 
  public function UpdateBehGraph( optional  init : Bool);  // flags: 65536 
  public function UpdateScabbardsBehGraph();  // flags: 65536 

}
import class Crossbow extends RangedWeapon {

  public event function OnWeaponReloadEnd() : Bool;  // flags: 65568 
  public event function OnProcessThrowEvent( animEventName : CName) : Bool;  // flags: 65568 
  public event function OnForceHolster( optional  forceUpperBodyAnim : Bool,  optional  instant : Bool,  optional  dropItem : Bool) : Bool;  // flags: 65568 
  public event function OnReplaceAmmo() : Bool;  // flags: 65568 
  public event function OnCrossbowLoadedAnim() : Bool;  // flags: 65568 
  protected function ResetOwnerAndWeapon();  // flags: 32768 
  public function Initialize( newOwner : CActor);  // flags: 65536 
  private function ReloadWeaponOnInit( time : Float,  timerId : Int32);  // flags: 17408 
  protected function RaiseOwnerGraphEvents( eventName : CName,  force : Bool) : Bool;  // flags: 32768 
  protected function PlayOwnerReloadAnim() : Bool;  // flags: 32768 
  protected function GetSpecialAmmoCount() : Int32;  // flags: 32768 
  protected function ResetShotCount();  // flags: 32768 
  protected function SetOwnerOrientation();  // flags: 32768 
  protected function ProcessCharacterRotationInCombat();  // flags: 32768 
  protected function ProcessFullBodyAnimWeight( optional  forceUpperBodyAnim : Bool) : Bool;  // flags: 32768 
  protected function ExitCombatAction() : Bool;  // flags: 32768 

}
import class W3MedallionFX extends CEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public function TriggerMedallionFX();  // flags: 65536 
  public function DestroyMedallionFX( deltaTime : Float,  id : Int32);  // flags: 66560 
  public function ScaleMedallion( deltaTime : Float,  id : Int32);  // flags: 66560 

}
import class CPlayerInteriorTracker extends CObject {

  public function Init( restored : Bool);  // flags: 65536 
  public function LockSprint( lock : Bool);  // flags: 65536 
  public function LockRun( lock : Bool);  // flags: 65536 
  public function SetCurrentInterior( _interior : CNode);  // flags: 65536 
  public function GetCurrentInterior() : CNode;  // flags: 65536 

}
import class CR4LocomotionPlayerControllerScript extends CR4LocomotionDirectControllerScript {

  public function Activate() : Bool;  // flags: 65536 
  public function Deactivate();  // flags: 65536 
  public function UpdateLocomotion();  // flags: 65536 
  private function UpdateInputReadyness();  // flags: 16384 
  private function MakeInputReady();  // flags: 16384 
  private function HasToForceToFall( out  direction : Float) : Bool;  // flags: 16384 
  private function HasToStopBecauseOfSlope() : Bool;  // flags: 16384 
  public function CalculateLocalMoveDirection() : Float;  // flags: 65536 
  public function ResetMoveDirection();  // flags: 65536 
  private function GetCameraHeading360WS() : Float;  // flags: 16384 
  private function GetHeadingInCamSpace( heading : Float) : Float;  // flags: 16384 
  private function GetPlayerHeadingInCamSpace() : Float;  // flags: 16384 
  private function GetInputHeading() : Float;  // flags: 16384 
  private function GetInputInPlayerSpace( playerHeadingInCamSpace : Float,  out  anyInput : Bool) : Vector;  // flags: 16384 
  private function CorrectDirection( moveDir : Vector,  out  anyInput : Bool,  out  corrected : Bool) : Vector;  // flags: 16384 
  public function CalculateInputVector() : Vector;  // flags: 65536 
  public function ConvertVecToHeadingWS180AndMag( vec : Vector,  out  heading180 : Float,  out  mag : Float);  // flags: 65536 
  public function CalculateInputAngularSpeed() : Float;  // flags: 65536 
  public function CalculateMoveSpeed() : Float;  // flags: 65536 
  private function ProcessMovementEvent();  // flags: 16384 
  private function UpdateRequestedDirectionVariables( playerHeadingWS : Float,  cameraHeadingWS : Float);  // flags: 16384 

}
import class W3PlayerMode extends CObject {

  public function Initialize( playerEntity : CPlayer);  // flags: 65536 
  public function EnableMode( mode : EPlayerMode,  enable : Bool);  // flags: 65536 
  public function GetCurrentMode() : EPlayerMode;  // flags: 65536 
  public function CalcCurrentMode() : EPlayerMode;  // flags: 65536 
  public function UpdateCurrentMode();  // flags: 65536 
  public event function OnModeChanged( prevMode : EPlayerMode) : Bool;  // flags: 65568 
  public function OnModeEnabled( mode : EPlayerMode,  enabled : Bool);  // flags: 65536 
  public function BlockActions( actions : array<EInputActionBlock>,  block : Bool);  // flags: 65536 
  public function UpdateCombatMode( optional  forceUpdate : Bool);  // flags: 65536 
  public function ForceCombatMode( reason : EForceCombatModeReason);  // flags: 65536 
  public function ReleaseForceCombatMode( reason : EForceCombatModeReason);  // flags: 65536 
  public function GetForceCombatMode() : Bool;  // flags: 65536 
  public function ShouldForceAlertNearStance() : Bool;  // flags: 65536 

}
import class PlayerAiming extends CObject {

  public function Initialize( p : CR4Player);  // flags: 65536 
  public function StartAiming( t : CThrowable);  // flags: 65536 
  public function StopAiming();  // flags: 65536 
  public function RemoveAimingSloMo();  // flags: 65536 
  public function GetThrowPosition() : Vector;  // flags: 65536 
  public function GetSweptFriendly() : CEntity;  // flags: 65536 
  public function GetSweptActors() : array<CActor>;  // flags: 65536 
  public function GetThrowStartPosition() : Vector;  // flags: 65536 
  public function GetAimedTarget() : CActor;  // flags: 65536 
  public event function OnStartAiming( t : CThrowable) : Bool;  // flags: 65568 
  public event function OnStopAiming() : Bool;  // flags: 65568 
  public event function OnAddAimingSloMo() : Bool;  // flags: 65568 
  public event function OnRemoveAimingSloMo() : Bool;  // flags: 65568 

}
import class ConstDamper extends CObject {

  public final function SetDamp( _deltaValue : Float);  // flags: 65552 
  public final function Init( curr : Float,  dest : Float);  // flags: 65552 
  public final function Reset();  // flags: 65552 
  public final function SetValue( value : Float);  // flags: 65552 
  public final function GetValue() : Float;  // flags: 65552 
  public function Update( dt : Float);  // flags: 65536 
  public final function UpdateAndGet( dt : Float,  value : Float) : Float;  // flags: 65552 

}
import class W3GamerProfile extends CObject {

  public function AddAchievement( a : EAchievement);  // flags: 65536 
  public function Init();  // flags: 65536 
  public function InitStats();  // flags: 65536 
  private function RegisterAchievements();  // flags: 16384 
  private function LoadXMLAchievementData();  // flags: 16384 
  private function GetAchievementIndex( a : EAchievement) : Int32;  // flags: 16384 
  public function CheckLearningTheRopes();  // flags: 65536 
  public final function CheckTrialOfGrasses();  // flags: 65552 
  public function ResetStat( statEnum : EStatistic);  // flags: 65536 
  public function GetStatValue( statEnum : EStatistic) : Int32;  // flags: 65536 
  public function IncStat( statEnum : EStatistic);  // flags: 65536 
  public function SetStat( statEnum : EStatistic,  val : Int32);  // flags: 65536 
  public function DecStat( statEnum : EStatistic);  // flags: 65536 
  private function CheckProgress( statEnum : EStatistic);  // flags: 16384 
  private function GetStatisticIndex( statEnum : EStatistic) : Int32;  // flags: 16384 
  private function RegisterAchievement( statEnum : EStatistic,  ac : EAchievement);  // flags: 16384 
  private function InitStat( statEnum : EStatistic);  // flags: 16384 
  public final function Debug_PrintAchievements();  // flags: 65552 

}
import class W3GameLog extends CObject {

  public function AddMessage( m : String);  // flags: 65536 
  private function ShouldShowCombatMessage( attacker : CGameplayEntity,  victim : CGameplayEntity) : Bool;  // flags: 16384 
  public function AddCombatMessage( m : String,  attacker : CGameplayEntity,  victim : CGameplayEntity);  // flags: 65536 
  public function FormatF( f : Float) : String;  // flags: 65536 
  public function CacheCombatDamageMessage( attacker : CGameplayEntity,  victim : CGameplayEntity,  finalDamage : Float);  // flags: 65536 
  public function CreateCombatMessage( cachedDamageIndex : Int32) : String;  // flags: 65536 
  public final function CombatMessageAddGlobalDamageMult( mult : Float);  // flags: 65552 
  public final function AddCombatDamageMessage( dealtDamage : Bool);  // flags: 65552 

}
import class W3DamageManager extends CObject {

  public function ProcessAction( act : W3DamageAction);  // flags: 65536 

}
import class W3GameEffectManager extends CObject {

  public function Initialize();  // flags: 65536 
  public function GetPathForEffectIconTypeName( type : CName) : String;  // flags: 65536 
  public function GetEffectNameLocalisationKey( effect : EEffectType) : String;  // flags: 65536 
  public function GetEffectDescriptionLocalisationKey( effect : EEffectType) : String;  // flags: 65536 
  public function GetEffectIconPath( effect : EEffectType) : String;  // flags: 65536 
  public function IsReady() : Bool;  // flags: 65536 
  public function GetEffectTypeFlags( effect : EEffectType,  out  potion : Bool,  out  positive : Bool,  out  neutral : Bool,  out  negative : Bool,  out  immobilize : Bool,  out  confuse : Bool,  out  damage : Bool);  // flags: 65536 
  public function MakeNewEffect( effect : EEffectType,  ownr : CGameplayEntity,  target : CActor,  effectManager : W3EffectManager,  inDuration : Float,  srcName : String,  optional  powerStatValue : SAbilityAttributeValue,  optional  customVal : SAbilityAttributeValue,  optional  customAbilityName : CName,  optional  customFXName : CName,  optional  signEffect : Bool,  optional  vibratePadLowFreq : Float,  optional  vibratePadHighFreq : Float) : CBaseGameplayEffect;  // flags: 65536 
  private function CacheEffect( effect : EEffectType);  // flags: 16384 
  private function HACK_NO_MEMORY_TO_COMPILE_CacheEffect_Part1( effect : EEffectType) : Bool;  // flags: 16384 
  private function HACK_NO_MEMORY_TO_COMPILE_CacheEffect_Part2( effect : EEffectType) : Bool;  // flags: 16384 
  public function GetBuffResistStat( effect : EEffectType) : ECharacterDefenseStats;  // flags: 65536 
  public function IsBuffNegative( effectType : EEffectType) : Bool;  // flags: 65536 
  public function IsEffectNameValid( effectName : CName) : Bool;  // flags: 65536 
  public function CheckInteractionWith( effectManager : W3EffectManager,  effect : CBaseGameplayEffect,  interactionEffects : array<CBaseGameplayEffect>,  out  overridenEffectsIdxs : array<Int32>,  out  cumulateIdx : Int32) : Bool;  // flags: 65536 

}
import class W3EnvironmentManager extends CObject {

  public function Initialize();  // flags: 65536 
  public function Update();  // flags: 65536 
  public function CheckRedMoon();  // flags: 65536 
  public final function IsNight() : Bool;  // flags: 65552 
  public final function IsDay() : Bool;  // flags: 65552 
  public function GetGameTimeTillNextNight() : GameTime;  // flags: 65536 
  public function GetGameTimeTillNextDay() : GameTime;  // flags: 65536 
  public function GetGameTimeTillNextHour( targetHour : Int32) : GameTime;  // flags: 65536 
  private function GetNightNum() : Int32;  // flags: 16384 
  public function IsFullMoon( optional  dontCheckNightCond : Bool) : Bool;  // flags: 65536 
  public function IsRedMoon( optional  dontCheckNightCond : Bool) : Bool;  // flags: 65536 

}
import class W3RunewordManager extends CObject {

  public function Init();  // flags: 65536 
  public function LoadXMLData();  // flags: 65536 
  public function GetRuneword( runes : array<CName>,  out  oRuneword : Runeword) : Bool;  // flags: 65536 

}
import class W3SyncAnimationManager extends CObject {

  public function CreateNewSyncInstance( out  index : Int32) : CAnimationManualSlotSyncInstance;  // flags: 65536 
  public function GetSyncInstance( index : Int32) : CAnimationManualSlotSyncInstance;  // flags: 65536 
  public function RemoveSyncInstance( instance : CAnimationManualSlotSyncInstance);  // flags: 65536 
  public function SetupSimpleSyncAnim( syncAction : CName,  master : CEntity,  slave : CEntity) : Bool;  // flags: 65536 
  private function GetFinisherSynAnimName() : CName;  // flags: 16384 
  private function PlayPhaseChangeCameraAnimation( animationName : CName);  // flags: 16384 
  public function GetFinisherCameraAnimName() : CName;  // flags: 65536 
  private function SelectDLCFinisherCameraAnimName( finisher : CR4FinisherDLC,  finisherAngle : Int32) : CName;  // flags: 16384 
  private function GetDLCFinisherCameraAnimName( finisherAnimName : CName,  side : EFinisherSide,  finisherAngle : Int32,  out  finisherCameraAnimName : CName) : Bool;  // flags: 16384 
  private function ProcessFinisherCameraAnimName( finisherAnimName : CName) : CName;  // flags: 16384 
  public event function OnRemoveFinisherCameraAnimation() : Bool;  // flags: 65568 
  public function BreakSyncIfPossible( entity : CEntity) : Bool;  // flags: 65536 
  private function GetActorPosition( ent : CEntity) : Vector;  // flags: 16384 
  public function AddDlcFinisherLeftSide( finisher : CR4FinisherDLC);  // flags: 65536 
  public function RemoveDlcFinisherLeftSide( finisher : CR4FinisherDLC);  // flags: 65536 
  public function AddDlcFinisherRightSide( finisher : CR4FinisherDLC);  // flags: 65536 
  public function RemoveDlcFinisherRightSide( finisher : CR4FinisherDLC);  // flags: 65536 

}
import class W3TutorialManagerUIHandler extends CObject {

  private function HandleListeners( menuName : CName,  isOpened : Bool) : Bool;  // flags: 16384 
  public function RegisterUIHint( data : SUITutorial);  // flags: 65536 
  public function UnregisterUIHint( tutorialStateName : CName,  optional  sourceName : String) : Bool;  // flags: 65536 
  public event function OnOpeningMenu( menuName : CName) : Bool;  // flags: 65568 
  private final function ProcessPotionEquipFact();  // flags: 16400 
  private final function ProcessAlchemyTutorialFact();  // flags: 16400 
  private final function ProcessCraftingTutorialFact();  // flags: 16400 
  private final function ProcessRunesFact();  // flags: 16400 
  private final function ArmorUpgradesTutorialCheck();  // flags: 16400 
  public event function OnOpenedMenu( menuName : CName) : Bool;  // flags: 65568 
  public event function OnClosingMenu( menuName : CName) : Bool;  // flags: 65568 
  public event function OnClosedMenu( menuName : CName) : Bool;  // flags: 65568 
  public event function OnMenuClosing( menuName : CName) : Bool;  // flags: 65568 
  public event function OnMenuClosed( menuName : CName) : Bool;  // flags: 65568 
  public event function OnMenuOpening( menuName : CName) : Bool;  // flags: 65568 
  public event function OnMenuOpened( menuName : CName) : Bool;  // flags: 65568 
  public event function OnTutorialClosed( hintName : CName,  closedByParentMenu : Bool) : Bool;  // flags: 65568 
  public final function LockLeaveMenu( locked : Bool);  // flags: 65552 
  public final function LockCloseUIPanels( lock : Bool);  // flags: 65552 

}
import class W3Poster extends CGameplayEntity {

  public event function OnSpawned( spawnData : SEntitySpawnData) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 
  public function LeavePosterPreview();  // flags: 65536 
  public function GetDescription() : String;  // flags: 65536 
  public function OnStartedObservingPoster();  // flags: 65536 
  public function OnEndedObservingPoster();  // flags: 65536 
  public function DestroyCamera( dt : Float,  id : Int32);  // flags: 66560 
  public function RestoreGameplay( dt : Float,  id : Int32);  // flags: 66560 

}
import class CR4PlayerStateAimThrow extends CR4PlayerStateExtendedMovable {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function OnEnterStateExtended();  // flags: 65536 
  public function SearchForTargets();  // flags: 65664 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnDelayOrientationChangeOff() : Bool;  // flags: 65568 
  private function ProcessInitialPitch() : Float;  // flags: 16384 
  public event function OnGameCameraTick( out  moveData : SCameraMovementData,  dt : Float) : Bool;  // flags: 65568 
  private function GetAimPosition() : Vector;  // flags: 16384 
  public event function OnStateCanUpdateExplorationSubstates() : Bool;  // flags: 65568 
  public event function OnCheckDiving() : Bool;  // flags: 65568 
  public event function OnIsCameraUnderwater() : Bool;  // flags: 65568 

}
import class CR4PlayerStateSkating extends CR4PlayerStateExtendedMovable {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public function SkatingInit();  // flags: 65664 

}
import class W3HorseComponentStateIdle extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnLeaveState( nextStateName : CName) : Bool;  // flags: 65568 
  public event function OnMountStarted( entity : CEntity,  vehicleSlot : EVehicleSlot) : Bool;  // flags: 65568 
  public event function OnMountFinished( entity : CEntity) : Bool;  // flags: 65568 
  public event function OnTick( dt : Float) : Bool;  // flags: 65568 

}
import class W3CriticalEffect extends CBaseGameplayEffect {

  public function CacheSettings();  // flags: 65536 
  public function OnTimeUpdated( deltaTime : Float);  // flags: 65536 
  public function GetCriticalStateType() : ECriticalStateType;  // flags: 65536 
  public function IsHitAllowed( hit : EHitReactionType) : Bool;  // flags: 65536 
  public function IsDestroyedOnInterrupt() : Bool;  // flags: 65536 
  public function CanPlayAnimation() : Bool;  // flags: 65536 
  public function DisallowPlayAnimation();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public final function UsesFullBodyAnim() : Bool;  // flags: 65552 

}
import class W3CriticalDOTEffect extends W3DamageOverTimeEffect {

  public function CacheSettings();  // flags: 65536 
  public event function OnUpdate( dt : Float) : Bool;  // flags: 65568 
  public function OnTimeUpdated( deltaTime : Float);  // flags: 65536 
  public function GetCriticalStateType() : ECriticalStateType;  // flags: 65536 
  public function IsHitAllowed( hit : EHitReactionType) : Bool;  // flags: 65536 
  public function IsDestroyedOnInterrupt() : Bool;  // flags: 65536 
  public function CanPlayAnimation() : Bool;  // flags: 65536 
  public function DisallowPlayAnimation();  // flags: 65536 
  public event function OnEffectAdded( optional  customParams : W3BuffCustomParams) : Bool;  // flags: 65568 
  public event function OnEffectRemoved() : Bool;  // flags: 65568 
  public final function UsesFullBodyAnim() : Bool;  // flags: 65552 
  protected function CalculateDuration( optional  setInitialDuration : Bool);  // flags: 32768 

}
import class CAIRiderFollowSideBySideAction extends IRiderActionTree {

  public function Init();  // flags: 65536 

}
import class IGlobalEventScriptedListener extends CObject {

  public event function OnGlobalEventName( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : CName) : Bool;  // flags: 65568 
  public event function OnGlobalEventString( eventCategory : EGlobalEventCategory,  eventType : EGlobalEventType,  eventParam : String) : Bool;  // flags: 65568 

}
import class CBeehiveEntityStateHangingIntact extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 
  public event function OnLeaveState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnAreaEnter( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnAreaExit( area : CTriggerAreaComponent,  activator : CComponent) : Bool;  // flags: 65568 
  public event function OnInteraction( actionName : String,  activator : CEntity) : Bool;  // flags: 65568 

}
import class CBeehiveEntityStateFalling extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function FallDown();  // flags: 65664 
  public event function OnCollision( object : CObject,  actorIndex : Int32,  shapeIndex : Int32) : Bool;  // flags: 65568 

}
import class CBeehiveEntityStateOnGroundActive extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public event function OnFireHit( source : CGameplayEntity) : Bool;  // flags: 65568 

}
import class CBeehiveEntityStateOnGroundBurned extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function BrokenEntryFunctionNamesCollision_CBeehiveEntity_OnGroundBurned_Loop();  // flags: 65664 

}
import class CBeehiveEntityStateHangingBurning extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function BurnBeehive();  // flags: 65664 
  public event function OnAardHit( sign : W3AardProjectile) : Bool;  // flags: 65568 

}
import class W3ToxicCloudStateDisabled extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 

}
import class W3ToxicCloudStateSettle extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function BrokenEntryFunctionNamesCollision_W3ToxicCloud_Settle_Loop();  // flags: 65664 

}
import class W3ToxicCloudStateWait extends CScriptableState {

  public event function OnEnterState( prevStateName : CName) : Bool;  // flags: 65568 
  public function BrokenEntryFunctionNamesCollision_W3ToxicCloud_W